(function () {
    'use strict';

    // addHead.js

    /**
     * Inserta dinámicamente las fuentes Poppins y Font Awesome en el <head>.
     * Evita agregar múltiples versiones de las mismas fuentes.
     * Puedes importar y llamar a esta función en tu código para cargar las fuentes necesarias.
     */

    // URLs de las fuentes
    const poppinsHref = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap';
    const fontAwesomeHref = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css';

    // Patrones para identificar si las fuentes ya están cargadas
    const poppinsPattern = /fonts\.googleapis\.com\/css2\?family=Poppins/;
    const fontAwesomePattern = /font-awesome/;
    const appendLinkIfNotExists = (href, pattern, resourceName) => {
        const existingLink = Array.from(document.querySelectorAll('link[rel="stylesheet"]'))
            .find(link => pattern.test(link.href));

        if (!existingLink) {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = href;
            document.head.appendChild(link);
            // console.log(`addHead: ${resourceName} inyectado en <head>`);
        }
    };

    // Añadir la fuente Poppins si no está presente
    appendLinkIfNotExists(poppinsHref, poppinsPattern);

    // Añadir Font Awesome si no está presente
    appendLinkIfNotExists(fontAwesomeHref, fontAwesomePattern);

    var html$1 = "<div id=\"barra-lateral-autoquizfillapp\">\r\n</div>\r\n<button id=\"boton-mostrar-ocultar-autoquizfillapp\">\r\n  <i class=\"fa-solid fa-angles-right\"></i>\r\n</button>\r\n";

    function styleInject(css, ref) {
      if ( ref === undefined ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z$6 = "/* Estilos para la barra lateral de AutoQuizFillApp */\r\n#barra-lateral-autoquizfillapp {\r\n  width: 27.5%; /* Define el ancho de la barra lateral como el 27.5% del ancho total del viewport */\r\n  min-width: 350px; /* Establece un ancho mínimo para asegurar que la barra no sea demasiado estrecha */\r\n  max-width: 500px; /* Establece un ancho máximo para evitar que la barra lateral ocupe demasiado espacio */\r\n  height: 100%; /* Hace que la barra lateral ocupe el 100% de la altura del viewport */\r\n  position: fixed; /* Posiciona la barra lateral de manera fija en la parte superior e izquierda de la ventana */\r\n  top: 0;\r\n  left: 0;\r\n  background-color: #ecf0f1; /* Define un color de fondo claro para la barra lateral */\r\n  padding: 20px; /* Añade un padding interno de 20px para espaciar el contenido */\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Aplica una sombra para darle profundidad y separar visualmente la barra del contenido */\r\n  z-index: 9999; /* Asegura que la barra lateral esté por encima de otros elementos en la página */\r\n  display: flex; /* Configura el layout interno para usar flexbox */\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  overflow-y: auto; /* Permite el desplazamiento vertical si el contenido excede la altura de la barra */\r\n  scrollbar-width: none; /* Oculta la barra de desplazamiento en Firefox */\r\n  font-family: 'Poppins', sans-serif; /* Aplica la fuente Poppins a todo el contenido dentro de la barra lateral */\r\n}\r\n\r\n/* Estilos para ocultar la barra de desplazamiento en navegadores basados en WebKit (Chrome, Safari, Edge) */\r\n#barra-lateral-autoquizfillapp::-webkit-scrollbar {\r\n  display: none; /* Oculta la barra de desplazamiento en Chrome, Safari y Edge */\r\n}\r\n\r\n/* Estilos para el botón de mostrar/ocultar la barra lateral */\r\n#boton-mostrar-ocultar-autoquizfillapp {\r\n  position: fixed; /* Posiciona el botón de manera fija en la parte superior izquierda, ajustando según el ancho mínimo de la barra */\r\n  top: 20px;\r\n  left: 375px; /* Ajusta según el ancho mínimo */\r\n  z-index: 10000; /* Asegura que el botón esté por encima de otros elementos */\r\n  width: 40px; /* Define el tamaño del botón */\r\n  height: 40px;\r\n  cursor: pointer; /* Cambia el cursor a un puntero para indicar que es interactivo */\r\n  border: none; /* Elimina el borde predeterminado del botón */\r\n  background-color: #3498db; /* Establece un color de fondo azul para el botón */\r\n  color: #ffffff; /* Define el color del texto/icono dentro del botón */\r\n  border-radius: 5px; /* Aplica bordes redondeados al botón */\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Añade una sombra para darle profundidad */\r\n  display: flex; /* Configura el layout interno para centrar el contenido (icono) */\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 18px; /* Aumenta el tamaño de la fuente del icono */\r\n}\r\n\r\n/* Estilos para los iconos de FontAwesome */\r\n.fa-classic, .fa-regular, .fa-solid, .far, .fas {\r\n  font-family: \"Font Awesome 6 Free\";\r\n}\r\n\r\n/* Estilos Específicos para Encabezados si se desean personalizar */\r\n#barra-lateral-autoquizfillapp h1,\r\n#barra-lateral-autoquizfillapp .h1 {\r\n    font-size: 2em;          /* Tamaño de fuente específico */\r\n    margin-bottom: 0.67em;   /* Margen inferior específico */\r\n    font-weight: bold;       /* Peso de fuente en negrita */\r\n    line-height: 1.2;        /* Altura de línea */\r\n    color: #333;             /* Color del texto */\r\n}\r\n\r\n#barra-lateral-autoquizfillapp h2,\r\n#barra-lateral-autoquizfillapp .h2 {\r\n    font-size: 1.5em;\r\n    margin-bottom: 0.75em;\r\n    font-weight: bold;\r\n    line-height: 1.2;\r\n    color: #333;\r\n}\r\n\r\n\r\n#barra-lateral-autoquizfillapp h4,\r\n#barra-lateral-autoquizfillapp .h4 {\r\n    font-size: 1em;\r\n    margin-bottom: 1.12em;\r\n    font-weight: bold;\r\n    line-height: 1.2;\r\n    color: #333;\r\n}\r\n\r\n#barra-lateral-autoquizfillapp h5,\r\n#barra-lateral-autoquizfillapp .h5 {\r\n    font-size: 0.83em;\r\n    margin-bottom: 1.5em;\r\n    font-weight: bold;\r\n    line-height: 1.2;\r\n    color: #333;\r\n}\r\n\r\n#barra-lateral-autoquizfillapp h6,\r\n#barra-lateral-autoquizfillapp .h6 {\r\n    font-size: 0.67em;\r\n    margin-bottom: 1.67em;\r\n    font-weight: bold;\r\n    line-height: 1.2;\r\n    color: #333;\r\n}\r\n\r\n/* Estilos para Párrafos dentro de la Barra Lateral */\r\n#barra-lateral-autoquizfillapp p {\r\n    font-size: 1em;\r\n    line-height: 1.5;\r\n    color: #555;\r\n    margin-bottom: 1em;\r\n}\r\n\r\n/* Estilos para Listas dentro de la Barra Lateral */\r\n#barra-lateral-autoquizfillapp ul {\r\n    list-style-type: disc;\r\n    padding-left: 20px;\r\n    margin-bottom: 1em;\r\n}\r\n\r\n#barra-lateral-autoquizfillapp li {\r\n    margin-bottom: 0.5em;\r\n    color: #555;\r\n}\r\n\r\n/* Estilos Adicionales Opcionales */\r\n\r\n/* Enlaces dentro de la Barra Lateral */\r\n#barra-lateral-autoquizfillapp a {\r\n    color: #0066cc;\r\n    text-decoration: none;\r\n}\r\n\r\n#barra-lateral-autoquizfillapp a:hover {\r\n    text-decoration: underline;\r\n}\r\n\r\n\r\n/* Sobrescribir estilos para párrafos dentro de #barra-lateral-autoquizfillapp */\r\n#barra-lateral-autoquizfillapp p {\r\n  margin-top: 0;           /* Restablece el margen superior */\r\n  margin-bottom: 0;        /* Restablece el margen inferior */\r\n  /* Puedes añadir más propiedades para personalizar según tus necesidades */\r\n  /* Por ejemplo: */\r\n  /* font-size: 1rem; */\r\n  /* color: #000; */\r\n}\r\n\r\n/* Sobrescribir el selector universal dentro de #barra-lateral-autoquizfillapp */\r\n#barra-lateral-autoquizfillapp,\r\n#barra-lateral-autoquizfillapp *,\r\n#barra-lateral-autoquizfillapp *::before,\r\n#barra-lateral-autoquizfillapp *::after {\r\n    box-sizing: border-box; /* O el valor que prefieras */\r\n    /* Restablece o define otras propiedades del selector universal si es necesario */\r\n}\r\n\r\n";
    styleInject(css_248z$6);

    // Importar el archivo HTML como cadena

    // Encapsular el código dentro de una IIFE
    (function () {
      console.log('[AutoFillQuiz-App] Creando Interfaz.');

      // 1. Insertar el contenido HTML en el DOM
      document.body.insertAdjacentHTML('beforeend', html$1); // Inserta el HTML al final del body

      // 2. Buscar los elementos en el DOM que acabamos de inyectar
      const barraLateral = document.getElementById('barra-lateral-autoquizfillapp'); // Obtiene el elemento de la barra lateral
      const botonMostrarOcultar = document.getElementById('boton-mostrar-ocultar-autoquizfillapp'); // Obtiene el botón de mostrar/ocultar

      // 3. Verificar que existan
      if (!barraLateral || !botonMostrarOcultar) { // Verifica si los elementos existen
        console.error('initBarraLateral: Error: No se encontraron los elementos necesarios en el DOM.'); // Error si no se encuentran
        return; // Sale de la función
      }

      // Define los íconos para el botón
      const iconFlecha = '<i class="fa-solid fa-angles-right"></i>'; // Define el icono de flecha
      const iconFlechaRotada = '<i class="fa-solid fa-angles-right fa-rotate-180"></i>'; // Define el icono de flecha rotada

      // Leer el estado de la barra lateral desde localStorage
      const estadoBarra = localStorage.getItem('barraLateralVisible'); // Obtiene el estado guardado
      let isBarraVisible = estadoBarra === null ? true : estadoBarra === 'true'; // Define la visibilidad inicial

      // Aplicar el estado inicial de la barra lateral
      if (isBarraVisible) { // Si la barra está visible
        barraLateral.style.display = 'flex'; // Muestra la barra lateral
        botonMostrarOcultar.innerHTML = iconFlechaRotada; // Asigna el icono rotado al botón
      } else { // Si la barra está oculta
        barraLateral.style.display = 'none'; // Oculta la barra lateral
        botonMostrarOcultar.innerHTML = iconFlecha; // Asigna el icono normal al botón
        botonMostrarOcultar.style.left = '10px'; // Posiciona el botón
        document.body.style.marginLeft = '0'; // Resetea el margen izquierdo del body
        document.body.style.width = '100%'; // Resetea el ancho del body
      }

      // Función para reposicionar el botón en función del ancho de la barra lateral
      function reposicionarBoton() {
        const barraWidth = barraLateral.getBoundingClientRect().width;
        botonMostrarOcultar.style.left = `calc(${barraWidth}px + 10px)`;
      }

      // Función para ajustar el contenido de la página según el ancho de la barra lateral
      function ajustarContenidoPagina() {
        const barraWidth = barraLateral.getBoundingClientRect().width;
        const contenido = document.body; // Puedes usar document.body directamente
        contenido.style.marginLeft = `${barraWidth}px`;
        contenido.style.width = `calc(100% - ${barraWidth}px)`;
      }

      // Función para alternar la visibilidad de la barra lateral
      function alternarBarraLateral() {
        if (isBarraVisible) {
          barraLateral.style.display = 'none';
          botonMostrarOcultar.innerHTML = iconFlecha;
          botonMostrarOcultar.style.left = '10px';
          document.body.style.marginLeft = '0';
          document.body.style.width = '100%';
          isBarraVisible = false;
          localStorage.setItem('barraLateralVisible', 'false');
        } else {
          barraLateral.style.display = 'flex';
          botonMostrarOcultar.innerHTML = iconFlechaRotada;
          reposicionarBoton();
          ajustarContenidoPagina();
          isBarraVisible = true;
          localStorage.setItem('barraLateralVisible', 'true');
        }
      }

      // Observador de cambios en el tamaño de la barra lateral
      const resizeObserver = new ResizeObserver(() => {
        reposicionarBoton();
        ajustarContenidoPagina();
      });
      resizeObserver.observe(barraLateral);

      // Evento al hacer clic en el botón de mostrar/ocultar
      botonMostrarOcultar.addEventListener('click', () => {
        //console.log('botonMostrarOcultar: click detectado');
        alternarBarraLateral();
      });

      // Evento para detectar la combinación de teclas Ctrl + Q
      document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && (event.key === 'q' || event.key === 'Q')) {
          event.preventDefault();
          console.log('keydown: Ctrl + Q detectado');
          alternarBarraLateral();
        }
      });

      // Ajusta el contenido de la página inicialmente si la barra está visible
      if (isBarraVisible) {
        ajustarContenidoPagina();
      }

      // Retorna la barra lateral si es necesario dentro del IIFE
      // Nota: Este valor no estará accesible fuera de la IIFE
      // Puedes eliminar esta línea si no la necesitas
      return barraLateral;
    })();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
     */
    const CONSTANTS = {
        /**
         * @define {boolean} Whether this is the client Node.js SDK.
         */
        NODE_CLIENT: false,
        /**
         * @define {boolean} Whether this is the Admin Node.js SDK.
         */
        NODE_ADMIN: false,
        /**
         * Firebase SDK Version
         */
        SDK_VERSION: '${JSCORE_VERSION}'
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws an error if the provided assertion is falsy
     */
    const assert = function (assertion, message) {
        if (!assertion) {
            throw assertionError(message);
        }
    };
    /**
     * Returns an Error object suitable for throwing.
     */
    const assertionError = function (message) {
        return new Error('Firebase Database (' +
            CONSTANTS.SDK_VERSION +
            ') INTERNAL ASSERT FAILED: ' +
            message);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const stringToByteArray$1 = function (str) {
        // TODO(user): Use native implementations if/when available
        const out = [];
        let p = 0;
        for (let i = 0; i < str.length; i++) {
            let c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    const byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        const out = [];
        let pos = 0, c = 0;
        while (pos < bytes.length) {
            const c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                const c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                const c2 = bytes[pos++];
                const c3 = bytes[pos++];
                const c4 = bytes[pos++];
                const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                const c2 = bytes[pos++];
                const c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    // TODO(dlarocque): Define this as a class, since we no longer target ES5.
    const base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray(input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            const byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            const output = [];
            for (let i = 0; i < input.length; i += 3) {
                const byte1 = input[i];
                const haveByte2 = i + 1 < input.length;
                const byte2 = haveByte2 ? input[i + 1] : 0;
                const haveByte3 = i + 2 < input.length;
                const byte3 = haveByte3 ? input[i + 2] : 0;
                const outByte1 = byte1 >> 2;
                const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                let outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString(input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray$1(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString(input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray(input, webSafe) {
            this.init_();
            const charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            const output = [];
            for (let i = 0; i < input.length;) {
                const byte1 = charToByteMap[input.charAt(i++)];
                const haveByte2 = i < input.length;
                const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                const haveByte3 = i < input.length;
                const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                const haveByte4 = i < input.length;
                const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw new DecodeBase64StringError();
                }
                const outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        const outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_() {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (let i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };
    /**
     * An error encountered while decoding base64 string.
     */
    class DecodeBase64StringError extends Error {
        constructor() {
            super(...arguments);
            this.name = 'DecodeBase64StringError';
        }
    }
    /**
     * URL-safe base64 encoding
     */
    const base64Encode = function (str) {
        const utf8Bytes = stringToByteArray$1(str);
        return base64.encodeByteArray(utf8Bytes, true);
    };
    /**
     * URL-safe base64 encoding (without "." padding in the end).
     * e.g. Used in JSON Web Token (JWT) parts.
     */
    const base64urlEncodeWithoutPadding = function (str) {
        // Use base64url encoding and remove padding in the end (dot characters).
        return base64Encode(str).replace(/\./g, '');
    };
    /**
     * URL-safe base64 decoding
     *
     * NOTE: DO NOT use the global atob() function - it does NOT support the
     * base64Url variant encoding.
     *
     * @param str To be decoded
     * @return Decoded result, if possible
     */
    const base64Decode = function (str) {
        try {
            return base64.decodeString(str, true);
        }
        catch (e) {
            console.error('base64Decode failed: ', e);
        }
        return null;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Do a deep-copy of basic JavaScript Objects or Arrays.
     */
    function deepCopy(value) {
        return deepExtend(undefined, value);
    }
    /**
     * Copy properties from source to target (recursively allows extension
     * of Objects and Arrays).  Scalar values in the target are over-written.
     * If target is undefined, an object of the appropriate type will be created
     * (and returned).
     *
     * We recursively copy all child properties of plain Objects in the source- so
     * that namespace- like dictionaries are merged.
     *
     * Note that the target can be a function, in which case the properties in
     * the source Object are copied onto it as static properties of the Function.
     *
     * Note: we don't merge __proto__ to prevent prototype pollution
     */
    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }
        switch (source.constructor) {
            case Date:
                // Treat Dates like scalars; if the target date object had any child
                // properties - they will be lost!
                const dateValue = source;
                return new Date(dateValue.getTime());
            case Object:
                if (target === undefined) {
                    target = {};
                }
                break;
            case Array:
                // Always copy the array source and overwrite the target.
                target = [];
                break;
            default:
                // Not a plain Object - treat it as a scalar.
                return source;
        }
        for (const prop in source) {
            // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
            if (!source.hasOwnProperty(prop) || !isValidKey$1(prop)) {
                continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
        }
        return target;
    }
    function isValidKey$1(key) {
        return key !== '__proto__';
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Polyfill for `globalThis` object.
     * @returns the `globalThis` object for the given environment.
     * @public
     */
    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        throw new Error('Unable to locate global object.');
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
    /**
     * Attempt to read defaults from a JSON string provided to
     * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
     * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
     * The dots are in parens because certain compilers (Vite?) cannot
     * handle seeing that variable in comments.
     * See https://github.com/firebase/firebase-js-sdk/issues/6838
     */
    const getDefaultsFromEnvVariable = () => {
        if (typeof process === 'undefined' || typeof process.env === 'undefined') {
            return;
        }
        const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
        if (defaultsJsonString) {
            return JSON.parse(defaultsJsonString);
        }
    };
    const getDefaultsFromCookie = () => {
        if (typeof document === 'undefined') {
            return;
        }
        let match;
        try {
            match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
        }
        catch (e) {
            // Some environments such as Angular Universal SSR have a
            // `document` object but error on accessing `document.cookie`.
            return;
        }
        const decoded = match && base64Decode(match[1]);
        return decoded && JSON.parse(decoded);
    };
    /**
     * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
     * (1) if such an object exists as a property of `globalThis`
     * (2) if such an object was provided on a shell environment variable
     * (3) if such an object exists in a cookie
     * @public
     */
    const getDefaults = () => {
        try {
            return (getDefaultsFromGlobal() ||
                getDefaultsFromEnvVariable() ||
                getDefaultsFromCookie());
        }
        catch (e) {
            /**
             * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
             * to any environment case we have not accounted for. Log to
             * info instead of swallowing so we can find these unknown cases
             * and add paths for them if needed.
             */
            console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
            return;
        }
    };
    /**
     * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
     * for the given product.
     * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
     * @public
     */
    const getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === undefined ? undefined : _a.emulatorHosts) === null || _b === undefined ? undefined : _b[productName]; };
    /**
     * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
     * for the given product.
     * @returns a pair of hostname and port like `["::1", 4000]` if available
     * @public
     */
    const getDefaultEmulatorHostnameAndPort = (productName) => {
        const host = getDefaultEmulatorHost(productName);
        if (!host) {
            return undefined;
        }
        const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.
        if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
            throw new Error(`Invalid host ${host} with no separate hostname and port!`);
        }
        // eslint-disable-next-line no-restricted-globals
        const port = parseInt(host.substring(separatorIndex + 1), 10);
        if (host[0] === '[') {
            // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
            return [host.substring(1, separatorIndex - 1), port];
        }
        else {
            return [host.substring(0, separatorIndex), port];
        }
    };
    /**
     * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
     * @public
     */
    const getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === undefined ? undefined : _a.config; };
    /**
     * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties
     * prefixed by "_")
     * @public
     */
    const getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === undefined ? undefined : _a[`_${name}`]; };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Deferred {
        constructor() {
            this.reject = () => { };
            this.resolve = () => { };
            this.promise = new Promise((resolve, reject) => {
                this.resolve = resolve;
                this.reject = reject;
            });
        }
        /**
         * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        wrapCallback(callback) {
            return (error, value) => {
                if (error) {
                    this.reject(error);
                }
                else {
                    this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    this.promise.catch(() => { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        }
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createMockUserToken(token, projectId) {
        if (token.uid) {
            throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
        }
        // Unsecured JWTs use "none" as the algorithm.
        const header = {
            alg: 'none',
            type: 'JWT'
        };
        const project = projectId || 'demo-project';
        const iat = token.iat || 0;
        const sub = token.sub || token.user_id;
        if (!sub) {
            throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
        }
        const payload = Object.assign({ 
            // Set all required fields to decent defaults
            iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {
                sign_in_provider: 'custom',
                identities: {}
            } }, token);
        // Unsecured JWTs use the empty string as a signature.
        const signature = '';
        return [
            base64urlEncodeWithoutPadding(JSON.stringify(header)),
            base64urlEncodeWithoutPadding(JSON.stringify(payload)),
            signature
        ].join('.');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    /**
     * Detect Cloudflare Worker context.
     */
    function isCloudflareWorker() {
        return (typeof navigator !== 'undefined' &&
            navigator.userAgent === 'Cloudflare-Workers');
    }
    function isBrowserExtension() {
        const runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Internet Explorer. */
    function isIE() {
        const ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /**
     * Detect whether the current SDK build is the Node version.
     *
     * @return true if it's the Node SDK build.
     */
    function isNodeSdk() {
        return CONSTANTS.NODE_ADMIN === true;
    }
    /**
     * This method checks if indexedDB is supported by current browser/service worker context
     * @return true if indexedDB is supported by current browser/service worker context
     */
    function isIndexedDBAvailable() {
        try {
            return typeof indexedDB === 'object';
        }
        catch (e) {
            return false;
        }
    }
    /**
     * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
     * if errors occur during the database open operation.
     *
     * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
     * private browsing)
     */
    function validateIndexedDBOpenable() {
        return new Promise((resolve, reject) => {
            try {
                let preExist = true;
                const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
                const request = self.indexedDB.open(DB_CHECK_NAME);
                request.onsuccess = () => {
                    request.result.close();
                    // delete database only when it doesn't pre-exist
                    if (!preExist) {
                        self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                    }
                    resolve(true);
                };
                request.onupgradeneeded = () => {
                    preExist = false;
                };
                request.onerror = () => {
                    var _a;
                    reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
                };
            }
            catch (error) {
                reject(error);
            }
        });
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Standardized Firebase Error.
     *
     * Usage:
     *
     *   // TypeScript string literals for type-safe codes
     *   type Err =
     *     'unknown' |
     *     'object-not-found'
     *     ;
     *
     *   // Closure enum for type-safe error codes
     *   // at-enum {string}
     *   var Err = {
     *     UNKNOWN: 'unknown',
     *     OBJECT_NOT_FOUND: 'object-not-found',
     *   }
     *
     *   let errors: Map<Err, string> = {
     *     'generic-error': "Unknown error",
     *     'file-not-found': "Could not find file: {$file}",
     *   };
     *
     *   // Type-safe function - must pass a valid error code as param.
     *   let error = new ErrorFactory<Err>('service', 'Service', errors);
     *
     *   ...
     *   throw error.create(Err.GENERIC);
     *   ...
     *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
     *   ...
     *   // Service: Could not file file: foo.txt (service/file-not-found).
     *
     *   catch (e) {
     *     assert(e.message === "Could not find file: foo.txt.");
     *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
     *       console.log("Could not read file: " + e['file']);
     *     }
     *   }
     */
    const ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    class FirebaseError extends Error {
        constructor(
        /** The error code for this error. */
        code, message, 
        /** Custom data for this error. */
        customData) {
            super(message);
            this.code = code;
            this.customData = customData;
            /** The custom name for all FirebaseErrors. */
            this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
            //                   which we can now use since we no longer target ES5.
            Object.setPrototypeOf(this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, ErrorFactory.prototype.create);
            }
        }
    }
    class ErrorFactory {
        constructor(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        create(code, ...data) {
            const customData = data[0] || {};
            const fullCode = `${this.service}/${code}`;
            const template = this.errors[code];
            const message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
            const error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        }
    }
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, (_, key) => {
            const value = data[key];
            return value != null ? String(value) : `<${key}?>`;
        });
    }
    const PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Evaluates a JSON string into a javascript object.
     *
     * @param {string} str A string containing JSON.
     * @return {*} The javascript object representing the specified JSON.
     */
    function jsonEval(str) {
        return JSON.parse(str);
    }
    /**
     * Returns JSON representing a javascript object.
     * @param {*} data JavaScript object to be stringified.
     * @return {string} The JSON contents of the object.
     */
    function stringify(data) {
        return JSON.stringify(data);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Decodes a Firebase auth. token into constituent parts.
     *
     * Notes:
     * - May return with invalid / incomplete claims if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    const decode = function (token) {
        let header = {}, claims = {}, data = {}, signature = '';
        try {
            const parts = token.split('.');
            header = jsonEval(base64Decode(parts[0]) || '');
            claims = jsonEval(base64Decode(parts[1]) || '');
            signature = parts[2];
            data = claims['d'] || {};
            delete claims['d'];
        }
        catch (e) { }
        return {
            header,
            claims,
            data,
            signature
        };
    };
    /**
     * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    const isValidFormat = function (token) {
        const decoded = decode(token), claims = decoded.claims;
        return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
    };
    /**
     * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    const isAdmin = function (token) {
        const claims = decode(token).claims;
        return typeof claims === 'object' && claims['admin'] === true;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return obj[key];
        }
        else {
            return undefined;
        }
    }
    function isEmpty(obj) {
        for (const key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }
    function map(obj, fn, contextObj) {
        const res = {};
        for (const key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                res[key] = fn.call(contextObj, obj[key], key, obj);
            }
        }
        return res;
    }
    /**
     * Deep equal two objects. Support Arrays and Objects.
     */
    function deepEqual(a, b) {
        if (a === b) {
            return true;
        }
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        for (const k of aKeys) {
            if (!bKeys.includes(k)) {
                return false;
            }
            const aProp = a[k];
            const bProp = b[k];
            if (isObject(aProp) && isObject(bProp)) {
                if (!deepEqual(aProp, bProp)) {
                    return false;
                }
            }
            else if (aProp !== bProp) {
                return false;
            }
        }
        for (const k of bKeys) {
            if (!aKeys.includes(k)) {
                return false;
            }
        }
        return true;
    }
    function isObject(thing) {
        return thing !== null && typeof thing === 'object';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
     * params object (e.g. {arg: 'val', arg2: 'val2'})
     * Note: You must prepend it with ? when adding it to a URL.
     */
    function querystring(querystringParams) {
        const params = [];
        for (const [key, value] of Object.entries(querystringParams)) {
            if (Array.isArray(value)) {
                value.forEach(arrayVal => {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            }
            else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        }
        return params.length ? '&' + params.join('&') : '';
    }
    /**
     * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
     * (e.g. {arg: 'val', arg2: 'val2'})
     */
    function querystringDecode(querystring) {
        const obj = {};
        const tokens = querystring.replace(/^\?/, '').split('&');
        tokens.forEach(token => {
            if (token) {
                const [key, value] = token.split('=');
                obj[decodeURIComponent(key)] = decodeURIComponent(value);
            }
        });
        return obj;
    }
    /**
     * Extract the query string part of a URL, including the leading question mark (if present).
     */
    function extractQuerystring(url) {
        const queryStart = url.indexOf('?');
        if (!queryStart) {
            return '';
        }
        const fragmentStart = url.indexOf('#', queryStart);
        return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview SHA-1 cryptographic hash.
     * Variable names follow the notation in FIPS PUB 180-3:
     * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
     *
     * Usage:
     *   var sha1 = new sha1();
     *   sha1.update(bytes);
     *   var hash = sha1.digest();
     *
     * Performance:
     *   Chrome 23:   ~400 Mbit/s
     *   Firefox 16:  ~250 Mbit/s
     *
     */
    /**
     * SHA-1 cryptographic hash constructor.
     *
     * The properties declared here are discussed in the above algorithm document.
     * @constructor
     * @final
     * @struct
     */
    class Sha1 {
        constructor() {
            /**
             * Holds the previous values of accumulated variables a-e in the compress_
             * function.
             * @private
             */
            this.chain_ = [];
            /**
             * A buffer holding the partially computed hash result.
             * @private
             */
            this.buf_ = [];
            /**
             * An array of 80 bytes, each a part of the message to be hashed.  Referred to
             * as the message schedule in the docs.
             * @private
             */
            this.W_ = [];
            /**
             * Contains data needed to pad messages less than 64 bytes.
             * @private
             */
            this.pad_ = [];
            /**
             * @private {number}
             */
            this.inbuf_ = 0;
            /**
             * @private {number}
             */
            this.total_ = 0;
            this.blockSize = 512 / 8;
            this.pad_[0] = 128;
            for (let i = 1; i < this.blockSize; ++i) {
                this.pad_[i] = 0;
            }
            this.reset();
        }
        reset() {
            this.chain_[0] = 0x67452301;
            this.chain_[1] = 0xefcdab89;
            this.chain_[2] = 0x98badcfe;
            this.chain_[3] = 0x10325476;
            this.chain_[4] = 0xc3d2e1f0;
            this.inbuf_ = 0;
            this.total_ = 0;
        }
        /**
         * Internal compress helper function.
         * @param buf Block to compress.
         * @param offset Offset of the block in the buffer.
         * @private
         */
        compress_(buf, offset) {
            if (!offset) {
                offset = 0;
            }
            const W = this.W_;
            // get 16 big endian words
            if (typeof buf === 'string') {
                for (let i = 0; i < 16; i++) {
                    // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                    // have a bug that turns the post-increment ++ operator into pre-increment
                    // during JIT compilation.  We have code that depends heavily on SHA-1 for
                    // correctness and which is affected by this bug, so I've removed all uses
                    // of post-increment ++ in which the result value is used.  We can revert
                    // this change once the Safari bug
                    // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                    // most clients have been updated.
                    W[i] =
                        (buf.charCodeAt(offset) << 24) |
                            (buf.charCodeAt(offset + 1) << 16) |
                            (buf.charCodeAt(offset + 2) << 8) |
                            buf.charCodeAt(offset + 3);
                    offset += 4;
                }
            }
            else {
                for (let i = 0; i < 16; i++) {
                    W[i] =
                        (buf[offset] << 24) |
                            (buf[offset + 1] << 16) |
                            (buf[offset + 2] << 8) |
                            buf[offset + 3];
                    offset += 4;
                }
            }
            // expand to 80 words
            for (let i = 16; i < 80; i++) {
                const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
            }
            let a = this.chain_[0];
            let b = this.chain_[1];
            let c = this.chain_[2];
            let d = this.chain_[3];
            let e = this.chain_[4];
            let f, k;
            // TODO(user): Try to unroll this loop to speed up the computation.
            for (let i = 0; i < 80; i++) {
                if (i < 40) {
                    if (i < 20) {
                        f = d ^ (b & (c ^ d));
                        k = 0x5a827999;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0x6ed9eba1;
                    }
                }
                else {
                    if (i < 60) {
                        f = (b & c) | (d & (b | c));
                        k = 0x8f1bbcdc;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0xca62c1d6;
                    }
                }
                const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
                e = d;
                d = c;
                c = ((b << 30) | (b >>> 2)) & 0xffffffff;
                b = a;
                a = t;
            }
            this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
            this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
            this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
            this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
            this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
        }
        update(bytes, length) {
            // TODO(johnlenz): tighten the function signature and remove this check
            if (bytes == null) {
                return;
            }
            if (length === undefined) {
                length = bytes.length;
            }
            const lengthMinusBlock = length - this.blockSize;
            let n = 0;
            // Using local instead of member variables gives ~5% speedup on Firefox 16.
            const buf = this.buf_;
            let inbuf = this.inbuf_;
            // The outer while loop should execute at most twice.
            while (n < length) {
                // When we have no data in the block to top up, we can directly process the
                // input buffer (assuming it contains sufficient data). This gives ~25%
                // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
                // the data is provided in large chunks (or in multiples of 64 bytes).
                if (inbuf === 0) {
                    while (n <= lengthMinusBlock) {
                        this.compress_(bytes, n);
                        n += this.blockSize;
                    }
                }
                if (typeof bytes === 'string') {
                    while (n < length) {
                        buf[inbuf] = bytes.charCodeAt(n);
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
                else {
                    while (n < length) {
                        buf[inbuf] = bytes[n];
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
            }
            this.inbuf_ = inbuf;
            this.total_ += length;
        }
        /** @override */
        digest() {
            const digest = [];
            let totalBits = this.total_ * 8;
            // Add pad 0x80 0x00*.
            if (this.inbuf_ < 56) {
                this.update(this.pad_, 56 - this.inbuf_);
            }
            else {
                this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
            }
            // Add # bits.
            for (let i = this.blockSize - 1; i >= 56; i--) {
                this.buf_[i] = totalBits & 255;
                totalBits /= 256; // Don't use bit-shifting here!
            }
            this.compress_(this.buf_);
            let n = 0;
            for (let i = 0; i < 5; i++) {
                for (let j = 24; j >= 0; j -= 8) {
                    digest[n] = (this.chain_[i] >> j) & 255;
                    ++n;
                }
            }
            return digest;
        }
    }

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        const proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    class ObserverProxy {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        constructor(executor, onNoObservers) {
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(() => {
                executor(this);
            })
                .catch(e => {
                this.error(e);
            });
        }
        next(value) {
            this.forEachObserver((observer) => {
                observer.next(value);
            });
        }
        error(error) {
            this.forEachObserver((observer) => {
                observer.error(error);
            });
            this.close(error);
        }
        complete() {
            this.forEachObserver((observer) => {
                observer.complete();
            });
            this.close();
        }
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber synchronously to their
         *   call to subscribe().
         */
        subscribe(nextOrObserver, error, complete) {
            let observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error,
                    complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop;
            }
            if (observer.error === undefined) {
                observer.error = noop;
            }
            if (observer.complete === undefined) {
                observer.complete = noop;
            }
            const unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(() => {
                    try {
                        if (this.finalError) {
                            observer.error(this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        }
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        unsubscribeOne(i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        }
        forEachObserver(fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (let i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        }
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        sendOne(i, fn) {
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(() => {
                if (this.observers !== undefined && this.observers[i] !== undefined) {
                    try {
                        fn(this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        }
        close(err) {
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(() => {
                this.observers = undefined;
                this.onNoObservers = undefined;
            });
        }
    }
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (const method of methods) {
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop() {
        // do nothing
    }
    /**
     * Generates a string to prefix an error message about failed argument validation
     *
     * @param fnName The function name
     * @param argName The name of the argument
     * @return The prefix to add to the error thrown for validation.
     */
    function errorPrefix(fnName, argName) {
        return `${fnName} failed: ${argName} argument `;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
    // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
    // so it's been modified.
    // Note that not all Unicode characters appear as single characters in JavaScript strings.
    // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
    // use 2 characters in JavaScript.  All 4-byte UTF-8 characters begin with a first
    // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
    // pair).
    // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
    /**
     * @param {string} str
     * @return {Array}
     */
    const stringToByteArray = function (str) {
        const out = [];
        let p = 0;
        for (let i = 0; i < str.length; i++) {
            let c = str.charCodeAt(i);
            // Is this the lead surrogate in a surrogate pair?
            if (c >= 0xd800 && c <= 0xdbff) {
                const high = c - 0xd800; // the high 10 bits.
                i++;
                assert(i < str.length, 'Surrogate pair missing trail surrogate.');
                const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
                c = 0x10000 + (high << 10) + low;
            }
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if (c < 65536) {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Calculate length without actually converting; useful for doing cheaper validation.
     * @param {string} str
     * @return {number}
     */
    const stringLength = function (str) {
        let p = 0;
        for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 128) {
                p++;
            }
            else if (c < 2048) {
                p += 2;
            }
            else if (c >= 0xd800 && c <= 0xdbff) {
                // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
                p += 4;
                i++; // skip trail surrogate.
            }
            else {
                p += 3;
            }
        }
        return p;
    };

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getModularInstance(service) {
        if (service && service._delegate) {
            return service._delegate;
        }
        else {
            return service;
        }
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    class Component {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        constructor(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */;
            this.onInstanceCreated = null;
        }
        setInstantiationMode(mode) {
            this.instantiationMode = mode;
            return this;
        }
        setMultipleInstances(multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        }
        setServiceProps(props) {
            this.serviceProps = props;
            return this;
        }
        setInstanceCreatedCallback(callback) {
            this.onInstanceCreated = callback;
            return this;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
     * NameServiceMapping[T] is an alias for the type of the instance
     */
    class Provider {
        constructor(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
            this.instancesOptions = new Map();
            this.onInitCallbacks = new Map();
        }
        /**
         * @param identifier A provider can provide multiple instances of a service
         * if this.component.multipleInstances is true.
         */
        get(identifier) {
            // if multipleInstances is not supported, use the default name
            const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
                const deferred = new Deferred();
                this.instancesDeferred.set(normalizedIdentifier, deferred);
                if (this.isInitialized(normalizedIdentifier) ||
                    this.shouldAutoInitialize()) {
                    // initialize the service if it can be auto-initialized
                    try {
                        const instance = this.getOrInitializeService({
                            instanceIdentifier: normalizedIdentifier
                        });
                        if (instance) {
                            deferred.resolve(instance);
                        }
                    }
                    catch (e) {
                        // when the instance factory throws an exception during get(), it should not cause
                        // a fatal error. We just return the unresolved promise in this case.
                    }
                }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
        }
        getImmediate(options) {
            var _a;
            // if multipleInstances is not supported, use the default name
            const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === undefined ? undefined : options.identifier);
            const optional = (_a = options === null || options === undefined ? undefined : options.optional) !== null && _a !== undefined ? _a : false;
            if (this.isInitialized(normalizedIdentifier) ||
                this.shouldAutoInitialize()) {
                try {
                    return this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                }
                catch (e) {
                    if (optional) {
                        return null;
                    }
                    else {
                        throw e;
                    }
                }
            }
            else {
                // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw
                if (optional) {
                    return null;
                }
                else {
                    throw Error(`Service ${this.name} is not available`);
                }
            }
        }
        getComponent() {
            return this.component;
        }
        setComponent(component) {
            if (component.name !== this.name) {
                throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
            }
            if (this.component) {
                throw Error(`Component for ${this.name} has already been provided`);
            }
            this.component = component;
            // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
            if (!this.shouldAutoInitialize()) {
                return;
            }
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
                try {
                    this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$1 });
                }
                catch (e) {
                    // when the instance factory for an eager Component throws an exception during the eager
                    // initialization, it should not cause a fatal error.
                    // TODO: Investigate if we need to make it configurable, because some component may want to cause
                    // a fatal error in this case?
                }
            }
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
                const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    const instance = this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                    instanceDeferred.resolve(instance);
                }
                catch (e) {
                    // when the instance factory throws an exception, it should not cause
                    // a fatal error. We just leave the promise unresolved.
                }
            }
        }
        clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {
            this.instancesDeferred.delete(identifier);
            this.instancesOptions.delete(identifier);
            this.instances.delete(identifier);
        }
        // app.delete() will call this method on every provider to delete the services
        // TODO: should we mark the provider as deleted?
        async delete() {
            const services = Array.from(this.instances.values());
            await Promise.all([
                ...services
                    .filter(service => 'INTERNAL' in service) // legacy services
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    .map(service => service.INTERNAL.delete()),
                ...services
                    .filter(service => '_delete' in service) // modularized services
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    .map(service => service._delete())
            ]);
        }
        isComponentSet() {
            return this.component != null;
        }
        isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {
            return this.instances.has(identifier);
        }
        getOptions(identifier = DEFAULT_ENTRY_NAME$1) {
            return this.instancesOptions.get(identifier) || {};
        }
        initialize(opts = {}) {
            const { options = {} } = opts;
            const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
            if (this.isInitialized(normalizedIdentifier)) {
                throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
            }
            if (!this.isComponentSet()) {
                throw Error(`Component ${this.name} has not been registered yet`);
            }
            const instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier,
                options
            });
            // resolve any pending promise waiting for the service instance
            for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
                const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                if (normalizedIdentifier === normalizedDeferredIdentifier) {
                    instanceDeferred.resolve(instance);
                }
            }
            return instance;
        }
        /**
         *
         * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
         * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
         *
         * @param identifier An optional instance identifier
         * @returns a function to unregister the callback
         */
        onInit(callback, identifier) {
            var _a;
            const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== undefined ? _a : new Set();
            existingCallbacks.add(callback);
            this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
            const existingInstance = this.instances.get(normalizedIdentifier);
            if (existingInstance) {
                callback(existingInstance, normalizedIdentifier);
            }
            return () => {
                existingCallbacks.delete(callback);
            };
        }
        /**
         * Invoke onInit callbacks synchronously
         * @param instance the service instance`
         */
        invokeOnInitCallbacks(instance, identifier) {
            const callbacks = this.onInitCallbacks.get(identifier);
            if (!callbacks) {
                return;
            }
            for (const callback of callbacks) {
                try {
                    callback(instance, identifier);
                }
                catch (_a) {
                    // ignore errors in the onInit callback
                }
            }
        }
        getOrInitializeService({ instanceIdentifier, options = {} }) {
            let instance = this.instances.get(instanceIdentifier);
            if (!instance && this.component) {
                instance = this.component.instanceFactory(this.container, {
                    instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                    options
                });
                this.instances.set(instanceIdentifier, instance);
                this.instancesOptions.set(instanceIdentifier, options);
                /**
                 * Invoke onInit listeners.
                 * Note this.component.onInstanceCreated is different, which is used by the component creator,
                 * while onInit listeners are registered by consumers of the provider.
                 */
                this.invokeOnInitCallbacks(instance, instanceIdentifier);
                /**
                 * Order is important
                 * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
                 * makes `isInitialized()` return true.
                 */
                if (this.component.onInstanceCreated) {
                    try {
                        this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
                    }
                    catch (_a) {
                        // ignore errors in the onInstanceCreatedCallback
                    }
                }
            }
            return instance || null;
        }
        normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {
            if (this.component) {
                return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
            }
            else {
                return identifier; // assume multiple instances are supported before the component is provided.
            }
        }
        shouldAutoInitialize() {
            return (!!this.component &&
                this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */);
        }
    }
    // undefined should be passed to the service factory for the default instance
    function normalizeIdentifierForFactory(identifier) {
        return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;
    }
    function isComponentEager(component) {
        return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
     */
    class ComponentContainer {
        constructor(name) {
            this.name = name;
            this.providers = new Map();
        }
        /**
         *
         * @param component Component being added
         * @param overwrite When a component with the same name has already been registered,
         * if overwrite is true: overwrite the existing component with the new component and create a new
         * provider with the new component. It can be useful in tests where you want to use different mocks
         * for different tests.
         * if overwrite is false: throw an exception
         */
        addComponent(component) {
            const provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
            }
            provider.setComponent(component);
        }
        addOrOverwriteComponent(component) {
            const provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                // delete the existing provider from the container, so we can register the new component
                this.providers.delete(component.name);
            }
            this.addComponent(component);
        }
        /**
         * getProvider provides a type safe interface where it can only be called with a field name
         * present in NameServiceMapping interface.
         *
         * Firebase SDKs providing services should extend NameServiceMapping interface to register
         * themselves.
         */
        getProvider(name) {
            if (this.providers.has(name)) {
                return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            const provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
        }
        getProviders() {
            return Array.from(this.providers.values());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A container for all of the Logger instances
     */
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel$2;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel$2 || (LogLevel$2 = {}));
    const levelStringToEnum$2 = {
        'debug': LogLevel$2.DEBUG,
        'verbose': LogLevel$2.VERBOSE,
        'info': LogLevel$2.INFO,
        'warn': LogLevel$2.WARN,
        'error': LogLevel$2.ERROR,
        'silent': LogLevel$2.SILENT
    };
    /**
     * The default log level
     */
    const defaultLogLevel$2 = LogLevel$2.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    const ConsoleMethod$2 = {
        [LogLevel$2.DEBUG]: 'log',
        [LogLevel$2.VERBOSE]: 'log',
        [LogLevel$2.INFO]: 'info',
        [LogLevel$2.WARN]: 'warn',
        [LogLevel$2.ERROR]: 'error'
    };
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    const defaultLogHandler$2 = (instance, logType, ...args) => {
        if (logType < instance.logLevel) {
            return;
        }
        const now = new Date().toISOString();
        const method = ConsoleMethod$2[logType];
        if (method) {
            console[method](`[${now}]  ${instance.name}:`, ...args);
        }
        else {
            throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
        }
    };
    let Logger$2 = class Logger {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        constructor(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel$2;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler$2;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        get logLevel() {
            return this._logLevel;
        }
        set logLevel(val) {
            if (!(val in LogLevel$2)) {
                throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
            }
            this._logLevel = val;
        }
        // Workaround for setter/getter having to be the same type.
        setLogLevel(val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum$2[val] : val;
        }
        get logHandler() {
            return this._logHandler;
        }
        set logHandler(val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        }
        get userLogHandler() {
            return this._userLogHandler;
        }
        set userLogHandler(val) {
            this._userLogHandler = val;
        }
        /**
         * The functions below are all based on the `console` interface
         */
        debug(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel$2.DEBUG, ...args);
            this._logHandler(this, LogLevel$2.DEBUG, ...args);
        }
        log(...args) {
            this._userLogHandler &&
                this._userLogHandler(this, LogLevel$2.VERBOSE, ...args);
            this._logHandler(this, LogLevel$2.VERBOSE, ...args);
        }
        info(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel$2.INFO, ...args);
            this._logHandler(this, LogLevel$2.INFO, ...args);
        }
        warn(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel$2.WARN, ...args);
            this._logHandler(this, LogLevel$2.WARN, ...args);
        }
        error(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel$2.ERROR, ...args);
            this._logHandler(this, LogLevel$2.ERROR, ...args);
        }
    };

    const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

    let idbProxyableTypes;
    let cursorAdvanceMethods;
    // This is a function to prevent it throwing up in node environments.
    function getIdbProxyableTypes() {
        return (idbProxyableTypes ||
            (idbProxyableTypes = [
                IDBDatabase,
                IDBObjectStore,
                IDBIndex,
                IDBCursor,
                IDBTransaction,
            ]));
    }
    // This is a function to prevent it throwing up in node environments.
    function getCursorAdvanceMethods() {
        return (cursorAdvanceMethods ||
            (cursorAdvanceMethods = [
                IDBCursor.prototype.advance,
                IDBCursor.prototype.continue,
                IDBCursor.prototype.continuePrimaryKey,
            ]));
    }
    const cursorRequestMap = new WeakMap();
    const transactionDoneMap = new WeakMap();
    const transactionStoreNamesMap = new WeakMap();
    const transformCache = new WeakMap();
    const reverseTransformCache = new WeakMap();
    function promisifyRequest(request) {
        const promise = new Promise((resolve, reject) => {
            const unlisten = () => {
                request.removeEventListener('success', success);
                request.removeEventListener('error', error);
            };
            const success = () => {
                resolve(wrap(request.result));
                unlisten();
            };
            const error = () => {
                reject(request.error);
                unlisten();
            };
            request.addEventListener('success', success);
            request.addEventListener('error', error);
        });
        promise
            .then((value) => {
            // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
            // (see wrapFunction).
            if (value instanceof IDBCursor) {
                cursorRequestMap.set(value, request);
            }
            // Catching to avoid "Uncaught Promise exceptions"
        })
            .catch(() => { });
        // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
        // is because we create many promises from a single IDBRequest.
        reverseTransformCache.set(promise, request);
        return promise;
    }
    function cacheDonePromiseForTransaction(tx) {
        // Early bail if we've already created a done promise for this transaction.
        if (transactionDoneMap.has(tx))
            return;
        const done = new Promise((resolve, reject) => {
            const unlisten = () => {
                tx.removeEventListener('complete', complete);
                tx.removeEventListener('error', error);
                tx.removeEventListener('abort', error);
            };
            const complete = () => {
                resolve();
                unlisten();
            };
            const error = () => {
                reject(tx.error || new DOMException('AbortError', 'AbortError'));
                unlisten();
            };
            tx.addEventListener('complete', complete);
            tx.addEventListener('error', error);
            tx.addEventListener('abort', error);
        });
        // Cache it for later retrieval.
        transactionDoneMap.set(tx, done);
    }
    let idbProxyTraps = {
        get(target, prop, receiver) {
            if (target instanceof IDBTransaction) {
                // Special handling for transaction.done.
                if (prop === 'done')
                    return transactionDoneMap.get(target);
                // Polyfill for objectStoreNames because of Edge.
                if (prop === 'objectStoreNames') {
                    return target.objectStoreNames || transactionStoreNamesMap.get(target);
                }
                // Make tx.store return the only store in the transaction, or undefined if there are many.
                if (prop === 'store') {
                    return receiver.objectStoreNames[1]
                        ? undefined
                        : receiver.objectStore(receiver.objectStoreNames[0]);
                }
            }
            // Else transform whatever we get back.
            return wrap(target[prop]);
        },
        set(target, prop, value) {
            target[prop] = value;
            return true;
        },
        has(target, prop) {
            if (target instanceof IDBTransaction &&
                (prop === 'done' || prop === 'store')) {
                return true;
            }
            return prop in target;
        },
    };
    function replaceTraps(callback) {
        idbProxyTraps = callback(idbProxyTraps);
    }
    function wrapFunction(func) {
        // Due to expected object equality (which is enforced by the caching in `wrap`), we
        // only create one new func per func.
        // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
        if (func === IDBDatabase.prototype.transaction &&
            !('objectStoreNames' in IDBTransaction.prototype)) {
            return function (storeNames, ...args) {
                const tx = func.call(unwrap(this), storeNames, ...args);
                transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
                return wrap(tx);
            };
        }
        // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
        // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
        // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
        // with real promises, so each advance methods returns a new promise for the cursor object, or
        // undefined if the end of the cursor has been reached.
        if (getCursorAdvanceMethods().includes(func)) {
            return function (...args) {
                // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
                // the original object.
                func.apply(unwrap(this), args);
                return wrap(cursorRequestMap.get(this));
            };
        }
        return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            return wrap(func.apply(unwrap(this), args));
        };
    }
    function transformCachableValue(value) {
        if (typeof value === 'function')
            return wrapFunction(value);
        // This doesn't return, it just creates a 'done' promise for the transaction,
        // which is later returned for transaction.done (see idbObjectHandler).
        if (value instanceof IDBTransaction)
            cacheDonePromiseForTransaction(value);
        if (instanceOfAny(value, getIdbProxyableTypes()))
            return new Proxy(value, idbProxyTraps);
        // Return the same value back if we're not going to transform it.
        return value;
    }
    function wrap(value) {
        // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
        // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
        if (value instanceof IDBRequest)
            return promisifyRequest(value);
        // If we've already transformed this value before, reuse the transformed value.
        // This is faster, but it also provides object equality.
        if (transformCache.has(value))
            return transformCache.get(value);
        const newValue = transformCachableValue(value);
        // Not all types are transformed.
        // These may be primitive types, so they can't be WeakMap keys.
        if (newValue !== value) {
            transformCache.set(value, newValue);
            reverseTransformCache.set(newValue, value);
        }
        return newValue;
    }
    const unwrap = (value) => reverseTransformCache.get(value);

    /**
     * Open a database.
     *
     * @param name Name of the database.
     * @param version Schema version.
     * @param callbacks Additional callbacks.
     */
    function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
        const request = indexedDB.open(name, version);
        const openPromise = wrap(request);
        if (upgrade) {
            request.addEventListener('upgradeneeded', (event) => {
                upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
            });
        }
        if (blocked) {
            request.addEventListener('blocked', (event) => blocked(
            // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
            event.oldVersion, event.newVersion, event));
        }
        openPromise
            .then((db) => {
            if (terminated)
                db.addEventListener('close', () => terminated());
            if (blocking) {
                db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
            }
        })
            .catch(() => { });
        return openPromise;
    }

    const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
    const writeMethods = ['put', 'add', 'delete', 'clear'];
    const cachedMethods = new Map();
    function getMethod(target, prop) {
        if (!(target instanceof IDBDatabase &&
            !(prop in target) &&
            typeof prop === 'string')) {
            return;
        }
        if (cachedMethods.get(prop))
            return cachedMethods.get(prop);
        const targetFuncName = prop.replace(/FromIndex$/, '');
        const useIndex = prop !== targetFuncName;
        const isWrite = writeMethods.includes(targetFuncName);
        if (
        // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
        !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
            !(isWrite || readMethods.includes(targetFuncName))) {
            return;
        }
        const method = async function (storeName, ...args) {
            // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
            const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
            let target = tx.store;
            if (useIndex)
                target = target.index(args.shift());
            // Must reject if op rejects.
            // If it's a write operation, must reject if tx.done rejects.
            // Must reject with op rejection first.
            // Must resolve with op value.
            // Must handle both promises (no unhandled rejections)
            return (await Promise.all([
                target[targetFuncName](...args),
                isWrite && tx.done,
            ]))[0];
        };
        cachedMethods.set(prop, method);
        return method;
    }
    replaceTraps((oldTraps) => ({
        ...oldTraps,
        get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
        has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
    }));

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PlatformLoggerServiceImpl {
        constructor(container) {
            this.container = container;
        }
        // In initial implementation, this will be called by installations on
        // auth token refresh, and installations will send this string.
        getPlatformInfoString() {
            const providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
                .map(provider => {
                if (isVersionServiceProvider(provider)) {
                    const service = provider.getImmediate();
                    return `${service.library}/${service.version}`;
                }
                else {
                    return null;
                }
            })
                .filter(logString => logString)
                .join(' ');
        }
    }
    /**
     *
     * @param provider check if this provider provides a VersionService
     *
     * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
     * provides VersionService. The provider is not necessarily a 'app-version'
     * provider.
     */
    function isVersionServiceProvider(provider) {
        const component = provider.getComponent();
        return (component === null || component === undefined ? undefined : component.type) === "VERSION" /* ComponentType.VERSION */;
    }

    const name$q = "@firebase/app";
    const version$1$1 = "0.10.18";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logger$1 = new Logger$2('@firebase/app');

    const name$p = "@firebase/app-compat";

    const name$o = "@firebase/analytics-compat";

    const name$n = "@firebase/analytics";

    const name$m = "@firebase/app-check-compat";

    const name$l = "@firebase/app-check";

    const name$k = "@firebase/auth";

    const name$j = "@firebase/auth-compat";

    const name$i = "@firebase/database";

    const name$h = "@firebase/data-connect";

    const name$g = "@firebase/database-compat";

    const name$f = "@firebase/functions";

    const name$e = "@firebase/functions-compat";

    const name$d = "@firebase/installations";

    const name$c = "@firebase/installations-compat";

    const name$b = "@firebase/messaging";

    const name$a = "@firebase/messaging-compat";

    const name$9 = "@firebase/performance";

    const name$8 = "@firebase/performance-compat";

    const name$7 = "@firebase/remote-config";

    const name$6 = "@firebase/remote-config-compat";

    const name$5 = "@firebase/storage";

    const name$4 = "@firebase/storage-compat";

    const name$3 = "@firebase/firestore";

    const name$2$1 = "@firebase/vertexai";

    const name$1$1 = "@firebase/firestore-compat";

    const name$r = "firebase";
    const version$4 = "11.2.0";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The default app name
     *
     * @internal
     */
    const DEFAULT_ENTRY_NAME = '[DEFAULT]';
    const PLATFORM_LOG_STRING = {
        [name$q]: 'fire-core',
        [name$p]: 'fire-core-compat',
        [name$n]: 'fire-analytics',
        [name$o]: 'fire-analytics-compat',
        [name$l]: 'fire-app-check',
        [name$m]: 'fire-app-check-compat',
        [name$k]: 'fire-auth',
        [name$j]: 'fire-auth-compat',
        [name$i]: 'fire-rtdb',
        [name$h]: 'fire-data-connect',
        [name$g]: 'fire-rtdb-compat',
        [name$f]: 'fire-fn',
        [name$e]: 'fire-fn-compat',
        [name$d]: 'fire-iid',
        [name$c]: 'fire-iid-compat',
        [name$b]: 'fire-fcm',
        [name$a]: 'fire-fcm-compat',
        [name$9]: 'fire-perf',
        [name$8]: 'fire-perf-compat',
        [name$7]: 'fire-rc',
        [name$6]: 'fire-rc-compat',
        [name$5]: 'fire-gcs',
        [name$4]: 'fire-gcs-compat',
        [name$3]: 'fire-fst',
        [name$1$1]: 'fire-fst-compat',
        [name$2$1]: 'fire-vertex',
        'fire-js': 'fire-js', // Platform identifier for JS SDK.
        [name$r]: 'fire-js-all'
    };

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @internal
     */
    const _apps = new Map();
    /**
     * @internal
     */
    const _serverApps = new Map();
    /**
     * Registered components.
     *
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const _components = new Map();
    /**
     * @param component - the component being added to this app's container
     *
     * @internal
     */
    function _addComponent(app, component) {
        try {
            app.container.addComponent(component);
        }
        catch (e) {
            logger$1.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
        }
    }
    /**
     *
     * @param component - the component to register
     * @returns whether or not the component is registered successfully
     *
     * @internal
     */
    function _registerComponent(component) {
        const componentName = component.name;
        if (_components.has(componentName)) {
            logger$1.debug(`There were multiple attempts to register component ${componentName}.`);
            return false;
        }
        _components.set(componentName, component);
        // add the component to existing app instances
        for (const app of _apps.values()) {
            _addComponent(app, component);
        }
        for (const serverApp of _serverApps.values()) {
            _addComponent(serverApp, component);
        }
        return true;
    }
    /**
     *
     * @param app - FirebaseApp instance
     * @param name - service name
     *
     * @returns the provider for the service with the matching name
     *
     * @internal
     */
    function _getProvider(app, name) {
        const heartbeatController = app.container
            .getProvider('heartbeat')
            .getImmediate({ optional: true });
        if (heartbeatController) {
            void heartbeatController.triggerHeartbeat();
        }
        return app.container.getProvider(name);
    }
    /**
     *
     * @param obj - an object of type FirebaseApp.
     *
     * @returns true if the provided object is of type FirebaseServerAppImpl.
     *
     * @internal
     */
    function _isFirebaseServerApp(obj) {
        return obj.settings !== undefined;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const ERRORS = {
        ["no-app" /* AppError.NO_APP */]: "No Firebase App '{$appName}' has been created - " +
            'call initializeApp() first',
        ["bad-app-name" /* AppError.BAD_APP_NAME */]: "Illegal App name: '{$appName}'",
        ["duplicate-app" /* AppError.DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
        ["app-deleted" /* AppError.APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
        ["server-app-deleted" /* AppError.SERVER_APP_DELETED */]: 'Firebase Server App has been deleted',
        ["no-options" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',
        ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.',
        ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',
        ["idb-open" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
        ["idb-get" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
        ["idb-set" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
        ["idb-delete" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',
        ["finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',
        ["invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */]: 'FirebaseServerApp is not for use in browser environments.'
    };
    const ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FirebaseAppImpl {
        constructor(options, config, container) {
            this._isDeleted = false;
            this._options = Object.assign({}, options);
            this._config = Object.assign({}, config);
            this._name = config.name;
            this._automaticDataCollectionEnabled =
                config.automaticDataCollectionEnabled;
            this._container = container;
            this.container.addComponent(new Component('app', () => this, "PUBLIC" /* ComponentType.PUBLIC */));
        }
        get automaticDataCollectionEnabled() {
            this.checkDestroyed();
            return this._automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(val) {
            this.checkDestroyed();
            this._automaticDataCollectionEnabled = val;
        }
        get name() {
            this.checkDestroyed();
            return this._name;
        }
        get options() {
            this.checkDestroyed();
            return this._options;
        }
        get config() {
            this.checkDestroyed();
            return this._config;
        }
        get container() {
            return this._container;
        }
        get isDeleted() {
            return this._isDeleted;
        }
        set isDeleted(val) {
            this._isDeleted = val;
        }
        /**
         * This function will throw an Error if the App has already been deleted -
         * use before performing API actions on the App.
         */
        checkDestroyed() {
            if (this.isDeleted) {
                throw ERROR_FACTORY.create("app-deleted" /* AppError.APP_DELETED */, { appName: this._name });
            }
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The current SDK version.
     *
     * @public
     */
    const SDK_VERSION$1 = version$4;
    function initializeApp(_options, rawConfig = {}) {
        let options = _options;
        if (typeof rawConfig !== 'object') {
            const name = rawConfig;
            rawConfig = { name };
        }
        const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
        const name = config.name;
        if (typeof name !== 'string' || !name) {
            throw ERROR_FACTORY.create("bad-app-name" /* AppError.BAD_APP_NAME */, {
                appName: String(name)
            });
        }
        options || (options = getDefaultAppConfig());
        if (!options) {
            throw ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */);
        }
        const existingApp = _apps.get(name);
        if (existingApp) {
            // return the existing app if options and config deep equal the ones in the existing app.
            if (deepEqual(options, existingApp.options) &&
                deepEqual(config, existingApp.config)) {
                return existingApp;
            }
            else {
                throw ERROR_FACTORY.create("duplicate-app" /* AppError.DUPLICATE_APP */, { appName: name });
            }
        }
        const container = new ComponentContainer(name);
        for (const component of _components.values()) {
            container.addComponent(component);
        }
        const newApp = new FirebaseAppImpl(options, config, container);
        _apps.set(name, newApp);
        return newApp;
    }
    /**
     * Retrieves a {@link @firebase/app#FirebaseApp} instance.
     *
     * When called with no arguments, the default app is returned. When an app name
     * is provided, the app corresponding to that name is returned.
     *
     * An exception is thrown if the app being retrieved has not yet been
     * initialized.
     *
     * @example
     * ```javascript
     * // Return the default app
     * const app = getApp();
     * ```
     *
     * @example
     * ```javascript
     * // Return a named app
     * const otherApp = getApp("otherApp");
     * ```
     *
     * @param name - Optional name of the app to return. If no name is
     *   provided, the default is `"[DEFAULT]"`.
     *
     * @returns The app corresponding to the provided app name.
     *   If no app name is provided, the default app is returned.
     *
     * @public
     */
    function getApp(name = DEFAULT_ENTRY_NAME) {
        const app = _apps.get(name);
        if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {
            return initializeApp();
        }
        if (!app) {
            throw ERROR_FACTORY.create("no-app" /* AppError.NO_APP */, { appName: name });
        }
        return app;
    }
    /**
     * Registers a library's name and version for platform logging purposes.
     * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
     * @param version - Current version of that library.
     * @param variant - Bundle variant, e.g., node, rn, etc.
     *
     * @public
     */
    function registerVersion(libraryKeyOrName, version, variant) {
        var _a;
        // TODO: We can use this check to whitelist strings when/if we set up
        // a good whitelist system.
        let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== undefined ? _a : libraryKeyOrName;
        if (variant) {
            library += `-${variant}`;
        }
        const libraryMismatch = library.match(/\s|\//);
        const versionMismatch = version.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
            const warning = [
                `Unable to register library "${library}" with version "${version}":`
            ];
            if (libraryMismatch) {
                warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
            }
            if (libraryMismatch && versionMismatch) {
                warning.push('and');
            }
            if (versionMismatch) {
                warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
            }
            logger$1.warn(warning.join(' '));
            return;
        }
        _registerComponent(new Component(`${library}-version`, () => ({ library, version }), "VERSION" /* ComponentType.VERSION */));
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DB_NAME$1 = 'firebase-heartbeat-database';
    const DB_VERSION$1 = 1;
    const STORE_NAME = 'firebase-heartbeat-store';
    let dbPromise = null;
    function getDbPromise() {
        if (!dbPromise) {
            dbPromise = openDB(DB_NAME$1, DB_VERSION$1, {
                upgrade: (db, oldVersion) => {
                    // We don't use 'break' in this switch statement, the fall-through
                    // behavior is what we want, because if there are multiple versions between
                    // the old version and the current version, we want ALL the migrations
                    // that correspond to those versions to run, not only the last one.
                    // eslint-disable-next-line default-case
                    switch (oldVersion) {
                        case 0:
                            try {
                                db.createObjectStore(STORE_NAME);
                            }
                            catch (e) {
                                // Safari/iOS browsers throw occasional exceptions on
                                // db.createObjectStore() that may be a bug. Avoid blocking
                                // the rest of the app functionality.
                                console.warn(e);
                            }
                    }
                }
            }).catch(e => {
                throw ERROR_FACTORY.create("idb-open" /* AppError.IDB_OPEN */, {
                    originalErrorMessage: e.message
                });
            });
        }
        return dbPromise;
    }
    async function readHeartbeatsFromIndexedDB(app) {
        try {
            const db = await getDbPromise();
            const tx = db.transaction(STORE_NAME);
            const result = await tx.objectStore(STORE_NAME).get(computeKey(app));
            // We already have the value but tx.done can throw,
            // so we need to await it here to catch errors
            await tx.done;
            return result;
        }
        catch (e) {
            if (e instanceof FirebaseError) {
                logger$1.warn(e.message);
            }
            else {
                const idbGetError = ERROR_FACTORY.create("idb-get" /* AppError.IDB_GET */, {
                    originalErrorMessage: e === null || e === undefined ? undefined : e.message
                });
                logger$1.warn(idbGetError.message);
            }
        }
    }
    async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
        try {
            const db = await getDbPromise();
            const tx = db.transaction(STORE_NAME, 'readwrite');
            const objectStore = tx.objectStore(STORE_NAME);
            await objectStore.put(heartbeatObject, computeKey(app));
            await tx.done;
        }
        catch (e) {
            if (e instanceof FirebaseError) {
                logger$1.warn(e.message);
            }
            else {
                const idbGetError = ERROR_FACTORY.create("idb-set" /* AppError.IDB_WRITE */, {
                    originalErrorMessage: e === null || e === undefined ? undefined : e.message
                });
                logger$1.warn(idbGetError.message);
            }
        }
    }
    function computeKey(app) {
        return `${app.name}!${app.options.appId}`;
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const MAX_HEADER_BYTES = 1024;
    // 30 days
    const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;
    class HeartbeatServiceImpl {
        constructor(container) {
            this.container = container;
            /**
             * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
             * the header string.
             * Stores one record per date. This will be consolidated into the standard
             * format of one record per user agent string before being sent as a header.
             * Populated from indexedDB when the controller is instantiated and should
             * be kept in sync with indexedDB.
             * Leave public for easier testing.
             */
            this._heartbeatsCache = null;
            const app = this.container.getProvider('app').getImmediate();
            this._storage = new HeartbeatStorageImpl(app);
            this._heartbeatsCachePromise = this._storage.read().then(result => {
                this._heartbeatsCache = result;
                return result;
            });
        }
        /**
         * Called to report a heartbeat. The function will generate
         * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
         * to IndexedDB.
         * Note that we only store one heartbeat per day. So if a heartbeat for today is
         * already logged, subsequent calls to this function in the same day will be ignored.
         */
        async triggerHeartbeat() {
            var _a, _b;
            try {
                const platformLogger = this.container
                    .getProvider('platform-logger')
                    .getImmediate();
                // This is the "Firebase user agent" string from the platform logger
                // service, not the browser user agent.
                const agent = platformLogger.getPlatformInfoString();
                const date = getUTCDateString();
                if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {
                    this._heartbeatsCache = await this._heartbeatsCachePromise;
                    // If we failed to construct a heartbeats cache, then return immediately.
                    if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {
                        return;
                    }
                }
                // Do not store a heartbeat if one is already stored for this day
                // or if a header has already been sent today.
                if (this._heartbeatsCache.lastSentHeartbeatDate === date ||
                    this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {
                    return;
                }
                else {
                    // There is no entry for this date. Create one.
                    this._heartbeatsCache.heartbeats.push({ date, agent });
                }
                // Remove entries older than 30 days.
                this._heartbeatsCache.heartbeats =
                    this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {
                        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
                        const now = Date.now();
                        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
                    });
                return this._storage.overwrite(this._heartbeatsCache);
            }
            catch (e) {
                logger$1.warn(e);
            }
        }
        /**
         * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
         * It also clears all heartbeats from memory as well as in IndexedDB.
         *
         * NOTE: Consuming product SDKs should not send the header if this method
         * returns an empty string.
         */
        async getHeartbeatsHeader() {
            var _a;
            try {
                if (this._heartbeatsCache === null) {
                    await this._heartbeatsCachePromise;
                }
                // If it's still null or the array is empty, there is no data to send.
                if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||
                    this._heartbeatsCache.heartbeats.length === 0) {
                    return '';
                }
                const date = getUTCDateString();
                // Extract as many heartbeats from the cache as will fit under the size limit.
                const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
                const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
                // Store last sent date to prevent another being logged/sent for the same day.
                this._heartbeatsCache.lastSentHeartbeatDate = date;
                if (unsentEntries.length > 0) {
                    // Store any unsent entries if they exist.
                    this._heartbeatsCache.heartbeats = unsentEntries;
                    // This seems more likely than emptying the array (below) to lead to some odd state
                    // since the cache isn't empty and this will be called again on the next request,
                    // and is probably safest if we await it.
                    await this._storage.overwrite(this._heartbeatsCache);
                }
                else {
                    this._heartbeatsCache.heartbeats = [];
                    // Do not wait for this, to reduce latency.
                    void this._storage.overwrite(this._heartbeatsCache);
                }
                return headerString;
            }
            catch (e) {
                logger$1.warn(e);
                return '';
            }
        }
    }
    function getUTCDateString() {
        const today = new Date();
        // Returns date format 'YYYY-MM-DD'
        return today.toISOString().substring(0, 10);
    }
    function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
        // Heartbeats grouped by user agent in the standard format to be sent in
        // the header.
        const heartbeatsToSend = [];
        // Single date format heartbeats that are not sent.
        let unsentEntries = heartbeatsCache.slice();
        for (const singleDateHeartbeat of heartbeatsCache) {
            // Look for an existing entry with the same user agent.
            const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);
            if (!heartbeatEntry) {
                // If no entry for this user agent exists, create one.
                heartbeatsToSend.push({
                    agent: singleDateHeartbeat.agent,
                    dates: [singleDateHeartbeat.date]
                });
                if (countBytes(heartbeatsToSend) > maxSize) {
                    // If the header would exceed max size, remove the added heartbeat
                    // entry and stop adding to the header.
                    heartbeatsToSend.pop();
                    break;
                }
            }
            else {
                heartbeatEntry.dates.push(singleDateHeartbeat.date);
                // If the header would exceed max size, remove the added date
                // and stop adding to the header.
                if (countBytes(heartbeatsToSend) > maxSize) {
                    heartbeatEntry.dates.pop();
                    break;
                }
            }
            // Pop unsent entry from queue. (Skipped if adding the entry exceeded
            // quota and the loop breaks early.)
            unsentEntries = unsentEntries.slice(1);
        }
        return {
            heartbeatsToSend,
            unsentEntries
        };
    }
    class HeartbeatStorageImpl {
        constructor(app) {
            this.app = app;
            this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
        }
        async runIndexedDBEnvironmentCheck() {
            if (!isIndexedDBAvailable()) {
                return false;
            }
            else {
                return validateIndexedDBOpenable()
                    .then(() => true)
                    .catch(() => false);
            }
        }
        /**
         * Read all heartbeats.
         */
        async read() {
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
                return { heartbeats: [] };
            }
            else {
                const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
                if (idbHeartbeatObject === null || idbHeartbeatObject === undefined ? undefined : idbHeartbeatObject.heartbeats) {
                    return idbHeartbeatObject;
                }
                else {
                    return { heartbeats: [] };
                }
            }
        }
        // overwrite the storage with the provided heartbeats
        async overwrite(heartbeatsObject) {
            var _a;
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
                return;
            }
            else {
                const existingHeartbeatsObject = await this.read();
                return writeHeartbeatsToIndexedDB(this.app, {
                    lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== undefined ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                    heartbeats: heartbeatsObject.heartbeats
                });
            }
        }
        // add heartbeats
        async add(heartbeatsObject) {
            var _a;
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
                return;
            }
            else {
                const existingHeartbeatsObject = await this.read();
                return writeHeartbeatsToIndexedDB(this.app, {
                    lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== undefined ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                    heartbeats: [
                        ...existingHeartbeatsObject.heartbeats,
                        ...heartbeatsObject.heartbeats
                    ]
                });
            }
        }
    }
    /**
     * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
     * in a platform logging header JSON object, stringified, and converted
     * to base 64.
     */
    function countBytes(heartbeatsCache) {
        // base64 has a restricted set of characters, all of which should be 1 byte.
        return base64urlEncodeWithoutPadding(
        // heartbeatsCache wrapper properties
        JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(variant) {
        _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
        _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
        // Register `app` package.
        registerVersion(name$q, version$1$1, variant);
        // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
        registerVersion(name$q, version$1$1, 'esm2017');
        // Register platform SDK identifier (no version).
        registerVersion('fire-js', '');
    }

    /**
     * Firebase App
     *
     * @remarks This package coordinates the communication between the different Firebase components
     * @packageDocumentation
     */
    registerCoreComponents('');

    var name$2 = "firebase";
    var version$3 = "11.2.0";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerVersion(name$2, version$3, 'app');

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A container for all of the Logger instances
     */
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel$1;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel$1 || (LogLevel$1 = {}));
    const levelStringToEnum$1 = {
        'debug': LogLevel$1.DEBUG,
        'verbose': LogLevel$1.VERBOSE,
        'info': LogLevel$1.INFO,
        'warn': LogLevel$1.WARN,
        'error': LogLevel$1.ERROR,
        'silent': LogLevel$1.SILENT
    };
    /**
     * The default log level
     */
    const defaultLogLevel$1 = LogLevel$1.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    const ConsoleMethod$1 = {
        [LogLevel$1.DEBUG]: 'log',
        [LogLevel$1.VERBOSE]: 'log',
        [LogLevel$1.INFO]: 'info',
        [LogLevel$1.WARN]: 'warn',
        [LogLevel$1.ERROR]: 'error'
    };
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    const defaultLogHandler$1 = (instance, logType, ...args) => {
        if (logType < instance.logLevel) {
            return;
        }
        const now = new Date().toISOString();
        const method = ConsoleMethod$1[logType];
        if (method) {
            console[method](`[${now}]  ${instance.name}:`, ...args);
        }
        else {
            throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
        }
    };
    let Logger$1 = class Logger {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        constructor(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel$1;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler$1;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        get logLevel() {
            return this._logLevel;
        }
        set logLevel(val) {
            if (!(val in LogLevel$1)) {
                throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
            }
            this._logLevel = val;
        }
        // Workaround for setter/getter having to be the same type.
        setLogLevel(val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum$1[val] : val;
        }
        get logHandler() {
            return this._logHandler;
        }
        set logHandler(val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        }
        get userLogHandler() {
            return this._userLogHandler;
        }
        set userLogHandler(val) {
            this._userLogHandler = val;
        }
        /**
         * The functions below are all based on the `console` interface
         */
        debug(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel$1.DEBUG, ...args);
            this._logHandler(this, LogLevel$1.DEBUG, ...args);
        }
        log(...args) {
            this._userLogHandler &&
                this._userLogHandler(this, LogLevel$1.VERBOSE, ...args);
            this._logHandler(this, LogLevel$1.VERBOSE, ...args);
        }
        info(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel$1.INFO, ...args);
            this._logHandler(this, LogLevel$1.INFO, ...args);
        }
        warn(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel$1.WARN, ...args);
            this._logHandler(this, LogLevel$1.WARN, ...args);
        }
        error(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel$1.ERROR, ...args);
            this._logHandler(this, LogLevel$1.ERROR, ...args);
        }
    };

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol, Iterator */


    function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    function _prodErrorMap() {
        // We will include this one message in the prod error map since by the very
        // nature of this error, developers will never be able to see the message
        // using the debugErrorMap (which is installed during auth initialization).
        return {
            ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +
                'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +
                'starting any other Firebase SDK.'
        };
    }
    /**
     * A minimal error map with all verbose error messages stripped.
     *
     * See discussion at {@link AuthErrorMap}
     *
     * @public
     */
    const prodErrorMap = _prodErrorMap;
    const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logClient$1 = new Logger$1('@firebase/auth');
    function _logWarn(msg, ...args) {
        if (logClient$1.logLevel <= LogLevel$1.WARN) {
            logClient$1.warn(`Auth (${SDK_VERSION$1}): ${msg}`, ...args);
        }
    }
    function _logError(msg, ...args) {
        if (logClient$1.logLevel <= LogLevel$1.ERROR) {
            logClient$1.error(`Auth (${SDK_VERSION$1}): ${msg}`, ...args);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _fail(authOrCode, ...rest) {
        throw createErrorInternal(authOrCode, ...rest);
    }
    function _createError(authOrCode, ...rest) {
        return createErrorInternal(authOrCode, ...rest);
    }
    function _errorWithCustomMessage(auth, code, message) {
        const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });
        const factory = new ErrorFactory('auth', 'Firebase', errorMap);
        return factory.create(code, {
            appName: auth.name
        });
    }
    function _serverAppCurrentUserOperationNotSupportedError(auth) {
        return _errorWithCustomMessage(auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');
    }
    function createErrorInternal(authOrCode, ...rest) {
        if (typeof authOrCode !== 'string') {
            const code = rest[0];
            const fullParams = [...rest.slice(1)];
            if (fullParams[0]) {
                fullParams[0].appName = authOrCode.name;
            }
            return authOrCode._errorFactory.create(code, ...fullParams);
        }
        return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
    }
    function _assert(assertion, authOrCode, ...rest) {
        if (!assertion) {
            throw createErrorInternal(authOrCode, ...rest);
        }
    }
    /**
     * Unconditionally fails, throwing an internal error with the given message.
     *
     * @param failure type of failure encountered
     * @throws Error
     */
    function debugFail(failure) {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        const message = `INTERNAL ASSERTION FAILED: ` + failure;
        _logError(message);
        // NOTE: We don't use FirebaseError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw new Error(message);
    }
    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * @param assertion
     * @param message
     */
    function debugAssert(assertion, message) {
        if (!assertion) {
            debugFail(message);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getCurrentUrl() {
        var _a;
        return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === undefined ? undefined : _a.href)) || '';
    }
    function _isHttpOrHttps() {
        return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
    }
    function _getCurrentScheme() {
        var _a;
        return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === undefined ? undefined : _a.protocol)) || null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determine whether the browser is working online
     */
    function _isOnline() {
        if (typeof navigator !== 'undefined' &&
            navigator &&
            'onLine' in navigator &&
            typeof navigator.onLine === 'boolean' &&
            // Apply only for traditional web apps and Chrome extensions.
            // This is especially true for Cordova apps which have unreliable
            // navigator.onLine behavior unless cordova-plugin-network-information is
            // installed which overwrites the native navigator.onLine value and
            // defines navigator.connection.
            (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {
            return navigator.onLine;
        }
        // If we can't determine the state, assume it is online.
        return true;
    }
    function _getUserLanguage() {
        if (typeof navigator === 'undefined') {
            return null;
        }
        const navigatorLanguage = navigator;
        return (
        // Most reliable, but only supported in Chrome/Firefox.
        (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
            // Supported in most browsers, but returns the language of the browser
            // UI, not the language set in browser settings.
            navigatorLanguage.language ||
            // Couldn't determine language.
            null);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A structure to help pick between a range of long and short delay durations
     * depending on the current environment. In general, the long delay is used for
     * mobile environments whereas short delays are used for desktop environments.
     */
    class Delay {
        constructor(shortDelay, longDelay) {
            this.shortDelay = shortDelay;
            this.longDelay = longDelay;
            // Internal error when improperly initialized.
            debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
            this.isMobile = isMobileCordova() || isReactNative();
        }
        get() {
            if (!_isOnline()) {
                // Pick the shorter timeout.
                return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);
            }
            // If running in a mobile environment, return the long delay, otherwise
            // return the short delay.
            // This could be improved in the future to dynamically change based on other
            // variables instead of just reading the current environment.
            return this.isMobile ? this.longDelay : this.shortDelay;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _emulatorUrl(config, path) {
        debugAssert(config.emulator, 'Emulator should always be set here');
        const { url } = config.emulator;
        if (!path) {
            return url;
        }
        return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FetchProvider {
        static initialize(fetchImpl, headersImpl, responseImpl) {
            this.fetchImpl = fetchImpl;
            if (headersImpl) {
                this.headersImpl = headersImpl;
            }
            if (responseImpl) {
                this.responseImpl = responseImpl;
            }
        }
        static fetch() {
            if (this.fetchImpl) {
                return this.fetchImpl;
            }
            if (typeof self !== 'undefined' && 'fetch' in self) {
                return self.fetch;
            }
            if (typeof globalThis !== 'undefined' && globalThis.fetch) {
                return globalThis.fetch;
            }
            if (typeof fetch !== 'undefined') {
                return fetch;
            }
            debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
        static headers() {
            if (this.headersImpl) {
                return this.headersImpl;
            }
            if (typeof self !== 'undefined' && 'Headers' in self) {
                return self.Headers;
            }
            if (typeof globalThis !== 'undefined' && globalThis.Headers) {
                return globalThis.Headers;
            }
            if (typeof Headers !== 'undefined') {
                return Headers;
            }
            debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
        static response() {
            if (this.responseImpl) {
                return this.responseImpl;
            }
            if (typeof self !== 'undefined' && 'Response' in self) {
                return self.Response;
            }
            if (typeof globalThis !== 'undefined' && globalThis.Response) {
                return globalThis.Response;
            }
            if (typeof Response !== 'undefined') {
                return Response;
            }
            debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Map from errors returned by the server to errors to developer visible errors
     */
    const SERVER_ERROR_MAP = {
        // Custom token errors.
        ["CREDENTIAL_MISMATCH" /* ServerError.CREDENTIAL_MISMATCH */]: "custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_CUSTOM_TOKEN" /* ServerError.MISSING_CUSTOM_TOKEN */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
        // Create Auth URI errors.
        ["INVALID_IDENTIFIER" /* ServerError.INVALID_IDENTIFIER */]: "invalid-email" /* AuthErrorCode.INVALID_EMAIL */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_CONTINUE_URI" /* ServerError.MISSING_CONTINUE_URI */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
        // Sign in with email and password errors (some apply to sign up too).
        ["INVALID_PASSWORD" /* ServerError.INVALID_PASSWORD */]: "wrong-password" /* AuthErrorCode.INVALID_PASSWORD */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_PASSWORD" /* ServerError.MISSING_PASSWORD */]: "missing-password" /* AuthErrorCode.MISSING_PASSWORD */,
        // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
        // invalid.
        ["INVALID_LOGIN_CREDENTIALS" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
        // Sign up with email and password errors.
        ["EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */]: "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */,
        ["PASSWORD_LOGIN_DISABLED" /* ServerError.PASSWORD_LOGIN_DISABLED */]: "operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,
        // Verify assertion for sign in with credential errors:
        ["INVALID_IDP_RESPONSE" /* ServerError.INVALID_IDP_RESPONSE */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
        ["INVALID_PENDING_TOKEN" /* ServerError.INVALID_PENDING_TOKEN */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
        ["FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_REQ_TYPE" /* ServerError.MISSING_REQ_TYPE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
        // Send Password reset email errors:
        ["EMAIL_NOT_FOUND" /* ServerError.EMAIL_NOT_FOUND */]: "user-not-found" /* AuthErrorCode.USER_DELETED */,
        ["RESET_PASSWORD_EXCEED_LIMIT" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,
        ["EXPIRED_OOB_CODE" /* ServerError.EXPIRED_OOB_CODE */]: "expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */,
        ["INVALID_OOB_CODE" /* ServerError.INVALID_OOB_CODE */]: "invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_OOB_CODE" /* ServerError.MISSING_OOB_CODE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
        // Operations that require ID token in request:
        ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: "requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,
        ["INVALID_ID_TOKEN" /* ServerError.INVALID_ID_TOKEN */]: "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */,
        ["TOKEN_EXPIRED" /* ServerError.TOKEN_EXPIRED */]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */,
        ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */,
        // Other errors.
        ["TOO_MANY_ATTEMPTS_TRY_LATER" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,
        ["PASSWORD_DOES_NOT_MEET_REQUIREMENTS" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: "password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,
        // Phone Auth related errors.
        ["INVALID_CODE" /* ServerError.INVALID_CODE */]: "invalid-verification-code" /* AuthErrorCode.INVALID_CODE */,
        ["INVALID_SESSION_INFO" /* ServerError.INVALID_SESSION_INFO */]: "invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */,
        ["INVALID_TEMPORARY_PROOF" /* ServerError.INVALID_TEMPORARY_PROOF */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
        ["MISSING_SESSION_INFO" /* ServerError.MISSING_SESSION_INFO */]: "missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */,
        ["SESSION_EXPIRED" /* ServerError.SESSION_EXPIRED */]: "code-expired" /* AuthErrorCode.CODE_EXPIRED */,
        // Other action code errors when additional settings passed.
        // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
        // This is OK as this error will be caught by client side validation.
        ["MISSING_ANDROID_PACKAGE_NAME" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,
        ["UNAUTHORIZED_DOMAIN" /* ServerError.UNAUTHORIZED_DOMAIN */]: "unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,
        // getProjectConfig errors when clientId is passed.
        ["INVALID_OAUTH_CLIENT_ID" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: "invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,
        // User actions (sign-up or deletion) disabled errors.
        ["ADMIN_ONLY_OPERATION" /* ServerError.ADMIN_ONLY_OPERATION */]: "admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,
        // Multi factor related errors.
        ["INVALID_MFA_PENDING_CREDENTIAL" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: "invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */,
        ["MFA_ENROLLMENT_NOT_FOUND" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: "multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,
        ["MISSING_MFA_ENROLLMENT_ID" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */,
        ["MISSING_MFA_PENDING_CREDENTIAL" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: "missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */,
        ["SECOND_FACTOR_EXISTS" /* ServerError.SECOND_FACTOR_EXISTS */]: "second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,
        ["SECOND_FACTOR_LIMIT_EXCEEDED" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: "maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,
        // Blocking functions related errors.
        ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
        // Recaptcha related errors.
        ["RECAPTCHA_NOT_ENABLED" /* ServerError.RECAPTCHA_NOT_ENABLED */]: "recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,
        ["MISSING_RECAPTCHA_TOKEN" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: "missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,
        ["INVALID_RECAPTCHA_TOKEN" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: "invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,
        ["INVALID_RECAPTCHA_ACTION" /* ServerError.INVALID_RECAPTCHA_ACTION */]: "invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,
        ["MISSING_CLIENT_TYPE" /* ServerError.MISSING_CLIENT_TYPE */]: "missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */,
        ["MISSING_RECAPTCHA_VERSION" /* ServerError.MISSING_RECAPTCHA_VERSION */]: "missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,
        ["INVALID_RECAPTCHA_VERSION" /* ServerError.INVALID_RECAPTCHA_VERSION */]: "invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,
        ["INVALID_REQ_TYPE" /* ServerError.INVALID_REQ_TYPE */]: "invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */
    };

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
    function _addTidIfNecessary(auth, request) {
        if (auth.tenantId && !request.tenantId) {
            return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });
        }
        return request;
    }
    async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
        return _performFetchWithErrorHandling(auth, customErrorMap, async () => {
            let body = {};
            let params = {};
            if (request) {
                if (method === "GET" /* HttpMethod.GET */) {
                    params = request;
                }
                else {
                    body = {
                        body: JSON.stringify(request)
                    };
                }
            }
            const query = querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);
            const headers = await auth._getAdditionalHeaders();
            headers["Content-Type" /* HttpHeader.CONTENT_TYPE */] = 'application/json';
            if (auth.languageCode) {
                headers["X-Firebase-Locale" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;
            }
            const fetchArgs = Object.assign({ method,
                headers }, body);
            /* Security-conscious server-side frameworks tend to have built in mitigations for referrer
               problems". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on
               'RequestInitializerDict' is not implemented."
               https://github.com/cloudflare/next-on-pages/issues/487 */
            if (!isCloudflareWorker()) {
                fetchArgs.referrerPolicy = 'no-referrer';
            }
            return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);
        });
    }
    async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
        auth._canInitEmulator = false;
        const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
        try {
            const networkTimeout = new NetworkTimeout(auth);
            const response = await Promise.race([
                fetchFn(),
                networkTimeout.promise
            ]);
            // If we've reached this point, the fetch succeeded and the networkTimeout
            // didn't throw; clear the network timeout delay so that Node won't hang
            networkTimeout.clearNetworkTimeout();
            const json = await response.json();
            if ('needConfirmation' in json) {
                throw _makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */, json);
            }
            if (response.ok && !('errorMessage' in json)) {
                return json;
            }
            else {
                const errorMessage = response.ok ? json.errorMessage : json.error.message;
                const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');
                if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {
                    throw _makeTaggedError(auth, "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);
                }
                else if (serverErrorCode === "EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */) {
                    throw _makeTaggedError(auth, "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */, json);
                }
                else if (serverErrorCode === "USER_DISABLED" /* ServerError.USER_DISABLED */) {
                    throw _makeTaggedError(auth, "user-disabled" /* AuthErrorCode.USER_DISABLED */, json);
                }
                const authError = errorMap[serverErrorCode] ||
                    serverErrorCode
                        .toLowerCase()
                        .replace(/[_\s]+/g, '-');
                if (serverErrorMessage) {
                    throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
                }
                else {
                    _fail(auth, authError);
                }
            }
        }
        catch (e) {
            if (e instanceof FirebaseError) {
                throw e;
            }
            // Changing this to a different error code will log user out when there is a network error
            // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.
            // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316
            _fail(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, { 'message': String(e) });
        }
    }
    async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
        const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);
        if ('mfaPendingCredential' in serverResponse) {
            _fail(auth, "multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */, {
                _serverResponse: serverResponse
            });
        }
        return serverResponse;
    }
    function _getFinalTarget(auth, host, path, query) {
        const base = `${host}${path}?${query}`;
        if (!auth.config.emulator) {
            return `${auth.config.apiScheme}://${base}`;
        }
        return _emulatorUrl(auth.config, base);
    }
    function _parseEnforcementState(enforcementStateStr) {
        switch (enforcementStateStr) {
            case 'ENFORCE':
                return "ENFORCE" /* EnforcementState.ENFORCE */;
            case 'AUDIT':
                return "AUDIT" /* EnforcementState.AUDIT */;
            case 'OFF':
                return "OFF" /* EnforcementState.OFF */;
            default:
                return "ENFORCEMENT_STATE_UNSPECIFIED" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;
        }
    }
    class NetworkTimeout {
        clearNetworkTimeout() {
            clearTimeout(this.timer);
        }
        constructor(auth) {
            this.auth = auth;
            // Node timers and browser timers are fundamentally incompatible, but we
            // don't care about the value here
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.timer = null;
            this.promise = new Promise((_, reject) => {
                this.timer = setTimeout(() => {
                    return reject(_createError(this.auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
                }, DEFAULT_API_TIMEOUT_MS.get());
            });
        }
    }
    function _makeTaggedError(auth, code, response) {
        const errorParams = {
            appName: auth.name
        };
        if (response.email) {
            errorParams.email = response.email;
        }
        if (response.phoneNumber) {
            errorParams.phoneNumber = response.phoneNumber;
        }
        const error = _createError(auth, code, errorParams);
        // We know customData is defined on error because errorParams is defined
        error.customData._tokenResponse = response;
        return error;
    }
    function isEnterprise(grecaptcha) {
        return (grecaptcha !== undefined &&
            grecaptcha.enterprise !== undefined);
    }
    class RecaptchaConfig {
        constructor(response) {
            /**
             * The reCAPTCHA site key.
             */
            this.siteKey = '';
            /**
             * The list of providers and their enablement status for reCAPTCHA Enterprise.
             */
            this.recaptchaEnforcementState = [];
            if (response.recaptchaKey === undefined) {
                throw new Error('recaptchaKey undefined');
            }
            // Example response.recaptchaKey: "projects/proj123/keys/sitekey123"
            this.siteKey = response.recaptchaKey.split('/')[3];
            this.recaptchaEnforcementState = response.recaptchaEnforcementState;
        }
        /**
         * Returns the reCAPTCHA Enterprise enforcement state for the given provider.
         *
         * @param providerStr - The provider whose enforcement state is to be returned.
         * @returns The reCAPTCHA Enterprise enforcement state for the given provider.
         */
        getProviderEnforcementState(providerStr) {
            if (!this.recaptchaEnforcementState ||
                this.recaptchaEnforcementState.length === 0) {
                return null;
            }
            for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {
                if (recaptchaEnforcementState.provider &&
                    recaptchaEnforcementState.provider === providerStr) {
                    return _parseEnforcementState(recaptchaEnforcementState.enforcementState);
                }
            }
            return null;
        }
        /**
         * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.
         *
         * @param providerStr - The provider whose enablement state is to be returned.
         * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.
         */
        isProviderEnabled(providerStr) {
            return (this.getProviderEnforcementState(providerStr) ===
                "ENFORCE" /* EnforcementState.ENFORCE */ ||
                this.getProviderEnforcementState(providerStr) === "AUDIT" /* EnforcementState.AUDIT */);
        }
        /**
         * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise
         * returns false.
         *
         * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.
         */
        isAnyProviderEnabled() {
            return (this.isProviderEnabled("EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) ||
                this.isProviderEnabled("PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */));
        }
    }
    async function getRecaptchaConfig(auth, request) {
        return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v2/recaptchaConfig" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function deleteAccount(auth, request) {
        return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:delete" /* Endpoint.DELETE_ACCOUNT */, request);
    }
    async function getAccountInfo(auth, request) {
        return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:lookup" /* Endpoint.GET_ACCOUNT_INFO */, request);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function utcTimestampToDateString(utcTimestamp) {
        if (!utcTimestamp) {
            return undefined;
        }
        try {
            // Convert to date object.
            const date = new Date(Number(utcTimestamp));
            // Test date is valid.
            if (!isNaN(date.getTime())) {
                // Convert to UTC date string.
                return date.toUTCString();
            }
        }
        catch (e) {
            // Do nothing. undefined will be returned.
        }
        return undefined;
    }
    /**
     * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.
     *
     * @remarks
     * Returns the current token if it has not expired or if it will not expire in the next five
     * minutes. Otherwise, this will refresh the token and return a new one.
     *
     * @param user - The user.
     * @param forceRefresh - Force refresh regardless of token expiration.
     *
     * @public
     */
    async function getIdTokenResult(user, forceRefresh = false) {
        const userInternal = getModularInstance(user);
        const token = await userInternal.getIdToken(forceRefresh);
        const claims = _parseToken(token);
        _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
        const signInProvider = firebase === null || firebase === undefined ? undefined : firebase['sign_in_provider'];
        return {
            claims,
            token,
            authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
            issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
            expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
            signInProvider: signInProvider || null,
            signInSecondFactor: (firebase === null || firebase === undefined ? undefined : firebase['sign_in_second_factor']) || null
        };
    }
    function secondsStringToMilliseconds(seconds) {
        return Number(seconds) * 1000;
    }
    function _parseToken(token) {
        const [algorithm, payload, signature] = token.split('.');
        if (algorithm === undefined ||
            payload === undefined ||
            signature === undefined) {
            _logError('JWT malformed, contained fewer than 3 sections');
            return null;
        }
        try {
            const decoded = base64Decode(payload);
            if (!decoded) {
                _logError('Failed to decode base64 JWT payload');
                return null;
            }
            return JSON.parse(decoded);
        }
        catch (e) {
            _logError('Caught error parsing JWT payload as JSON', e === null || e === undefined ? undefined : e.toString());
            return null;
        }
    }
    /**
     * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
     */
    function _tokenExpiresIn(token) {
        const parsedToken = _parseToken(token);
        _assert(parsedToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        _assert(typeof parsedToken.exp !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        _assert(typeof parsedToken.iat !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        return Number(parsedToken.exp) - Number(parsedToken.iat);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
        if (bypassAuthState) {
            return promise;
        }
        try {
            return await promise;
        }
        catch (e) {
            if (e instanceof FirebaseError && isUserInvalidated(e)) {
                if (user.auth.currentUser === user) {
                    await user.auth.signOut();
                }
            }
            throw e;
        }
    }
    function isUserInvalidated({ code }) {
        return (code === `auth/${"user-disabled" /* AuthErrorCode.USER_DISABLED */}` ||
            code === `auth/${"user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */}`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ProactiveRefresh {
        constructor(user) {
            this.user = user;
            this.isRunning = false;
            // Node timers and browser timers return fundamentally different types.
            // We don't actually care what the value is but TS won't accept unknown and
            // we can't cast properly in both environments.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.timerId = null;
            this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;
        }
        _start() {
            if (this.isRunning) {
                return;
            }
            this.isRunning = true;
            this.schedule();
        }
        _stop() {
            if (!this.isRunning) {
                return;
            }
            this.isRunning = false;
            if (this.timerId !== null) {
                clearTimeout(this.timerId);
            }
        }
        getInterval(wasError) {
            var _a;
            if (wasError) {
                const interval = this.errorBackoff;
                this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);
                return interval;
            }
            else {
                // Reset the error backoff
                this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;
                const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== undefined ? _a : 0;
                const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;
                return Math.max(0, interval);
            }
        }
        schedule(wasError = false) {
            if (!this.isRunning) {
                // Just in case...
                return;
            }
            const interval = this.getInterval(wasError);
            this.timerId = setTimeout(async () => {
                await this.iteration();
            }, interval);
        }
        async iteration() {
            try {
                await this.user.getIdToken(true);
            }
            catch (e) {
                // Only retry on network errors
                if ((e === null || e === undefined ? undefined : e.code) ===
                    `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {
                    this.schedule(/* wasError */ true);
                }
                return;
            }
            this.schedule();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class UserMetadata {
        constructor(createdAt, lastLoginAt) {
            this.createdAt = createdAt;
            this.lastLoginAt = lastLoginAt;
            this._initializeTime();
        }
        _initializeTime() {
            this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
            this.creationTime = utcTimestampToDateString(this.createdAt);
        }
        _copy(metadata) {
            this.createdAt = metadata.createdAt;
            this.lastLoginAt = metadata.lastLoginAt;
            this._initializeTime();
        }
        toJSON() {
            return {
                createdAt: this.createdAt,
                lastLoginAt: this.lastLoginAt
            };
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _reloadWithoutSaving(user) {
        var _a;
        const auth = user.auth;
        const idToken = await user.getIdToken();
        const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));
        _assert(response === null || response === undefined ? undefined : response.users.length, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        const coreAccount = response.users[0];
        user._notifyReloadListener(coreAccount);
        const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === undefined ? undefined : _a.length)
            ? extractProviderData(coreAccount.providerUserInfo)
            : [];
        const providerData = mergeProviderData(user.providerData, newProviderData);
        // Preserves the non-nonymous status of the stored user, even if no more
        // credentials (federated or email/password) are linked to the user. If
        // the user was previously anonymous, then use provider data to update.
        // On the other hand, if it was not anonymous before, it should never be
        // considered anonymous now.
        const oldIsAnonymous = user.isAnonymous;
        const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === undefined ? undefined : providerData.length);
        const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
        const updates = {
            uid: coreAccount.localId,
            displayName: coreAccount.displayName || null,
            photoURL: coreAccount.photoUrl || null,
            email: coreAccount.email || null,
            emailVerified: coreAccount.emailVerified || false,
            phoneNumber: coreAccount.phoneNumber || null,
            tenantId: coreAccount.tenantId || null,
            providerData,
            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
            isAnonymous
        };
        Object.assign(user, updates);
    }
    /**
     * Reloads user account data, if signed in.
     *
     * @param user - The user.
     *
     * @public
     */
    async function reload(user) {
        const userInternal = getModularInstance(user);
        await _reloadWithoutSaving(userInternal);
        // Even though the current user hasn't changed, update
        // current user will trigger a persistence update w/ the
        // new info.
        await userInternal.auth._persistUserIfCurrent(userInternal);
        userInternal.auth._notifyListenersIfCurrent(userInternal);
    }
    function mergeProviderData(original, newData) {
        const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));
        return [...deduped, ...newData];
    }
    function extractProviderData(providers) {
        return providers.map((_a) => {
            var { providerId } = _a, provider = __rest(_a, ["providerId"]);
            return {
                providerId,
                uid: provider.rawId || '',
                displayName: provider.displayName || null,
                email: provider.email || null,
                phoneNumber: provider.phoneNumber || null,
                photoURL: provider.photoUrl || null
            };
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function requestStsToken(auth, refreshToken) {
        const response = await _performFetchWithErrorHandling(auth, {}, async () => {
            const body = querystring({
                'grant_type': 'refresh_token',
                'refresh_token': refreshToken
            }).slice(1);
            const { tokenApiHost, apiKey } = auth.config;
            const url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* Endpoint.TOKEN */, `key=${apiKey}`);
            const headers = await auth._getAdditionalHeaders();
            headers["Content-Type" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';
            return FetchProvider.fetch()(url, {
                method: "POST" /* HttpMethod.POST */,
                headers,
                body
            });
        });
        // The response comes back in snake_case. Convert to camel:
        return {
            accessToken: response.access_token,
            expiresIn: response.expires_in,
            refreshToken: response.refresh_token
        };
    }
    async function revokeToken(auth, request) {
        return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts:revokeToken" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * We need to mark this class as internal explicitly to exclude it in the public typings, because
     * it references AuthInternal which has a circular dependency with UserInternal.
     *
     * @internal
     */
    class StsTokenManager {
        constructor() {
            this.refreshToken = null;
            this.accessToken = null;
            this.expirationTime = null;
        }
        get isExpired() {
            return (!this.expirationTime ||
                Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */);
        }
        updateFromServerResponse(response) {
            _assert(response.idToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            _assert(typeof response.idToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            _assert(typeof response.refreshToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'
                ? Number(response.expiresIn)
                : _tokenExpiresIn(response.idToken);
            this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
        }
        updateFromIdToken(idToken) {
            _assert(idToken.length !== 0, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            const expiresIn = _tokenExpiresIn(idToken);
            this.updateTokensAndExpiration(idToken, null, expiresIn);
        }
        async getToken(auth, forceRefresh = false) {
            if (!forceRefresh && this.accessToken && !this.isExpired) {
                return this.accessToken;
            }
            _assert(this.refreshToken, auth, "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */);
            if (this.refreshToken) {
                await this.refresh(auth, this.refreshToken);
                return this.accessToken;
            }
            return null;
        }
        clearRefreshToken() {
            this.refreshToken = null;
        }
        async refresh(auth, oldToken) {
            const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);
            this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
        }
        updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
            this.refreshToken = refreshToken || null;
            this.accessToken = accessToken || null;
            this.expirationTime = Date.now() + expiresInSec * 1000;
        }
        static fromJSON(appName, object) {
            const { refreshToken, accessToken, expirationTime } = object;
            const manager = new StsTokenManager();
            if (refreshToken) {
                _assert(typeof refreshToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                    appName
                });
                manager.refreshToken = refreshToken;
            }
            if (accessToken) {
                _assert(typeof accessToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                    appName
                });
                manager.accessToken = accessToken;
            }
            if (expirationTime) {
                _assert(typeof expirationTime === 'number', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                    appName
                });
                manager.expirationTime = expirationTime;
            }
            return manager;
        }
        toJSON() {
            return {
                refreshToken: this.refreshToken,
                accessToken: this.accessToken,
                expirationTime: this.expirationTime
            };
        }
        _assign(stsTokenManager) {
            this.accessToken = stsTokenManager.accessToken;
            this.refreshToken = stsTokenManager.refreshToken;
            this.expirationTime = stsTokenManager.expirationTime;
        }
        _clone() {
            return Object.assign(new StsTokenManager(), this.toJSON());
        }
        _performRefresh() {
            return debugFail('not implemented');
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function assertStringOrUndefined(assertion, appName) {
        _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, { appName });
    }
    class UserImpl {
        constructor(_a) {
            var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
            // For the user object, provider is always Firebase.
            this.providerId = "firebase" /* ProviderId.FIREBASE */;
            this.proactiveRefresh = new ProactiveRefresh(this);
            this.reloadUserInfo = null;
            this.reloadListener = null;
            this.uid = uid;
            this.auth = auth;
            this.stsTokenManager = stsTokenManager;
            this.accessToken = stsTokenManager.accessToken;
            this.displayName = opt.displayName || null;
            this.email = opt.email || null;
            this.emailVerified = opt.emailVerified || false;
            this.phoneNumber = opt.phoneNumber || null;
            this.photoURL = opt.photoURL || null;
            this.isAnonymous = opt.isAnonymous || false;
            this.tenantId = opt.tenantId || null;
            this.providerData = opt.providerData ? [...opt.providerData] : [];
            this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
        }
        async getIdToken(forceRefresh) {
            const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
            _assert(accessToken, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            if (this.accessToken !== accessToken) {
                this.accessToken = accessToken;
                await this.auth._persistUserIfCurrent(this);
                this.auth._notifyListenersIfCurrent(this);
            }
            return accessToken;
        }
        getIdTokenResult(forceRefresh) {
            return getIdTokenResult(this, forceRefresh);
        }
        reload() {
            return reload(this);
        }
        _assign(user) {
            if (this === user) {
                return;
            }
            _assert(this.uid === user.uid, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            this.displayName = user.displayName;
            this.photoURL = user.photoURL;
            this.email = user.email;
            this.emailVerified = user.emailVerified;
            this.phoneNumber = user.phoneNumber;
            this.isAnonymous = user.isAnonymous;
            this.tenantId = user.tenantId;
            this.providerData = user.providerData.map(userInfo => (Object.assign({}, userInfo)));
            this.metadata._copy(user.metadata);
            this.stsTokenManager._assign(user.stsTokenManager);
        }
        _clone(auth) {
            const newUser = new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));
            newUser.metadata._copy(this.metadata);
            return newUser;
        }
        _onReload(callback) {
            // There should only ever be one listener, and that is a single instance of MultiFactorUser
            _assert(!this.reloadListener, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            this.reloadListener = callback;
            if (this.reloadUserInfo) {
                this._notifyReloadListener(this.reloadUserInfo);
                this.reloadUserInfo = null;
            }
        }
        _notifyReloadListener(userInfo) {
            if (this.reloadListener) {
                this.reloadListener(userInfo);
            }
            else {
                // If no listener is subscribed yet, save the result so it's available when they do subscribe
                this.reloadUserInfo = userInfo;
            }
        }
        _startProactiveRefresh() {
            this.proactiveRefresh._start();
        }
        _stopProactiveRefresh() {
            this.proactiveRefresh._stop();
        }
        async _updateTokensIfNecessary(response, reload = false) {
            let tokensRefreshed = false;
            if (response.idToken &&
                response.idToken !== this.stsTokenManager.accessToken) {
                this.stsTokenManager.updateFromServerResponse(response);
                tokensRefreshed = true;
            }
            if (reload) {
                await _reloadWithoutSaving(this);
            }
            await this.auth._persistUserIfCurrent(this);
            if (tokensRefreshed) {
                this.auth._notifyListenersIfCurrent(this);
            }
        }
        async delete() {
            if (_isFirebaseServerApp(this.auth.app)) {
                return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));
            }
            const idToken = await this.getIdToken();
            await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
            this.stsTokenManager.clearRefreshToken();
            // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
            //       cancels pending actions...
            return this.auth.signOut();
        }
        toJSON() {
            return Object.assign(Object.assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(userInfo => (Object.assign({}, userInfo))), stsTokenManager: this.stsTokenManager.toJSON(), 
                // Redirect event ID must be maintained in case there is a pending
                // redirect event.
                _redirectEventId: this._redirectEventId }, this.metadata.toJSON()), { 
                // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
                apiKey: this.auth.config.apiKey, appName: this.auth.name });
        }
        get refreshToken() {
            return this.stsTokenManager.refreshToken || '';
        }
        static _fromJSON(auth, object) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const displayName = (_a = object.displayName) !== null && _a !== undefined ? _a : undefined;
            const email = (_b = object.email) !== null && _b !== undefined ? _b : undefined;
            const phoneNumber = (_c = object.phoneNumber) !== null && _c !== undefined ? _c : undefined;
            const photoURL = (_d = object.photoURL) !== null && _d !== undefined ? _d : undefined;
            const tenantId = (_e = object.tenantId) !== null && _e !== undefined ? _e : undefined;
            const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== undefined ? _f : undefined;
            const createdAt = (_g = object.createdAt) !== null && _g !== undefined ? _g : undefined;
            const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== undefined ? _h : undefined;
            const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
            _assert(uid && plainObjectTokenManager, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
            _assert(typeof uid === 'string', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            assertStringOrUndefined(displayName, auth.name);
            assertStringOrUndefined(email, auth.name);
            _assert(typeof emailVerified === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            _assert(typeof isAnonymous === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            assertStringOrUndefined(phoneNumber, auth.name);
            assertStringOrUndefined(photoURL, auth.name);
            assertStringOrUndefined(tenantId, auth.name);
            assertStringOrUndefined(_redirectEventId, auth.name);
            assertStringOrUndefined(createdAt, auth.name);
            assertStringOrUndefined(lastLoginAt, auth.name);
            const user = new UserImpl({
                uid,
                auth,
                email,
                emailVerified,
                displayName,
                isAnonymous,
                photoURL,
                phoneNumber,
                tenantId,
                stsTokenManager,
                createdAt,
                lastLoginAt
            });
            if (providerData && Array.isArray(providerData)) {
                user.providerData = providerData.map(userInfo => (Object.assign({}, userInfo)));
            }
            if (_redirectEventId) {
                user._redirectEventId = _redirectEventId;
            }
            return user;
        }
        /**
         * Initialize a User from an idToken server response
         * @param auth
         * @param idTokenResponse
         */
        static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
            const stsTokenManager = new StsTokenManager();
            stsTokenManager.updateFromServerResponse(idTokenResponse);
            // Initialize the Firebase Auth user.
            const user = new UserImpl({
                uid: idTokenResponse.localId,
                auth,
                stsTokenManager,
                isAnonymous
            });
            // Updates the user info and data and resolves with a user instance.
            await _reloadWithoutSaving(user);
            return user;
        }
        /**
         * Initialize a User from an idToken server response
         * @param auth
         * @param idTokenResponse
         */
        static async _fromGetAccountInfoResponse(auth, response, idToken) {
            const coreAccount = response.users[0];
            _assert(coreAccount.localId !== undefined, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            const providerData = coreAccount.providerUserInfo !== undefined
                ? extractProviderData(coreAccount.providerUserInfo)
                : [];
            const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === undefined ? undefined : providerData.length);
            const stsTokenManager = new StsTokenManager();
            stsTokenManager.updateFromIdToken(idToken);
            // Initialize the Firebase Auth user.
            const user = new UserImpl({
                uid: coreAccount.localId,
                auth,
                stsTokenManager,
                isAnonymous
            });
            // update the user with data from the GetAccountInfo response.
            const updates = {
                uid: coreAccount.localId,
                displayName: coreAccount.displayName || null,
                photoURL: coreAccount.photoUrl || null,
                email: coreAccount.email || null,
                emailVerified: coreAccount.emailVerified || false,
                phoneNumber: coreAccount.phoneNumber || null,
                tenantId: coreAccount.tenantId || null,
                providerData,
                metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
                isAnonymous: !(coreAccount.email && coreAccount.passwordHash) &&
                    !(providerData === null || providerData === undefined ? undefined : providerData.length)
            };
            Object.assign(user, updates);
            return user;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const instanceCache = new Map();
    function _getInstance(cls) {
        debugAssert(cls instanceof Function, 'Expected a class definition');
        let instance = instanceCache.get(cls);
        if (instance) {
            debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
            return instance;
        }
        instance = new cls();
        instanceCache.set(cls, instance);
        return instance;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class InMemoryPersistence {
        constructor() {
            this.type = "NONE" /* PersistenceType.NONE */;
            this.storage = {};
        }
        async _isAvailable() {
            return true;
        }
        async _set(key, value) {
            this.storage[key] = value;
        }
        async _get(key) {
            const value = this.storage[key];
            return value === undefined ? null : value;
        }
        async _remove(key) {
            delete this.storage[key];
        }
        _addListener(_key, _listener) {
            // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
            return;
        }
        _removeListener(_key, _listener) {
            // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
            return;
        }
    }
    InMemoryPersistence.type = 'NONE';
    /**
     * An implementation of {@link Persistence} of type 'NONE'.
     *
     * @public
     */
    const inMemoryPersistence = InMemoryPersistence;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _persistenceKeyName(key, apiKey, appName) {
        return `${"firebase" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;
    }
    class PersistenceUserManager {
        constructor(persistence, auth, userKey) {
            this.persistence = persistence;
            this.auth = auth;
            this.userKey = userKey;
            const { config, name } = this.auth;
            this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
            this.fullPersistenceKey = _persistenceKeyName("persistence" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);
            this.boundEventHandler = auth._onStorageEvent.bind(auth);
            this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
        }
        setCurrentUser(user) {
            return this.persistence._set(this.fullUserKey, user.toJSON());
        }
        async getCurrentUser() {
            const blob = await this.persistence._get(this.fullUserKey);
            return blob ? UserImpl._fromJSON(this.auth, blob) : null;
        }
        removeCurrentUser() {
            return this.persistence._remove(this.fullUserKey);
        }
        savePersistenceForRedirect() {
            return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
        }
        async setPersistence(newPersistence) {
            if (this.persistence === newPersistence) {
                return;
            }
            const currentUser = await this.getCurrentUser();
            await this.removeCurrentUser();
            this.persistence = newPersistence;
            if (currentUser) {
                return this.setCurrentUser(currentUser);
            }
        }
        delete() {
            this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
        }
        static async create(auth, persistenceHierarchy, userKey = "authUser" /* KeyName.AUTH_USER */) {
            if (!persistenceHierarchy.length) {
                return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
            }
            // Eliminate any persistences that are not available
            const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {
                if (await persistence._isAvailable()) {
                    return persistence;
                }
                return undefined;
            }))).filter(persistence => persistence);
            // Fall back to the first persistence listed, or in memory if none available
            let selectedPersistence = availablePersistences[0] ||
                _getInstance(inMemoryPersistence);
            const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
            // Pull out the existing user, setting the chosen persistence to that
            // persistence if the user exists.
            let userToMigrate = null;
            // Note, here we check for a user in _all_ persistences, not just the
            // ones deemed available. If we can migrate a user out of a broken
            // persistence, we will (but only if that persistence supports migration).
            for (const persistence of persistenceHierarchy) {
                try {
                    const blob = await persistence._get(key);
                    if (blob) {
                        const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
                        if (persistence !== selectedPersistence) {
                            userToMigrate = user;
                        }
                        selectedPersistence = persistence;
                        break;
                    }
                }
                catch (_a) { }
            }
            // If we find the user in a persistence that does support migration, use
            // that migration path (of only persistences that support migration)
            const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);
            // If the persistence does _not_ allow migration, just finish off here
            if (!selectedPersistence._shouldAllowMigration ||
                !migrationHierarchy.length) {
                return new PersistenceUserManager(selectedPersistence, auth, userKey);
            }
            selectedPersistence = migrationHierarchy[0];
            if (userToMigrate) {
                // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
                // we'll just let it bubble to surface the error.
                await selectedPersistence._set(key, userToMigrate.toJSON());
            }
            // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
            // such as users getting stuck with a previous account after signing out and refreshing the tab.
            await Promise.all(persistenceHierarchy.map(async (persistence) => {
                if (persistence !== selectedPersistence) {
                    try {
                        await persistence._remove(key);
                    }
                    catch (_a) { }
                }
            }));
            return new PersistenceUserManager(selectedPersistence, auth, userKey);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determine the browser for the purposes of reporting usage to the API
     */
    function _getBrowserName(userAgent) {
        const ua = userAgent.toLowerCase();
        if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
            return "Opera" /* BrowserName.OPERA */;
        }
        else if (_isIEMobile(ua)) {
            // Windows phone IEMobile browser.
            return "IEMobile" /* BrowserName.IEMOBILE */;
        }
        else if (ua.includes('msie') || ua.includes('trident/')) {
            return "IE" /* BrowserName.IE */;
        }
        else if (ua.includes('edge/')) {
            return "Edge" /* BrowserName.EDGE */;
        }
        else if (_isFirefox(ua)) {
            return "Firefox" /* BrowserName.FIREFOX */;
        }
        else if (ua.includes('silk/')) {
            return "Silk" /* BrowserName.SILK */;
        }
        else if (_isBlackBerry(ua)) {
            // Blackberry browser.
            return "Blackberry" /* BrowserName.BLACKBERRY */;
        }
        else if (_isWebOS(ua)) {
            // WebOS default browser.
            return "Webos" /* BrowserName.WEBOS */;
        }
        else if (_isSafari(ua)) {
            return "Safari" /* BrowserName.SAFARI */;
        }
        else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&
            !ua.includes('edge/')) {
            return "Chrome" /* BrowserName.CHROME */;
        }
        else if (_isAndroid(ua)) {
            // Android stock browser.
            return "Android" /* BrowserName.ANDROID */;
        }
        else {
            // Most modern browsers have name/version at end of user agent string.
            const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
            const matches = userAgent.match(re);
            if ((matches === null || matches === undefined ? undefined : matches.length) === 2) {
                return matches[1];
            }
        }
        return "Other" /* BrowserName.OTHER */;
    }
    function _isFirefox(ua = getUA()) {
        return /firefox\//i.test(ua);
    }
    function _isSafari(userAgent = getUA()) {
        const ua = userAgent.toLowerCase();
        return (ua.includes('safari/') &&
            !ua.includes('chrome/') &&
            !ua.includes('crios/') &&
            !ua.includes('android'));
    }
    function _isChromeIOS(ua = getUA()) {
        return /crios\//i.test(ua);
    }
    function _isIEMobile(ua = getUA()) {
        return /iemobile/i.test(ua);
    }
    function _isAndroid(ua = getUA()) {
        return /android/i.test(ua);
    }
    function _isBlackBerry(ua = getUA()) {
        return /blackberry/i.test(ua);
    }
    function _isWebOS(ua = getUA()) {
        return /webos/i.test(ua);
    }
    function _isIOS(ua = getUA()) {
        return (/iphone|ipad|ipod/i.test(ua) ||
            (/macintosh/i.test(ua) && /mobile/i.test(ua)));
    }
    function _isIOSStandalone(ua = getUA()) {
        var _a;
        return _isIOS(ua) && !!((_a = window.navigator) === null || _a === undefined ? undefined : _a.standalone);
    }
    function _isIE10() {
        return isIE() && document.documentMode === 10;
    }
    function _isMobileBrowser(ua = getUA()) {
        // TODO: implement getBrowserName equivalent for OS.
        return (_isIOS(ua) ||
            _isAndroid(ua) ||
            _isWebOS(ua) ||
            _isBlackBerry(ua) ||
            /windows phone/i.test(ua) ||
            _isIEMobile(ua));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * Determine the SDK version string
     */
    function _getClientVersion(clientPlatform, frameworks = []) {
        let reportedPlatform;
        switch (clientPlatform) {
            case "Browser" /* ClientPlatform.BROWSER */:
                // In a browser environment, report the browser name.
                reportedPlatform = _getBrowserName(getUA());
                break;
            case "Worker" /* ClientPlatform.WORKER */:
                // Technically a worker runs from a browser but we need to differentiate a
                // worker from a browser.
                // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
                reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;
                break;
            default:
                reportedPlatform = clientPlatform;
        }
        const reportedFrameworks = frameworks.length
            ? frameworks.join(',')
            : 'FirebaseCore-web'; /* default value if no other framework is used */
        return `${reportedPlatform}/${"JsCore" /* ClientImplementation.CORE */}/${SDK_VERSION$1}/${reportedFrameworks}`;
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthMiddlewareQueue {
        constructor(auth) {
            this.auth = auth;
            this.queue = [];
        }
        pushCallback(callback, onAbort) {
            // The callback could be sync or async. Wrap it into a
            // function that is always async.
            const wrappedCallback = (user) => new Promise((resolve, reject) => {
                try {
                    const result = callback(user);
                    // Either resolve with existing promise or wrap a non-promise
                    // return value into a promise.
                    resolve(result);
                }
                catch (e) {
                    // Sync callback throws.
                    reject(e);
                }
            });
            // Attach the onAbort if present
            wrappedCallback.onAbort = onAbort;
            this.queue.push(wrappedCallback);
            const index = this.queue.length - 1;
            return () => {
                // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb
                // indexing of other elements.
                this.queue[index] = () => Promise.resolve();
            };
        }
        async runMiddleware(nextUser) {
            if (this.auth.currentUser === nextUser) {
                return;
            }
            // While running the middleware, build a temporary stack of onAbort
            // callbacks to call if one middleware callback rejects.
            const onAbortStack = [];
            try {
                for (const beforeStateCallback of this.queue) {
                    await beforeStateCallback(nextUser);
                    // Only push the onAbort if the callback succeeds
                    if (beforeStateCallback.onAbort) {
                        onAbortStack.push(beforeStateCallback.onAbort);
                    }
                }
            }
            catch (e) {
                // Run all onAbort, with separate try/catch to ignore any errors and
                // continue
                onAbortStack.reverse();
                for (const onAbort of onAbortStack) {
                    try {
                        onAbort();
                    }
                    catch (_) {
                        /* swallow error */
                    }
                }
                throw this.auth._errorFactory.create("login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */, {
                    originalMessage: e === null || e === undefined ? undefined : e.message
                });
            }
        }
    }

    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Fetches the password policy for the currently set tenant or the project if no tenant is set.
     *
     * @param auth Auth object.
     * @param request Password policy request.
     * @returns Password policy response.
     */
    async function _getPasswordPolicy(auth, request = {}) {
        return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v2/passwordPolicy" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Minimum min password length enforced by the backend, even if no minimum length is set.
    const MINIMUM_MIN_PASSWORD_LENGTH = 6;
    /**
     * Stores password policy requirements and provides password validation against the policy.
     *
     * @internal
     */
    class PasswordPolicyImpl {
        constructor(response) {
            var _a, _b, _c, _d;
            // Only include custom strength options defined in the response.
            const responseOptions = response.customStrengthOptions;
            this.customStrengthOptions = {};
            // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.
            this.customStrengthOptions.minPasswordLength =
                (_a = responseOptions.minPasswordLength) !== null && _a !== undefined ? _a : MINIMUM_MIN_PASSWORD_LENGTH;
            if (responseOptions.maxPasswordLength) {
                this.customStrengthOptions.maxPasswordLength =
                    responseOptions.maxPasswordLength;
            }
            if (responseOptions.containsLowercaseCharacter !== undefined) {
                this.customStrengthOptions.containsLowercaseLetter =
                    responseOptions.containsLowercaseCharacter;
            }
            if (responseOptions.containsUppercaseCharacter !== undefined) {
                this.customStrengthOptions.containsUppercaseLetter =
                    responseOptions.containsUppercaseCharacter;
            }
            if (responseOptions.containsNumericCharacter !== undefined) {
                this.customStrengthOptions.containsNumericCharacter =
                    responseOptions.containsNumericCharacter;
            }
            if (responseOptions.containsNonAlphanumericCharacter !== undefined) {
                this.customStrengthOptions.containsNonAlphanumericCharacter =
                    responseOptions.containsNonAlphanumericCharacter;
            }
            this.enforcementState = response.enforcementState;
            if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {
                this.enforcementState = 'OFF';
            }
            // Use an empty string if no non-alphanumeric characters are specified in the response.
            this.allowedNonAlphanumericCharacters =
                (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === undefined ? undefined : _b.join('')) !== null && _c !== undefined ? _c : '';
            this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== undefined ? _d : false;
            this.schemaVersion = response.schemaVersion;
        }
        validatePassword(password) {
            var _a, _b, _c, _d, _e, _f;
            const status = {
                isValid: true,
                passwordPolicy: this
            };
            // Check the password length and character options.
            this.validatePasswordLengthOptions(password, status);
            this.validatePasswordCharacterOptions(password, status);
            // Combine the status into single isValid property.
            status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== undefined ? _a : true);
            status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== undefined ? _b : true);
            status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== undefined ? _c : true);
            status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== undefined ? _d : true);
            status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== undefined ? _e : true);
            status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== undefined ? _f : true);
            return status;
        }
        /**
         * Validates that the password meets the length options for the policy.
         *
         * @param password Password to validate.
         * @param status Validation status.
         */
        validatePasswordLengthOptions(password, status) {
            const minPasswordLength = this.customStrengthOptions.minPasswordLength;
            const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;
            if (minPasswordLength) {
                status.meetsMinPasswordLength = password.length >= minPasswordLength;
            }
            if (maxPasswordLength) {
                status.meetsMaxPasswordLength = password.length <= maxPasswordLength;
            }
        }
        /**
         * Validates that the password meets the character options for the policy.
         *
         * @param password Password to validate.
         * @param status Validation status.
         */
        validatePasswordCharacterOptions(password, status) {
            // Assign statuses for requirements even if the password is an empty string.
            this.updatePasswordCharacterOptionsStatuses(status, 
            /* containsLowercaseCharacter= */ false, 
            /* containsUppercaseCharacter= */ false, 
            /* containsNumericCharacter= */ false, 
            /* containsNonAlphanumericCharacter= */ false);
            let passwordChar;
            for (let i = 0; i < password.length; i++) {
                passwordChar = password.charAt(i);
                this.updatePasswordCharacterOptionsStatuses(status, 
                /* containsLowercaseCharacter= */ passwordChar >= 'a' &&
                    passwordChar <= 'z', 
                /* containsUppercaseCharacter= */ passwordChar >= 'A' &&
                    passwordChar <= 'Z', 
                /* containsNumericCharacter= */ passwordChar >= '0' &&
                    passwordChar <= '9', 
                /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(passwordChar));
            }
        }
        /**
         * Updates the running validation status with the statuses for the character options.
         * Expected to be called each time a character is processed to update each option status
         * based on the current character.
         *
         * @param status Validation status.
         * @param containsLowercaseCharacter Whether the character is a lowercase letter.
         * @param containsUppercaseCharacter Whether the character is an uppercase letter.
         * @param containsNumericCharacter Whether the character is a numeric character.
         * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
         */
        updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {
            if (this.customStrengthOptions.containsLowercaseLetter) {
                status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);
            }
            if (this.customStrengthOptions.containsUppercaseLetter) {
                status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);
            }
            if (this.customStrengthOptions.containsNumericCharacter) {
                status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);
            }
            if (this.customStrengthOptions.containsNonAlphanumericCharacter) {
                status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthImpl {
        constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {
            this.app = app;
            this.heartbeatServiceProvider = heartbeatServiceProvider;
            this.appCheckServiceProvider = appCheckServiceProvider;
            this.config = config;
            this.currentUser = null;
            this.emulatorConfig = null;
            this.operations = Promise.resolve();
            this.authStateSubscription = new Subscription(this);
            this.idTokenSubscription = new Subscription(this);
            this.beforeStateQueue = new AuthMiddlewareQueue(this);
            this.redirectUser = null;
            this.isProactiveRefreshEnabled = false;
            this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;
            // Any network calls will set this to true and prevent subsequent emulator
            // initialization
            this._canInitEmulator = true;
            this._isInitialized = false;
            this._deleted = false;
            this._initializationPromise = null;
            this._popupRedirectResolver = null;
            this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
            this._agentRecaptchaConfig = null;
            this._tenantRecaptchaConfigs = {};
            this._projectPasswordPolicy = null;
            this._tenantPasswordPolicies = {};
            // Tracks the last notified UID for state change listeners to prevent
            // repeated calls to the callbacks. Undefined means it's never been
            // called, whereas null means it's been called with a signed out user
            this.lastNotifiedUid = undefined;
            this.languageCode = null;
            this.tenantId = null;
            this.settings = { appVerificationDisabledForTesting: false };
            this.frameworks = [];
            this.name = app.name;
            this.clientVersion = config.sdkClientVersion;
        }
        _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
            if (popupRedirectResolver) {
                this._popupRedirectResolver = _getInstance(popupRedirectResolver);
            }
            // Have to check for app deletion throughout initialization (after each
            // promise resolution)
            this._initializationPromise = this.queue(async () => {
                var _a, _b;
                if (this._deleted) {
                    return;
                }
                this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
                if (this._deleted) {
                    return;
                }
                // Initialize the resolver early if necessary (only applicable to web:
                // this will cause the iframe to load immediately in certain cases)
                if ((_a = this._popupRedirectResolver) === null || _a === undefined ? undefined : _a._shouldInitProactively) {
                    // If this fails, don't halt auth loading
                    try {
                        await this._popupRedirectResolver._initialize(this);
                    }
                    catch (e) {
                        /* Ignore the error */
                    }
                }
                await this.initializeCurrentUser(popupRedirectResolver);
                this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === undefined ? undefined : _b.uid) || null;
                if (this._deleted) {
                    return;
                }
                this._isInitialized = true;
            });
            return this._initializationPromise;
        }
        /**
         * If the persistence is changed in another window, the user manager will let us know
         */
        async _onStorageEvent() {
            if (this._deleted) {
                return;
            }
            const user = await this.assertedPersistence.getCurrentUser();
            if (!this.currentUser && !user) {
                // No change, do nothing (was signed out and remained signed out).
                return;
            }
            // If the same user is to be synchronized.
            if (this.currentUser && user && this.currentUser.uid === user.uid) {
                // Data update, simply copy data changes.
                this._currentUser._assign(user);
                // If tokens changed from previous user tokens, this will trigger
                // notifyAuthListeners_.
                await this.currentUser.getIdToken();
                return;
            }
            // Update current Auth state. Either a new login or logout.
            // Skip blocking callbacks, they should not apply to a change in another tab.
            await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);
        }
        async initializeCurrentUserFromIdToken(idToken) {
            try {
                const response = await getAccountInfo(this, { idToken });
                const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);
                await this.directlySetCurrentUser(user);
            }
            catch (err) {
                console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);
                await this.directlySetCurrentUser(null);
            }
        }
        async initializeCurrentUser(popupRedirectResolver) {
            var _a;
            if (_isFirebaseServerApp(this.app)) {
                const idToken = this.app.settings.authIdToken;
                if (idToken) {
                    // Start the auth operation in the next tick to allow a moment for the customer's app to
                    // attach an emulator, if desired.
                    return new Promise(resolve => {
                        setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));
                    });
                }
                else {
                    return this.directlySetCurrentUser(null);
                }
            }
            // First check to see if we have a pending redirect event.
            const previouslyStoredUser = (await this.assertedPersistence.getCurrentUser());
            let futureCurrentUser = previouslyStoredUser;
            let needsTocheckMiddleware = false;
            if (popupRedirectResolver && this.config.authDomain) {
                await this.getOrInitRedirectPersistenceManager();
                const redirectUserEventId = (_a = this.redirectUser) === null || _a === undefined ? undefined : _a._redirectEventId;
                const storedUserEventId = futureCurrentUser === null || futureCurrentUser === undefined ? undefined : futureCurrentUser._redirectEventId;
                const result = await this.tryRedirectSignIn(popupRedirectResolver);
                // If the stored user (i.e. the old "currentUser") has a redirectId that
                // matches the redirect user, then we want to initially sign in with the
                // new user object from result.
                // TODO(samgho): More thoroughly test all of this
                if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&
                    (result === null || result === undefined ? undefined : result.user)) {
                    futureCurrentUser = result.user;
                    needsTocheckMiddleware = true;
                }
            }
            // If no user in persistence, there is no current user. Set to null.
            if (!futureCurrentUser) {
                return this.directlySetCurrentUser(null);
            }
            if (!futureCurrentUser._redirectEventId) {
                // This isn't a redirect link operation, we can reload and bail.
                // First though, ensure that we check the middleware is happy.
                if (needsTocheckMiddleware) {
                    try {
                        await this.beforeStateQueue.runMiddleware(futureCurrentUser);
                    }
                    catch (e) {
                        futureCurrentUser = previouslyStoredUser;
                        // We know this is available since the bit is only set when the
                        // resolver is available
                        this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));
                    }
                }
                if (futureCurrentUser) {
                    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
                }
                else {
                    return this.directlySetCurrentUser(null);
                }
            }
            _assert(this._popupRedirectResolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
            await this.getOrInitRedirectPersistenceManager();
            // If the redirect user's event ID matches the current user's event ID,
            // DO NOT reload the current user, otherwise they'll be cleared from storage.
            // This is important for the reauthenticateWithRedirect() flow.
            if (this.redirectUser &&
                this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
                return this.directlySetCurrentUser(futureCurrentUser);
            }
            return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
        }
        async tryRedirectSignIn(redirectResolver) {
            // The redirect user needs to be checked (and signed in if available)
            // during auth initialization. All of the normal sign in and link/reauth
            // flows call back into auth and push things onto the promise queue. We
            // need to await the result of the redirect sign in *inside the promise
            // queue*. This presents a problem: we run into deadlock. See:
            //    ┌> [Initialization] ─────┐
            //    ┌> [<other queue tasks>] │
            //    └─ [getRedirectResult] <─┘
            //    where [] are tasks on the queue and arrows denote awaits
            // Initialization will never complete because it's waiting on something
            // that's waiting for initialization to complete!
            //
            // Instead, this method calls getRedirectResult() (stored in
            // _completeRedirectFn) with an optional parameter that instructs all of
            // the underlying auth operations to skip anything that mutates auth state.
            let result = null;
            try {
                // We know this._popupRedirectResolver is set since redirectResolver
                // is passed in. The _completeRedirectFn expects the unwrapped extern.
                result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
            }
            catch (e) {
                // Swallow any errors here; the code can retrieve them in
                // getRedirectResult().
                await this._setRedirectUser(null);
            }
            return result;
        }
        async reloadAndSetCurrentUserOrClear(user) {
            try {
                await _reloadWithoutSaving(user);
            }
            catch (e) {
                if ((e === null || e === undefined ? undefined : e.code) !==
                    `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {
                    // Something's wrong with the user's token. Log them out and remove
                    // them from storage
                    return this.directlySetCurrentUser(null);
                }
            }
            return this.directlySetCurrentUser(user);
        }
        useDeviceLanguage() {
            this.languageCode = _getUserLanguage();
        }
        async _delete() {
            this._deleted = true;
        }
        async updateCurrentUser(userExtern) {
            if (_isFirebaseServerApp(this.app)) {
                return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
            }
            // The public updateCurrentUser method needs to make a copy of the user,
            // and also check that the project matches
            const user = userExtern
                ? getModularInstance(userExtern)
                : null;
            if (user) {
                _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */);
            }
            return this._updateCurrentUser(user && user._clone(this));
        }
        async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
            if (this._deleted) {
                return;
            }
            if (user) {
                _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */);
            }
            if (!skipBeforeStateCallbacks) {
                await this.beforeStateQueue.runMiddleware(user);
            }
            return this.queue(async () => {
                await this.directlySetCurrentUser(user);
                this.notifyAuthListeners();
            });
        }
        async signOut() {
            if (_isFirebaseServerApp(this.app)) {
                return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
            }
            // Run first, to block _setRedirectUser() if any callbacks fail.
            await this.beforeStateQueue.runMiddleware(null);
            // Clear the redirect user when signOut is called
            if (this.redirectPersistenceManager || this._popupRedirectResolver) {
                await this._setRedirectUser(null);
            }
            // Prevent callbacks from being called again in _updateCurrentUser, as
            // they were already called in the first line.
            return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);
        }
        setPersistence(persistence) {
            if (_isFirebaseServerApp(this.app)) {
                return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
            }
            return this.queue(async () => {
                await this.assertedPersistence.setPersistence(_getInstance(persistence));
            });
        }
        _getRecaptchaConfig() {
            if (this.tenantId == null) {
                return this._agentRecaptchaConfig;
            }
            else {
                return this._tenantRecaptchaConfigs[this.tenantId];
            }
        }
        async validatePassword(password) {
            if (!this._getPasswordPolicyInternal()) {
                await this._updatePasswordPolicy();
            }
            // Password policy will be defined after fetching.
            const passwordPolicy = this._getPasswordPolicyInternal();
            // Check that the policy schema version is supported by the SDK.
            // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.
            if (passwordPolicy.schemaVersion !==
                this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {
                return Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));
            }
            return passwordPolicy.validatePassword(password);
        }
        _getPasswordPolicyInternal() {
            if (this.tenantId === null) {
                return this._projectPasswordPolicy;
            }
            else {
                return this._tenantPasswordPolicies[this.tenantId];
            }
        }
        async _updatePasswordPolicy() {
            const response = await _getPasswordPolicy(this);
            const passwordPolicy = new PasswordPolicyImpl(response);
            if (this.tenantId === null) {
                this._projectPasswordPolicy = passwordPolicy;
            }
            else {
                this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;
            }
        }
        _getPersistence() {
            return this.assertedPersistence.persistence.type;
        }
        _updateErrorMap(errorMap) {
            this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());
        }
        onAuthStateChanged(nextOrObserver, error, completed) {
            return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
        }
        beforeAuthStateChanged(callback, onAbort) {
            return this.beforeStateQueue.pushCallback(callback, onAbort);
        }
        onIdTokenChanged(nextOrObserver, error, completed) {
            return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
        }
        authStateReady() {
            return new Promise((resolve, reject) => {
                if (this.currentUser) {
                    resolve();
                }
                else {
                    const unsubscribe = this.onAuthStateChanged(() => {
                        unsubscribe();
                        resolve();
                    }, reject);
                }
            });
        }
        /**
         * Revokes the given access token. Currently only supports Apple OAuth access tokens.
         */
        async revokeAccessToken(token) {
            if (this.currentUser) {
                const idToken = await this.currentUser.getIdToken();
                // Generalize this to accept other providers once supported.
                const request = {
                    providerId: 'apple.com',
                    tokenType: "ACCESS_TOKEN" /* TokenType.ACCESS_TOKEN */,
                    token,
                    idToken
                };
                if (this.tenantId != null) {
                    request.tenantId = this.tenantId;
                }
                await revokeToken(this, request);
            }
        }
        toJSON() {
            var _a;
            return {
                apiKey: this.config.apiKey,
                authDomain: this.config.authDomain,
                appName: this.name,
                currentUser: (_a = this._currentUser) === null || _a === undefined ? undefined : _a.toJSON()
            };
        }
        async _setRedirectUser(user, popupRedirectResolver) {
            const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
            return user === null
                ? redirectManager.removeCurrentUser()
                : redirectManager.setCurrentUser(user);
        }
        async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
            if (!this.redirectPersistenceManager) {
                const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||
                    this._popupRedirectResolver;
                _assert(resolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
                this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser" /* KeyName.REDIRECT_USER */);
                this.redirectUser =
                    await this.redirectPersistenceManager.getCurrentUser();
            }
            return this.redirectPersistenceManager;
        }
        async _redirectUserForId(id) {
            var _a, _b;
            // Make sure we've cleared any pending persistence actions if we're not in
            // the initializer
            if (this._isInitialized) {
                await this.queue(async () => { });
            }
            if (((_a = this._currentUser) === null || _a === undefined ? undefined : _a._redirectEventId) === id) {
                return this._currentUser;
            }
            if (((_b = this.redirectUser) === null || _b === undefined ? undefined : _b._redirectEventId) === id) {
                return this.redirectUser;
            }
            return null;
        }
        async _persistUserIfCurrent(user) {
            if (user === this.currentUser) {
                return this.queue(async () => this.directlySetCurrentUser(user));
            }
        }
        /** Notifies listeners only if the user is current */
        _notifyListenersIfCurrent(user) {
            if (user === this.currentUser) {
                this.notifyAuthListeners();
            }
        }
        _key() {
            return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
        }
        _startProactiveRefresh() {
            this.isProactiveRefreshEnabled = true;
            if (this.currentUser) {
                this._currentUser._startProactiveRefresh();
            }
        }
        _stopProactiveRefresh() {
            this.isProactiveRefreshEnabled = false;
            if (this.currentUser) {
                this._currentUser._stopProactiveRefresh();
            }
        }
        /** Returns the current user cast as the internal type */
        get _currentUser() {
            return this.currentUser;
        }
        notifyAuthListeners() {
            var _a, _b;
            if (!this._isInitialized) {
                return;
            }
            this.idTokenSubscription.next(this.currentUser);
            const currentUid = (_b = (_a = this.currentUser) === null || _a === undefined ? undefined : _a.uid) !== null && _b !== undefined ? _b : null;
            if (this.lastNotifiedUid !== currentUid) {
                this.lastNotifiedUid = currentUid;
                this.authStateSubscription.next(this.currentUser);
            }
        }
        registerStateListener(subscription, nextOrObserver, error, completed) {
            if (this._deleted) {
                return () => { };
            }
            const cb = typeof nextOrObserver === 'function'
                ? nextOrObserver
                : nextOrObserver.next.bind(nextOrObserver);
            let isUnsubscribed = false;
            const promise = this._isInitialized
                ? Promise.resolve()
                : this._initializationPromise;
            _assert(promise, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            // The callback needs to be called asynchronously per the spec.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            promise.then(() => {
                if (isUnsubscribed) {
                    return;
                }
                cb(this.currentUser);
            });
            if (typeof nextOrObserver === 'function') {
                const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);
                return () => {
                    isUnsubscribed = true;
                    unsubscribe();
                };
            }
            else {
                const unsubscribe = subscription.addObserver(nextOrObserver);
                return () => {
                    isUnsubscribed = true;
                    unsubscribe();
                };
            }
        }
        /**
         * Unprotected (from race conditions) method to set the current user. This
         * should only be called from within a queued callback. This is necessary
         * because the queue shouldn't rely on another queued callback.
         */
        async directlySetCurrentUser(user) {
            if (this.currentUser && this.currentUser !== user) {
                this._currentUser._stopProactiveRefresh();
            }
            if (user && this.isProactiveRefreshEnabled) {
                user._startProactiveRefresh();
            }
            this.currentUser = user;
            if (user) {
                await this.assertedPersistence.setCurrentUser(user);
            }
            else {
                await this.assertedPersistence.removeCurrentUser();
            }
        }
        queue(action) {
            // In case something errors, the callback still should be called in order
            // to keep the promise chain alive
            this.operations = this.operations.then(action, action);
            return this.operations;
        }
        get assertedPersistence() {
            _assert(this.persistenceManager, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            return this.persistenceManager;
        }
        _logFramework(framework) {
            if (!framework || this.frameworks.includes(framework)) {
                return;
            }
            this.frameworks.push(framework);
            // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
            // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
            this.frameworks.sort();
            this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
        }
        _getFrameworks() {
            return this.frameworks;
        }
        async _getAdditionalHeaders() {
            var _a;
            // Additional headers on every request
            const headers = {
                ["X-Client-Version" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion
            };
            if (this.app.options.appId) {
                headers["X-Firebase-gmpid" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;
            }
            // If the heartbeat service exists, add the heartbeat string
            const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider
                .getImmediate({
                optional: true
            })) === null || _a === undefined ? undefined : _a.getHeartbeatsHeader());
            if (heartbeatsHeader) {
                headers["X-Firebase-Client" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;
            }
            // If the App Check service exists, add the App Check token in the headers
            const appCheckToken = await this._getAppCheckToken();
            if (appCheckToken) {
                headers["X-Firebase-AppCheck" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;
            }
            return headers;
        }
        async _getAppCheckToken() {
            var _a;
            const appCheckTokenResult = await ((_a = this.appCheckServiceProvider
                .getImmediate({ optional: true })) === null || _a === undefined ? undefined : _a.getToken());
            if (appCheckTokenResult === null || appCheckTokenResult === undefined ? undefined : appCheckTokenResult.error) {
                // Context: appCheck.getToken() will never throw even if an error happened.
                // In the error case, a dummy token will be returned along with an error field describing
                // the error. In general, we shouldn't care about the error condition and just use
                // the token (actual or dummy) to send requests.
                _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
            }
            return appCheckTokenResult === null || appCheckTokenResult === undefined ? undefined : appCheckTokenResult.token;
        }
    }
    /**
     * Method to be used to cast down to our private implementation of Auth.
     * It will also handle unwrapping from the compat type if necessary
     *
     * @param auth Auth object passed in from developer
     */
    function _castAuth(auth) {
        return getModularInstance(auth);
    }
    /** Helper class to wrap subscriber logic */
    class Subscription {
        constructor(auth) {
            this.auth = auth;
            this.observer = null;
            this.addObserver = createSubscribe(observer => (this.observer = observer));
        }
        get next() {
            _assert(this.observer, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            return this.observer.next.bind(this.observer);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let externalJSProvider = {
        async loadJS() {
            throw new Error('Unable to load external scripts');
        },
        recaptchaV2Script: '',
        recaptchaEnterpriseScript: '',
        gapiScript: ''
    };
    function _setExternalJSProvider(p) {
        externalJSProvider = p;
    }
    function _loadJS(url) {
        return externalJSProvider.loadJS(url);
    }
    function _recaptchaEnterpriseScriptUrl() {
        return externalJSProvider.recaptchaEnterpriseScript;
    }
    function _gapiScriptUrl() {
        return externalJSProvider.gapiScript;
    }
    function _generateCallbackName(prefix) {
        return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
    }
    class MockGreCAPTCHATopLevel {
        constructor() {
            this.enterprise = new MockGreCAPTCHA();
        }
        ready(callback) {
            callback();
        }
        execute(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _siteKey, _options) {
            return Promise.resolve('token');
        }
        render(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _container, _parameters) {
            return '';
        }
    }
    class MockGreCAPTCHA {
        ready(callback) {
            callback();
        }
        execute(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _siteKey, _options) {
            return Promise.resolve('token');
        }
        render(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _container, _parameters) {
            return '';
        }
    }

    /* eslint-disable @typescript-eslint/no-require-imports */
    const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';
    const FAKE_TOKEN = 'NO_RECAPTCHA';
    class RecaptchaEnterpriseVerifier {
        /**
         *
         * @param authExtern - The corresponding Firebase {@link Auth} instance.
         *
         */
        constructor(authExtern) {
            /**
             * Identifies the type of application verifier (e.g. "recaptcha-enterprise").
             */
            this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;
            this.auth = _castAuth(authExtern);
        }
        /**
         * Executes the verification process.
         *
         * @returns A Promise for a token that can be used to assert the validity of a request.
         */
        async verify(action = 'verify', forceRefresh = false) {
            async function retrieveSiteKey(auth) {
                if (!forceRefresh) {
                    if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {
                        return auth._agentRecaptchaConfig.siteKey;
                    }
                    if (auth.tenantId != null &&
                        auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {
                        return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;
                    }
                }
                return new Promise(async (resolve, reject) => {
                    getRecaptchaConfig(auth, {
                        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */,
                        version: "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
                    })
                        .then(response => {
                        if (response.recaptchaKey === undefined) {
                            reject(new Error('recaptcha Enterprise site key undefined'));
                        }
                        else {
                            const config = new RecaptchaConfig(response);
                            if (auth.tenantId == null) {
                                auth._agentRecaptchaConfig = config;
                            }
                            else {
                                auth._tenantRecaptchaConfigs[auth.tenantId] = config;
                            }
                            return resolve(config.siteKey);
                        }
                    })
                        .catch(error => {
                        reject(error);
                    });
                });
            }
            function retrieveRecaptchaToken(siteKey, resolve, reject) {
                const grecaptcha = window.grecaptcha;
                if (isEnterprise(grecaptcha)) {
                    grecaptcha.enterprise.ready(() => {
                        grecaptcha.enterprise
                            .execute(siteKey, { action })
                            .then(token => {
                            resolve(token);
                        })
                            .catch(() => {
                            resolve(FAKE_TOKEN);
                        });
                    });
                }
                else {
                    reject(Error('No reCAPTCHA enterprise script loaded.'));
                }
            }
            // Returns Promise for a mock token when appVerificationDisabledForTesting is true.
            if (this.auth.settings.appVerificationDisabledForTesting) {
                const mockRecaptcha = new MockGreCAPTCHATopLevel();
                return mockRecaptcha.execute('siteKey', { action: 'verify' });
            }
            return new Promise((resolve, reject) => {
                retrieveSiteKey(this.auth)
                    .then(siteKey => {
                    if (!forceRefresh && isEnterprise(window.grecaptcha)) {
                        retrieveRecaptchaToken(siteKey, resolve, reject);
                    }
                    else {
                        if (typeof window === 'undefined') {
                            reject(new Error('RecaptchaVerifier is only supported in browser'));
                            return;
                        }
                        let url = _recaptchaEnterpriseScriptUrl();
                        if (url.length !== 0) {
                            url += siteKey;
                        }
                        _loadJS(url)
                            .then(() => {
                            retrieveRecaptchaToken(siteKey, resolve, reject);
                        })
                            .catch(error => {
                            reject(error);
                        });
                    }
                })
                    .catch(error => {
                    reject(error);
                });
            });
        }
    }
    async function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {
        const verifier = new RecaptchaEnterpriseVerifier(auth);
        let captchaResponse;
        if (isFakeToken) {
            captchaResponse = FAKE_TOKEN;
        }
        else {
            try {
                captchaResponse = await verifier.verify(action);
            }
            catch (error) {
                captchaResponse = await verifier.verify(action, true);
            }
        }
        const newRequest = Object.assign({}, request);
        if (action === "mfaSmsEnrollment" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ ||
            action === "mfaSmsSignIn" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {
            if ('phoneEnrollmentInfo' in newRequest) {
                const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;
                const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;
                Object.assign(newRequest, {
                    'phoneEnrollmentInfo': {
                        phoneNumber,
                        recaptchaToken,
                        captchaResponse,
                        'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */,
                        'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
                    }
                });
            }
            else if ('phoneSignInInfo' in newRequest) {
                const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;
                Object.assign(newRequest, {
                    'phoneSignInInfo': {
                        recaptchaToken,
                        captchaResponse,
                        'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */,
                        'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
                    }
                });
            }
            return newRequest;
        }
        if (!isCaptchaResp) {
            Object.assign(newRequest, { captchaResponse });
        }
        else {
            Object.assign(newRequest, { 'captchaResp': captchaResponse });
        }
        Object.assign(newRequest, { 'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ });
        Object.assign(newRequest, {
            'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
        });
        return newRequest;
    }
    async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {
        var _a;
        {
            if ((_a = authInstance
                ._getRecaptchaConfig()) === null || _a === undefined ? undefined : _a.isProviderEnabled("EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {
                const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */);
                return actionMethod(authInstance, requestWithRecaptcha);
            }
            else {
                return actionMethod(authInstance, request).catch(async (error) => {
                    if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {
                        console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);
                        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */);
                        return actionMethod(authInstance, requestWithRecaptcha);
                    }
                    else {
                        return Promise.reject(error);
                    }
                });
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Initializes an {@link Auth} instance with fine-grained control over
     * {@link Dependencies}.
     *
     * @remarks
     *
     * This function allows more control over the {@link Auth} instance than
     * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
     * the {@link Dependencies}. In general, `getAuth` is the easiest way to
     * initialize Auth and works for most use cases. Use `initializeAuth` if you
     * need control over which persistence layer is used, or to minimize bundle
     * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
     *
     * For example, if your app only uses anonymous accounts and you only want
     * accounts saved for the current session, initialize `Auth` with:
     *
     * ```js
     * const auth = initializeAuth(app, {
     *   persistence: browserSessionPersistence,
     *   popupRedirectResolver: undefined,
     * });
     * ```
     *
     * @public
     */
    function initializeAuth(app, deps) {
        const provider = _getProvider(app, 'auth');
        if (provider.isInitialized()) {
            const auth = provider.getImmediate();
            const initialOptions = provider.getOptions();
            if (deepEqual(initialOptions, deps !== null && deps !== undefined ? deps : {})) {
                return auth;
            }
            else {
                _fail(auth, "already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */);
            }
        }
        const auth = provider.initialize({ options: deps });
        return auth;
    }
    function _initializeAuthInstance(auth, deps) {
        const persistence = (deps === null || deps === undefined ? undefined : deps.persistence) || [];
        const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
        if (deps === null || deps === undefined ? undefined : deps.errorMap) {
            auth._updateErrorMap(deps.errorMap);
        }
        // This promise is intended to float; auth initialization happens in the
        // background, meanwhile the auth object may be used by the app.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        auth._initializeWithPersistence(hierarchy, deps === null || deps === undefined ? undefined : deps.popupRedirectResolver);
    }

    /**
     * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
     * Firebase Auth services.
     *
     * @remarks
     * This must be called synchronously immediately following the first call to
     * {@link initializeAuth}.  Do not use with production credentials as emulator
     * traffic is not encrypted.
     *
     *
     * @example
     * ```javascript
     * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
     * ```
     *
     * @param auth - The {@link Auth} instance.
     * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
     * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
     * `true` to disable the warning banner attached to the DOM.
     *
     * @public
     */
    function connectAuthEmulator(auth, url, options) {
        const authInternal = _castAuth(auth);
        _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);
        _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);
        const disableWarnings = false;
        const protocol = extractProtocol(url);
        const { host, port } = extractHostAndPort(url);
        const portStr = port === null ? '' : `:${port}`;
        // Always replace path with "/" (even if input url had no path at all, or had a different one).
        authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };
        authInternal.settings.appVerificationDisabledForTesting = true;
        authInternal.emulatorConfig = Object.freeze({
            host,
            port,
            protocol: protocol.replace(':', ''),
            options: Object.freeze({ disableWarnings })
        });
        {
            emitEmulatorWarning();
        }
    }
    function extractProtocol(url) {
        const protocolEnd = url.indexOf(':');
        return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
    }
    function extractHostAndPort(url) {
        const protocol = extractProtocol(url);
        const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.
        if (!authority) {
            return { host: '', port: null };
        }
        const hostAndPort = authority[2].split('@').pop() || ''; // Strip out "username:password@".
        const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
        if (bracketedIPv6) {
            const host = bracketedIPv6[1];
            return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };
        }
        else {
            const [host, port] = hostAndPort.split(':');
            return { host, port: parsePort(port) };
        }
    }
    function parsePort(portStr) {
        if (!portStr) {
            return null;
        }
        const port = Number(portStr);
        if (isNaN(port)) {
            return null;
        }
        return port;
    }
    function emitEmulatorWarning() {
        function attachBanner() {
            const el = document.createElement('p');
            const sty = el.style;
            el.innerText =
                'Running in emulator mode. Do not use with production credentials.';
            sty.position = 'fixed';
            sty.width = '100%';
            sty.backgroundColor = '#ffffff';
            sty.border = '.1em solid #000000';
            sty.color = '#b50000';
            sty.bottom = '0px';
            sty.left = '0px';
            sty.margin = '0px';
            sty.zIndex = '10000';
            sty.textAlign = 'center';
            el.classList.add('firebase-emulator-warning');
            document.body.appendChild(el);
        }
        if (typeof console !== 'undefined' && typeof console.info === 'function') {
            console.info('WARNING: You are using the Auth Emulator,' +
                ' which is intended for local testing only.  Do not use with' +
                ' production credentials.');
        }
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            if (document.readyState === 'loading') {
                window.addEventListener('DOMContentLoaded', attachBanner);
            }
            else {
                attachBanner();
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface that represents the credentials returned by an {@link AuthProvider}.
     *
     * @remarks
     * Implementations specify the details about each auth provider's credential requirements.
     *
     * @public
     */
    class AuthCredential {
        /** @internal */
        constructor(
        /**
         * The authentication provider ID for the credential.
         *
         * @remarks
         * For example, 'facebook.com', or 'google.com'.
         */
        providerId, 
        /**
         * The authentication sign in method for the credential.
         *
         * @remarks
         * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
         * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
         * identifier as returned in {@link fetchSignInMethodsForEmail}.
         */
        signInMethod) {
            this.providerId = providerId;
            this.signInMethod = signInMethod;
        }
        /**
         * Returns a JSON-serializable representation of this object.
         *
         * @returns a JSON-serializable representation of this object.
         */
        toJSON() {
            return debugFail('not implemented');
        }
        /** @internal */
        _getIdTokenResponse(_auth) {
            return debugFail('not implemented');
        }
        /** @internal */
        _linkToIdToken(_auth, _idToken) {
            return debugFail('not implemented');
        }
        /** @internal */
        _getReauthenticationResolver(_auth) {
            return debugFail('not implemented');
        }
    }
    // Used for linking an email/password account to an existing idToken. Uses the same request/response
    // format as updateEmailPassword.
    async function linkEmailPassword(auth, request) {
        return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signUp" /* Endpoint.SIGN_UP */, request);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function signInWithPassword(auth, request) {
        return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithPassword" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function signInWithEmailLink$1(auth, request) {
        return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));
    }
    async function signInWithEmailLinkForLinking(auth, request) {
        return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface that represents the credentials returned by {@link EmailAuthProvider} for
     * {@link ProviderId}.PASSWORD
     *
     * @remarks
     * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
     * {@link SignInMethod}.EMAIL_LINK.
     *
     * @public
     */
    class EmailAuthCredential extends AuthCredential {
        /** @internal */
        constructor(
        /** @internal */
        _email, 
        /** @internal */
        _password, signInMethod, 
        /** @internal */
        _tenantId = null) {
            super("password" /* ProviderId.PASSWORD */, signInMethod);
            this._email = _email;
            this._password = _password;
            this._tenantId = _tenantId;
        }
        /** @internal */
        static _fromEmailAndPassword(email, password) {
            return new EmailAuthCredential(email, password, "password" /* SignInMethod.EMAIL_PASSWORD */);
        }
        /** @internal */
        static _fromEmailAndCode(email, oobCode, tenantId = null) {
            return new EmailAuthCredential(email, oobCode, "emailLink" /* SignInMethod.EMAIL_LINK */, tenantId);
        }
        /** {@inheritdoc AuthCredential.toJSON} */
        toJSON() {
            return {
                email: this._email,
                password: this._password,
                signInMethod: this.signInMethod,
                tenantId: this._tenantId
            };
        }
        /**
         * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
         *
         * @param json - Either `object` or the stringified representation of the object. When string is
         * provided, `JSON.parse` would be called first.
         *
         * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
         */
        static fromJSON(json) {
            const obj = typeof json === 'string' ? JSON.parse(json) : json;
            if ((obj === null || obj === undefined ? undefined : obj.email) && (obj === null || obj === undefined ? undefined : obj.password)) {
                if (obj.signInMethod === "password" /* SignInMethod.EMAIL_PASSWORD */) {
                    return this._fromEmailAndPassword(obj.email, obj.password);
                }
                else if (obj.signInMethod === "emailLink" /* SignInMethod.EMAIL_LINK */) {
                    return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
                }
            }
            return null;
        }
        /** @internal */
        async _getIdTokenResponse(auth) {
            switch (this.signInMethod) {
                case "password" /* SignInMethod.EMAIL_PASSWORD */:
                    const request = {
                        returnSecureToken: true,
                        email: this._email,
                        password: this._password,
                        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */
                    };
                    return handleRecaptchaFlow(auth, request, "signInWithPassword" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword);
                case "emailLink" /* SignInMethod.EMAIL_LINK */:
                    return signInWithEmailLink$1(auth, {
                        email: this._email,
                        oobCode: this._password
                    });
                default:
                    _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            }
        }
        /** @internal */
        async _linkToIdToken(auth, idToken) {
            switch (this.signInMethod) {
                case "password" /* SignInMethod.EMAIL_PASSWORD */:
                    const request = {
                        idToken,
                        returnSecureToken: true,
                        email: this._email,
                        password: this._password,
                        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */
                    };
                    return handleRecaptchaFlow(auth, request, "signUpPassword" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword);
                case "emailLink" /* SignInMethod.EMAIL_LINK */:
                    return signInWithEmailLinkForLinking(auth, {
                        idToken,
                        email: this._email,
                        oobCode: this._password
                    });
                default:
                    _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            }
        }
        /** @internal */
        _getReauthenticationResolver(auth) {
            return this._getIdTokenResponse(auth);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function signInWithIdp(auth, request) {
        return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithIdp" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const IDP_REQUEST_URI$1 = 'http://localhost';
    /**
     * Represents the OAuth credentials returned by an {@link OAuthProvider}.
     *
     * @remarks
     * Implementations specify the details about each auth provider's credential requirements.
     *
     * @public
     */
    class OAuthCredential extends AuthCredential {
        constructor() {
            super(...arguments);
            this.pendingToken = null;
        }
        /** @internal */
        static _fromParams(params) {
            const cred = new OAuthCredential(params.providerId, params.signInMethod);
            if (params.idToken || params.accessToken) {
                // OAuth 2 and either ID token or access token.
                if (params.idToken) {
                    cred.idToken = params.idToken;
                }
                if (params.accessToken) {
                    cred.accessToken = params.accessToken;
                }
                // Add nonce if available and no pendingToken is present.
                if (params.nonce && !params.pendingToken) {
                    cred.nonce = params.nonce;
                }
                if (params.pendingToken) {
                    cred.pendingToken = params.pendingToken;
                }
            }
            else if (params.oauthToken && params.oauthTokenSecret) {
                // OAuth 1 and OAuth token with token secret
                cred.accessToken = params.oauthToken;
                cred.secret = params.oauthTokenSecret;
            }
            else {
                _fail("argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
            }
            return cred;
        }
        /** {@inheritdoc AuthCredential.toJSON}  */
        toJSON() {
            return {
                idToken: this.idToken,
                accessToken: this.accessToken,
                secret: this.secret,
                nonce: this.nonce,
                pendingToken: this.pendingToken,
                providerId: this.providerId,
                signInMethod: this.signInMethod
            };
        }
        /**
         * Static method to deserialize a JSON representation of an object into an
         * {@link  AuthCredential}.
         *
         * @param json - Input can be either Object or the stringified representation of the object.
         * When string is provided, JSON.parse would be called first.
         *
         * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
         */
        static fromJSON(json) {
            const obj = typeof json === 'string' ? JSON.parse(json) : json;
            const { providerId, signInMethod } = obj, rest = __rest(obj, ["providerId", "signInMethod"]);
            if (!providerId || !signInMethod) {
                return null;
            }
            const cred = new OAuthCredential(providerId, signInMethod);
            cred.idToken = rest.idToken || undefined;
            cred.accessToken = rest.accessToken || undefined;
            cred.secret = rest.secret;
            cred.nonce = rest.nonce;
            cred.pendingToken = rest.pendingToken || null;
            return cred;
        }
        /** @internal */
        _getIdTokenResponse(auth) {
            const request = this.buildRequest();
            return signInWithIdp(auth, request);
        }
        /** @internal */
        _linkToIdToken(auth, idToken) {
            const request = this.buildRequest();
            request.idToken = idToken;
            return signInWithIdp(auth, request);
        }
        /** @internal */
        _getReauthenticationResolver(auth) {
            const request = this.buildRequest();
            request.autoCreate = false;
            return signInWithIdp(auth, request);
        }
        buildRequest() {
            const request = {
                requestUri: IDP_REQUEST_URI$1,
                returnSecureToken: true
            };
            if (this.pendingToken) {
                request.pendingToken = this.pendingToken;
            }
            else {
                const postBody = {};
                if (this.idToken) {
                    postBody['id_token'] = this.idToken;
                }
                if (this.accessToken) {
                    postBody['access_token'] = this.accessToken;
                }
                if (this.secret) {
                    postBody['oauth_token_secret'] = this.secret;
                }
                postBody['providerId'] = this.providerId;
                if (this.nonce && !this.pendingToken) {
                    postBody['nonce'] = this.nonce;
                }
                request.postBody = querystring(postBody);
            }
            return request;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Maps the mode string in action code URL to Action Code Info operation.
     *
     * @param mode
     */
    function parseMode(mode) {
        switch (mode) {
            case 'recoverEmail':
                return "RECOVER_EMAIL" /* ActionCodeOperation.RECOVER_EMAIL */;
            case 'resetPassword':
                return "PASSWORD_RESET" /* ActionCodeOperation.PASSWORD_RESET */;
            case 'signIn':
                return "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */;
            case 'verifyEmail':
                return "VERIFY_EMAIL" /* ActionCodeOperation.VERIFY_EMAIL */;
            case 'verifyAndChangeEmail':
                return "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;
            case 'revertSecondFactorAddition':
                return "REVERT_SECOND_FACTOR_ADDITION" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;
            default:
                return null;
        }
    }
    /**
     * Helper to parse FDL links
     *
     * @param url
     */
    function parseDeepLink(url) {
        const link = querystringDecode(extractQuerystring(url))['link'];
        // Double link case (automatic redirect).
        const doubleDeepLink = link
            ? querystringDecode(extractQuerystring(link))['deep_link_id']
            : null;
        // iOS custom scheme links.
        const iOSDeepLink = querystringDecode(extractQuerystring(url))['deep_link_id'];
        const iOSDoubleDeepLink = iOSDeepLink
            ? querystringDecode(extractQuerystring(iOSDeepLink))['link']
            : null;
        return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
    }
    /**
     * A utility class to parse email action URLs such as password reset, email verification,
     * email link sign in, etc.
     *
     * @public
     */
    class ActionCodeURL {
        /**
         * @param actionLink - The link from which to extract the URL.
         * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
         *
         * @internal
         */
        constructor(actionLink) {
            var _a, _b, _c, _d, _e, _f;
            const searchParams = querystringDecode(extractQuerystring(actionLink));
            const apiKey = (_a = searchParams["apiKey" /* QueryField.API_KEY */]) !== null && _a !== undefined ? _a : null;
            const code = (_b = searchParams["oobCode" /* QueryField.CODE */]) !== null && _b !== undefined ? _b : null;
            const operation = parseMode((_c = searchParams["mode" /* QueryField.MODE */]) !== null && _c !== undefined ? _c : null);
            // Validate API key, code and mode.
            _assert(apiKey && code && operation, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
            this.apiKey = apiKey;
            this.operation = operation;
            this.code = code;
            this.continueUrl = (_d = searchParams["continueUrl" /* QueryField.CONTINUE_URL */]) !== null && _d !== undefined ? _d : null;
            this.languageCode = (_e = searchParams["languageCode" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== undefined ? _e : null;
            this.tenantId = (_f = searchParams["tenantId" /* QueryField.TENANT_ID */]) !== null && _f !== undefined ? _f : null;
        }
        /**
         * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
         * otherwise returns null.
         *
         * @param link  - The email action link string.
         * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
         *
         * @public
         */
        static parseLink(link) {
            const actionLink = parseDeepLink(link);
            try {
                return new ActionCodeURL(actionLink);
            }
            catch (_a) {
                return null;
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating {@link EmailAuthCredential}.
     *
     * @public
     */
    class EmailAuthProvider {
        constructor() {
            /**
             * Always set to {@link ProviderId}.PASSWORD, even for email link.
             */
            this.providerId = EmailAuthProvider.PROVIDER_ID;
        }
        /**
         * Initialize an {@link AuthCredential} using an email and password.
         *
         * @example
         * ```javascript
         * const authCredential = EmailAuthProvider.credential(email, password);
         * const userCredential = await signInWithCredential(auth, authCredential);
         * ```
         *
         * @example
         * ```javascript
         * const userCredential = await signInWithEmailAndPassword(auth, email, password);
         * ```
         *
         * @param email - Email address.
         * @param password - User account password.
         * @returns The auth provider credential.
         */
        static credential(email, password) {
            return EmailAuthCredential._fromEmailAndPassword(email, password);
        }
        /**
         * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
         * email link operation.
         *
         * @example
         * ```javascript
         * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
         * const userCredential = await signInWithCredential(auth, authCredential);
         * ```
         *
         * @example
         * ```javascript
         * await sendSignInLinkToEmail(auth, email);
         * // Obtain emailLink from user.
         * const userCredential = await signInWithEmailLink(auth, email, emailLink);
         * ```
         *
         * @param auth - The {@link Auth} instance used to verify the link.
         * @param email - Email address.
         * @param emailLink - Sign-in email link.
         * @returns - The auth provider credential.
         */
        static credentialWithLink(email, emailLink) {
            const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
            _assert(actionCodeUrl, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
            return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
        }
    }
    /**
     * Always set to {@link ProviderId}.PASSWORD, even for email link.
     */
    EmailAuthProvider.PROVIDER_ID = "password" /* ProviderId.PASSWORD */;
    /**
     * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
     */
    EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* SignInMethod.EMAIL_PASSWORD */;
    /**
     * Always set to {@link SignInMethod}.EMAIL_LINK.
     */
    EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* SignInMethod.EMAIL_LINK */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The base class for all Federated providers (OAuth (including OIDC), SAML).
     *
     * This class is not meant to be instantiated directly.
     *
     * @public
     */
    class FederatedAuthProvider {
        /**
         * Constructor for generic OAuth providers.
         *
         * @param providerId - Provider for which credentials should be generated.
         */
        constructor(providerId) {
            this.providerId = providerId;
            /** @internal */
            this.defaultLanguageCode = null;
            /** @internal */
            this.customParameters = {};
        }
        /**
         * Set the language gode.
         *
         * @param languageCode - language code
         */
        setDefaultLanguage(languageCode) {
            this.defaultLanguageCode = languageCode;
        }
        /**
         * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
         * operations.
         *
         * @remarks
         * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
         * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
         *
         * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
         */
        setCustomParameters(customOAuthParameters) {
            this.customParameters = customOAuthParameters;
            return this;
        }
        /**
         * Retrieve the current list of {@link CustomParameters}.
         */
        getCustomParameters() {
            return this.customParameters;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Common code to all OAuth providers. This is separate from the
     * {@link OAuthProvider} so that child providers (like
     * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
     * Instead, they rely on a static `credential` method.
     */
    class BaseOAuthProvider extends FederatedAuthProvider {
        constructor() {
            super(...arguments);
            /** @internal */
            this.scopes = [];
        }
        /**
         * Add an OAuth scope to the credential.
         *
         * @param scope - Provider OAuth scope to add.
         */
        addScope(scope) {
            // If not already added, add scope to list.
            if (!this.scopes.includes(scope)) {
                this.scopes.push(scope);
            }
            return this;
        }
        /**
         * Retrieve the current list of OAuth scopes.
         */
        getScopes() {
            return [...this.scopes];
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('user_birthday');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = FacebookAuthProvider.credentialFromResult(result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * provider.addScope('user_birthday');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Facebook Access Token.
     * const credential = FacebookAuthProvider.credentialFromResult(result);
     * const token = credential.accessToken;
     * ```
     *
     * @public
     */
    class FacebookAuthProvider extends BaseOAuthProvider {
        constructor() {
            super("facebook.com" /* ProviderId.FACEBOOK */);
        }
        /**
         * Creates a credential for Facebook.
         *
         * @example
         * ```javascript
         * // `event` from the Facebook auth.authResponseChange callback.
         * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param accessToken - Facebook access token.
         */
        static credential(accessToken) {
            return OAuthCredential._fromParams({
                providerId: FacebookAuthProvider.PROVIDER_ID,
                signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
                accessToken
            });
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
                return null;
            }
            if (!tokenResponse.oauthAccessToken) {
                return null;
            }
            try {
                return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
            }
            catch (_a) {
                return null;
            }
        }
    }
    /** Always set to {@link SignInMethod}.FACEBOOK. */
    FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* SignInMethod.FACEBOOK */;
    /** Always set to {@link ProviderId}.FACEBOOK. */
    FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* ProviderId.FACEBOOK */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new GoogleAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('profile');
     * provider.addScope('email');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Google Access Token.
     *   const credential = GoogleAuthProvider.credentialFromResult(result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new GoogleAuthProvider();
     * provider.addScope('profile');
     * provider.addScope('email');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Google Access Token.
     * const credential = GoogleAuthProvider.credentialFromResult(result);
     * const token = credential.accessToken;
     * ```
     *
     * @public
     */
    class GoogleAuthProvider extends BaseOAuthProvider {
        constructor() {
            super("google.com" /* ProviderId.GOOGLE */);
            this.addScope('profile');
        }
        /**
         * Creates a credential for Google. At least one of ID token and access token is required.
         *
         * @example
         * ```javascript
         * // \`googleUser\` from the onsuccess Google Sign In callback.
         * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param idToken - Google ID token.
         * @param accessToken - Google access token.
         */
        static credential(idToken, accessToken) {
            return OAuthCredential._fromParams({
                providerId: GoogleAuthProvider.PROVIDER_ID,
                signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
                idToken,
                accessToken
            });
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse) {
                return null;
            }
            const { oauthIdToken, oauthAccessToken } = tokenResponse;
            if (!oauthIdToken && !oauthAccessToken) {
                // This could be an oauth 1 credential or a phone credential
                return null;
            }
            try {
                return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
            }
            catch (_a) {
                return null;
            }
        }
    }
    /** Always set to {@link SignInMethod}.GOOGLE. */
    GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* SignInMethod.GOOGLE */;
    /** Always set to {@link ProviderId}.GOOGLE. */
    GoogleAuthProvider.PROVIDER_ID = "google.com" /* ProviderId.GOOGLE */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
     *
     * @remarks
     * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
     * the {@link signInWithPopup} handler:
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new GithubAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('repo');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a GitHub Access Token.
     *   const credential = GithubAuthProvider.credentialFromResult(result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new GithubAuthProvider();
     * provider.addScope('repo');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a GitHub Access Token.
     * const credential = GithubAuthProvider.credentialFromResult(result);
     * const token = credential.accessToken;
     * ```
     * @public
     */
    class GithubAuthProvider extends BaseOAuthProvider {
        constructor() {
            super("github.com" /* ProviderId.GITHUB */);
        }
        /**
         * Creates a credential for GitHub.
         *
         * @param accessToken - GitHub access token.
         */
        static credential(accessToken) {
            return OAuthCredential._fromParams({
                providerId: GithubAuthProvider.PROVIDER_ID,
                signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
                accessToken
            });
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return GithubAuthProvider.credentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
                return null;
            }
            if (!tokenResponse.oauthAccessToken) {
                return null;
            }
            try {
                return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
            }
            catch (_a) {
                return null;
            }
        }
    }
    /** Always set to {@link SignInMethod}.GITHUB. */
    GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* SignInMethod.GITHUB */;
    /** Always set to {@link ProviderId}.GITHUB. */
    GithubAuthProvider.PROVIDER_ID = "github.com" /* ProviderId.GITHUB */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new TwitterAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Twitter Access Token and Secret.
     *   const credential = TwitterAuthProvider.credentialFromResult(result);
     *   const token = credential.accessToken;
     *   const secret = credential.secret;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new TwitterAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Twitter Access Token and Secret.
     * const credential = TwitterAuthProvider.credentialFromResult(result);
     * const token = credential.accessToken;
     * const secret = credential.secret;
     * ```
     *
     * @public
     */
    class TwitterAuthProvider extends BaseOAuthProvider {
        constructor() {
            super("twitter.com" /* ProviderId.TWITTER */);
        }
        /**
         * Creates a credential for Twitter.
         *
         * @param token - Twitter access token.
         * @param secret - Twitter secret.
         */
        static credential(token, secret) {
            return OAuthCredential._fromParams({
                providerId: TwitterAuthProvider.PROVIDER_ID,
                signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
                oauthToken: token,
                oauthTokenSecret: secret
            });
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse) {
                return null;
            }
            const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
            if (!oauthAccessToken || !oauthTokenSecret) {
                return null;
            }
            try {
                return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
            }
            catch (_a) {
                return null;
            }
        }
    }
    /** Always set to {@link SignInMethod}.TWITTER. */
    TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* SignInMethod.TWITTER */;
    /** Always set to {@link ProviderId}.TWITTER. */
    TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* ProviderId.TWITTER */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class UserCredentialImpl {
        constructor(params) {
            this.user = params.user;
            this.providerId = params.providerId;
            this._tokenResponse = params._tokenResponse;
            this.operationType = params.operationType;
        }
        static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
            const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
            const providerId = providerIdForResponse(idTokenResponse);
            const userCred = new UserCredentialImpl({
                user,
                providerId,
                _tokenResponse: idTokenResponse,
                operationType
            });
            return userCred;
        }
        static async _forOperation(user, operationType, response) {
            await user._updateTokensIfNecessary(response, /* reload */ true);
            const providerId = providerIdForResponse(response);
            return new UserCredentialImpl({
                user,
                providerId,
                _tokenResponse: response,
                operationType
            });
        }
    }
    function providerIdForResponse(response) {
        if (response.providerId) {
            return response.providerId;
        }
        if ('phoneNumber' in response) {
            return "phone" /* ProviderId.PHONE */;
        }
        return null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class MultiFactorError extends FirebaseError {
        constructor(auth, error, operationType, user) {
            var _a;
            super(error.code, error.message);
            this.operationType = operationType;
            this.user = user;
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(this, MultiFactorError.prototype);
            this.customData = {
                appName: auth.name,
                tenantId: (_a = auth.tenantId) !== null && _a !== undefined ? _a : undefined,
                _serverResponse: error.customData._serverResponse,
                operationType
            };
        }
        static _fromErrorAndOperation(auth, error, operationType, user) {
            return new MultiFactorError(auth, error, operationType, user);
        }
    }
    function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
        const idTokenProvider = operationType === "reauthenticate" /* OperationType.REAUTHENTICATE */
            ? credential._getReauthenticationResolver(auth)
            : credential._getIdTokenResponse(auth);
        return idTokenProvider.catch(error => {
            if (error.code === `auth/${"multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */}`) {
                throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
            }
            throw error;
        });
    }
    async function _link$1(user, credential, bypassAuthState = false) {
        const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
        return UserCredentialImpl._forOperation(user, "link" /* OperationType.LINK */, response);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _reauthenticate(user, credential, bypassAuthState = false) {
        const { auth } = user;
        if (_isFirebaseServerApp(auth.app)) {
            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
        }
        const operationType = "reauthenticate" /* OperationType.REAUTHENTICATE */;
        try {
            const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
            _assert(response.idToken, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            const parsed = _parseToken(response.idToken);
            _assert(parsed, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            const { sub: localId } = parsed;
            _assert(user.uid === localId, auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */);
            return UserCredentialImpl._forOperation(user, operationType, response);
        }
        catch (e) {
            // Convert user deleted error into user mismatch
            if ((e === null || e === undefined ? undefined : e.code) === `auth/${"user-not-found" /* AuthErrorCode.USER_DELETED */}`) {
                _fail(auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */);
            }
            throw e;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _signInWithCredential(auth, credential, bypassAuthState = false) {
        if (_isFirebaseServerApp(auth.app)) {
            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
        }
        const operationType = "signIn" /* OperationType.SIGN_IN */;
        const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
        const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
        if (!bypassAuthState) {
            await auth._updateCurrentUser(userCredential.user);
        }
        return userCredential;
    }
    /**
     * Asynchronously signs in with the given credentials.
     *
     * @remarks
     * An {@link AuthProvider} can be used to generate the credential.
     *
     * This method is not supported by {@link Auth} instances created with a
     * {@link @firebase/app#FirebaseServerApp}.
     *
     * @param auth - The {@link Auth} instance.
     * @param credential - The auth credential.
     *
     * @public
     */
    async function signInWithCredential(auth, credential) {
        return _signInWithCredential(_castAuth(auth), credential);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates the password policy cached in the {@link Auth} instance if a policy is already
     * cached for the project or tenant.
     *
     * @remarks
     * We only fetch the password policy if the password did not meet policy requirements and
     * there is an existing policy cached. A developer must call validatePassword at least
     * once for the cache to be automatically updated.
     *
     * @param auth - The {@link Auth} instance.
     *
     * @private
     */
    async function recachePasswordPolicy(auth) {
        const authInternal = _castAuth(auth);
        if (authInternal._getPasswordPolicyInternal()) {
            await authInternal._updatePasswordPolicy();
        }
    }
    /**
     * Asynchronously signs in using an email and password.
     *
     * @remarks
     * Fails with an error if the email address and password do not match. When
     * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
     * is enabled, this method fails with "auth/invalid-credential" in case of an invalid
     * email/password.
     *
     * This method is not supported on {@link Auth} instances created with a
     * {@link @firebase/app#FirebaseServerApp}.
     *
     * Note: The user's password is NOT the password used to access the user's email account. The
     * email address serves as a unique identifier for the user, and the password is used to access
     * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
     *
     *
     * @param auth - The {@link Auth} instance.
     * @param email - The users email address.
     * @param password - The users password.
     *
     * @public
     */
    function signInWithEmailAndPassword(auth, email, password) {
        if (_isFirebaseServerApp(auth.app)) {
            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
        }
        return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(async (error) => {
            if (error.code === `auth/${"password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {
                void recachePasswordPolicy(auth);
            }
            throw error;
        });
    }
    /**
     * Adds an observer for changes to the signed-in user's ID token.
     *
     * @remarks
     * This includes sign-in, sign-out, and token refresh events.
     * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.
     *
     * @param auth - The {@link Auth} instance.
     * @param nextOrObserver - callback triggered on change.
     * @param error - Deprecated. This callback is never triggered. Errors
     * on signing in/out can be caught in promises returned from
     * sign-in/sign-out functions.
     * @param completed - Deprecated. This callback is never triggered.
     *
     * @public
     */
    function onIdTokenChanged(auth, nextOrObserver, error, completed) {
        return getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);
    }
    /**
     * Adds a blocking callback that runs before an auth state change
     * sets a new user.
     *
     * @param auth - The {@link Auth} instance.
     * @param callback - callback triggered before new user value is set.
     *   If this throws, it blocks the user from being set.
     * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`
     *   callback throws, allowing you to undo any side effects.
     */
    function beforeAuthStateChanged(auth, callback, onAbort) {
        return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);
    }
    /**
     * Adds an observer for changes to the user's sign-in state.
     *
     * @remarks
     * To keep the old behavior, see {@link onIdTokenChanged}.
     *
     * @param auth - The {@link Auth} instance.
     * @param nextOrObserver - callback triggered on change.
     * @param error - Deprecated. This callback is never triggered. Errors
     * on signing in/out can be caught in promises returned from
     * sign-in/sign-out functions.
     * @param completed - Deprecated. This callback is never triggered.
     *
     * @public
     */
    function onAuthStateChanged(auth, nextOrObserver, error, completed) {
        return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);
    }
    /**
     * Signs out the current user.
     *
     * @remarks
     * This method is not supported by {@link Auth} instances created with a
     * {@link @firebase/app#FirebaseServerApp}.
     *
     * @param auth - The {@link Auth} instance.
     *
     * @public
     */
    function signOut(auth) {
        return getModularInstance(auth).signOut();
    }

    const STORAGE_AVAILABLE_KEY = '__sak';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // There are two different browser persistence types: local and session.
    // Both have the same implementation but use a different underlying storage
    // object.
    class BrowserPersistenceClass {
        constructor(storageRetriever, type) {
            this.storageRetriever = storageRetriever;
            this.type = type;
        }
        _isAvailable() {
            try {
                if (!this.storage) {
                    return Promise.resolve(false);
                }
                this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
                this.storage.removeItem(STORAGE_AVAILABLE_KEY);
                return Promise.resolve(true);
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        }
        _set(key, value) {
            this.storage.setItem(key, JSON.stringify(value));
            return Promise.resolve();
        }
        _get(key) {
            const json = this.storage.getItem(key);
            return Promise.resolve(json ? JSON.parse(json) : null);
        }
        _remove(key) {
            this.storage.removeItem(key);
            return Promise.resolve();
        }
        get storage() {
            return this.storageRetriever();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The polling period in case events are not supported
    const _POLLING_INTERVAL_MS$1 = 1000;
    // The IE 10 localStorage cross tab synchronization delay in milliseconds
    const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
    class BrowserLocalPersistence extends BrowserPersistenceClass {
        constructor() {
            super(() => window.localStorage, "LOCAL" /* PersistenceType.LOCAL */);
            this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
            this.listeners = {};
            this.localCache = {};
            // setTimeout return value is platform specific
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.pollTimer = null;
            // Whether to use polling instead of depending on window events
            this.fallbackToPolling = _isMobileBrowser();
            this._shouldAllowMigration = true;
        }
        forAllChangedKeys(cb) {
            // Check all keys with listeners on them.
            for (const key of Object.keys(this.listeners)) {
                // Get value from localStorage.
                const newValue = this.storage.getItem(key);
                const oldValue = this.localCache[key];
                // If local map value does not match, trigger listener with storage event.
                // Differentiate this simulated event from the real storage event.
                if (newValue !== oldValue) {
                    cb(key, oldValue, newValue);
                }
            }
        }
        onStorageEvent(event, poll = false) {
            // Key would be null in some situations, like when localStorage is cleared
            if (!event.key) {
                this.forAllChangedKeys((key, _oldValue, newValue) => {
                    this.notifyListeners(key, newValue);
                });
                return;
            }
            const key = event.key;
            // Check the mechanism how this event was detected.
            // The first event will dictate the mechanism to be used.
            if (poll) {
                // Environment detects storage changes via polling.
                // Remove storage event listener to prevent possible event duplication.
                this.detachListener();
            }
            else {
                // Environment detects storage changes via storage event listener.
                // Remove polling listener to prevent possible event duplication.
                this.stopPolling();
            }
            const triggerListeners = () => {
                // Keep local map up to date in case storage event is triggered before
                // poll.
                const storedValue = this.storage.getItem(key);
                if (!poll && this.localCache[key] === storedValue) {
                    // Real storage event which has already been detected, do nothing.
                    // This seems to trigger in some IE browsers for some reason.
                    return;
                }
                this.notifyListeners(key, storedValue);
            };
            const storedValue = this.storage.getItem(key);
            if (_isIE10() &&
                storedValue !== event.newValue &&
                event.newValue !== event.oldValue) {
                // IE 10 has this weird bug where a storage event would trigger with the
                // correct key, oldValue and newValue but localStorage.getItem(key) does
                // not yield the updated value until a few milliseconds. This ensures
                // this recovers from that situation.
                setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
            }
            else {
                triggerListeners();
            }
        }
        notifyListeners(key, value) {
            this.localCache[key] = value;
            const listeners = this.listeners[key];
            if (listeners) {
                for (const listener of Array.from(listeners)) {
                    listener(value ? JSON.parse(value) : value);
                }
            }
        }
        startPolling() {
            this.stopPolling();
            this.pollTimer = setInterval(() => {
                this.forAllChangedKeys((key, oldValue, newValue) => {
                    this.onStorageEvent(new StorageEvent('storage', {
                        key,
                        oldValue,
                        newValue
                    }), 
                    /* poll */ true);
                });
            }, _POLLING_INTERVAL_MS$1);
        }
        stopPolling() {
            if (this.pollTimer) {
                clearInterval(this.pollTimer);
                this.pollTimer = null;
            }
        }
        attachListener() {
            window.addEventListener('storage', this.boundEventHandler);
        }
        detachListener() {
            window.removeEventListener('storage', this.boundEventHandler);
        }
        _addListener(key, listener) {
            if (Object.keys(this.listeners).length === 0) {
                // Whether browser can detect storage event when it had already been pushed to the background.
                // This may happen in some mobile browsers. A localStorage change in the foreground window
                // will not be detected in the background window via the storage event.
                // This was detected in iOS 7.x mobile browsers
                if (this.fallbackToPolling) {
                    this.startPolling();
                }
                else {
                    this.attachListener();
                }
            }
            if (!this.listeners[key]) {
                this.listeners[key] = new Set();
                // Populate the cache to avoid spuriously triggering on first poll.
                this.localCache[key] = this.storage.getItem(key);
            }
            this.listeners[key].add(listener);
        }
        _removeListener(key, listener) {
            if (this.listeners[key]) {
                this.listeners[key].delete(listener);
                if (this.listeners[key].size === 0) {
                    delete this.listeners[key];
                }
            }
            if (Object.keys(this.listeners).length === 0) {
                this.detachListener();
                this.stopPolling();
            }
        }
        // Update local cache on base operations:
        async _set(key, value) {
            await super._set(key, value);
            this.localCache[key] = JSON.stringify(value);
        }
        async _get(key) {
            const value = await super._get(key);
            this.localCache[key] = JSON.stringify(value);
            return value;
        }
        async _remove(key) {
            await super._remove(key);
            delete this.localCache[key];
        }
    }
    BrowserLocalPersistence.type = 'LOCAL';
    /**
     * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
     * for the underlying storage.
     *
     * @public
     */
    const browserLocalPersistence = BrowserLocalPersistence;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class BrowserSessionPersistence extends BrowserPersistenceClass {
        constructor() {
            super(() => window.sessionStorage, "SESSION" /* PersistenceType.SESSION */);
        }
        _addListener(_key, _listener) {
            // Listeners are not supported for session storage since it cannot be shared across windows
            return;
        }
        _removeListener(_key, _listener) {
            // Listeners are not supported for session storage since it cannot be shared across windows
            return;
        }
    }
    BrowserSessionPersistence.type = 'SESSION';
    /**
     * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
     * for the underlying storage.
     *
     * @public
     */
    const browserSessionPersistence = BrowserSessionPersistence;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
     *
     * @param promises - Array of promises to wait on.
     */
    function _allSettled(promises) {
        return Promise.all(promises.map(async (promise) => {
            try {
                const value = await promise;
                return {
                    fulfilled: true,
                    value
                };
            }
            catch (reason) {
                return {
                    fulfilled: false,
                    reason
                };
            }
        }));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface class for receiving messages.
     *
     */
    class Receiver {
        constructor(eventTarget) {
            this.eventTarget = eventTarget;
            this.handlersMap = {};
            this.boundEventHandler = this.handleEvent.bind(this);
        }
        /**
         * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
         *
         * @param eventTarget - An event target (such as window or self) through which the underlying
         * messages will be received.
         */
        static _getInstance(eventTarget) {
            // The results are stored in an array since objects can't be keys for other
            // objects. In addition, setting a unique property on an event target as a
            // hash map key may not be allowed due to CORS restrictions.
            const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));
            if (existingInstance) {
                return existingInstance;
            }
            const newInstance = new Receiver(eventTarget);
            this.receivers.push(newInstance);
            return newInstance;
        }
        isListeningto(eventTarget) {
            return this.eventTarget === eventTarget;
        }
        /**
         * Fans out a MessageEvent to the appropriate listeners.
         *
         * @remarks
         * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
         * finished processing.
         *
         * @param event - The MessageEvent.
         *
         */
        async handleEvent(event) {
            const messageEvent = event;
            const { eventId, eventType, data } = messageEvent.data;
            const handlers = this.handlersMap[eventType];
            if (!(handlers === null || handlers === undefined ? undefined : handlers.size)) {
                return;
            }
            messageEvent.ports[0].postMessage({
                status: "ack" /* _Status.ACK */,
                eventId,
                eventType
            });
            const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));
            const response = await _allSettled(promises);
            messageEvent.ports[0].postMessage({
                status: "done" /* _Status.DONE */,
                eventId,
                eventType,
                response
            });
        }
        /**
         * Subscribe an event handler for a particular event.
         *
         * @param eventType - Event name to subscribe to.
         * @param eventHandler - The event handler which should receive the events.
         *
         */
        _subscribe(eventType, eventHandler) {
            if (Object.keys(this.handlersMap).length === 0) {
                this.eventTarget.addEventListener('message', this.boundEventHandler);
            }
            if (!this.handlersMap[eventType]) {
                this.handlersMap[eventType] = new Set();
            }
            this.handlersMap[eventType].add(eventHandler);
        }
        /**
         * Unsubscribe an event handler from a particular event.
         *
         * @param eventType - Event name to unsubscribe from.
         * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
         *
         */
        _unsubscribe(eventType, eventHandler) {
            if (this.handlersMap[eventType] && eventHandler) {
                this.handlersMap[eventType].delete(eventHandler);
            }
            if (!eventHandler || this.handlersMap[eventType].size === 0) {
                delete this.handlersMap[eventType];
            }
            if (Object.keys(this.handlersMap).length === 0) {
                this.eventTarget.removeEventListener('message', this.boundEventHandler);
            }
        }
    }
    Receiver.receivers = [];

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _generateEventId(prefix = '', digits = 10) {
        let random = '';
        for (let i = 0; i < digits; i++) {
            random += Math.floor(Math.random() * 10);
        }
        return prefix + random;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface for sending messages and waiting for a completion response.
     *
     */
    class Sender {
        constructor(target) {
            this.target = target;
            this.handlers = new Set();
        }
        /**
         * Unsubscribe the handler and remove it from our tracking Set.
         *
         * @param handler - The handler to unsubscribe.
         */
        removeMessageHandler(handler) {
            if (handler.messageChannel) {
                handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
                handler.messageChannel.port1.close();
            }
            this.handlers.delete(handler);
        }
        /**
         * Send a message to the Receiver located at {@link target}.
         *
         * @remarks
         * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
         * receiver has had a chance to fully process the event.
         *
         * @param eventType - Type of event to send.
         * @param data - The payload of the event.
         * @param timeout - Timeout for waiting on an ACK from the receiver.
         *
         * @returns An array of settled promises from all the handlers that were listening on the receiver.
         */
        async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {
            const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
            if (!messageChannel) {
                throw new Error("connection_unavailable" /* _MessageError.CONNECTION_UNAVAILABLE */);
            }
            // Node timers and browser timers return fundamentally different types.
            // We don't actually care what the value is but TS won't accept unknown and
            // we can't cast properly in both environments.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let completionTimer;
            let handler;
            return new Promise((resolve, reject) => {
                const eventId = _generateEventId('', 20);
                messageChannel.port1.start();
                const ackTimer = setTimeout(() => {
                    reject(new Error("unsupported_event" /* _MessageError.UNSUPPORTED_EVENT */));
                }, timeout);
                handler = {
                    messageChannel,
                    onMessage(event) {
                        const messageEvent = event;
                        if (messageEvent.data.eventId !== eventId) {
                            return;
                        }
                        switch (messageEvent.data.status) {
                            case "ack" /* _Status.ACK */:
                                // The receiver should ACK first.
                                clearTimeout(ackTimer);
                                completionTimer = setTimeout(() => {
                                    reject(new Error("timeout" /* _MessageError.TIMEOUT */));
                                }, 3000 /* _TimeoutDuration.COMPLETION */);
                                break;
                            case "done" /* _Status.DONE */:
                                // Once the receiver's handlers are finished we will get the results.
                                clearTimeout(completionTimer);
                                resolve(messageEvent.data.response);
                                break;
                            default:
                                clearTimeout(ackTimer);
                                clearTimeout(completionTimer);
                                reject(new Error("invalid_response" /* _MessageError.INVALID_RESPONSE */));
                                break;
                        }
                    }
                };
                this.handlers.add(handler);
                messageChannel.port1.addEventListener('message', handler.onMessage);
                this.target.postMessage({
                    eventType,
                    eventId,
                    data
                }, [messageChannel.port2]);
            }).finally(() => {
                if (handler) {
                    this.removeMessageHandler(handler);
                }
            });
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Lazy accessor for window, since the compat layer won't tree shake this out,
     * we need to make sure not to mess with window unless we have to
     */
    function _window() {
        return window;
    }
    function _setWindowLocation(url) {
        _window().location.href = url;
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _isWorker() {
        return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&
            typeof _window()['importScripts'] === 'function');
    }
    async function _getActiveServiceWorker() {
        if (!(navigator === null || navigator === undefined ? undefined : navigator.serviceWorker)) {
            return null;
        }
        try {
            const registration = await navigator.serviceWorker.ready;
            return registration.active;
        }
        catch (_a) {
            return null;
        }
    }
    function _getServiceWorkerController() {
        var _a;
        return ((_a = navigator === null || navigator === undefined ? undefined : navigator.serviceWorker) === null || _a === undefined ? undefined : _a.controller) || null;
    }
    function _getWorkerGlobalScope() {
        return _isWorker() ? self : null;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DB_NAME = 'firebaseLocalStorageDb';
    const DB_VERSION = 1;
    const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
    const DB_DATA_KEYPATH = 'fbase_key';
    /**
     * Promise wrapper for IDBRequest
     *
     * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
     *
     */
    class DBPromise {
        constructor(request) {
            this.request = request;
        }
        toPromise() {
            return new Promise((resolve, reject) => {
                this.request.addEventListener('success', () => {
                    resolve(this.request.result);
                });
                this.request.addEventListener('error', () => {
                    reject(this.request.error);
                });
            });
        }
    }
    function getObjectStore(db, isReadWrite) {
        return db
            .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')
            .objectStore(DB_OBJECTSTORE_NAME);
    }
    function _deleteDatabase() {
        const request = indexedDB.deleteDatabase(DB_NAME);
        return new DBPromise(request).toPromise();
    }
    function _openDatabase() {
        const request = indexedDB.open(DB_NAME, DB_VERSION);
        return new Promise((resolve, reject) => {
            request.addEventListener('error', () => {
                reject(request.error);
            });
            request.addEventListener('upgradeneeded', () => {
                const db = request.result;
                try {
                    db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
                }
                catch (e) {
                    reject(e);
                }
            });
            request.addEventListener('success', async () => {
                const db = request.result;
                // Strange bug that occurs in Firefox when multiple tabs are opened at the
                // same time. The only way to recover seems to be deleting the database
                // and re-initializing it.
                // https://github.com/firebase/firebase-js-sdk/issues/634
                if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
                    // Need to close the database or else you get a `blocked` event
                    db.close();
                    await _deleteDatabase();
                    resolve(await _openDatabase());
                }
                else {
                    resolve(db);
                }
            });
        });
    }
    async function _putObject(db, key, value) {
        const request = getObjectStore(db, true).put({
            [DB_DATA_KEYPATH]: key,
            value
        });
        return new DBPromise(request).toPromise();
    }
    async function getObject(db, key) {
        const request = getObjectStore(db, false).get(key);
        const data = await new DBPromise(request).toPromise();
        return data === undefined ? null : data.value;
    }
    function _deleteObject(db, key) {
        const request = getObjectStore(db, true).delete(key);
        return new DBPromise(request).toPromise();
    }
    const _POLLING_INTERVAL_MS = 800;
    const _TRANSACTION_RETRY_COUNT = 3;
    class IndexedDBLocalPersistence {
        constructor() {
            this.type = "LOCAL" /* PersistenceType.LOCAL */;
            this._shouldAllowMigration = true;
            this.listeners = {};
            this.localCache = {};
            // setTimeout return value is platform specific
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.pollTimer = null;
            this.pendingWrites = 0;
            this.receiver = null;
            this.sender = null;
            this.serviceWorkerReceiverAvailable = false;
            this.activeServiceWorker = null;
            // Fire & forget the service worker registration as it may never resolve
            this._workerInitializationPromise =
                this.initializeServiceWorkerMessaging().then(() => { }, () => { });
        }
        async _openDb() {
            if (this.db) {
                return this.db;
            }
            this.db = await _openDatabase();
            return this.db;
        }
        async _withRetries(op) {
            let numAttempts = 0;
            while (true) {
                try {
                    const db = await this._openDb();
                    return await op(db);
                }
                catch (e) {
                    if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
                        throw e;
                    }
                    if (this.db) {
                        this.db.close();
                        this.db = undefined;
                    }
                    // TODO: consider adding exponential backoff
                }
            }
        }
        /**
         * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
         * postMessage interface to send these events to the worker ourselves.
         */
        async initializeServiceWorkerMessaging() {
            return _isWorker() ? this.initializeReceiver() : this.initializeSender();
        }
        /**
         * As the worker we should listen to events from the main window.
         */
        async initializeReceiver() {
            this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
            // Refresh from persistence if we receive a KeyChanged message.
            this.receiver._subscribe("keyChanged" /* _EventType.KEY_CHANGED */, async (_origin, data) => {
                const keys = await this._poll();
                return {
                    keyProcessed: keys.includes(data.key)
                };
            });
            // Let the sender know that we are listening so they give us more timeout.
            this.receiver._subscribe("ping" /* _EventType.PING */, async (_origin, _data) => {
                return ["keyChanged" /* _EventType.KEY_CHANGED */];
            });
        }
        /**
         * As the main window, we should let the worker know when keys change (set and remove).
         *
         * @remarks
         * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
         * may not resolve.
         */
        async initializeSender() {
            var _a, _b;
            // Check to see if there's an active service worker.
            this.activeServiceWorker = await _getActiveServiceWorker();
            if (!this.activeServiceWorker) {
                return;
            }
            this.sender = new Sender(this.activeServiceWorker);
            // Ping the service worker to check what events they can handle.
            const results = await this.sender._send("ping" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);
            if (!results) {
                return;
            }
            if (((_a = results[0]) === null || _a === undefined ? undefined : _a.fulfilled) &&
                ((_b = results[0]) === null || _b === undefined ? undefined : _b.value.includes("keyChanged" /* _EventType.KEY_CHANGED */))) {
                this.serviceWorkerReceiverAvailable = true;
            }
        }
        /**
         * Let the worker know about a changed key, the exact key doesn't technically matter since the
         * worker will just trigger a full sync anyway.
         *
         * @remarks
         * For now, we only support one service worker per page.
         *
         * @param key - Storage key which changed.
         */
        async notifyServiceWorker(key) {
            if (!this.sender ||
                !this.activeServiceWorker ||
                _getServiceWorkerController() !== this.activeServiceWorker) {
                return;
            }
            try {
                await this.sender._send("keyChanged" /* _EventType.KEY_CHANGED */, { key }, 
                // Use long timeout if receiver has previously responded to a ping from us.
                this.serviceWorkerReceiverAvailable
                    ? 800 /* _TimeoutDuration.LONG_ACK */
                    : 50 /* _TimeoutDuration.ACK */);
            }
            catch (_a) {
                // This is a best effort approach. Ignore errors.
            }
        }
        async _isAvailable() {
            try {
                if (!indexedDB) {
                    return false;
                }
                const db = await _openDatabase();
                await _putObject(db, STORAGE_AVAILABLE_KEY, '1');
                await _deleteObject(db, STORAGE_AVAILABLE_KEY);
                return true;
            }
            catch (_a) { }
            return false;
        }
        async _withPendingWrite(write) {
            this.pendingWrites++;
            try {
                await write();
            }
            finally {
                this.pendingWrites--;
            }
        }
        async _set(key, value) {
            return this._withPendingWrite(async () => {
                await this._withRetries((db) => _putObject(db, key, value));
                this.localCache[key] = value;
                return this.notifyServiceWorker(key);
            });
        }
        async _get(key) {
            const obj = (await this._withRetries((db) => getObject(db, key)));
            this.localCache[key] = obj;
            return obj;
        }
        async _remove(key) {
            return this._withPendingWrite(async () => {
                await this._withRetries((db) => _deleteObject(db, key));
                delete this.localCache[key];
                return this.notifyServiceWorker(key);
            });
        }
        async _poll() {
            // TODO: check if we need to fallback if getAll is not supported
            const result = await this._withRetries((db) => {
                const getAllRequest = getObjectStore(db, false).getAll();
                return new DBPromise(getAllRequest).toPromise();
            });
            if (!result) {
                return [];
            }
            // If we have pending writes in progress abort, we'll get picked up on the next poll
            if (this.pendingWrites !== 0) {
                return [];
            }
            const keys = [];
            const keysInResult = new Set();
            if (result.length !== 0) {
                for (const { fbase_key: key, value } of result) {
                    keysInResult.add(key);
                    if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                        this.notifyListeners(key, value);
                        keys.push(key);
                    }
                }
            }
            for (const localKey of Object.keys(this.localCache)) {
                if (this.localCache[localKey] && !keysInResult.has(localKey)) {
                    // Deleted
                    this.notifyListeners(localKey, null);
                    keys.push(localKey);
                }
            }
            return keys;
        }
        notifyListeners(key, newValue) {
            this.localCache[key] = newValue;
            const listeners = this.listeners[key];
            if (listeners) {
                for (const listener of Array.from(listeners)) {
                    listener(newValue);
                }
            }
        }
        startPolling() {
            this.stopPolling();
            this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);
        }
        stopPolling() {
            if (this.pollTimer) {
                clearInterval(this.pollTimer);
                this.pollTimer = null;
            }
        }
        _addListener(key, listener) {
            if (Object.keys(this.listeners).length === 0) {
                this.startPolling();
            }
            if (!this.listeners[key]) {
                this.listeners[key] = new Set();
                // Populate the cache to avoid spuriously triggering on first poll.
                void this._get(key); // This can happen in the background async and we can return immediately.
            }
            this.listeners[key].add(listener);
        }
        _removeListener(key, listener) {
            if (this.listeners[key]) {
                this.listeners[key].delete(listener);
                if (this.listeners[key].size === 0) {
                    delete this.listeners[key];
                }
            }
            if (Object.keys(this.listeners).length === 0) {
                this.stopPolling();
            }
        }
    }
    IndexedDBLocalPersistence.type = 'LOCAL';
    /**
     * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
     * for the underlying storage.
     *
     * @public
     */
    const indexedDBLocalPersistence = IndexedDBLocalPersistence;
    new Delay(30000, 60000);

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Chooses a popup/redirect resolver to use. This prefers the override (which
     * is directly passed in), and falls back to the property set on the auth
     * object. If neither are available, this function errors w/ an argument error.
     */
    function _withDefaultResolver(auth, resolverOverride) {
        if (resolverOverride) {
            return _getInstance(resolverOverride);
        }
        _assert(auth._popupRedirectResolver, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
        return auth._popupRedirectResolver;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class IdpCredential extends AuthCredential {
        constructor(params) {
            super("custom" /* ProviderId.CUSTOM */, "custom" /* ProviderId.CUSTOM */);
            this.params = params;
        }
        _getIdTokenResponse(auth) {
            return signInWithIdp(auth, this._buildIdpRequest());
        }
        _linkToIdToken(auth, idToken) {
            return signInWithIdp(auth, this._buildIdpRequest(idToken));
        }
        _getReauthenticationResolver(auth) {
            return signInWithIdp(auth, this._buildIdpRequest());
        }
        _buildIdpRequest(idToken) {
            const request = {
                requestUri: this.params.requestUri,
                sessionId: this.params.sessionId,
                postBody: this.params.postBody,
                tenantId: this.params.tenantId,
                pendingToken: this.params.pendingToken,
                returnSecureToken: true,
                returnIdpCredential: true
            };
            if (idToken) {
                request.idToken = idToken;
            }
            return request;
        }
    }
    function _signIn(params) {
        return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
    }
    function _reauth(params) {
        const { auth, user } = params;
        _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
    }
    async function _link(params) {
        const { auth, user } = params;
        _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        return _link$1(user, new IdpCredential(params), params.bypassAuthState);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Popup event manager. Handles the popup's entire lifecycle; listens to auth
     * events
     */
    class AbstractPopupRedirectOperation {
        constructor(auth, filter, resolver, user, bypassAuthState = false) {
            this.auth = auth;
            this.resolver = resolver;
            this.user = user;
            this.bypassAuthState = bypassAuthState;
            this.pendingPromise = null;
            this.eventManager = null;
            this.filter = Array.isArray(filter) ? filter : [filter];
        }
        execute() {
            return new Promise(async (resolve, reject) => {
                this.pendingPromise = { resolve, reject };
                try {
                    this.eventManager = await this.resolver._initialize(this.auth);
                    await this.onExecution();
                    this.eventManager.registerConsumer(this);
                }
                catch (e) {
                    this.reject(e);
                }
            });
        }
        async onAuthEvent(event) {
            const { urlResponse, sessionId, postBody, tenantId, error, type } = event;
            if (error) {
                this.reject(error);
                return;
            }
            const params = {
                auth: this.auth,
                requestUri: urlResponse,
                sessionId: sessionId,
                tenantId: tenantId || undefined,
                postBody: postBody || undefined,
                user: this.user,
                bypassAuthState: this.bypassAuthState
            };
            try {
                this.resolve(await this.getIdpTask(type)(params));
            }
            catch (e) {
                this.reject(e);
            }
        }
        onError(error) {
            this.reject(error);
        }
        getIdpTask(type) {
            switch (type) {
                case "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */:
                case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:
                    return _signIn;
                case "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */:
                case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */:
                    return _link;
                case "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */:
                case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */:
                    return _reauth;
                default:
                    _fail(this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            }
        }
        resolve(cred) {
            debugAssert(this.pendingPromise, 'Pending promise was never set');
            this.pendingPromise.resolve(cred);
            this.unregisterAndCleanUp();
        }
        reject(error) {
            debugAssert(this.pendingPromise, 'Pending promise was never set');
            this.pendingPromise.reject(error);
            this.unregisterAndCleanUp();
        }
        unregisterAndCleanUp() {
            if (this.eventManager) {
                this.eventManager.unregisterConsumer(this);
            }
            this.pendingPromise = null;
            this.cleanUp();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
    /**
     * Popup event manager. Handles the popup's entire lifecycle; listens to auth
     * events
     *
     */
    class PopupOperation extends AbstractPopupRedirectOperation {
        constructor(auth, filter, provider, resolver, user) {
            super(auth, filter, resolver, user);
            this.provider = provider;
            this.authWindow = null;
            this.pollId = null;
            if (PopupOperation.currentPopupAction) {
                PopupOperation.currentPopupAction.cancel();
            }
            PopupOperation.currentPopupAction = this;
        }
        async executeNotNull() {
            const result = await this.execute();
            _assert(result, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            return result;
        }
        async onExecution() {
            debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
            const eventId = _generateEventId();
            this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor
            eventId);
            this.authWindow.associatedEvent = eventId;
            // Check for web storage support and origin validation _after_ the popup is
            // loaded. These operations are slow (~1 second or so) Rather than
            // waiting on them before opening the window, optimistically open the popup
            // and check for storage support at the same time. If storage support is
            // not available, this will cause the whole thing to reject properly. It
            // will also close the popup, but since the promise has already rejected,
            // the popup closed by user poll will reject into the void.
            this.resolver._originValidation(this.auth).catch(e => {
                this.reject(e);
            });
            this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {
                if (!isSupported) {
                    this.reject(_createError(this.auth, "web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));
                }
            });
            // Handle user closure. Notice this does *not* use await
            this.pollUserCancellation();
        }
        get eventId() {
            var _a;
            return ((_a = this.authWindow) === null || _a === undefined ? undefined : _a.associatedEvent) || null;
        }
        cancel() {
            this.reject(_createError(this.auth, "cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));
        }
        cleanUp() {
            if (this.authWindow) {
                this.authWindow.close();
            }
            if (this.pollId) {
                window.clearTimeout(this.pollId);
            }
            this.authWindow = null;
            this.pollId = null;
            PopupOperation.currentPopupAction = null;
        }
        pollUserCancellation() {
            const poll = () => {
                var _a, _b;
                if ((_b = (_a = this.authWindow) === null || _a === undefined ? undefined : _a.window) === null || _b === undefined ? undefined : _b.closed) {
                    // Make sure that there is sufficient time for whatever action to
                    // complete. The window could have closed but the sign in network
                    // call could still be in flight. This is specifically true for
                    // Firefox or if the opener is in an iframe, in which case the oauth
                    // helper closes the popup.
                    this.pollId = window.setTimeout(() => {
                        this.pollId = null;
                        this.reject(_createError(this.auth, "popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));
                    }, 8000 /* _Timeout.AUTH_EVENT */);
                    return;
                }
                this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
            };
            poll();
        }
    }
    // Only one popup is ever shown at once. The lifecycle of the current popup
    // can be managed / cancelled by the constructor.
    PopupOperation.currentPopupAction = null;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PENDING_REDIRECT_KEY = 'pendingRedirect';
    // We only get one redirect outcome for any one auth, so just store it
    // in here.
    const redirectOutcomeMap = new Map();
    class RedirectAction extends AbstractPopupRedirectOperation {
        constructor(auth, resolver, bypassAuthState = false) {
            super(auth, [
                "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */,
                "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */,
                "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */,
                "unknown" /* AuthEventType.UNKNOWN */
            ], resolver, undefined, bypassAuthState);
            this.eventId = null;
        }
        /**
         * Override the execute function; if we already have a redirect result, then
         * just return it.
         */
        async execute() {
            let readyOutcome = redirectOutcomeMap.get(this.auth._key());
            if (!readyOutcome) {
                try {
                    const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
                    const result = hasPendingRedirect ? await super.execute() : null;
                    readyOutcome = () => Promise.resolve(result);
                }
                catch (e) {
                    readyOutcome = () => Promise.reject(e);
                }
                redirectOutcomeMap.set(this.auth._key(), readyOutcome);
            }
            // If we're not bypassing auth state, the ready outcome should be set to
            // null.
            if (!this.bypassAuthState) {
                redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
            }
            return readyOutcome();
        }
        async onAuthEvent(event) {
            if (event.type === "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {
                return super.onAuthEvent(event);
            }
            else if (event.type === "unknown" /* AuthEventType.UNKNOWN */) {
                // This is a sentinel value indicating there's no pending redirect
                this.resolve(null);
                return;
            }
            if (event.eventId) {
                const user = await this.auth._redirectUserForId(event.eventId);
                if (user) {
                    this.user = user;
                    return super.onAuthEvent(event);
                }
                else {
                    this.resolve(null);
                }
            }
        }
        async onExecution() { }
        cleanUp() { }
    }
    async function _getAndClearPendingRedirectStatus(resolver, auth) {
        const key = pendingRedirectKey(auth);
        const persistence = resolverPersistence(resolver);
        if (!(await persistence._isAvailable())) {
            return false;
        }
        const hasPendingRedirect = (await persistence._get(key)) === 'true';
        await persistence._remove(key);
        return hasPendingRedirect;
    }
    function _overrideRedirectResult(auth, result) {
        redirectOutcomeMap.set(auth._key(), result);
    }
    function resolverPersistence(resolver) {
        return _getInstance(resolver._redirectPersistence);
    }
    function pendingRedirectKey(auth) {
        return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
    }
    async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
        if (_isFirebaseServerApp(auth.app)) {
            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
        }
        const authInternal = _castAuth(auth);
        const resolver = _withDefaultResolver(authInternal, resolverExtern);
        const action = new RedirectAction(authInternal, resolver, bypassAuthState);
        const result = await action.execute();
        if (result && !bypassAuthState) {
            delete result.user._redirectEventId;
            await authInternal._persistUserIfCurrent(result.user);
            await authInternal._setRedirectUser(null, resolverExtern);
        }
        return result;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The amount of time to store the UIDs of seen events; this is
    // set to 10 min by default
    const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;
    class AuthEventManager {
        constructor(auth) {
            this.auth = auth;
            this.cachedEventUids = new Set();
            this.consumers = new Set();
            this.queuedRedirectEvent = null;
            this.hasHandledPotentialRedirect = false;
            this.lastProcessedEventTime = Date.now();
        }
        registerConsumer(authEventConsumer) {
            this.consumers.add(authEventConsumer);
            if (this.queuedRedirectEvent &&
                this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
                this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
                this.saveEventToCache(this.queuedRedirectEvent);
                this.queuedRedirectEvent = null;
            }
        }
        unregisterConsumer(authEventConsumer) {
            this.consumers.delete(authEventConsumer);
        }
        onEvent(event) {
            // Check if the event has already been handled
            if (this.hasEventBeenHandled(event)) {
                return false;
            }
            let handled = false;
            this.consumers.forEach(consumer => {
                if (this.isEventForConsumer(event, consumer)) {
                    handled = true;
                    this.sendToConsumer(event, consumer);
                    this.saveEventToCache(event);
                }
            });
            if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
                // If we've already seen a redirect before, or this is a popup event,
                // bail now
                return handled;
            }
            this.hasHandledPotentialRedirect = true;
            // If the redirect wasn't handled, hang on to it
            if (!handled) {
                this.queuedRedirectEvent = event;
                handled = true;
            }
            return handled;
        }
        sendToConsumer(event, consumer) {
            var _a;
            if (event.error && !isNullRedirectEvent(event)) {
                const code = ((_a = event.error.code) === null || _a === undefined ? undefined : _a.split('auth/')[1]) ||
                    "internal-error" /* AuthErrorCode.INTERNAL_ERROR */;
                consumer.onError(_createError(this.auth, code));
            }
            else {
                consumer.onAuthEvent(event);
            }
        }
        isEventForConsumer(event, consumer) {
            const eventIdMatches = consumer.eventId === null ||
                (!!event.eventId && event.eventId === consumer.eventId);
            return consumer.filter.includes(event.type) && eventIdMatches;
        }
        hasEventBeenHandled(event) {
            if (Date.now() - this.lastProcessedEventTime >=
                EVENT_DUPLICATION_CACHE_DURATION_MS) {
                this.cachedEventUids.clear();
            }
            return this.cachedEventUids.has(eventUid(event));
        }
        saveEventToCache(event) {
            this.cachedEventUids.add(eventUid(event));
            this.lastProcessedEventTime = Date.now();
        }
    }
    function eventUid(e) {
        return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');
    }
    function isNullRedirectEvent({ type, error }) {
        return (type === "unknown" /* AuthEventType.UNKNOWN */ &&
            (error === null || error === undefined ? undefined : error.code) === `auth/${"no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */}`);
    }
    function isRedirectEvent(event) {
        switch (event.type) {
            case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:
            case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */:
            case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */:
                return true;
            case "unknown" /* AuthEventType.UNKNOWN */:
                return isNullRedirectEvent(event);
            default:
                return false;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _getProjectConfig(auth, request = {}) {
        return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v1/projects" /* Endpoint.GET_PROJECT_CONFIG */, request);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    const HTTP_REGEX = /^https?/;
    async function _validateOrigin(auth) {
        // Skip origin validation if we are in an emulated environment
        if (auth.config.emulator) {
            return;
        }
        const { authorizedDomains } = await _getProjectConfig(auth);
        for (const domain of authorizedDomains) {
            try {
                if (matchDomain(domain)) {
                    return;
                }
            }
            catch (_a) {
                // Do nothing if there's a URL error; just continue searching
            }
        }
        // In the old SDK, this error also provides helpful messages.
        _fail(auth, "unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */);
    }
    function matchDomain(expected) {
        const currentUrl = _getCurrentUrl();
        const { protocol, hostname } = new URL(currentUrl);
        if (expected.startsWith('chrome-extension://')) {
            const ceUrl = new URL(expected);
            if (ceUrl.hostname === '' && hostname === '') {
                // For some reason we're not parsing chrome URLs properly
                return (protocol === 'chrome-extension:' &&
                    expected.replace('chrome-extension://', '') ===
                        currentUrl.replace('chrome-extension://', ''));
            }
            return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
        }
        if (!HTTP_REGEX.test(protocol)) {
            return false;
        }
        if (IP_ADDRESS_REGEX.test(expected)) {
            // The domain has to be exactly equal to the pattern, as an IP domain will
            // only contain the IP, no extra character.
            return hostname === expected;
        }
        // Dots in pattern should be escaped.
        const escapedDomainPattern = expected.replace(/\./g, '\\.');
        // Non ip address domains.
        // domain.com = *.domain.com OR domain.com
        const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
        return re.test(hostname);
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const NETWORK_TIMEOUT = new Delay(30000, 60000);
    /**
     * Reset unloaded GApi modules. If gapi.load fails due to a network error,
     * it will stop working after a retrial. This is a hack to fix this issue.
     */
    function resetUnloadedGapiModules() {
        // Clear last failed gapi.load state to force next gapi.load to first
        // load the failed gapi.iframes module.
        // Get gapix.beacon context.
        const beacon = _window().___jsl;
        // Get current hint.
        if (beacon === null || beacon === undefined ? undefined : beacon.H) {
            // Get gapi hint.
            for (const hint of Object.keys(beacon.H)) {
                // Requested modules.
                beacon.H[hint].r = beacon.H[hint].r || [];
                // Loaded modules.
                beacon.H[hint].L = beacon.H[hint].L || [];
                // Set requested modules to a copy of the loaded modules.
                beacon.H[hint].r = [...beacon.H[hint].L];
                // Clear pending callbacks.
                if (beacon.CP) {
                    for (let i = 0; i < beacon.CP.length; i++) {
                        // Remove all failed pending callbacks.
                        beacon.CP[i] = null;
                    }
                }
            }
        }
    }
    function loadGapi(auth) {
        return new Promise((resolve, reject) => {
            var _a, _b, _c;
            // Function to run when gapi.load is ready.
            function loadGapiIframe() {
                // The developer may have tried to previously run gapi.load and failed.
                // Run this to fix that.
                resetUnloadedGapiModules();
                gapi.load('gapi.iframes', {
                    callback: () => {
                        resolve(gapi.iframes.getContext());
                    },
                    ontimeout: () => {
                        // The above reset may be sufficient, but having this reset after
                        // failure ensures that if the developer calls gapi.load after the
                        // connection is re-established and before another attempt to embed
                        // the iframe, it would work and would not be broken because of our
                        // failed attempt.
                        // Timeout when gapi.iframes.Iframe not loaded.
                        resetUnloadedGapiModules();
                        reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
                    },
                    timeout: NETWORK_TIMEOUT.get()
                });
            }
            if ((_b = (_a = _window().gapi) === null || _a === undefined ? undefined : _a.iframes) === null || _b === undefined ? undefined : _b.Iframe) {
                // If gapi.iframes.Iframe available, resolve.
                resolve(gapi.iframes.getContext());
            }
            else if (!!((_c = _window().gapi) === null || _c === undefined ? undefined : _c.load)) {
                // Gapi loader ready, load gapi.iframes.
                loadGapiIframe();
            }
            else {
                // Create a new iframe callback when this is called so as not to overwrite
                // any previous defined callback. This happens if this method is called
                // multiple times in parallel and could result in the later callback
                // overwriting the previous one. This would end up with a iframe
                // timeout.
                const cbName = _generateCallbackName('iframefcb');
                // GApi loader not available, dynamically load platform.js.
                _window()[cbName] = () => {
                    // GApi loader should be ready.
                    if (!!gapi.load) {
                        loadGapiIframe();
                    }
                    else {
                        // Gapi loader failed, throw error.
                        reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
                    }
                };
                // Load GApi loader.
                return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`)
                    .catch(e => reject(e));
            }
        }).catch(error => {
            // Reset cached promise to allow for retrial.
            cachedGApiLoader = null;
            throw error;
        });
    }
    let cachedGApiLoader = null;
    function _loadGapi(auth) {
        cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
        return cachedGApiLoader;
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PING_TIMEOUT = new Delay(5000, 15000);
    const IFRAME_PATH = '__/auth/iframe';
    const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
    const IFRAME_ATTRIBUTES = {
        style: {
            position: 'absolute',
            top: '-100px',
            width: '1px',
            height: '1px'
        },
        'aria-hidden': 'true',
        tabindex: '-1'
    };
    // Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
    // anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
    const EID_FROM_APIHOST = new Map([
        ["identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */, 'p'], // production
        ['staging-identitytoolkit.sandbox.googleapis.com', 's'], // staging
        ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test
    ]);
    function getIframeUrl(auth) {
        const config = auth.config;
        _assert(config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);
        const url = config.emulator
            ? _emulatorUrl(config, EMULATED_IFRAME_PATH)
            : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
        const params = {
            apiKey: config.apiKey,
            appName: auth.name,
            v: SDK_VERSION$1
        };
        const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
        if (eid) {
            params.eid = eid;
        }
        const frameworks = auth._getFrameworks();
        if (frameworks.length) {
            params.fw = frameworks.join(',');
        }
        return `${url}?${querystring(params).slice(1)}`;
    }
    async function _openIframe(auth) {
        const context = await _loadGapi(auth);
        const gapi = _window().gapi;
        _assert(gapi, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
        return context.open({
            where: document.body,
            url: getIframeUrl(auth),
            messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
            attributes: IFRAME_ATTRIBUTES,
            dontclear: true
        }, (iframe) => new Promise(async (resolve, reject) => {
            await iframe.restyle({
                // Prevent iframe from closing on mouse out.
                setHideOnLeave: false
            });
            const networkError = _createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);
            // Confirm iframe is correctly loaded.
            // To fallback on failure, set a timeout.
            const networkErrorTimer = _window().setTimeout(() => {
                reject(networkError);
            }, PING_TIMEOUT.get());
            // Clear timer and resolve pending iframe ready promise.
            function clearTimerAndResolve() {
                _window().clearTimeout(networkErrorTimer);
                resolve(iframe);
            }
            // This returns an IThenable. However the reject part does not call
            // when the iframe is not loaded.
            iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
                reject(networkError);
            });
        }));
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const BASE_POPUP_OPTIONS = {
        location: 'yes',
        resizable: 'yes',
        statusbar: 'yes',
        toolbar: 'no'
    };
    const DEFAULT_WIDTH = 500;
    const DEFAULT_HEIGHT = 600;
    const TARGET_BLANK = '_blank';
    const FIREFOX_EMPTY_URL = 'http://localhost';
    class AuthPopup {
        constructor(window) {
            this.window = window;
            this.associatedEvent = null;
        }
        close() {
            if (this.window) {
                try {
                    this.window.close();
                }
                catch (e) { }
            }
        }
    }
    function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
        const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
        const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
        let target = '';
        const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top,
            left });
        // Chrome iOS 7 and 8 is returning an undefined popup win when target is
        // specified, even though the popup is not necessarily blocked.
        const ua = getUA().toLowerCase();
        if (name) {
            target = _isChromeIOS(ua) ? TARGET_BLANK : name;
        }
        if (_isFirefox(ua)) {
            // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
            url = url || FIREFOX_EMPTY_URL;
            // Firefox disables by default scrolling on popup windows, which can create
            // issues when the user has many Google accounts, for instance.
            options.scrollbars = 'yes';
        }
        const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');
        if (_isIOSStandalone(ua) && target !== '_self') {
            openAsNewWindowIOS(url || '', target);
            return new AuthPopup(null);
        }
        // about:blank getting sanitized causing browsers like IE/Edge to display
        // brief error message before redirecting to handler.
        const newWin = window.open(url || '', target, optionsString);
        _assert(newWin, auth, "popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */);
        // Flaky on IE edge, encapsulate with a try and catch.
        try {
            newWin.focus();
        }
        catch (e) { }
        return new AuthPopup(newWin);
    }
    function openAsNewWindowIOS(url, target) {
        const el = document.createElement('a');
        el.href = url;
        el.target = target;
        const click = document.createEvent('MouseEvent');
        click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
        el.dispatchEvent(click);
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * URL for Authentication widget which will initiate the OAuth handshake
     *
     * @internal
     */
    const WIDGET_PATH = '__/auth/handler';
    /**
     * URL for emulated environment
     *
     * @internal
     */
    const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
    /**
     * Fragment name for the App Check token that gets passed to the widget
     *
     * @internal
     */
    const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');
    async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
        _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);
        _assert(auth.config.apiKey, auth, "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */);
        const params = {
            apiKey: auth.config.apiKey,
            appName: auth.name,
            authType,
            redirectUrl,
            v: SDK_VERSION$1,
            eventId
        };
        if (provider instanceof FederatedAuthProvider) {
            provider.setDefaultLanguage(auth.languageCode);
            params.providerId = provider.providerId || '';
            if (!isEmpty(provider.getCustomParameters())) {
                params.customParameters = JSON.stringify(provider.getCustomParameters());
            }
            // TODO set additionalParams from the provider as well?
            for (const [key, value] of Object.entries({})) {
                params[key] = value;
            }
        }
        if (provider instanceof BaseOAuthProvider) {
            const scopes = provider.getScopes().filter(scope => scope !== '');
            if (scopes.length > 0) {
                params.scopes = scopes.join(',');
            }
        }
        if (auth.tenantId) {
            params.tid = auth.tenantId;
        }
        // TODO: maybe set eid as endpointId
        // TODO: maybe set fw as Frameworks.join(",")
        const paramsDict = params;
        for (const key of Object.keys(paramsDict)) {
            if (paramsDict[key] === undefined) {
                delete paramsDict[key];
            }
        }
        // Sets the App Check token to pass to the widget
        const appCheckToken = await auth._getAppCheckToken();
        const appCheckTokenFragment = appCheckToken
            ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`
            : '';
        // Start at index 1 to skip the leading '&' in the query string
        return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;
    }
    function getHandlerBase({ config }) {
        if (!config.emulator) {
            return `https://${config.authDomain}/${WIDGET_PATH}`;
        }
        return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The special web storage event
     *
     */
    const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
    class BrowserPopupRedirectResolver {
        constructor() {
            this.eventManagers = {};
            this.iframes = {};
            this.originValidationPromises = {};
            this._redirectPersistence = browserSessionPersistence;
            this._completeRedirectFn = _getRedirectResult;
            this._overrideRedirectResult = _overrideRedirectResult;
        }
        // Wrapping in async even though we don't await anywhere in order
        // to make sure errors are raised as promise rejections
        async _openPopup(auth, provider, authType, eventId) {
            var _a;
            debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === undefined ? undefined : _a.manager, '_initialize() not called before _openPopup()');
            const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
            return _open(auth, url, _generateEventId());
        }
        async _openRedirect(auth, provider, authType, eventId) {
            await this._originValidation(auth);
            const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
            _setWindowLocation(url);
            return new Promise(() => { });
        }
        _initialize(auth) {
            const key = auth._key();
            if (this.eventManagers[key]) {
                const { manager, promise } = this.eventManagers[key];
                if (manager) {
                    return Promise.resolve(manager);
                }
                else {
                    debugAssert(promise, 'If manager is not set, promise should be');
                    return promise;
                }
            }
            const promise = this.initAndGetManager(auth);
            this.eventManagers[key] = { promise };
            // If the promise is rejected, the key should be removed so that the
            // operation can be retried later.
            promise.catch(() => {
                delete this.eventManagers[key];
            });
            return promise;
        }
        async initAndGetManager(auth) {
            const iframe = await _openIframe(auth);
            const manager = new AuthEventManager(auth);
            iframe.register('authEvent', (iframeEvent) => {
                _assert(iframeEvent === null || iframeEvent === undefined ? undefined : iframeEvent.authEvent, auth, "invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */);
                // TODO: Consider splitting redirect and popup events earlier on
                const handled = manager.onEvent(iframeEvent.authEvent);
                return { status: handled ? "ACK" /* GapiOutcome.ACK */ : "ERROR" /* GapiOutcome.ERROR */ };
            }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
            this.eventManagers[auth._key()] = { manager };
            this.iframes[auth._key()] = iframe;
            return manager;
        }
        _isIframeWebStorageSupported(auth, cb) {
            const iframe = this.iframes[auth._key()];
            iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, result => {
                var _a;
                const isSupported = (_a = result === null || result === undefined ? undefined : result[0]) === null || _a === undefined ? undefined : _a[WEB_STORAGE_SUPPORT_KEY];
                if (isSupported !== undefined) {
                    cb(!!isSupported);
                }
                _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
            }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        }
        _originValidation(auth) {
            const key = auth._key();
            if (!this.originValidationPromises[key]) {
                this.originValidationPromises[key] = _validateOrigin(auth);
            }
            return this.originValidationPromises[key];
        }
        get _shouldInitProactively() {
            // Mobile browsers and Safari need to optimistically initialize
            return _isMobileBrowser() || _isSafari() || _isIOS();
        }
    }
    /**
     * An implementation of {@link PopupRedirectResolver} suitable for browser
     * based applications.
     *
     * @remarks
     * This method does not work in a Node.js environment.
     *
     * @public
     */
    const browserPopupRedirectResolver = BrowserPopupRedirectResolver;

    var name$1 = "@firebase/auth";
    var version$2 = "1.8.2";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthInterop {
        constructor(auth) {
            this.auth = auth;
            this.internalListeners = new Map();
        }
        getUid() {
            var _a;
            this.assertAuthConfigured();
            return ((_a = this.auth.currentUser) === null || _a === undefined ? undefined : _a.uid) || null;
        }
        async getToken(forceRefresh) {
            this.assertAuthConfigured();
            await this.auth._initializationPromise;
            if (!this.auth.currentUser) {
                return null;
            }
            const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
            return { accessToken };
        }
        addAuthTokenListener(listener) {
            this.assertAuthConfigured();
            if (this.internalListeners.has(listener)) {
                return;
            }
            const unsubscribe = this.auth.onIdTokenChanged(user => {
                listener((user === null || user === undefined ? undefined : user.stsTokenManager.accessToken) || null);
            });
            this.internalListeners.set(listener, unsubscribe);
            this.updateProactiveRefresh();
        }
        removeAuthTokenListener(listener) {
            this.assertAuthConfigured();
            const unsubscribe = this.internalListeners.get(listener);
            if (!unsubscribe) {
                return;
            }
            this.internalListeners.delete(listener);
            unsubscribe();
            this.updateProactiveRefresh();
        }
        assertAuthConfigured() {
            _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);
        }
        updateProactiveRefresh() {
            if (this.internalListeners.size > 0) {
                this.auth._startProactiveRefresh();
            }
            else {
                this.auth._stopProactiveRefresh();
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getVersionForPlatform(clientPlatform) {
        switch (clientPlatform) {
            case "Node" /* ClientPlatform.NODE */:
                return 'node';
            case "ReactNative" /* ClientPlatform.REACT_NATIVE */:
                return 'rn';
            case "Worker" /* ClientPlatform.WORKER */:
                return 'webworker';
            case "Cordova" /* ClientPlatform.CORDOVA */:
                return 'cordova';
            case "WebExtension" /* ClientPlatform.WEB_EXTENSION */:
                return 'web-extension';
            default:
                return undefined;
        }
    }
    /** @internal */
    function registerAuth(clientPlatform) {
        _registerComponent(new Component("auth" /* _ComponentName.AUTH */, (container, { options: deps }) => {
            const app = container.getProvider('app').getImmediate();
            const heartbeatServiceProvider = container.getProvider('heartbeat');
            const appCheckServiceProvider = container.getProvider('app-check-internal');
            const { apiKey, authDomain } = app.options;
            _assert(apiKey && !apiKey.includes(':'), "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */, { appName: app.name });
            const config = {
                apiKey,
                authDomain,
                clientPlatform,
                apiHost: "identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */,
                tokenApiHost: "securetoken.googleapis.com" /* DefaultConfig.TOKEN_API_HOST */,
                apiScheme: "https" /* DefaultConfig.API_SCHEME */,
                sdkClientVersion: _getClientVersion(clientPlatform)
            };
            const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);
            _initializeAuthInstance(authInstance, deps);
            return authInstance;
        }, "PUBLIC" /* ComponentType.PUBLIC */)
            /**
             * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
             * For why we do this, See go/firebase-next-auth-init
             */
            .setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */)
            /**
             * Because all firebase products that depend on auth depend on auth-internal directly,
             * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
             */
            .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
            const authInternalProvider = container.getProvider("auth-internal" /* _ComponentName.AUTH_INTERNAL */);
            authInternalProvider.initialize();
        }));
        _registerComponent(new Component("auth-internal" /* _ComponentName.AUTH_INTERNAL */, container => {
            const auth = _castAuth(container.getProvider("auth" /* _ComponentName.AUTH */).getImmediate());
            return (auth => new AuthInterop(auth))(auth);
        }, "PRIVATE" /* ComponentType.PRIVATE */).setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */));
        registerVersion(name$1, version$2, getVersionForPlatform(clientPlatform));
        // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
        registerVersion(name$1, version$2, 'esm2017');
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;
    const authIdTokenMaxAge = getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;
    let lastPostedIdToken = null;
    const mintCookieFactory = (url) => async (user) => {
        const idTokenResult = user && (await user.getIdTokenResult());
        const idTokenAge = idTokenResult &&
            (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;
        if (idTokenAge && idTokenAge > authIdTokenMaxAge) {
            return;
        }
        // Specifically trip null => undefined when logged out, to delete any existing cookie
        const idToken = idTokenResult === null || idTokenResult === undefined ? undefined : idTokenResult.token;
        if (lastPostedIdToken === idToken) {
            return;
        }
        lastPostedIdToken = idToken;
        await fetch(url, {
            method: idToken ? 'POST' : 'DELETE',
            headers: idToken
                ? {
                    'Authorization': `Bearer ${idToken}`
                }
                : {}
        });
    };
    /**
     * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
     * If no instance exists, initializes an Auth instance with platform-specific default dependencies.
     *
     * @param app - The Firebase App.
     *
     * @public
     */
    function getAuth(app = getApp()) {
        const provider = _getProvider(app, 'auth');
        if (provider.isInitialized()) {
            return provider.getImmediate();
        }
        const auth = initializeAuth(app, {
            popupRedirectResolver: browserPopupRedirectResolver,
            persistence: [
                indexedDBLocalPersistence,
                browserLocalPersistence,
                browserSessionPersistence
            ]
        });
        const authTokenSyncPath = getExperimentalSetting('authTokenSyncURL');
        // Only do the Cookie exchange in a secure context
        if (authTokenSyncPath &&
            typeof isSecureContext === 'boolean' &&
            isSecureContext) {
            // Don't allow urls (XSS possibility), only paths on the same domain
            const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);
            if (location.origin === authTokenSyncUrl.origin) {
                const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());
                beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));
                onIdTokenChanged(auth, user => mintCookie(user));
            }
        }
        const authEmulatorHost = getDefaultEmulatorHost('auth');
        if (authEmulatorHost) {
            connectAuthEmulator(auth, `http://${authEmulatorHost}`);
        }
        return auth;
    }
    function getScriptParentElement() {
        var _a, _b;
        return (_b = (_a = document.getElementsByTagName('head')) === null || _a === undefined ? undefined : _a[0]) !== null && _b !== undefined ? _b : document;
    }
    _setExternalJSProvider({
        loadJS(url) {
            // TODO: consider adding timeout support & cancellation
            return new Promise((resolve, reject) => {
                const el = document.createElement('script');
                el.setAttribute('src', url);
                el.onload = resolve;
                el.onerror = e => {
                    const error = _createError("internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
                    error.customData = e;
                    reject(error);
                };
                el.type = 'text/javascript';
                el.charset = 'UTF-8';
                getScriptParentElement().appendChild(el);
            });
        },
        gapiScript: 'https://apis.google.com/js/api.js',
        recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',
        recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='
    });
    registerAuth("Browser" /* ClientPlatform.BROWSER */);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A container for all of the Logger instances
     */
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    const levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    const defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    const ConsoleMethod = {
        [LogLevel.DEBUG]: 'log',
        [LogLevel.VERBOSE]: 'log',
        [LogLevel.INFO]: 'info',
        [LogLevel.WARN]: 'warn',
        [LogLevel.ERROR]: 'error'
    };
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    const defaultLogHandler = (instance, logType, ...args) => {
        if (logType < instance.logLevel) {
            return;
        }
        const now = new Date().toISOString();
        const method = ConsoleMethod[logType];
        if (method) {
            console[method](`[${now}]  ${instance.name}:`, ...args);
        }
        else {
            throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
        }
    };
    class Logger {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        constructor(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        get logLevel() {
            return this._logLevel;
        }
        set logLevel(val) {
            if (!(val in LogLevel)) {
                throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
            }
            this._logLevel = val;
        }
        // Workaround for setter/getter having to be the same type.
        setLogLevel(val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        }
        get logHandler() {
            return this._logHandler;
        }
        set logHandler(val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        }
        get userLogHandler() {
            return this._userLogHandler;
        }
        set userLogHandler(val) {
            this._userLogHandler = val;
        }
        /**
         * The functions below are all based on the `console` interface
         */
        debug(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
            this._logHandler(this, LogLevel.DEBUG, ...args);
        }
        log(...args) {
            this._userLogHandler &&
                this._userLogHandler(this, LogLevel.VERBOSE, ...args);
            this._logHandler(this, LogLevel.VERBOSE, ...args);
        }
        info(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
            this._logHandler(this, LogLevel.INFO, ...args);
        }
        warn(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
            this._logHandler(this, LogLevel.WARN, ...args);
        }
        error(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
            this._logHandler(this, LogLevel.ERROR, ...args);
        }
    }

    const name = "@firebase/database";
    const version$1 = "1.0.11";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The semver (www.semver.org) version of the SDK. */
    let SDK_VERSION = '';
    /**
     * SDK_VERSION should be set before any database instance is created
     * @internal
     */
    function setSDKVersion(version) {
        SDK_VERSION = version;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Wraps a DOM Storage object and:
     * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
     * - prefixes names with "firebase:" to avoid collisions with app data.
     *
     * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
     * and one for localStorage.
     *
     */
    class DOMStorageWrapper {
        /**
         * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)
         */
        constructor(domStorage_) {
            this.domStorage_ = domStorage_;
            // Use a prefix to avoid collisions with other stuff saved by the app.
            this.prefix_ = 'firebase:';
        }
        /**
         * @param key - The key to save the value under
         * @param value - The value being stored, or null to remove the key.
         */
        set(key, value) {
            if (value == null) {
                this.domStorage_.removeItem(this.prefixedName_(key));
            }
            else {
                this.domStorage_.setItem(this.prefixedName_(key), stringify(value));
            }
        }
        /**
         * @returns The value that was stored under this key, or null
         */
        get(key) {
            const storedVal = this.domStorage_.getItem(this.prefixedName_(key));
            if (storedVal == null) {
                return null;
            }
            else {
                return jsonEval(storedVal);
            }
        }
        remove(key) {
            this.domStorage_.removeItem(this.prefixedName_(key));
        }
        prefixedName_(name) {
            return this.prefix_ + name;
        }
        toString() {
            return this.domStorage_.toString();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory storage implementation that matches the API of DOMStorageWrapper
     * (TODO: create interface for both to implement).
     */
    class MemoryStorage {
        constructor() {
            this.cache_ = {};
            this.isInMemoryStorage = true;
        }
        set(key, value) {
            if (value == null) {
                delete this.cache_[key];
            }
            else {
                this.cache_[key] = value;
            }
        }
        get(key) {
            if (contains(this.cache_, key)) {
                return this.cache_[key];
            }
            return null;
        }
        remove(key) {
            delete this.cache_[key];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
     * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
     * to reflect this type
     *
     * @param domStorageName - Name of the underlying storage object
     *   (e.g. 'localStorage' or 'sessionStorage').
     * @returns Turning off type information until a common interface is defined.
     */
    const createStoragefor = function (domStorageName) {
        try {
            // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
            // so it must be inside the try/catch.
            if (typeof window !== 'undefined' &&
                typeof window[domStorageName] !== 'undefined') {
                // Need to test cache. Just because it's here doesn't mean it works
                const domStorage = window[domStorageName];
                domStorage.setItem('firebase:sentinel', 'cache');
                domStorage.removeItem('firebase:sentinel');
                return new DOMStorageWrapper(domStorage);
            }
        }
        catch (e) { }
        // Failed to create wrapper.  Just return in-memory storage.
        // TODO: log?
        return new MemoryStorage();
    };
    /** A storage object that lasts across sessions */
    const PersistentStorage = createStoragefor('localStorage');
    /** A storage object that only lasts one session */
    const SessionStorage = createStoragefor('sessionStorage');

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logClient = new Logger('@firebase/database');
    /**
     * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
     */
    const LUIDGenerator = (function () {
        let id = 1;
        return function () {
            return id++;
        };
    })();
    /**
     * Sha1 hash of the input string
     * @param str - The string to hash
     * @returns {!string} The resulting hash
     */
    const sha1 = function (str) {
        const utf8Bytes = stringToByteArray(str);
        const sha1 = new Sha1();
        sha1.update(utf8Bytes);
        const sha1Bytes = sha1.digest();
        return base64.encodeByteArray(sha1Bytes);
    };
    const buildLogMessage_ = function (...varArgs) {
        let message = '';
        for (let i = 0; i < varArgs.length; i++) {
            const arg = varArgs[i];
            if (Array.isArray(arg) ||
                (arg &&
                    typeof arg === 'object' &&
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    typeof arg.length === 'number')) {
                message += buildLogMessage_.apply(null, arg);
            }
            else if (typeof arg === 'object') {
                message += stringify(arg);
            }
            else {
                message += arg;
            }
            message += ' ';
        }
        return message;
    };
    /**
     * Use this for all debug messages in Firebase.
     */
    let logger = null;
    /**
     * Flag to check for log availability on first log message
     */
    let firstLog_ = true;
    /**
     * The implementation of Firebase.enableLogging (defined here to break dependencies)
     * @param logger_ - A flag to turn on logging, or a custom logger
     * @param persistent - Whether or not to persist logging settings across refreshes
     */
    const enableLogging$1 = function (logger_, persistent) {
        assert(true, "Can't turn on custom loggers persistently.");
        {
            logClient.logLevel = LogLevel.VERBOSE;
            logger = logClient.log.bind(logClient);
        }
    };
    const log = function (...varArgs) {
        if (firstLog_ === true) {
            firstLog_ = false;
            if (logger === null && SessionStorage.get('logging_enabled') === true) {
                enableLogging$1();
            }
        }
        if (logger) {
            const message = buildLogMessage_.apply(null, varArgs);
            logger(message);
        }
    };
    const logWrapper = function (prefix) {
        return function (...varArgs) {
            log(prefix, ...varArgs);
        };
    };
    const error = function (...varArgs) {
        const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);
        logClient.error(message);
    };
    const fatal = function (...varArgs) {
        const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;
        logClient.error(message);
        throw new Error(message);
    };
    const warn = function (...varArgs) {
        const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);
        logClient.warn(message);
    };
    /**
     * Logs a warning if the containing page uses https. Called when a call to new Firebase
     * does not use https.
     */
    const warnIfPageIsSecure = function () {
        // Be very careful accessing browser globals. Who knows what may or may not exist.
        if (typeof window !== 'undefined' &&
            window.location &&
            window.location.protocol &&
            window.location.protocol.indexOf('https:') !== -1) {
            warn('Insecure Firebase access from a secure page. ' +
                'Please use https in calls to new Firebase().');
        }
    };
    /**
     * Returns true if data is NaN, or +/- Infinity.
     */
    const isInvalidJSONNumber = function (data) {
        return (typeof data === 'number' &&
            (data !== data || // NaN
                data === Number.POSITIVE_INFINITY ||
                data === Number.NEGATIVE_INFINITY));
    };
    const executeWhenDOMReady = function (fn) {
        if (document.readyState === 'complete') {
            fn();
        }
        else {
            // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
            // fire before onload), but fall back to onload.
            let called = false;
            const wrappedFn = function () {
                if (!document.body) {
                    setTimeout(wrappedFn, Math.floor(10));
                    return;
                }
                if (!called) {
                    called = true;
                    fn();
                }
            };
            if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', wrappedFn, false);
                // fallback to onload.
                window.addEventListener('load', wrappedFn, false);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (document.attachEvent) {
                // IE.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                document.attachEvent('onreadystatechange', () => {
                    if (document.readyState === 'complete') {
                        wrappedFn();
                    }
                });
                // fallback to onload.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                window.attachEvent('onload', wrappedFn);
                // jQuery has an extra hack for IE that we could employ (based on
                // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
                // I'm hoping we don't need it.
            }
        }
    };
    /**
     * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
     */
    const MIN_NAME = '[MIN_NAME]';
    /**
     * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
     */
    const MAX_NAME = '[MAX_NAME]';
    /**
     * Compares valid Firebase key names, plus min and max name
     */
    const nameCompare = function (a, b) {
        if (a === b) {
            return 0;
        }
        else if (a === MIN_NAME || b === MAX_NAME) {
            return -1;
        }
        else if (b === MIN_NAME || a === MAX_NAME) {
            return 1;
        }
        else {
            const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
            if (aAsInt !== null) {
                if (bAsInt !== null) {
                    return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
                }
                else {
                    return -1;
                }
            }
            else if (bAsInt !== null) {
                return 1;
            }
            else {
                return a < b ? -1 : 1;
            }
        }
    };
    /**
     * @returns {!number} comparison result.
     */
    const stringCompare = function (a, b) {
        if (a === b) {
            return 0;
        }
        else if (a < b) {
            return -1;
        }
        else {
            return 1;
        }
    };
    const requireKey = function (key, obj) {
        if (obj && key in obj) {
            return obj[key];
        }
        else {
            throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));
        }
    };
    const ObjectToUniqueKey = function (obj) {
        if (typeof obj !== 'object' || obj === null) {
            return stringify(obj);
        }
        const keys = [];
        // eslint-disable-next-line guard-for-in
        for (const k in obj) {
            keys.push(k);
        }
        // Export as json, but with the keys sorted.
        keys.sort();
        let key = '{';
        for (let i = 0; i < keys.length; i++) {
            if (i !== 0) {
                key += ',';
            }
            key += stringify(keys[i]);
            key += ':';
            key += ObjectToUniqueKey(obj[keys[i]]);
        }
        key += '}';
        return key;
    };
    /**
     * Splits a string into a number of smaller segments of maximum size
     * @param str - The string
     * @param segsize - The maximum number of chars in the string.
     * @returns The string, split into appropriately-sized chunks
     */
    const splitStringBySize = function (str, segsize) {
        const len = str.length;
        if (len <= segsize) {
            return [str];
        }
        const dataSegs = [];
        for (let c = 0; c < len; c += segsize) {
            if (c + segsize > len) {
                dataSegs.push(str.substring(c, len));
            }
            else {
                dataSegs.push(str.substring(c, c + segsize));
            }
        }
        return dataSegs;
    };
    /**
     * Apply a function to each (key, value) pair in an object or
     * apply a function to each (index, value) pair in an array
     * @param obj - The object or array to iterate over
     * @param fn - The function to apply
     */
    function each(obj, fn) {
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                fn(key, obj[key]);
            }
        }
    }
    /**
     * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
     * I made one modification at the end and removed the NaN / Infinity
     * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
     * @param v - A double
     *
     */
    const doubleToIEEE754String = function (v) {
        assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
        const ebits = 11, fbits = 52;
        const bias = (1 << (ebits - 1)) - 1;
        let s, e, f, ln, i;
        // Compute sign, exponent, fraction
        // Skip NaN / Infinity handling --MJL.
        if (v === 0) {
            e = 0;
            f = 0;
            s = 1 / v === -Infinity ? 1 : 0;
        }
        else {
            s = v < 0;
            v = Math.abs(v);
            if (v >= Math.pow(2, 1 - bias)) {
                // Normalized
                ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
                e = ln + bias;
                f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
            }
            else {
                // Denormalized
                e = 0;
                f = Math.round(v / Math.pow(2, 1 - bias - fbits));
            }
        }
        // Pack sign, exponent, fraction
        const bits = [];
        for (i = fbits; i; i -= 1) {
            bits.push(f % 2 ? 1 : 0);
            f = Math.floor(f / 2);
        }
        for (i = ebits; i; i -= 1) {
            bits.push(e % 2 ? 1 : 0);
            e = Math.floor(e / 2);
        }
        bits.push(s ? 1 : 0);
        bits.reverse();
        const str = bits.join('');
        // Return the data as a hex string. --MJL
        let hexByteString = '';
        for (i = 0; i < 64; i += 8) {
            let hexByte = parseInt(str.substr(i, 8), 2).toString(16);
            if (hexByte.length === 1) {
                hexByte = '0' + hexByte;
            }
            hexByteString = hexByteString + hexByte;
        }
        return hexByteString.toLowerCase();
    };
    /**
     * Used to detect if we're in a Chrome content script (which executes in an
     * isolated environment where long-polling doesn't work).
     */
    const isChromeExtensionContentScript = function () {
        return !!(typeof window === 'object' &&
            window['chrome'] &&
            window['chrome']['extension'] &&
            !/^chrome/.test(window.location.href));
    };
    /**
     * Used to detect if we're in a Windows 8 Store app.
     */
    const isWindowsStoreApp = function () {
        // Check for the presence of a couple WinRT globals
        return typeof Windows === 'object' && typeof Windows.UI === 'object';
    };
    /**
     * Converts a server error code to a JavaScript Error
     */
    function errorForServerCode(code, query) {
        let reason = 'Unknown Error';
        if (code === 'too_big') {
            reason =
                'The data requested exceeds the maximum size ' +
                    'that can be accessed with a single request.';
        }
        else if (code === 'permission_denied') {
            reason = "Client doesn't have permission to access the desired data.";
        }
        else if (code === 'unavailable') {
            reason = 'The service is unavailable';
        }
        const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        error.code = code.toUpperCase();
        return error;
    }
    /**
     * Used to test for integer-looking strings
     */
    const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
    /**
     * For use in keys, the minimum possible 32-bit integer.
     */
    const INTEGER_32_MIN = -2147483648;
    /**
     * For use in keys, the maximum possible 32-bit integer.
     */
    const INTEGER_32_MAX = 2147483647;
    /**
     * If the string contains a 32-bit integer, return it.  Else return null.
     */
    const tryParseInt = function (str) {
        if (INTEGER_REGEXP_.test(str)) {
            const intVal = Number(str);
            if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
                return intVal;
            }
        }
        return null;
    };
    /**
     * Helper to run some code but catch any exceptions and re-throw them later.
     * Useful for preventing user callbacks from breaking internal code.
     *
     * Re-throwing the exception from a setTimeout is a little evil, but it's very
     * convenient (we don't have to try to figure out when is a safe point to
     * re-throw it), and the behavior seems reasonable:
     *
     * * If you aren't pausing on exceptions, you get an error in the console with
     *   the correct stack trace.
     * * If you're pausing on all exceptions, the debugger will pause on your
     *   exception and then again when we rethrow it.
     * * If you're only pausing on uncaught exceptions, the debugger will only pause
     *   on us re-throwing it.
     *
     * @param fn - The code to guard.
     */
    const exceptionGuard = function (fn) {
        try {
            fn();
        }
        catch (e) {
            // Re-throw exception when it's safe.
            setTimeout(() => {
                // It used to be that "throw e" would result in a good console error with
                // relevant context, but as of Chrome 39, you just get the firebase.js
                // file/line number where we re-throw it, which is useless. So we log
                // e.stack explicitly.
                const stack = e.stack || '';
                warn('Exception was thrown by user callback.', stack);
                throw e;
            }, Math.floor(0));
        }
    };
    /**
     * @returns {boolean} true if we think we're currently being crawled.
     */
    const beingCrawled = function () {
        const userAgent = (typeof window === 'object' &&
            window['navigator'] &&
            window['navigator']['userAgent']) ||
            '';
        // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
        // believe to support JavaScript/AJAX rendering.
        // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
        // would have seen the page" is flaky if we don't treat it as a crawler.
        return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
    };
    /**
     * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
     *
     * It is removed with clearTimeout() as normal.
     *
     * @param fn - Function to run.
     * @param time - Milliseconds to wait before running.
     * @returns The setTimeout() return value.
     */
    const setTimeoutNonBlocking = function (fn, time) {
        const timeout = setTimeout(fn, time);
        // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.
        if (typeof timeout === 'number' &&
            // @ts-ignore Is only defined in Deno environments.
            typeof Deno !== 'undefined' &&
            // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
            Deno['unrefTimer']) {
            // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
            Deno.unrefTimer(timeout);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        else if (typeof timeout === 'object' && timeout['unref']) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            timeout['unref']();
        }
        return timeout;
    };

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Abstraction around AppCheck's token fetching capabilities.
     */
    class AppCheckTokenProvider {
        constructor(appName_, appCheckProvider) {
            this.appName_ = appName_;
            this.appCheckProvider = appCheckProvider;
            this.appCheck = appCheckProvider === null || appCheckProvider === undefined ? undefined : appCheckProvider.getImmediate({ optional: true });
            if (!this.appCheck) {
                appCheckProvider === null || appCheckProvider === undefined ? undefined : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));
            }
        }
        getToken(forceRefresh) {
            if (!this.appCheck) {
                return new Promise((resolve, reject) => {
                    // Support delayed initialization of FirebaseAppCheck. This allows our
                    // customers to initialize the RTDB SDK before initializing Firebase
                    // AppCheck and ensures that all requests are authenticated if a token
                    // becomes available before the timeout below expires.
                    setTimeout(() => {
                        if (this.appCheck) {
                            this.getToken(forceRefresh).then(resolve, reject);
                        }
                        else {
                            resolve(null);
                        }
                    }, 0);
                });
            }
            return this.appCheck.getToken(forceRefresh);
        }
        addTokenChangeListener(listener) {
            var _a;
            (_a = this.appCheckProvider) === null || _a === undefined ? undefined : _a.get().then(appCheck => appCheck.addTokenListener(listener));
        }
        notifyForInvalidToken() {
            warn(`Provided AppCheck credentials for the app named "${this.appName_}" ` +
                'are invalid. This usually indicates your app was not initialized correctly.');
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Abstraction around FirebaseApp's token fetching capabilities.
     */
    class FirebaseAuthTokenProvider {
        constructor(appName_, firebaseOptions_, authProvider_) {
            this.appName_ = appName_;
            this.firebaseOptions_ = firebaseOptions_;
            this.authProvider_ = authProvider_;
            this.auth_ = null;
            this.auth_ = authProvider_.getImmediate({ optional: true });
            if (!this.auth_) {
                authProvider_.onInit(auth => (this.auth_ = auth));
            }
        }
        getToken(forceRefresh) {
            if (!this.auth_) {
                return new Promise((resolve, reject) => {
                    // Support delayed initialization of FirebaseAuth. This allows our
                    // customers to initialize the RTDB SDK before initializing Firebase
                    // Auth and ensures that all requests are authenticated if a token
                    // becomes available before the timeout below expires.
                    setTimeout(() => {
                        if (this.auth_) {
                            this.getToken(forceRefresh).then(resolve, reject);
                        }
                        else {
                            resolve(null);
                        }
                    }, 0);
                });
            }
            return this.auth_.getToken(forceRefresh).catch(error => {
                // TODO: Need to figure out all the cases this is raised and whether
                // this makes sense.
                if (error && error.code === 'auth/token-not-initialized') {
                    log('Got auth/token-not-initialized error.  Treating as null token.');
                    return null;
                }
                else {
                    return Promise.reject(error);
                }
            });
        }
        addTokenChangeListener(listener) {
            // TODO: We might want to wrap the listener and call it with no args to
            // avoid a leaky abstraction, but that makes removing the listener harder.
            if (this.auth_) {
                this.auth_.addAuthTokenListener(listener);
            }
            else {
                this.authProvider_
                    .get()
                    .then(auth => auth.addAuthTokenListener(listener));
            }
        }
        removeTokenChangeListener(listener) {
            this.authProvider_
                .get()
                .then(auth => auth.removeAuthTokenListener(listener));
        }
        notifyForInvalidToken() {
            let errorMessage = 'Provided authentication credentials for the app named "' +
                this.appName_ +
                '" are invalid. This usually indicates your app was not ' +
                'initialized correctly. ';
            if ('credential' in this.firebaseOptions_) {
                errorMessage +=
                    'Make sure the "credential" property provided to initializeApp() ' +
                        'is authorized to access the specified "databaseURL" and is from the correct ' +
                        'project.';
            }
            else if ('serviceAccount' in this.firebaseOptions_) {
                errorMessage +=
                    'Make sure the "serviceAccount" property provided to initializeApp() ' +
                        'is authorized to access the specified "databaseURL" and is from the correct ' +
                        'project.';
            }
            else {
                errorMessage +=
                    'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                        'initializeApp() match the values provided for your app at ' +
                        'https://console.firebase.google.com/.';
            }
            warn(errorMessage);
        }
    }
    /* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */
    class EmulatorTokenProvider {
        constructor(accessToken) {
            this.accessToken = accessToken;
        }
        getToken(forceRefresh) {
            return Promise.resolve({
                accessToken: this.accessToken
            });
        }
        addTokenChangeListener(listener) {
            // Invoke the listener immediately to match the behavior in Firebase Auth
            // (see packages/auth/src/auth.js#L1807)
            listener(this.accessToken);
        }
        removeTokenChangeListener(listener) { }
        notifyForInvalidToken() { }
    }
    /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */
    EmulatorTokenProvider.OWNER = 'owner';

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PROTOCOL_VERSION = '5';
    const VERSION_PARAM = 'v';
    const TRANSPORT_SESSION_PARAM = 's';
    const REFERER_PARAM = 'r';
    const FORGE_REF = 'f';
    // Matches console.firebase.google.com, firebase-console-*.corp.google.com and
    // firebase.corp.google.com
    const FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
    const LAST_SESSION_PARAM = 'ls';
    const APPLICATION_ID_PARAM = 'p';
    const APP_CHECK_TOKEN_PARAM = 'ac';
    const WEBSOCKET = 'websocket';
    const LONG_POLLING = 'long_polling';

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class that holds metadata about a Repo object
     */
    class RepoInfo {
        /**
         * @param host - Hostname portion of the url for the repo
         * @param secure - Whether or not this repo is accessed over ssl
         * @param namespace - The namespace represented by the repo
         * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).
         * @param nodeAdmin - Whether this instance uses Admin SDK credentials
         * @param persistenceKey - Override the default session persistence storage key
         */
        constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {
            this.secure = secure;
            this.namespace = namespace;
            this.webSocketOnly = webSocketOnly;
            this.nodeAdmin = nodeAdmin;
            this.persistenceKey = persistenceKey;
            this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
            this.isUsingEmulator = isUsingEmulator;
            this._host = host.toLowerCase();
            this._domain = this._host.substr(this._host.indexOf('.') + 1);
            this.internalHost =
                PersistentStorage.get('host:' + host) || this._host;
        }
        isCacheableHost() {
            return this.internalHost.substr(0, 2) === 's-';
        }
        isCustomHost() {
            return (this._domain !== 'firebaseio.com' &&
                this._domain !== 'firebaseio-demo.com');
        }
        get host() {
            return this._host;
        }
        set host(newHost) {
            if (newHost !== this.internalHost) {
                this.internalHost = newHost;
                if (this.isCacheableHost()) {
                    PersistentStorage.set('host:' + this._host, this.internalHost);
                }
            }
        }
        toString() {
            let str = this.toURLString();
            if (this.persistenceKey) {
                str += '<' + this.persistenceKey + '>';
            }
            return str;
        }
        toURLString() {
            const protocol = this.secure ? 'https://' : 'http://';
            const query = this.includeNamespaceInQueryParams
                ? `?ns=${this.namespace}`
                : '';
            return `${protocol}${this.host}/${query}`;
        }
    }
    function repoInfoNeedsQueryParam(repoInfo) {
        return (repoInfo.host !== repoInfo.internalHost ||
            repoInfo.isCustomHost() ||
            repoInfo.includeNamespaceInQueryParams);
    }
    /**
     * Returns the websocket URL for this repo
     * @param repoInfo - RepoInfo object
     * @param type - of connection
     * @param params - list
     * @returns The URL for this repo
     */
    function repoInfoConnectionURL(repoInfo, type, params) {
        assert(typeof type === 'string', 'typeof type must == string');
        assert(typeof params === 'object', 'typeof params must == object');
        let connURL;
        if (type === WEBSOCKET) {
            connURL =
                (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';
        }
        else if (type === LONG_POLLING) {
            connURL =
                (repoInfo.secure ? 'https://' : 'http://') +
                    repoInfo.internalHost +
                    '/.lp?';
        }
        else {
            throw new Error('Unknown connection type: ' + type);
        }
        if (repoInfoNeedsQueryParam(repoInfo)) {
            params['ns'] = repoInfo.namespace;
        }
        const pairs = [];
        each(params, (key, value) => {
            pairs.push(key + '=' + value);
        });
        return connURL + pairs.join('&');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Tracks a collection of stats.
     */
    class StatsCollection {
        constructor() {
            this.counters_ = {};
        }
        incrementCounter(name, amount = 1) {
            if (!contains(this.counters_, name)) {
                this.counters_[name] = 0;
            }
            this.counters_[name] += amount;
        }
        get() {
            return deepCopy(this.counters_);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const collections = {};
    const reporters = {};
    function statsManagerGetCollection(repoInfo) {
        const hashString = repoInfo.toString();
        if (!collections[hashString]) {
            collections[hashString] = new StatsCollection();
        }
        return collections[hashString];
    }
    function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
        const hashString = repoInfo.toString();
        if (!reporters[hashString]) {
            reporters[hashString] = creatorFunction();
        }
        return reporters[hashString];
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class ensures the packets from the server arrive in order
     * This class takes data from the server and ensures it gets passed into the callbacks in order.
     */
    class PacketReceiver {
        /**
         * @param onMessage_
         */
        constructor(onMessage_) {
            this.onMessage_ = onMessage_;
            this.pendingResponses = [];
            this.currentResponseNum = 0;
            this.closeAfterResponse = -1;
            this.onClose = null;
        }
        closeAfter(responseNum, callback) {
            this.closeAfterResponse = responseNum;
            this.onClose = callback;
            if (this.closeAfterResponse < this.currentResponseNum) {
                this.onClose();
                this.onClose = null;
            }
        }
        /**
         * Each message from the server comes with a response number, and an array of data. The responseNumber
         * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
         * browsers will respond in the same order as the requests we sent
         */
        handleResponse(requestNum, data) {
            this.pendingResponses[requestNum] = data;
            while (this.pendingResponses[this.currentResponseNum]) {
                const toProcess = this.pendingResponses[this.currentResponseNum];
                delete this.pendingResponses[this.currentResponseNum];
                for (let i = 0; i < toProcess.length; ++i) {
                    if (toProcess[i]) {
                        exceptionGuard(() => {
                            this.onMessage_(toProcess[i]);
                        });
                    }
                }
                if (this.currentResponseNum === this.closeAfterResponse) {
                    if (this.onClose) {
                        this.onClose();
                        this.onClose = null;
                    }
                    break;
                }
                this.currentResponseNum++;
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // URL query parameters associated with longpolling
    const FIREBASE_LONGPOLL_START_PARAM = 'start';
    const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
    const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
    const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
    const FIREBASE_LONGPOLL_ID_PARAM = 'id';
    const FIREBASE_LONGPOLL_PW_PARAM = 'pw';
    const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
    const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
    const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
    const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
    const FIREBASE_LONGPOLL_DATA_PARAM = 'd';
    const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
    //Data size constants.
    //TODO: Perf: the maximum length actually differs from browser to browser.
    // We should check what browser we're on and set accordingly.
    const MAX_URL_DATA_SIZE = 1870;
    const SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
    const MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
    /**
     * Keepalive period
     * send a fresh request at minimum every 25 seconds. Opera has a maximum request
     * length of 30 seconds that we can't exceed.
     */
    const KEEPALIVE_REQUEST_INTERVAL = 25000;
    /**
     * How long to wait before aborting a long-polling connection attempt.
     */
    const LP_CONNECT_TIMEOUT = 30000;
    /**
     * This class manages a single long-polling connection.
     */
    class BrowserPollConnection {
        /**
         * @param connId An identifier for this connection, used for logging
         * @param repoInfo The info for the endpoint to send data to.
         * @param applicationId The Firebase App ID for this project.
         * @param appCheckToken The AppCheck token for this client.
         * @param authToken The AuthToken to use for this connection.
         * @param transportSessionId Optional transportSessionid if we are
         * reconnecting for an existing transport session
         * @param lastSessionId Optional lastSessionId if the PersistentConnection has
         * already created a connection previously
         */
        constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.repoInfo = repoInfo;
            this.applicationId = applicationId;
            this.appCheckToken = appCheckToken;
            this.authToken = authToken;
            this.transportSessionId = transportSessionId;
            this.lastSessionId = lastSessionId;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.everConnected_ = false;
            this.log_ = logWrapper(connId);
            this.stats_ = statsManagerGetCollection(repoInfo);
            this.urlFn = (params) => {
                // Always add the token if we have one.
                if (this.appCheckToken) {
                    params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
                }
                return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
            };
        }
        /**
         * @param onMessage - Callback when messages arrive
         * @param onDisconnect - Callback with connection lost.
         */
        open(onMessage, onDisconnect) {
            this.curSegmentNum = 0;
            this.onDisconnect_ = onDisconnect;
            this.myPacketOrderer = new PacketReceiver(onMessage);
            this.isClosed_ = false;
            this.connectTimeoutTimer_ = setTimeout(() => {
                this.log_('Timed out trying to connect.');
                // Make sure we clear the host cache
                this.onClosed_();
                this.connectTimeoutTimer_ = null;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(LP_CONNECT_TIMEOUT));
            // Ensure we delay the creation of the iframe until the DOM is loaded.
            executeWhenDOMReady(() => {
                if (this.isClosed_) {
                    return;
                }
                //Set up a callback that gets triggered once a connection is set up.
                this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {
                    const [command, arg1, arg2, arg3, arg4] = args;
                    this.incrementIncomingBytes_(args);
                    if (!this.scriptTagHolder) {
                        return; // we closed the connection.
                    }
                    if (this.connectTimeoutTimer_) {
                        clearTimeout(this.connectTimeoutTimer_);
                        this.connectTimeoutTimer_ = null;
                    }
                    this.everConnected_ = true;
                    if (command === FIREBASE_LONGPOLL_START_PARAM) {
                        this.id = arg1;
                        this.password = arg2;
                    }
                    else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                        // Don't clear the host cache. We got a response from the server, so we know it's reachable
                        if (arg1) {
                            // We aren't expecting any more data (other than what the server's already in the process of sending us
                            // through our already open polls), so don't send any more.
                            this.scriptTagHolder.sendNewPolls = false;
                            // arg1 in this case is the last response number sent by the server. We should try to receive
                            // all of the responses up to this one before closing
                            this.myPacketOrderer.closeAfter(arg1, () => {
                                this.onClosed_();
                            });
                        }
                        else {
                            this.onClosed_();
                        }
                    }
                    else {
                        throw new Error('Unrecognized command received: ' + command);
                    }
                }, (...args) => {
                    const [pN, data] = args;
                    this.incrementIncomingBytes_(args);
                    this.myPacketOrderer.handleResponse(pN, data);
                }, () => {
                    this.onClosed_();
                }, this.urlFn);
                //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
                //from cache.
                const urlParams = {};
                urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
                urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
                if (this.scriptTagHolder.uniqueCallbackIdentifier) {
                    urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =
                        this.scriptTagHolder.uniqueCallbackIdentifier;
                }
                urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
                if (this.transportSessionId) {
                    urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;
                }
                if (this.lastSessionId) {
                    urlParams[LAST_SESSION_PARAM] = this.lastSessionId;
                }
                if (this.applicationId) {
                    urlParams[APPLICATION_ID_PARAM] = this.applicationId;
                }
                if (this.appCheckToken) {
                    urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
                }
                if (typeof location !== 'undefined' &&
                    location.hostname &&
                    FORGE_DOMAIN_RE.test(location.hostname)) {
                    urlParams[REFERER_PARAM] = FORGE_REF;
                }
                const connectURL = this.urlFn(urlParams);
                this.log_('Connecting via long-poll to ' + connectURL);
                this.scriptTagHolder.addTag(connectURL, () => {
                    /* do nothing */
                });
            });
        }
        /**
         * Call this when a handshake has completed successfully and we want to consider the connection established
         */
        start() {
            this.scriptTagHolder.startLongPoll(this.id, this.password);
            this.addDisconnectPingFrame(this.id, this.password);
        }
        /**
         * Forces long polling to be considered as a potential transport
         */
        static forceAllow() {
            BrowserPollConnection.forceAllow_ = true;
        }
        /**
         * Forces longpolling to not be considered as a potential transport
         */
        static forceDisallow() {
            BrowserPollConnection.forceDisallow_ = true;
        }
        // Static method, use string literal so it can be accessed in a generic way
        static isAvailable() {
            if (BrowserPollConnection.forceAllow_) {
                return true;
            }
            else {
                // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
                // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
                return (!BrowserPollConnection.forceDisallow_ &&
                    typeof document !== 'undefined' &&
                    document.createElement != null &&
                    !isChromeExtensionContentScript() &&
                    !isWindowsStoreApp());
            }
        }
        /**
         * No-op for polling
         */
        markConnectionHealthy() { }
        /**
         * Stops polling and cleans up the iframe
         */
        shutdown_() {
            this.isClosed_ = true;
            if (this.scriptTagHolder) {
                this.scriptTagHolder.close();
                this.scriptTagHolder = null;
            }
            //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
            if (this.myDisconnFrame) {
                document.body.removeChild(this.myDisconnFrame);
                this.myDisconnFrame = null;
            }
            if (this.connectTimeoutTimer_) {
                clearTimeout(this.connectTimeoutTimer_);
                this.connectTimeoutTimer_ = null;
            }
        }
        /**
         * Triggered when this transport is closed
         */
        onClosed_() {
            if (!this.isClosed_) {
                this.log_('Longpoll is closing itself');
                this.shutdown_();
                if (this.onDisconnect_) {
                    this.onDisconnect_(this.everConnected_);
                    this.onDisconnect_ = null;
                }
            }
        }
        /**
         * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
         * that we've left.
         */
        close() {
            if (!this.isClosed_) {
                this.log_('Longpoll is being closed.');
                this.shutdown_();
            }
        }
        /**
         * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
         * broken into chunks (since URLs have a small maximum length).
         * @param data - The JSON data to transmit.
         */
        send(data) {
            const dataStr = stringify(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            //first, lets get the base64-encoded data
            const base64data = base64Encode(dataStr);
            //We can only fit a certain amount in each URL, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
            //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
            //of segments so that we can reassemble the packet on the server.
            for (let i = 0; i < dataSegs.length; i++) {
                this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
                this.curSegmentNum++;
            }
        }
        /**
         * This is how we notify the server that we're leaving.
         * We aren't able to send requests with DHTML on a window close event, but we can
         * trigger XHR requests in some browsers (everything but Opera basically).
         */
        addDisconnectPingFrame(id, pw) {
            this.myDisconnFrame = document.createElement('iframe');
            const urlParams = {};
            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
            this.myDisconnFrame.src = this.urlFn(urlParams);
            this.myDisconnFrame.style.display = 'none';
            document.body.appendChild(this.myDisconnFrame);
        }
        /**
         * Used to track the bytes received by this client
         */
        incrementIncomingBytes_(args) {
            // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
            const bytesReceived = stringify(args).length;
            this.bytesReceived += bytesReceived;
            this.stats_.incrementCounter('bytes_received', bytesReceived);
        }
    }
    /*********************************************************************************************
     * A wrapper around an iframe that is used as a long-polling script holder.
     *********************************************************************************************/
    class FirebaseIFrameScriptHolder {
        /**
         * @param commandCB - The callback to be called when control commands are received from the server.
         * @param onMessageCB - The callback to be triggered when responses arrive from the server.
         * @param onDisconnect - The callback to be triggered when this tag holder is closed
         * @param urlFn - A function that provides the URL of the endpoint to send data to.
         */
        constructor(commandCB, onMessageCB, onDisconnect, urlFn) {
            this.onDisconnect = onDisconnect;
            this.urlFn = urlFn;
            //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
            //problems in some browsers.
            this.outstandingRequests = new Set();
            //A queue of the pending segments waiting for transmission to the server.
            this.pendingSegs = [];
            //A serial number. We use this for two things:
            // 1) A way to ensure the browser doesn't cache responses to polls
            // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
            //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
            //    JSONP code in the order it was added to the iframe.
            this.currentSerial = Math.floor(Math.random() * 100000000);
            // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
            // incoming data from the server that we're waiting for).
            this.sendNewPolls = true;
            {
                //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
                //iframes where we put the long-polling script tags. We have two callbacks:
                //   1) Command Callback - Triggered for control issues, like starting a connection.
                //   2) Message Callback - Triggered when new data arrives.
                this.uniqueCallbackIdentifier = LUIDGenerator();
                window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
                window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =
                    onMessageCB;
                //Create an iframe for us to add script tags to.
                this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
                // Set the iframe's contents.
                let script = '';
                // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
                // for ie9, but ie8 needs to do it again in the document itself.
                if (this.myIFrame.src &&
                    this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                    const currentDomain = document.domain;
                    script = '<script>document.domain="' + currentDomain + '";</script>';
                }
                const iframeContents = '<html><body>' + script + '</body></html>';
                try {
                    this.myIFrame.doc.open();
                    this.myIFrame.doc.write(iframeContents);
                    this.myIFrame.doc.close();
                }
                catch (e) {
                    log('frame writing exception');
                    if (e.stack) {
                        log(e.stack);
                    }
                    log(e);
                }
            }
        }
        /**
         * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
         * actually use.
         */
        static createIFrame_() {
            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            // This is necessary in order to initialize the document inside the iframe
            if (document.body) {
                document.body.appendChild(iframe);
                try {
                    // If document.domain has been modified in IE, this will throw an error, and we need to set the
                    // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                    // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                    const a = iframe.contentWindow.document;
                    if (!a) {
                        // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                        log('No IE domain setting required');
                    }
                }
                catch (e) {
                    const domain = document.domain;
                    iframe.src =
                        "javascript:void((function(){document.open();document.domain='" +
                            domain +
                            "';document.close();})())";
                }
            }
            else {
                // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
                // never gets hit.
                throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
            }
            // Get the document of the iframe in a browser-specific way.
            if (iframe.contentDocument) {
                iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
            }
            else if (iframe.contentWindow) {
                iframe.doc = iframe.contentWindow.document; // Internet Explorer
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (iframe.document) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                iframe.doc = iframe.document; //others?
            }
            return iframe;
        }
        /**
         * Cancel all outstanding queries and remove the frame.
         */
        close() {
            //Mark this iframe as dead, so no new requests are sent.
            this.alive = false;
            if (this.myIFrame) {
                //We have to actually remove all of the html inside this iframe before removing it from the
                //window, or IE will continue loading and executing the script tags we've already added, which
                //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.
                this.myIFrame.doc.body.textContent = '';
                setTimeout(() => {
                    if (this.myIFrame !== null) {
                        document.body.removeChild(this.myIFrame);
                        this.myIFrame = null;
                    }
                }, Math.floor(0));
            }
            // Protect from being called recursively.
            const onDisconnect = this.onDisconnect;
            if (onDisconnect) {
                this.onDisconnect = null;
                onDisconnect();
            }
        }
        /**
         * Actually start the long-polling session by adding the first script tag(s) to the iframe.
         * @param id - The ID of this connection
         * @param pw - The password for this connection
         */
        startLongPoll(id, pw) {
            this.myID = id;
            this.myPW = pw;
            this.alive = true;
            //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
            while (this.newRequest_()) { }
        }
        /**
         * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
         * too many outstanding requests and we are still alive.
         *
         * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
         * needed.
         */
        newRequest_() {
            // We keep one outstanding request open all the time to receive data, but if we need to send data
            // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
            // close the old request.
            if (this.alive &&
                this.sendNewPolls &&
                this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
                //construct our url
                this.currentSerial++;
                const urlParams = {};
                urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
                urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
                urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
                let theURL = this.urlFn(urlParams);
                //Now add as much data as we can.
                let curDataString = '';
                let i = 0;
                while (this.pendingSegs.length > 0) {
                    //first, lets see if the next segment will fit.
                    const nextSeg = this.pendingSegs[0];
                    if (nextSeg.d.length +
                        SEG_HEADER_SIZE +
                        curDataString.length <=
                        MAX_URL_DATA_SIZE) {
                        //great, the segment will fit. Lets append it.
                        const theSeg = this.pendingSegs.shift();
                        curDataString =
                            curDataString +
                                '&' +
                                FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                                i +
                                '=' +
                                theSeg.seg +
                                '&' +
                                FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                                i +
                                '=' +
                                theSeg.ts +
                                '&' +
                                FIREBASE_LONGPOLL_DATA_PARAM +
                                i +
                                '=' +
                                theSeg.d;
                        i++;
                    }
                    else {
                        break;
                    }
                }
                theURL = theURL + curDataString;
                this.addLongPollTag_(theURL, this.currentSerial);
                return true;
            }
            else {
                return false;
            }
        }
        /**
         * Queue a packet for transmission to the server.
         * @param segnum - A sequential id for this packet segment used for reassembly
         * @param totalsegs - The total number of segments in this packet
         * @param data - The data for this segment.
         */
        enqueueSegment(segnum, totalsegs, data) {
            //add this to the queue of segments to send.
            this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
            //send the data immediately if there isn't already data being transmitted, unless
            //startLongPoll hasn't been called yet.
            if (this.alive) {
                this.newRequest_();
            }
        }
        /**
         * Add a script tag for a regular long-poll request.
         * @param url - The URL of the script tag.
         * @param serial - The serial number of the request.
         */
        addLongPollTag_(url, serial) {
            //remember that we sent this request.
            this.outstandingRequests.add(serial);
            const doNewRequest = () => {
                this.outstandingRequests.delete(serial);
                this.newRequest_();
            };
            // If this request doesn't return on its own accord (by the server sending us some data), we'll
            // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
            const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
            const readyStateCB = () => {
                // Request completed.  Cancel the keepalive.
                clearTimeout(keepaliveTimeout);
                // Trigger a new request so we can continue receiving data.
                doNewRequest();
            };
            this.addTag(url, readyStateCB);
        }
        /**
         * Add an arbitrary script tag to the iframe.
         * @param url - The URL for the script tag source.
         * @param loadCB - A callback to be triggered once the script has loaded.
         */
        addTag(url, loadCB) {
            {
                setTimeout(() => {
                    try {
                        // if we're already closed, don't add this poll
                        if (!this.sendNewPolls) {
                            return;
                        }
                        const newScript = this.myIFrame.doc.createElement('script');
                        newScript.type = 'text/javascript';
                        newScript.async = true;
                        newScript.src = url;
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        newScript.onload = newScript.onreadystatechange =
                            function () {
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                const rstate = newScript.readyState;
                                if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    newScript.onload = newScript.onreadystatechange = null;
                                    if (newScript.parentNode) {
                                        newScript.parentNode.removeChild(newScript);
                                    }
                                    loadCB();
                                }
                            };
                        newScript.onerror = () => {
                            log('Long-poll script failed to load: ' + url);
                            this.sendNewPolls = false;
                            this.close();
                        };
                        this.myIFrame.doc.body.appendChild(newScript);
                    }
                    catch (e) {
                        // TODO: we should make this error visible somehow
                    }
                }, Math.floor(1));
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const WEBSOCKET_MAX_FRAME_SIZE = 16384;
    const WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
    let WebSocketImpl = null;
    if (typeof MozWebSocket !== 'undefined') {
        WebSocketImpl = MozWebSocket;
    }
    else if (typeof WebSocket !== 'undefined') {
        WebSocketImpl = WebSocket;
    }
    /**
     * Create a new websocket connection with the given callbacks.
     */
    class WebSocketConnection {
        /**
         * @param connId identifier for this transport
         * @param repoInfo The info for the websocket endpoint.
         * @param applicationId The Firebase App ID for this project.
         * @param appCheckToken The App Check Token for this client.
         * @param authToken The Auth Token for this client.
         * @param transportSessionId Optional transportSessionId if this is connecting
         * to an existing transport session
         * @param lastSessionId Optional lastSessionId if there was a previous
         * connection
         */
        constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.applicationId = applicationId;
            this.appCheckToken = appCheckToken;
            this.authToken = authToken;
            this.keepaliveTimer = null;
            this.frames = null;
            this.totalFrames = 0;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.log_ = logWrapper(this.connId);
            this.stats_ = statsManagerGetCollection(repoInfo);
            this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);
            this.nodeAdmin = repoInfo.nodeAdmin;
        }
        /**
         * @param repoInfo - The info for the websocket endpoint.
         * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport
         *                                         session
         * @param lastSessionId - Optional lastSessionId if there was a previous connection
         * @returns connection url
         */
        static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {
            const urlParams = {};
            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
            if (typeof location !== 'undefined' &&
                location.hostname &&
                FORGE_DOMAIN_RE.test(location.hostname)) {
                urlParams[REFERER_PARAM] = FORGE_REF;
            }
            if (transportSessionId) {
                urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
            }
            if (lastSessionId) {
                urlParams[LAST_SESSION_PARAM] = lastSessionId;
            }
            if (appCheckToken) {
                urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
            }
            if (applicationId) {
                urlParams[APPLICATION_ID_PARAM] = applicationId;
            }
            return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
        }
        /**
         * @param onMessage - Callback when messages arrive
         * @param onDisconnect - Callback with connection lost.
         */
        open(onMessage, onDisconnect) {
            this.onDisconnect = onDisconnect;
            this.onMessage = onMessage;
            this.log_('Websocket connecting to ' + this.connURL);
            this.everConnected_ = false;
            // Assume failure until proven otherwise.
            PersistentStorage.set('previous_websocket_failure', true);
            try {
                let options;
                if (isNodeSdk()) ;
                this.mySock = new WebSocketImpl(this.connURL, [], options);
            }
            catch (e) {
                this.log_('Error instantiating WebSocket.');
                const error = e.message || e.data;
                if (error) {
                    this.log_(error);
                }
                this.onClosed_();
                return;
            }
            this.mySock.onopen = () => {
                this.log_('Websocket connected.');
                this.everConnected_ = true;
            };
            this.mySock.onclose = () => {
                this.log_('Websocket connection was disconnected.');
                this.mySock = null;
                this.onClosed_();
            };
            this.mySock.onmessage = m => {
                this.handleIncomingFrame(m);
            };
            this.mySock.onerror = e => {
                this.log_('WebSocket error.  Closing connection.');
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const error = e.message || e.data;
                if (error) {
                    this.log_(error);
                }
                this.onClosed_();
            };
        }
        /**
         * No-op for websockets, we don't need to do anything once the connection is confirmed as open
         */
        start() { }
        static forceDisallow() {
            WebSocketConnection.forceDisallow_ = true;
        }
        static isAvailable() {
            let isOldAndroid = false;
            if (typeof navigator !== 'undefined' && navigator.userAgent) {
                const oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
                const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
                if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                    if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                        isOldAndroid = true;
                    }
                }
            }
            return (!isOldAndroid &&
                WebSocketImpl !== null &&
                !WebSocketConnection.forceDisallow_);
        }
        /**
         * Returns true if we previously failed to connect with this transport.
         */
        static previouslyFailed() {
            // If our persistent storage is actually only in-memory storage,
            // we default to assuming that it previously failed to be safe.
            return (PersistentStorage.isInMemoryStorage ||
                PersistentStorage.get('previous_websocket_failure') === true);
        }
        markConnectionHealthy() {
            PersistentStorage.remove('previous_websocket_failure');
        }
        appendFrame_(data) {
            this.frames.push(data);
            if (this.frames.length === this.totalFrames) {
                const fullMess = this.frames.join('');
                this.frames = null;
                const jsonMess = jsonEval(fullMess);
                //handle the message
                this.onMessage(jsonMess);
            }
        }
        /**
         * @param frameCount - The number of frames we are expecting from the server
         */
        handleNewFrameCount_(frameCount) {
            this.totalFrames = frameCount;
            this.frames = [];
        }
        /**
         * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
         * @returns Any remaining data to be process, or null if there is none
         */
        extractFrameCount_(data) {
            assert(this.frames === null, 'We already have a frame buffer');
            // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
            // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
            if (data.length <= 6) {
                const frameCount = Number(data);
                if (!isNaN(frameCount)) {
                    this.handleNewFrameCount_(frameCount);
                    return null;
                }
            }
            this.handleNewFrameCount_(1);
            return data;
        }
        /**
         * Process a websocket frame that has arrived from the server.
         * @param mess - The frame data
         */
        handleIncomingFrame(mess) {
            if (this.mySock === null) {
                return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
            }
            const data = mess['data'];
            this.bytesReceived += data.length;
            this.stats_.incrementCounter('bytes_received', data.length);
            this.resetKeepAlive();
            if (this.frames !== null) {
                // we're buffering
                this.appendFrame_(data);
            }
            else {
                // try to parse out a frame count, otherwise, assume 1 and process it
                const remainingData = this.extractFrameCount_(data);
                if (remainingData !== null) {
                    this.appendFrame_(remainingData);
                }
            }
        }
        /**
         * Send a message to the server
         * @param data - The JSON object to transmit
         */
        send(data) {
            this.resetKeepAlive();
            const dataStr = stringify(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            //We can only fit a certain amount in each websocket frame, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
            //Send the length header
            if (dataSegs.length > 1) {
                this.sendString_(String(dataSegs.length));
            }
            //Send the actual data in segments.
            for (let i = 0; i < dataSegs.length; i++) {
                this.sendString_(dataSegs[i]);
            }
        }
        shutdown_() {
            this.isClosed_ = true;
            if (this.keepaliveTimer) {
                clearInterval(this.keepaliveTimer);
                this.keepaliveTimer = null;
            }
            if (this.mySock) {
                this.mySock.close();
                this.mySock = null;
            }
        }
        onClosed_() {
            if (!this.isClosed_) {
                this.log_('WebSocket is closing itself');
                this.shutdown_();
                // since this is an internal close, trigger the close listener
                if (this.onDisconnect) {
                    this.onDisconnect(this.everConnected_);
                    this.onDisconnect = null;
                }
            }
        }
        /**
         * External-facing close handler.
         * Close the websocket and kill the connection.
         */
        close() {
            if (!this.isClosed_) {
                this.log_('WebSocket is being closed');
                this.shutdown_();
            }
        }
        /**
         * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
         * the last activity.
         */
        resetKeepAlive() {
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = setInterval(() => {
                //If there has been no websocket activity for a while, send a no-op
                if (this.mySock) {
                    this.sendString_('0');
                }
                this.resetKeepAlive();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
        }
        /**
         * Send a string over the websocket.
         *
         * @param str - String to send.
         */
        sendString_(str) {
            // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
            // calls for some unknown reason.  We treat these as an error and disconnect.
            // See https://app.asana.com/0/58926111402292/68021340250410
            try {
                this.mySock.send(str);
            }
            catch (e) {
                this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
                setTimeout(this.onClosed_.bind(this), 0);
            }
        }
    }
    /**
     * Number of response before we consider the connection "healthy."
     */
    WebSocketConnection.responsesRequiredToBeHealthy = 2;
    /**
     * Time to wait for the connection te become healthy before giving up.
     */
    WebSocketConnection.healthyTimeout = 30000;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Currently simplistic, this class manages what transport a Connection should use at various stages of its
     * lifecycle.
     *
     * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
     * they are available.
     */
    class TransportManager {
        static get ALL_TRANSPORTS() {
            return [BrowserPollConnection, WebSocketConnection];
        }
        /**
         * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after
         * TransportManager has already set up transports_
         */
        static get IS_TRANSPORT_INITIALIZED() {
            return this.globalTransportInitialized_;
        }
        /**
         * @param repoInfo - Metadata around the namespace we're connecting to
         */
        constructor(repoInfo) {
            this.initTransports_(repoInfo);
        }
        initTransports_(repoInfo) {
            const isWebSocketsAvailable = WebSocketConnection['isAvailable']();
            let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
            if (repoInfo.webSocketOnly) {
                if (!isWebSocketsAvailable) {
                    warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
                }
                isSkipPollConnection = true;
            }
            if (isSkipPollConnection) {
                this.transports_ = [WebSocketConnection];
            }
            else {
                const transports = (this.transports_ = []);
                for (const transport of TransportManager.ALL_TRANSPORTS) {
                    if (transport && transport['isAvailable']()) {
                        transports.push(transport);
                    }
                }
                TransportManager.globalTransportInitialized_ = true;
            }
        }
        /**
         * @returns The constructor for the initial transport to use
         */
        initialTransport() {
            if (this.transports_.length > 0) {
                return this.transports_[0];
            }
            else {
                throw new Error('No transports available');
            }
        }
        /**
         * @returns The constructor for the next transport, or null
         */
        upgradeTransport() {
            if (this.transports_.length > 1) {
                return this.transports_[1];
            }
            else {
                return null;
            }
        }
    }
    // Keeps track of whether the TransportManager has already chosen a transport to use
    TransportManager.globalTransportInitialized_ = false;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Abort upgrade attempt if it takes longer than 60s.
    const UPGRADE_TIMEOUT = 60000;
    // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
    // If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
    const DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
    // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
    // then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
    // but we've sent/received enough bytes, we don't cancel the connection.
    const BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
    const BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
    const MESSAGE_TYPE = 't';
    const MESSAGE_DATA = 'd';
    const CONTROL_SHUTDOWN = 's';
    const CONTROL_RESET = 'r';
    const CONTROL_ERROR = 'e';
    const CONTROL_PONG = 'o';
    const SWITCH_ACK = 'a';
    const END_TRANSMISSION = 'n';
    const PING = 'p';
    const SERVER_HELLO = 'h';
    /**
     * Creates a new real-time connection to the server using whichever method works
     * best in the current browser.
     */
    class Connection {
        /**
         * @param id - an id for this connection
         * @param repoInfo_ - the info for the endpoint to connect to
         * @param applicationId_ - the Firebase App ID for this project
         * @param appCheckToken_ - The App Check Token for this device.
         * @param authToken_ - The auth token for this session.
         * @param onMessage_ - the callback to be triggered when a server-push message arrives
         * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
         * @param onDisconnect_ - the callback to be triggered when a connection was lost
         * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
         * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
         */
        constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
            this.id = id;
            this.repoInfo_ = repoInfo_;
            this.applicationId_ = applicationId_;
            this.appCheckToken_ = appCheckToken_;
            this.authToken_ = authToken_;
            this.onMessage_ = onMessage_;
            this.onReady_ = onReady_;
            this.onDisconnect_ = onDisconnect_;
            this.onKill_ = onKill_;
            this.lastSessionId = lastSessionId;
            this.connectionCount = 0;
            this.pendingDataMessages = [];
            this.state_ = 0 /* RealtimeState.CONNECTING */;
            this.log_ = logWrapper('c:' + this.id + ':');
            this.transportManager_ = new TransportManager(repoInfo_);
            this.log_('Connection created');
            this.start_();
        }
        /**
         * Starts a connection attempt
         */
        start_() {
            const conn = this.transportManager_.initialTransport();
            this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
            const onMessageReceived = this.connReceiver_(this.conn_);
            const onConnectionLost = this.disconnReceiver_(this.conn_);
            this.tx_ = this.conn_;
            this.rx_ = this.conn_;
            this.secondaryConn_ = null;
            this.isHealthy_ = false;
            /*
             * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
             * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
             * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
             * still have the context of your originating frame.
             */
            setTimeout(() => {
                // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
                this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);
            }, Math.floor(0));
            const healthyTimeoutMS = conn['healthyTimeout'] || 0;
            if (healthyTimeoutMS > 0) {
                this.healthyTimeout_ = setTimeoutNonBlocking(() => {
                    this.healthyTimeout_ = null;
                    if (!this.isHealthy_) {
                        if (this.conn_ &&
                            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                            this.log_('Connection exceeded healthy timeout but has received ' +
                                this.conn_.bytesReceived +
                                ' bytes.  Marking connection healthy.');
                            this.isHealthy_ = true;
                            this.conn_.markConnectionHealthy();
                        }
                        else if (this.conn_ &&
                            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                            this.log_('Connection exceeded healthy timeout but has sent ' +
                                this.conn_.bytesSent +
                                ' bytes.  Leaving connection alive.');
                            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                            // the server.
                        }
                        else {
                            this.log_('Closing unhealthy connection after timeout.');
                            this.close();
                        }
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                }, Math.floor(healthyTimeoutMS));
            }
        }
        nextTransportId_() {
            return 'c:' + this.id + ':' + this.connectionCount++;
        }
        disconnReceiver_(conn) {
            return everConnected => {
                if (conn === this.conn_) {
                    this.onConnectionLost_(everConnected);
                }
                else if (conn === this.secondaryConn_) {
                    this.log_('Secondary connection lost.');
                    this.onSecondaryConnectionLost_();
                }
                else {
                    this.log_('closing an old connection');
                }
            };
        }
        connReceiver_(conn) {
            return (message) => {
                if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {
                    if (conn === this.rx_) {
                        this.onPrimaryMessageReceived_(message);
                    }
                    else if (conn === this.secondaryConn_) {
                        this.onSecondaryMessageReceived_(message);
                    }
                    else {
                        this.log_('message on old connection');
                    }
                }
            };
        }
        /**
         * @param dataMsg - An arbitrary data message to be sent to the server
         */
        sendRequest(dataMsg) {
            // wrap in a data message envelope and send it on
            const msg = { t: 'd', d: dataMsg };
            this.sendData_(msg);
        }
        tryCleanupConnection() {
            if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
                this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
                this.conn_ = this.secondaryConn_;
                this.secondaryConn_ = null;
                // the server will shutdown the old connection
            }
        }
        onSecondaryControl_(controlData) {
            if (MESSAGE_TYPE in controlData) {
                const cmd = controlData[MESSAGE_TYPE];
                if (cmd === SWITCH_ACK) {
                    this.upgradeIfSecondaryHealthy_();
                }
                else if (cmd === CONTROL_RESET) {
                    // Most likely the session wasn't valid. Abandon the switch attempt
                    this.log_('Got a reset on secondary, closing it');
                    this.secondaryConn_.close();
                    // If we were already using this connection for something, than we need to fully close
                    if (this.tx_ === this.secondaryConn_ ||
                        this.rx_ === this.secondaryConn_) {
                        this.close();
                    }
                }
                else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on secondary.');
                    this.secondaryResponsesRequired_--;
                    this.upgradeIfSecondaryHealthy_();
                }
            }
        }
        onSecondaryMessageReceived_(parsedData) {
            const layer = requireKey('t', parsedData);
            const data = requireKey('d', parsedData);
            if (layer === 'c') {
                this.onSecondaryControl_(data);
            }
            else if (layer === 'd') {
                // got a data message, but we're still second connection. Need to buffer it up
                this.pendingDataMessages.push(data);
            }
            else {
                throw new Error('Unknown protocol layer: ' + layer);
            }
        }
        upgradeIfSecondaryHealthy_() {
            if (this.secondaryResponsesRequired_ <= 0) {
                this.log_('Secondary connection is healthy.');
                this.isHealthy_ = true;
                this.secondaryConn_.markConnectionHealthy();
                this.proceedWithUpgrade_();
            }
            else {
                // Send a ping to make sure the connection is healthy.
                this.log_('sending ping on secondary.');
                this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
            }
        }
        proceedWithUpgrade_() {
            // tell this connection to consider itself open
            this.secondaryConn_.start();
            // send ack
            this.log_('sending client ack on secondary');
            this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
            // send end packet on primary transport, switch to sending on this one
            // can receive on this one, buffer responses until end received on primary transport
            this.log_('Ending transmission on primary');
            this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
            this.tx_ = this.secondaryConn_;
            this.tryCleanupConnection();
        }
        onPrimaryMessageReceived_(parsedData) {
            // Must refer to parsedData properties in quotes, so closure doesn't touch them.
            const layer = requireKey('t', parsedData);
            const data = requireKey('d', parsedData);
            if (layer === 'c') {
                this.onControl_(data);
            }
            else if (layer === 'd') {
                this.onDataMessage_(data);
            }
        }
        onDataMessage_(message) {
            this.onPrimaryResponse_();
            // We don't do anything with data messages, just kick them up a level
            this.onMessage_(message);
        }
        onPrimaryResponse_() {
            if (!this.isHealthy_) {
                this.primaryResponsesRequired_--;
                if (this.primaryResponsesRequired_ <= 0) {
                    this.log_('Primary connection is healthy.');
                    this.isHealthy_ = true;
                    this.conn_.markConnectionHealthy();
                }
            }
        }
        onControl_(controlData) {
            const cmd = requireKey(MESSAGE_TYPE, controlData);
            if (MESSAGE_DATA in controlData) {
                const payload = controlData[MESSAGE_DATA];
                if (cmd === SERVER_HELLO) {
                    const handshakePayload = Object.assign({}, payload);
                    if (this.repoInfo_.isUsingEmulator) {
                        // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.
                        handshakePayload.h = this.repoInfo_.host;
                    }
                    this.onHandshake_(handshakePayload);
                }
                else if (cmd === END_TRANSMISSION) {
                    this.log_('recvd end transmission on primary');
                    this.rx_ = this.secondaryConn_;
                    for (let i = 0; i < this.pendingDataMessages.length; ++i) {
                        this.onDataMessage_(this.pendingDataMessages[i]);
                    }
                    this.pendingDataMessages = [];
                    this.tryCleanupConnection();
                }
                else if (cmd === CONTROL_SHUTDOWN) {
                    // This was previously the 'onKill' callback passed to the lower-level connection
                    // payload in this case is the reason for the shutdown. Generally a human-readable error
                    this.onConnectionShutdown_(payload);
                }
                else if (cmd === CONTROL_RESET) {
                    // payload in this case is the host we should contact
                    this.onReset_(payload);
                }
                else if (cmd === CONTROL_ERROR) {
                    error('Server Error: ' + payload);
                }
                else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on primary.');
                    this.onPrimaryResponse_();
                    this.sendPingOnPrimaryIfNecessary_();
                }
                else {
                    error('Unknown control packet command: ' + cmd);
                }
            }
        }
        /**
         * @param handshake - The handshake data returned from the server
         */
        onHandshake_(handshake) {
            const timestamp = handshake.ts;
            const version = handshake.v;
            const host = handshake.h;
            this.sessionId = handshake.s;
            this.repoInfo_.host = host;
            // if we've already closed the connection, then don't bother trying to progress further
            if (this.state_ === 0 /* RealtimeState.CONNECTING */) {
                this.conn_.start();
                this.onConnectionEstablished_(this.conn_, timestamp);
                if (PROTOCOL_VERSION !== version) {
                    warn('Protocol version mismatch detected');
                }
                // TODO: do we want to upgrade? when? maybe a delay?
                this.tryStartUpgrade_();
            }
        }
        tryStartUpgrade_() {
            const conn = this.transportManager_.upgradeTransport();
            if (conn) {
                this.startUpgrade_(conn);
            }
        }
        startUpgrade_(conn) {
            this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.secondaryResponsesRequired_ =
                conn['responsesRequiredToBeHealthy'] || 0;
            const onMessage = this.connReceiver_(this.secondaryConn_);
            const onDisconnect = this.disconnReceiver_(this.secondaryConn_);
            this.secondaryConn_.open(onMessage, onDisconnect);
            // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
            setTimeoutNonBlocking(() => {
                if (this.secondaryConn_) {
                    this.log_('Timed out trying to upgrade.');
                    this.secondaryConn_.close();
                }
            }, Math.floor(UPGRADE_TIMEOUT));
        }
        onReset_(host) {
            this.log_('Reset packet received.  New host: ' + host);
            this.repoInfo_.host = host;
            // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
            // We don't currently support resets after the connection has already been established
            if (this.state_ === 1 /* RealtimeState.CONNECTED */) {
                this.close();
            }
            else {
                // Close whatever connections we have open and start again.
                this.closeConnections_();
                this.start_();
            }
        }
        onConnectionEstablished_(conn, timestamp) {
            this.log_('Realtime connection established.');
            this.conn_ = conn;
            this.state_ = 1 /* RealtimeState.CONNECTED */;
            if (this.onReady_) {
                this.onReady_(timestamp, this.sessionId);
                this.onReady_ = null;
            }
            // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
            // send some pings.
            if (this.primaryResponsesRequired_ === 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
            }
            else {
                setTimeoutNonBlocking(() => {
                    this.sendPingOnPrimaryIfNecessary_();
                }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
            }
        }
        sendPingOnPrimaryIfNecessary_() {
            // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
            if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {
                this.log_('sending ping on primary.');
                this.sendData_({ t: 'c', d: { t: PING, d: {} } });
            }
        }
        onSecondaryConnectionLost_() {
            const conn = this.secondaryConn_;
            this.secondaryConn_ = null;
            if (this.tx_ === conn || this.rx_ === conn) {
                // we are relying on this connection already in some capacity. Therefore, a failure is real
                this.close();
            }
        }
        /**
         * @param everConnected - Whether or not the connection ever reached a server. Used to determine if
         * we should flush the host cache
         */
        onConnectionLost_(everConnected) {
            this.conn_ = null;
            // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
            // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
            if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {
                this.log_('Realtime connection failed.');
                // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
                if (this.repoInfo_.isCacheableHost()) {
                    PersistentStorage.remove('host:' + this.repoInfo_.host);
                    // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                    this.repoInfo_.internalHost = this.repoInfo_.host;
                }
            }
            else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {
                this.log_('Realtime connection lost.');
            }
            this.close();
        }
        onConnectionShutdown_(reason) {
            this.log_('Connection shutdown command received. Shutting down...');
            if (this.onKill_) {
                this.onKill_(reason);
                this.onKill_ = null;
            }
            // We intentionally don't want to fire onDisconnect (kill is a different case),
            // so clear the callback.
            this.onDisconnect_ = null;
            this.close();
        }
        sendData_(data) {
            if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {
                throw 'Connection is not connected';
            }
            else {
                this.tx_.send(data);
            }
        }
        /**
         * Cleans up this connection, calling the appropriate callbacks
         */
        close() {
            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {
                this.log_('Closing realtime connection.');
                this.state_ = 2 /* RealtimeState.DISCONNECTED */;
                this.closeConnections_();
                if (this.onDisconnect_) {
                    this.onDisconnect_();
                    this.onDisconnect_ = null;
                }
            }
        }
        closeConnections_() {
            this.log_('Shutting down all connections');
            if (this.conn_) {
                this.conn_.close();
                this.conn_ = null;
            }
            if (this.secondaryConn_) {
                this.secondaryConn_.close();
                this.secondaryConn_ = null;
            }
            if (this.healthyTimeout_) {
                clearTimeout(this.healthyTimeout_);
                this.healthyTimeout_ = null;
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface defining the set of actions that can be performed against the Firebase server
     * (basically corresponds to our wire protocol).
     *
     * @interface
     */
    class ServerActions {
        put(pathString, data, onComplete, hash) { }
        merge(pathString, data, onComplete, hash) { }
        /**
         * Refreshes the auth token for the current connection.
         * @param token - The authentication token
         */
        refreshAuthToken(token) { }
        /**
         * Refreshes the app check token for the current connection.
         * @param token The app check token
         */
        refreshAppCheckToken(token) { }
        onDisconnectPut(pathString, data, onComplete) { }
        onDisconnectMerge(pathString, data, onComplete) { }
        onDisconnectCancel(pathString, onComplete) { }
        reportStats(stats) { }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Base class to be used if you want to emit events. Call the constructor with
     * the set of allowed event names.
     */
    class EventEmitter {
        constructor(allowedEvents_) {
            this.allowedEvents_ = allowedEvents_;
            this.listeners_ = {};
            assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
        }
        /**
         * To be called by derived classes to trigger events.
         */
        trigger(eventType, ...varArgs) {
            if (Array.isArray(this.listeners_[eventType])) {
                // Clone the list, since callbacks could add/remove listeners.
                const listeners = [...this.listeners_[eventType]];
                for (let i = 0; i < listeners.length; i++) {
                    listeners[i].callback.apply(listeners[i].context, varArgs);
                }
            }
        }
        on(eventType, callback, context) {
            this.validateEventType_(eventType);
            this.listeners_[eventType] = this.listeners_[eventType] || [];
            this.listeners_[eventType].push({ callback, context });
            const eventData = this.getInitialEvent(eventType);
            if (eventData) {
                callback.apply(context, eventData);
            }
        }
        off(eventType, callback, context) {
            this.validateEventType_(eventType);
            const listeners = this.listeners_[eventType] || [];
            for (let i = 0; i < listeners.length; i++) {
                if (listeners[i].callback === callback &&
                    (!context || context === listeners[i].context)) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        }
        validateEventType_(eventType) {
            assert(this.allowedEvents_.find(et => {
                return et === eventType;
            }), 'Unknown event: ' + eventType);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Monitors online state (as reported by window.online/offline events).
     *
     * The expectation is that this could have many false positives (thinks we are online
     * when we're not), but no false negatives.  So we can safely use it to determine when
     * we definitely cannot reach the internet.
     */
    class OnlineMonitor extends EventEmitter {
        static getInstance() {
            return new OnlineMonitor();
        }
        constructor() {
            super(['online']);
            this.online_ = true;
            // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
            // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
            // It would seem that the 'online' event does not always fire consistently. So we disable it
            // for Cordova.
            if (typeof window !== 'undefined' &&
                typeof window.addEventListener !== 'undefined' &&
                !isMobileCordova()) {
                window.addEventListener('online', () => {
                    if (!this.online_) {
                        this.online_ = true;
                        this.trigger('online', true);
                    }
                }, false);
                window.addEventListener('offline', () => {
                    if (this.online_) {
                        this.online_ = false;
                        this.trigger('online', false);
                    }
                }, false);
            }
        }
        getInitialEvent(eventType) {
            assert(eventType === 'online', 'Unknown event type: ' + eventType);
            return [this.online_];
        }
        currentlyOnline() {
            return this.online_;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Maximum key depth. */
    const MAX_PATH_DEPTH = 32;
    /** Maximum number of (UTF8) bytes in a Firebase path. */
    const MAX_PATH_LENGTH_BYTES = 768;
    /**
     * An immutable object representing a parsed path.  It's immutable so that you
     * can pass them around to other functions without worrying about them changing
     * it.
     */
    class Path {
        /**
         * @param pathOrString - Path string to parse, or another path, or the raw
         * tokens array
         */
        constructor(pathOrString, pieceNum) {
            if (pieceNum === undefined) {
                this.pieces_ = pathOrString.split('/');
                // Remove empty pieces.
                let copyTo = 0;
                for (let i = 0; i < this.pieces_.length; i++) {
                    if (this.pieces_[i].length > 0) {
                        this.pieces_[copyTo] = this.pieces_[i];
                        copyTo++;
                    }
                }
                this.pieces_.length = copyTo;
                this.pieceNum_ = 0;
            }
            else {
                this.pieces_ = pathOrString;
                this.pieceNum_ = pieceNum;
            }
        }
        toString() {
            let pathString = '';
            for (let i = this.pieceNum_; i < this.pieces_.length; i++) {
                if (this.pieces_[i] !== '') {
                    pathString += '/' + this.pieces_[i];
                }
            }
            return pathString || '/';
        }
    }
    function newEmptyPath() {
        return new Path('');
    }
    function pathGetFront(path) {
        if (path.pieceNum_ >= path.pieces_.length) {
            return null;
        }
        return path.pieces_[path.pieceNum_];
    }
    /**
     * @returns The number of segments in this path
     */
    function pathGetLength(path) {
        return path.pieces_.length - path.pieceNum_;
    }
    function pathPopFront(path) {
        let pieceNum = path.pieceNum_;
        if (pieceNum < path.pieces_.length) {
            pieceNum++;
        }
        return new Path(path.pieces_, pieceNum);
    }
    function pathGetBack(path) {
        if (path.pieceNum_ < path.pieces_.length) {
            return path.pieces_[path.pieces_.length - 1];
        }
        return null;
    }
    function pathToUrlEncodedString(path) {
        let pathString = '';
        for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
            if (path.pieces_[i] !== '') {
                pathString += '/' + encodeURIComponent(String(path.pieces_[i]));
            }
        }
        return pathString || '/';
    }
    /**
     * Shallow copy of the parts of the path.
     *
     */
    function pathSlice(path, begin = 0) {
        return path.pieces_.slice(path.pieceNum_ + begin);
    }
    function pathParent(path) {
        if (path.pieceNum_ >= path.pieces_.length) {
            return null;
        }
        const pieces = [];
        for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
            pieces.push(path.pieces_[i]);
        }
        return new Path(pieces, 0);
    }
    function pathChild(path, childPathObj) {
        const pieces = [];
        for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
            pieces.push(path.pieces_[i]);
        }
        if (childPathObj instanceof Path) {
            for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
                pieces.push(childPathObj.pieces_[i]);
            }
        }
        else {
            const childPieces = childPathObj.split('/');
            for (let i = 0; i < childPieces.length; i++) {
                if (childPieces[i].length > 0) {
                    pieces.push(childPieces[i]);
                }
            }
        }
        return new Path(pieces, 0);
    }
    /**
     * @returns True if there are no segments in this path
     */
    function pathIsEmpty(path) {
        return path.pieceNum_ >= path.pieces_.length;
    }
    /**
     * @returns The path from outerPath to innerPath
     */
    function newRelativePath(outerPath, innerPath) {
        const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);
        if (outer === null) {
            return innerPath;
        }
        else if (outer === inner) {
            return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
        }
        else {
            throw new Error('INTERNAL ERROR: innerPath (' +
                innerPath +
                ') is not within ' +
                'outerPath (' +
                outerPath +
                ')');
        }
    }
    /**
     * @returns true if paths are the same.
     */
    function pathEquals(path, other) {
        if (pathGetLength(path) !== pathGetLength(other)) {
            return false;
        }
        for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {
            if (path.pieces_[i] !== other.pieces_[j]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @returns True if this path is a parent of (or the same as) other
     */
    function pathContains(path, other) {
        let i = path.pieceNum_;
        let j = other.pieceNum_;
        if (pathGetLength(path) > pathGetLength(other)) {
            return false;
        }
        while (i < path.pieces_.length) {
            if (path.pieces_[i] !== other.pieces_[j]) {
                return false;
            }
            ++i;
            ++j;
        }
        return true;
    }
    /**
     * Dynamic (mutable) path used to count path lengths.
     *
     * This class is used to efficiently check paths for valid
     * length (in UTF8 bytes) and depth (used in path validation).
     *
     * Throws Error exception if path is ever invalid.
     *
     * The definition of a path always begins with '/'.
     */
    class ValidationPath {
        /**
         * @param path - Initial Path.
         * @param errorPrefix_ - Prefix for any error messages.
         */
        constructor(path, errorPrefix_) {
            this.errorPrefix_ = errorPrefix_;
            this.parts_ = pathSlice(path, 0);
            /** Initialize to number of '/' chars needed in path. */
            this.byteLength_ = Math.max(1, this.parts_.length);
            for (let i = 0; i < this.parts_.length; i++) {
                this.byteLength_ += stringLength(this.parts_[i]);
            }
            validationPathCheckValid(this);
        }
    }
    function validationPathPush(validationPath, child) {
        // Count the needed '/'
        if (validationPath.parts_.length > 0) {
            validationPath.byteLength_ += 1;
        }
        validationPath.parts_.push(child);
        validationPath.byteLength_ += stringLength(child);
        validationPathCheckValid(validationPath);
    }
    function validationPathPop(validationPath) {
        const last = validationPath.parts_.pop();
        validationPath.byteLength_ -= stringLength(last);
        // Un-count the previous '/'
        if (validationPath.parts_.length > 0) {
            validationPath.byteLength_ -= 1;
        }
    }
    function validationPathCheckValid(validationPath) {
        if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {
            throw new Error(validationPath.errorPrefix_ +
                'has a key path longer than ' +
                MAX_PATH_LENGTH_BYTES +
                ' bytes (' +
                validationPath.byteLength_ +
                ').');
        }
        if (validationPath.parts_.length > MAX_PATH_DEPTH) {
            throw new Error(validationPath.errorPrefix_ +
                'path specified exceeds the maximum depth that can be written (' +
                MAX_PATH_DEPTH +
                ') or object contains a cycle ' +
                validationPathToErrorString(validationPath));
        }
    }
    /**
     * String for use in error messages - uses '.' notation for path.
     */
    function validationPathToErrorString(validationPath) {
        if (validationPath.parts_.length === 0) {
            return '';
        }
        return "in property '" + validationPath.parts_.join('.') + "'";
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class VisibilityMonitor extends EventEmitter {
        static getInstance() {
            return new VisibilityMonitor();
        }
        constructor() {
            super(['visible']);
            let hidden;
            let visibilityChange;
            if (typeof document !== 'undefined' &&
                typeof document.addEventListener !== 'undefined') {
                if (typeof document['hidden'] !== 'undefined') {
                    // Opera 12.10 and Firefox 18 and later support
                    visibilityChange = 'visibilitychange';
                    hidden = 'hidden';
                }
                else if (typeof document['mozHidden'] !== 'undefined') {
                    visibilityChange = 'mozvisibilitychange';
                    hidden = 'mozHidden';
                }
                else if (typeof document['msHidden'] !== 'undefined') {
                    visibilityChange = 'msvisibilitychange';
                    hidden = 'msHidden';
                }
                else if (typeof document['webkitHidden'] !== 'undefined') {
                    visibilityChange = 'webkitvisibilitychange';
                    hidden = 'webkitHidden';
                }
            }
            // Initially, we always assume we are visible. This ensures that in browsers
            // without page visibility support or in cases where we are never visible
            // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
            // reconnects
            this.visible_ = true;
            if (visibilityChange) {
                document.addEventListener(visibilityChange, () => {
                    const visible = !document[hidden];
                    if (visible !== this.visible_) {
                        this.visible_ = visible;
                        this.trigger('visible', visible);
                    }
                }, false);
            }
        }
        getInitialEvent(eventType) {
            assert(eventType === 'visible', 'Unknown event type: ' + eventType);
            return [this.visible_];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const RECONNECT_MIN_DELAY = 1000;
    const RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
    const RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
    const RECONNECT_DELAY_MULTIPLIER = 1.3;
    const RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
    const SERVER_KILL_INTERRUPT_REASON = 'server_kill';
    // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
    const INVALID_TOKEN_THRESHOLD = 3;
    /**
     * Firebase connection.  Abstracts wire protocol and handles reconnecting.
     *
     * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
     * in quotes to make sure the closure compiler does not minify them.
     */
    class PersistentConnection extends ServerActions {
        /**
         * @param repoInfo_ - Data about the namespace we are connecting to
         * @param applicationId_ - The Firebase App ID for this project
         * @param onDataUpdate_ - A callback for new data from the server
         */
        constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {
            super();
            this.repoInfo_ = repoInfo_;
            this.applicationId_ = applicationId_;
            this.onDataUpdate_ = onDataUpdate_;
            this.onConnectStatus_ = onConnectStatus_;
            this.onServerInfoUpdate_ = onServerInfoUpdate_;
            this.authTokenProvider_ = authTokenProvider_;
            this.appCheckTokenProvider_ = appCheckTokenProvider_;
            this.authOverride_ = authOverride_;
            // Used for diagnostic logging.
            this.id = PersistentConnection.nextPersistentConnectionId_++;
            this.log_ = logWrapper('p:' + this.id + ':');
            this.interruptReasons_ = {};
            this.listens = new Map();
            this.outstandingPuts_ = [];
            this.outstandingGets_ = [];
            this.outstandingPutCount_ = 0;
            this.outstandingGetCount_ = 0;
            this.onDisconnectRequestQueue_ = [];
            this.connected_ = false;
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
            this.securityDebugCallback_ = null;
            this.lastSessionId = null;
            this.establishConnectionTimer_ = null;
            this.visible_ = false;
            // Before we get connected, we keep a queue of pending messages to send.
            this.requestCBHash_ = {};
            this.requestNumber_ = 0;
            this.realtime_ = null;
            this.authToken_ = null;
            this.appCheckToken_ = null;
            this.forceTokenRefresh_ = false;
            this.invalidAuthTokenCount_ = 0;
            this.invalidAppCheckTokenCount_ = 0;
            this.firstConnection_ = true;
            this.lastConnectionAttemptTime_ = null;
            this.lastConnectionEstablishedTime_ = null;
            if (authOverride_ && true) {
                throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
            }
            VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);
            if (repoInfo_.host.indexOf('fblocal') === -1) {
                OnlineMonitor.getInstance().on('online', this.onOnline_, this);
            }
        }
        sendRequest(action, body, onResponse) {
            const curReqNum = ++this.requestNumber_;
            const msg = { r: curReqNum, a: action, b: body };
            this.log_(stringify(msg));
            assert(this.connected_, "sendRequest call when we're not connected not allowed.");
            this.realtime_.sendRequest(msg);
            if (onResponse) {
                this.requestCBHash_[curReqNum] = onResponse;
            }
        }
        get(query) {
            this.initConnection_();
            const deferred = new Deferred();
            const request = {
                p: query._path.toString(),
                q: query._queryObject
            };
            const outstandingGet = {
                action: 'g',
                request,
                onComplete: (message) => {
                    const payload = message['d'];
                    if (message['s'] === 'ok') {
                        deferred.resolve(payload);
                    }
                    else {
                        deferred.reject(payload);
                    }
                }
            };
            this.outstandingGets_.push(outstandingGet);
            this.outstandingGetCount_++;
            const index = this.outstandingGets_.length - 1;
            if (this.connected_) {
                this.sendGet_(index);
            }
            return deferred.promise;
        }
        listen(query, currentHashFn, tag, onComplete) {
            this.initConnection_();
            const queryId = query._queryIdentifier;
            const pathString = query._path.toString();
            this.log_('Listen called for ' + pathString + ' ' + queryId);
            if (!this.listens.has(pathString)) {
                this.listens.set(pathString, new Map());
            }
            assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');
            assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);
            const listenSpec = {
                onComplete,
                hashFn: currentHashFn,
                query,
                tag
            };
            this.listens.get(pathString).set(queryId, listenSpec);
            if (this.connected_) {
                this.sendListen_(listenSpec);
            }
        }
        sendGet_(index) {
            const get = this.outstandingGets_[index];
            this.sendRequest('g', get.request, (message) => {
                delete this.outstandingGets_[index];
                this.outstandingGetCount_--;
                if (this.outstandingGetCount_ === 0) {
                    this.outstandingGets_ = [];
                }
                if (get.onComplete) {
                    get.onComplete(message);
                }
            });
        }
        sendListen_(listenSpec) {
            const query = listenSpec.query;
            const pathString = query._path.toString();
            const queryId = query._queryIdentifier;
            this.log_('Listen on ' + pathString + ' for ' + queryId);
            const req = { /*path*/ p: pathString };
            const action = 'q';
            // Only bother to send query if it's non-default.
            if (listenSpec.tag) {
                req['q'] = query._queryObject;
                req['t'] = listenSpec.tag;
            }
            req[ /*hash*/'h'] = listenSpec.hashFn();
            this.sendRequest(action, req, (message) => {
                const payload = message[ /*data*/'d'];
                const status = message[ /*status*/'s'];
                // print warnings in any case...
                PersistentConnection.warnOnListenWarnings_(payload, query);
                const currentListenSpec = this.listens.get(pathString) &&
                    this.listens.get(pathString).get(queryId);
                // only trigger actions if the listen hasn't been removed and readded
                if (currentListenSpec === listenSpec) {
                    this.log_('listen response', message);
                    if (status !== 'ok') {
                        this.removeListen_(pathString, queryId);
                    }
                    if (listenSpec.onComplete) {
                        listenSpec.onComplete(status, payload);
                    }
                }
            });
        }
        static warnOnListenWarnings_(payload, query) {
            if (payload && typeof payload === 'object' && contains(payload, 'w')) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const warnings = safeGet(payload, 'w');
                if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                    const indexSpec = '".indexOn": "' + query._queryParams.getIndex().toString() + '"';
                    const indexPath = query._path.toString();
                    warn(`Using an unspecified index. Your data will be downloaded and ` +
                        `filtered on the client. Consider adding ${indexSpec} at ` +
                        `${indexPath} to your security rules for better performance.`);
                }
            }
        }
        refreshAuthToken(token) {
            this.authToken_ = token;
            this.log_('Auth token refreshed');
            if (this.authToken_) {
                this.tryAuth();
            }
            else {
                //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
                //the credential so we dont become authenticated next time we connect.
                if (this.connected_) {
                    this.sendRequest('unauth', {}, () => { });
                }
            }
            this.reduceReconnectDelayIfAdminCredential_(token);
        }
        reduceReconnectDelayIfAdminCredential_(credential) {
            // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
            // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
            const isFirebaseSecret = credential && credential.length === 40;
            if (isFirebaseSecret || isAdmin(credential)) {
                this.log_('Admin auth credential detected.  Reducing max reconnect time.');
                this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            }
        }
        refreshAppCheckToken(token) {
            this.appCheckToken_ = token;
            this.log_('App check token refreshed');
            if (this.appCheckToken_) {
                this.tryAppCheck();
            }
            else {
                //If we're connected we want to let the server know to unauthenticate us.
                //If we're not connected, simply delete the credential so we dont become
                // authenticated next time we connect.
                if (this.connected_) {
                    this.sendRequest('unappeck', {}, () => { });
                }
            }
        }
        /**
         * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
         * a auth revoked (the connection is closed).
         */
        tryAuth() {
            if (this.connected_ && this.authToken_) {
                const token = this.authToken_;
                const authMethod = isValidFormat(token) ? 'auth' : 'gauth';
                const requestData = { cred: token };
                if (this.authOverride_ === null) {
                    requestData['noauth'] = true;
                }
                else if (typeof this.authOverride_ === 'object') {
                    requestData['authvar'] = this.authOverride_;
                }
                this.sendRequest(authMethod, requestData, (res) => {
                    const status = res[ /*status*/'s'];
                    const data = res[ /*data*/'d'] || 'error';
                    if (this.authToken_ === token) {
                        if (status === 'ok') {
                            this.invalidAuthTokenCount_ = 0;
                        }
                        else {
                            // Triggers reconnect and force refresh for auth token
                            this.onAuthRevoked_(status, data);
                        }
                    }
                });
            }
        }
        /**
         * Attempts to authenticate with the given token. If the authentication
         * attempt fails, it's triggered like the token was revoked (the connection is
         * closed).
         */
        tryAppCheck() {
            if (this.connected_ && this.appCheckToken_) {
                this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {
                    const status = res[ /*status*/'s'];
                    const data = res[ /*data*/'d'] || 'error';
                    if (status === 'ok') {
                        this.invalidAppCheckTokenCount_ = 0;
                    }
                    else {
                        this.onAppCheckRevoked_(status, data);
                    }
                });
            }
        }
        /**
         * @inheritDoc
         */
        unlisten(query, tag) {
            const pathString = query._path.toString();
            const queryId = query._queryIdentifier;
            this.log_('Unlisten called for ' + pathString + ' ' + queryId);
            assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');
            const listen = this.removeListen_(pathString, queryId);
            if (listen && this.connected_) {
                this.sendUnlisten_(pathString, queryId, query._queryObject, tag);
            }
        }
        sendUnlisten_(pathString, queryId, queryObj, tag) {
            this.log_('Unlisten on ' + pathString + ' for ' + queryId);
            const req = { /*path*/ p: pathString };
            const action = 'n';
            // Only bother sending queryId if it's non-default.
            if (tag) {
                req['q'] = queryObj;
                req['t'] = tag;
            }
            this.sendRequest(action, req);
        }
        onDisconnectPut(pathString, data, onComplete) {
            this.initConnection_();
            if (this.connected_) {
                this.sendOnDisconnect_('o', pathString, data, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString,
                    action: 'o',
                    data,
                    onComplete
                });
            }
        }
        onDisconnectMerge(pathString, data, onComplete) {
            this.initConnection_();
            if (this.connected_) {
                this.sendOnDisconnect_('om', pathString, data, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString,
                    action: 'om',
                    data,
                    onComplete
                });
            }
        }
        onDisconnectCancel(pathString, onComplete) {
            this.initConnection_();
            if (this.connected_) {
                this.sendOnDisconnect_('oc', pathString, null, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString,
                    action: 'oc',
                    data: null,
                    onComplete
                });
            }
        }
        sendOnDisconnect_(action, pathString, data, onComplete) {
            const request = { /*path*/ p: pathString, /*data*/ d: data };
            this.log_('onDisconnect ' + action, request);
            this.sendRequest(action, request, (response) => {
                if (onComplete) {
                    setTimeout(() => {
                        onComplete(response[ /*status*/'s'], response[ /* data */'d']);
                    }, Math.floor(0));
                }
            });
        }
        put(pathString, data, onComplete, hash) {
            this.putInternal('p', pathString, data, onComplete, hash);
        }
        merge(pathString, data, onComplete, hash) {
            this.putInternal('m', pathString, data, onComplete, hash);
        }
        putInternal(action, pathString, data, onComplete, hash) {
            this.initConnection_();
            const request = {
                /*path*/ p: pathString,
                /*data*/ d: data
            };
            if (hash !== undefined) {
                request[ /*hash*/'h'] = hash;
            }
            // TODO: Only keep track of the most recent put for a given path?
            this.outstandingPuts_.push({
                action,
                request,
                onComplete
            });
            this.outstandingPutCount_++;
            const index = this.outstandingPuts_.length - 1;
            if (this.connected_) {
                this.sendPut_(index);
            }
            else {
                this.log_('Buffering put: ' + pathString);
            }
        }
        sendPut_(index) {
            const action = this.outstandingPuts_[index].action;
            const request = this.outstandingPuts_[index].request;
            const onComplete = this.outstandingPuts_[index].onComplete;
            this.outstandingPuts_[index].queued = this.connected_;
            this.sendRequest(action, request, (message) => {
                this.log_(action + ' response', message);
                delete this.outstandingPuts_[index];
                this.outstandingPutCount_--;
                // Clean up array occasionally.
                if (this.outstandingPutCount_ === 0) {
                    this.outstandingPuts_ = [];
                }
                if (onComplete) {
                    onComplete(message[ /*status*/'s'], message[ /* data */'d']);
                }
            });
        }
        reportStats(stats) {
            // If we're not connected, we just drop the stats.
            if (this.connected_) {
                const request = { /*counters*/ c: stats };
                this.log_('reportStats', request);
                this.sendRequest(/*stats*/ 's', request, result => {
                    const status = result[ /*status*/'s'];
                    if (status !== 'ok') {
                        const errorReason = result[ /* data */'d'];
                        this.log_('reportStats', 'Error sending stats: ' + errorReason);
                    }
                });
            }
        }
        onDataMessage_(message) {
            if ('r' in message) {
                // this is a response
                this.log_('from server: ' + stringify(message));
                const reqNum = message['r'];
                const onResponse = this.requestCBHash_[reqNum];
                if (onResponse) {
                    delete this.requestCBHash_[reqNum];
                    onResponse(message[ /*body*/'b']);
                }
            }
            else if ('error' in message) {
                throw 'A server-side error has occurred: ' + message['error'];
            }
            else if ('a' in message) {
                // a and b are action and body, respectively
                this.onDataPush_(message['a'], message['b']);
            }
        }
        onDataPush_(action, body) {
            this.log_('handleServerMessage', action, body);
            if (action === 'd') {
                this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
                /*isMerge*/ false, body['t']);
            }
            else if (action === 'm') {
                this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
                /*isMerge=*/ true, body['t']);
            }
            else if (action === 'c') {
                this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
            }
            else if (action === 'ac') {
                this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
            }
            else if (action === 'apc') {
                this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
            }
            else if (action === 'sd') {
                this.onSecurityDebugPacket_(body);
            }
            else {
                error('Unrecognized action received from server: ' +
                    stringify(action) +
                    '\nAre you using the latest client?');
            }
        }
        onReady_(timestamp, sessionId) {
            this.log_('connection ready');
            this.connected_ = true;
            this.lastConnectionEstablishedTime_ = new Date().getTime();
            this.handleTimestamp_(timestamp);
            this.lastSessionId = sessionId;
            if (this.firstConnection_) {
                this.sendConnectStats_();
            }
            this.restoreState_();
            this.firstConnection_ = false;
            this.onConnectStatus_(true);
        }
        scheduleConnect_(timeout) {
            assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
            }
            // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
            // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
            this.establishConnectionTimer_ = setTimeout(() => {
                this.establishConnectionTimer_ = null;
                this.establishConnection_();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(timeout));
        }
        initConnection_() {
            if (!this.realtime_ && this.firstConnection_) {
                this.scheduleConnect_(0);
            }
        }
        onVisible_(visible) {
            // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
            if (visible &&
                !this.visible_ &&
                this.reconnectDelay_ === this.maxReconnectDelay_) {
                this.log_('Window became visible.  Reducing delay.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
            this.visible_ = visible;
        }
        onOnline_(online) {
            if (online) {
                this.log_('Browser went online.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
            else {
                this.log_('Browser went offline.  Killing connection.');
                if (this.realtime_) {
                    this.realtime_.close();
                }
            }
        }
        onRealtimeDisconnect_() {
            this.log_('data client disconnected');
            this.connected_ = false;
            this.realtime_ = null;
            // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
            this.cancelSentTransactions_();
            // Clear out the pending requests.
            this.requestCBHash_ = {};
            if (this.shouldReconnect_()) {
                if (!this.visible_) {
                    this.log_("Window isn't visible.  Delaying reconnect.");
                    this.reconnectDelay_ = this.maxReconnectDelay_;
                    this.lastConnectionAttemptTime_ = new Date().getTime();
                }
                else if (this.lastConnectionEstablishedTime_) {
                    // If we've been connected long enough, reset reconnect delay to minimum.
                    const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                    if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
                        this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                    }
                    this.lastConnectionEstablishedTime_ = null;
                }
                const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
                let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
                reconnectDelay = Math.random() * reconnectDelay;
                this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
                this.scheduleConnect_(reconnectDelay);
                // Adjust reconnect delay for next time.
                this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
            }
            this.onConnectStatus_(false);
        }
        async establishConnection_() {
            if (this.shouldReconnect_()) {
                this.log_('Making a connection attempt');
                this.lastConnectionAttemptTime_ = new Date().getTime();
                this.lastConnectionEstablishedTime_ = null;
                const onDataMessage = this.onDataMessage_.bind(this);
                const onReady = this.onReady_.bind(this);
                const onDisconnect = this.onRealtimeDisconnect_.bind(this);
                const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;
                const lastSessionId = this.lastSessionId;
                let canceled = false;
                let connection = null;
                const closeFn = function () {
                    if (connection) {
                        connection.close();
                    }
                    else {
                        canceled = true;
                        onDisconnect();
                    }
                };
                const sendRequestFn = function (msg) {
                    assert(connection, "sendRequest call when we're not connected not allowed.");
                    connection.sendRequest(msg);
                };
                this.realtime_ = {
                    close: closeFn,
                    sendRequest: sendRequestFn
                };
                const forceRefresh = this.forceTokenRefresh_;
                this.forceTokenRefresh_ = false;
                try {
                    // First fetch auth and app check token, and establish connection after
                    // fetching the token was successful
                    const [authToken, appCheckToken] = await Promise.all([
                        this.authTokenProvider_.getToken(forceRefresh),
                        this.appCheckTokenProvider_.getToken(forceRefresh)
                    ]);
                    if (!canceled) {
                        log('getToken() completed. Creating connection.');
                        this.authToken_ = authToken && authToken.accessToken;
                        this.appCheckToken_ = appCheckToken && appCheckToken.token;
                        connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, 
                        /* onKill= */ reason => {
                            warn(reason + ' (' + this.repoInfo_.toString() + ')');
                            this.interrupt(SERVER_KILL_INTERRUPT_REASON);
                        }, lastSessionId);
                    }
                    else {
                        log('getToken() completed but was canceled');
                    }
                }
                catch (error) {
                    this.log_('Failed to get token: ' + error);
                    if (!canceled) {
                        if (this.repoInfo_.nodeAdmin) {
                            // This may be a critical error for the Admin Node.js SDK, so log a warning.
                            // But getToken() may also just have temporarily failed, so we still want to
                            // continue retrying.
                            warn(error);
                        }
                        closeFn();
                    }
                }
            }
        }
        interrupt(reason) {
            log('Interrupting connection for reason: ' + reason);
            this.interruptReasons_[reason] = true;
            if (this.realtime_) {
                this.realtime_.close();
            }
            else {
                if (this.establishConnectionTimer_) {
                    clearTimeout(this.establishConnectionTimer_);
                    this.establishConnectionTimer_ = null;
                }
                if (this.connected_) {
                    this.onRealtimeDisconnect_();
                }
            }
        }
        resume(reason) {
            log('Resuming connection for reason: ' + reason);
            delete this.interruptReasons_[reason];
            if (isEmpty(this.interruptReasons_)) {
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
        }
        handleTimestamp_(timestamp) {
            const delta = timestamp - new Date().getTime();
            this.onServerInfoUpdate_({ serverTimeOffset: delta });
        }
        cancelSentTransactions_() {
            for (let i = 0; i < this.outstandingPuts_.length; i++) {
                const put = this.outstandingPuts_[i];
                if (put && /*hash*/ 'h' in put.request && put.queued) {
                    if (put.onComplete) {
                        put.onComplete('disconnect');
                    }
                    delete this.outstandingPuts_[i];
                    this.outstandingPutCount_--;
                }
            }
            // Clean up array occasionally.
            if (this.outstandingPutCount_ === 0) {
                this.outstandingPuts_ = [];
            }
        }
        onListenRevoked_(pathString, query) {
            // Remove the listen and manufacture a "permission_denied" error for the failed listen.
            let queryId;
            if (!query) {
                queryId = 'default';
            }
            else {
                queryId = query.map(q => ObjectToUniqueKey(q)).join('$');
            }
            const listen = this.removeListen_(pathString, queryId);
            if (listen && listen.onComplete) {
                listen.onComplete('permission_denied');
            }
        }
        removeListen_(pathString, queryId) {
            const normalizedPathString = new Path(pathString).toString(); // normalize path.
            let listen;
            if (this.listens.has(normalizedPathString)) {
                const map = this.listens.get(normalizedPathString);
                listen = map.get(queryId);
                map.delete(queryId);
                if (map.size === 0) {
                    this.listens.delete(normalizedPathString);
                }
            }
            else {
                // all listens for this path has already been removed
                listen = undefined;
            }
            return listen;
        }
        onAuthRevoked_(statusCode, explanation) {
            log('Auth token revoked: ' + statusCode + '/' + explanation);
            this.authToken_ = null;
            this.forceTokenRefresh_ = true;
            this.realtime_.close();
            if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
                // We'll wait a couple times before logging the warning / increasing the
                // retry period since oauth tokens will report as "invalid" if they're
                // just expired. Plus there may be transient issues that resolve themselves.
                this.invalidAuthTokenCount_++;
                if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                    // Set a long reconnect delay because recovery is unlikely
                    this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                    // Notify the auth token provider that the token is invalid, which will log
                    // a warning
                    this.authTokenProvider_.notifyForInvalidToken();
                }
            }
        }
        onAppCheckRevoked_(statusCode, explanation) {
            log('App check token revoked: ' + statusCode + '/' + explanation);
            this.appCheckToken_ = null;
            this.forceTokenRefresh_ = true;
            // Note: We don't close the connection as the developer may not have
            // enforcement enabled. The backend closes connections with enforcements.
            if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
                // We'll wait a couple times before logging the warning / increasing the
                // retry period since oauth tokens will report as "invalid" if they're
                // just expired. Plus there may be transient issues that resolve themselves.
                this.invalidAppCheckTokenCount_++;
                if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                    this.appCheckTokenProvider_.notifyForInvalidToken();
                }
            }
        }
        onSecurityDebugPacket_(body) {
            if (this.securityDebugCallback_) {
                this.securityDebugCallback_(body);
            }
            else {
                if ('msg' in body) {
                    console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
                }
            }
        }
        restoreState_() {
            //Re-authenticate ourselves if we have a credential stored.
            this.tryAuth();
            this.tryAppCheck();
            // Puts depend on having received the corresponding data update from the server before they complete, so we must
            // make sure to send listens before puts.
            for (const queries of this.listens.values()) {
                for (const listenSpec of queries.values()) {
                    this.sendListen_(listenSpec);
                }
            }
            for (let i = 0; i < this.outstandingPuts_.length; i++) {
                if (this.outstandingPuts_[i]) {
                    this.sendPut_(i);
                }
            }
            while (this.onDisconnectRequestQueue_.length) {
                const request = this.onDisconnectRequestQueue_.shift();
                this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
            }
            for (let i = 0; i < this.outstandingGets_.length; i++) {
                if (this.outstandingGets_[i]) {
                    this.sendGet_(i);
                }
            }
        }
        /**
         * Sends client stats for first connection
         */
        sendConnectStats_() {
            const stats = {};
            let clientName = 'js';
            stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
            if (isMobileCordova()) {
                stats['framework.cordova'] = 1;
            }
            else if (isReactNative()) {
                stats['framework.reactnative'] = 1;
            }
            this.reportStats(stats);
        }
        shouldReconnect_() {
            const online = OnlineMonitor.getInstance().currentlyOnline();
            return isEmpty(this.interruptReasons_) && online;
        }
    }
    PersistentConnection.nextPersistentConnectionId_ = 0;
    /**
     * Counter for number of connections created. Mainly used for tagging in the logs
     */
    PersistentConnection.nextConnectionId_ = 0;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class NamedNode {
        constructor(name, node) {
            this.name = name;
            this.node = node;
        }
        static Wrap(name, node) {
            return new NamedNode(name, node);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Index {
        /**
         * @returns A standalone comparison function for
         * this index
         */
        getCompare() {
            return this.compare.bind(this);
        }
        /**
         * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
         * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
         *
         *
         * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode
         */
        indexedValueChanged(oldNode, newNode) {
            const oldWrapped = new NamedNode(MIN_NAME, oldNode);
            const newWrapped = new NamedNode(MIN_NAME, newNode);
            return this.compare(oldWrapped, newWrapped) !== 0;
        }
        /**
         * @returns a node wrapper that will sort equal to or less than
         * any other node wrapper, using this index
         */
        minPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let __EMPTY_NODE;
    class KeyIndex extends Index {
        static get __EMPTY_NODE() {
            return __EMPTY_NODE;
        }
        static set __EMPTY_NODE(val) {
            __EMPTY_NODE = val;
        }
        compare(a, b) {
            return nameCompare(a.name, b.name);
        }
        isDefinedOn(node) {
            // We could probably return true here (since every node has a key), but it's never called
            // so just leaving unimplemented for now.
            throw assertionError('KeyIndex.isDefinedOn not expected to be called.');
        }
        indexedValueChanged(oldNode, newNode) {
            return false; // The key for a node never changes.
        }
        minPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        }
        maxPost() {
            // TODO: This should really be created once and cached in a static property, but
            // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
            return new NamedNode(MAX_NAME, __EMPTY_NODE);
        }
        makePost(indexValue, name) {
            assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
            // We just use empty node, but it'll never be compared, since our comparator only looks at name.
            return new NamedNode(indexValue, __EMPTY_NODE);
        }
        /**
         * @returns String representation for inclusion in a query spec
         */
        toString() {
            return '.key';
        }
    }
    const KEY_INDEX = new KeyIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An iterator over an LLRBNode.
     */
    class SortedMapIterator {
        /**
         * @param node - Node to iterate.
         * @param isReverse_ - Whether or not to iterate in reverse
         */
        constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {
            this.isReverse_ = isReverse_;
            this.resultGenerator_ = resultGenerator_;
            this.nodeStack_ = [];
            let cmp = 1;
            while (!node.isEmpty()) {
                node = node;
                cmp = startKey ? comparator(node.key, startKey) : 1;
                // flip the comparison if we're going in reverse
                if (isReverse_) {
                    cmp *= -1;
                }
                if (cmp < 0) {
                    // This node is less than our start key. ignore it
                    if (this.isReverse_) {
                        node = node.left;
                    }
                    else {
                        node = node.right;
                    }
                }
                else if (cmp === 0) {
                    // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                    this.nodeStack_.push(node);
                    break;
                }
                else {
                    // This node is greater than our start key, add it to the stack and move to the next one
                    this.nodeStack_.push(node);
                    if (this.isReverse_) {
                        node = node.right;
                    }
                    else {
                        node = node.left;
                    }
                }
            }
        }
        getNext() {
            if (this.nodeStack_.length === 0) {
                return null;
            }
            let node = this.nodeStack_.pop();
            let result;
            if (this.resultGenerator_) {
                result = this.resultGenerator_(node.key, node.value);
            }
            else {
                result = { key: node.key, value: node.value };
            }
            if (this.isReverse_) {
                node = node.left;
                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.right;
                }
            }
            else {
                node = node.right;
                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.left;
                }
            }
            return result;
        }
        hasNext() {
            return this.nodeStack_.length > 0;
        }
        peek() {
            if (this.nodeStack_.length === 0) {
                return null;
            }
            const node = this.nodeStack_[this.nodeStack_.length - 1];
            if (this.resultGenerator_) {
                return this.resultGenerator_(node.key, node.value);
            }
            else {
                return { key: node.key, value: node.value };
            }
        }
    }
    /**
     * Represents a node in a Left-leaning Red-Black tree.
     */
    class LLRBNode {
        /**
         * @param key - Key associated with this node.
         * @param value - Value associated with this node.
         * @param color - Whether this node is red.
         * @param left - Left child.
         * @param right - Right child.
         */
        constructor(key, value, color, left, right) {
            this.key = key;
            this.value = value;
            this.color = color != null ? color : LLRBNode.RED;
            this.left =
                left != null ? left : SortedMap.EMPTY_NODE;
            this.right =
                right != null ? right : SortedMap.EMPTY_NODE;
        }
        /**
         * Returns a copy of the current node, optionally replacing pieces of it.
         *
         * @param key - New key for the node, or null.
         * @param value - New value for the node, or null.
         * @param color - New color for the node, or null.
         * @param left - New left child for the node, or null.
         * @param right - New right child for the node, or null.
         * @returns The node copy.
         */
        copy(key, value, color, left, right) {
            return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
        }
        /**
         * @returns The total number of nodes in the tree.
         */
        count() {
            return this.left.count() + 1 + this.right.count();
        }
        /**
         * @returns True if the tree is empty.
         */
        isEmpty() {
            return false;
        }
        /**
         * Traverses the tree in key order and calls the specified action function
         * for each node.
         *
         * @param action - Callback function to be called for each
         *   node.  If it returns true, traversal is aborted.
         * @returns The first truthy value returned by action, or the last falsey
         *   value returned by action
         */
        inorderTraversal(action) {
            return (this.left.inorderTraversal(action) ||
                !!action(this.key, this.value) ||
                this.right.inorderTraversal(action));
        }
        /**
         * Traverses the tree in reverse key order and calls the specified action function
         * for each node.
         *
         * @param action - Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @returns True if traversal was aborted.
         */
        reverseTraversal(action) {
            return (this.right.reverseTraversal(action) ||
                action(this.key, this.value) ||
                this.left.reverseTraversal(action));
        }
        /**
         * @returns The minimum node in the tree.
         */
        min_() {
            if (this.left.isEmpty()) {
                return this;
            }
            else {
                return this.left.min_();
            }
        }
        /**
         * @returns The maximum key in the tree.
         */
        minKey() {
            return this.min_().key;
        }
        /**
         * @returns The maximum key in the tree.
         */
        maxKey() {
            if (this.right.isEmpty()) {
                return this.key;
            }
            else {
                return this.right.maxKey();
            }
        }
        /**
         * @param key - Key to insert.
         * @param value - Value to insert.
         * @param comparator - Comparator.
         * @returns New tree, with the key/value added.
         */
        insert(key, value, comparator) {
            let n = this;
            const cmp = comparator(key, n.key);
            if (cmp < 0) {
                n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
            }
            else if (cmp === 0) {
                n = n.copy(null, value, null, null, null);
            }
            else {
                n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
            }
            return n.fixUp_();
        }
        /**
         * @returns New tree, with the minimum key removed.
         */
        removeMin_() {
            if (this.left.isEmpty()) {
                return SortedMap.EMPTY_NODE;
            }
            let n = this;
            if (!n.left.isRed_() && !n.left.left.isRed_()) {
                n = n.moveRedLeft_();
            }
            n = n.copy(null, null, null, n.left.removeMin_(), null);
            return n.fixUp_();
        }
        /**
         * @param key - The key of the item to remove.
         * @param comparator - Comparator.
         * @returns New tree, with the specified item removed.
         */
        remove(key, comparator) {
            let n, smallest;
            n = this;
            if (comparator(key, n.key) < 0) {
                if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                    n = n.moveRedLeft_();
                }
                n = n.copy(null, null, null, n.left.remove(key, comparator), null);
            }
            else {
                if (n.left.isRed_()) {
                    n = n.rotateRight_();
                }
                if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                    n = n.moveRedRight_();
                }
                if (comparator(key, n.key) === 0) {
                    if (n.right.isEmpty()) {
                        return SortedMap.EMPTY_NODE;
                    }
                    else {
                        smallest = n.right.min_();
                        n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                    }
                }
                n = n.copy(null, null, null, null, n.right.remove(key, comparator));
            }
            return n.fixUp_();
        }
        /**
         * @returns Whether this is a RED node.
         */
        isRed_() {
            return this.color;
        }
        /**
         * @returns New tree after performing any needed rotations.
         */
        fixUp_() {
            let n = this;
            if (n.right.isRed_() && !n.left.isRed_()) {
                n = n.rotateLeft_();
            }
            if (n.left.isRed_() && n.left.left.isRed_()) {
                n = n.rotateRight_();
            }
            if (n.left.isRed_() && n.right.isRed_()) {
                n = n.colorFlip_();
            }
            return n;
        }
        /**
         * @returns New tree, after moveRedLeft.
         */
        moveRedLeft_() {
            let n = this.colorFlip_();
            if (n.right.left.isRed_()) {
                n = n.copy(null, null, null, null, n.right.rotateRight_());
                n = n.rotateLeft_();
                n = n.colorFlip_();
            }
            return n;
        }
        /**
         * @returns New tree, after moveRedRight.
         */
        moveRedRight_() {
            let n = this.colorFlip_();
            if (n.left.left.isRed_()) {
                n = n.rotateRight_();
                n = n.colorFlip_();
            }
            return n;
        }
        /**
         * @returns New tree, after rotateLeft.
         */
        rotateLeft_() {
            const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, nl, null);
        }
        /**
         * @returns New tree, after rotateRight.
         */
        rotateRight_() {
            const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, nr);
        }
        /**
         * @returns Newt ree, after colorFlip.
         */
        colorFlip_() {
            const left = this.left.copy(null, null, !this.left.color, null, null);
            const right = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, left, right);
        }
        /**
         * For testing.
         *
         * @returns True if all is well.
         */
        checkMaxDepth_() {
            const blackDepth = this.check_();
            return Math.pow(2.0, blackDepth) <= this.count() + 1;
        }
        check_() {
            if (this.isRed_() && this.left.isRed_()) {
                throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
            }
            if (this.right.isRed_()) {
                throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
            }
            const blackDepth = this.left.check_();
            if (blackDepth !== this.right.check_()) {
                throw new Error('Black depths differ');
            }
            else {
                return blackDepth + (this.isRed_() ? 0 : 1);
            }
        }
    }
    LLRBNode.RED = true;
    LLRBNode.BLACK = false;
    /**
     * Represents an empty node (a leaf node in the Red-Black Tree).
     */
    class LLRBEmptyNode {
        /**
         * Returns a copy of the current node.
         *
         * @returns The node copy.
         */
        copy(key, value, color, left, right) {
            return this;
        }
        /**
         * Returns a copy of the tree, with the specified key/value added.
         *
         * @param key - Key to be added.
         * @param value - Value to be added.
         * @param comparator - Comparator.
         * @returns New tree, with item added.
         */
        insert(key, value, comparator) {
            return new LLRBNode(key, value, null);
        }
        /**
         * Returns a copy of the tree, with the specified key removed.
         *
         * @param key - The key to remove.
         * @param comparator - Comparator.
         * @returns New tree, with item removed.
         */
        remove(key, comparator) {
            return this;
        }
        /**
         * @returns The total number of nodes in the tree.
         */
        count() {
            return 0;
        }
        /**
         * @returns True if the tree is empty.
         */
        isEmpty() {
            return true;
        }
        /**
         * Traverses the tree in key order and calls the specified action function
         * for each node.
         *
         * @param action - Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @returns True if traversal was aborted.
         */
        inorderTraversal(action) {
            return false;
        }
        /**
         * Traverses the tree in reverse key order and calls the specified action function
         * for each node.
         *
         * @param action - Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @returns True if traversal was aborted.
         */
        reverseTraversal(action) {
            return false;
        }
        minKey() {
            return null;
        }
        maxKey() {
            return null;
        }
        check_() {
            return 0;
        }
        /**
         * @returns Whether this node is red.
         */
        isRed_() {
            return false;
        }
    }
    /**
     * An immutable sorted map implementation, based on a Left-leaning Red-Black
     * tree.
     */
    class SortedMap {
        /**
         * @param comparator_ - Key comparator.
         * @param root_ - Optional root node for the map.
         */
        constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {
            this.comparator_ = comparator_;
            this.root_ = root_;
        }
        /**
         * Returns a copy of the map, with the specified key/value added or replaced.
         * (TODO: We should perhaps rename this method to 'put')
         *
         * @param key - Key to be added.
         * @param value - Value to be added.
         * @returns New map, with item added.
         */
        insert(key, value) {
            return new SortedMap(this.comparator_, this.root_
                .insert(key, value, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null));
        }
        /**
         * Returns a copy of the map, with the specified key removed.
         *
         * @param key - The key to remove.
         * @returns New map, with item removed.
         */
        remove(key) {
            return new SortedMap(this.comparator_, this.root_
                .remove(key, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null));
        }
        /**
         * Returns the value of the node with the given key, or null.
         *
         * @param key - The key to look up.
         * @returns The value of the node with the given key, or null if the
         * key doesn't exist.
         */
        get(key) {
            let cmp;
            let node = this.root_;
            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);
                if (cmp === 0) {
                    return node.value;
                }
                else if (cmp < 0) {
                    node = node.left;
                }
                else if (cmp > 0) {
                    node = node.right;
                }
            }
            return null;
        }
        /**
         * Returns the key of the item *before* the specified key, or null if key is the first item.
         * @param key - The key to find the predecessor of
         * @returns The predecessor key.
         */
        getPredecessorKey(key) {
            let cmp, node = this.root_, rightParent = null;
            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);
                if (cmp === 0) {
                    if (!node.left.isEmpty()) {
                        node = node.left;
                        while (!node.right.isEmpty()) {
                            node = node.right;
                        }
                        return node.key;
                    }
                    else if (rightParent) {
                        return rightParent.key;
                    }
                    else {
                        return null; // first item.
                    }
                }
                else if (cmp < 0) {
                    node = node.left;
                }
                else if (cmp > 0) {
                    rightParent = node;
                    node = node.right;
                }
            }
            throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
        }
        /**
         * @returns True if the map is empty.
         */
        isEmpty() {
            return this.root_.isEmpty();
        }
        /**
         * @returns The total number of nodes in the map.
         */
        count() {
            return this.root_.count();
        }
        /**
         * @returns The minimum key in the map.
         */
        minKey() {
            return this.root_.minKey();
        }
        /**
         * @returns The maximum key in the map.
         */
        maxKey() {
            return this.root_.maxKey();
        }
        /**
         * Traverses the map in key order and calls the specified action function
         * for each key/value pair.
         *
         * @param action - Callback function to be called
         * for each key/value pair.  If action returns true, traversal is aborted.
         * @returns The first truthy value returned by action, or the last falsey
         *   value returned by action
         */
        inorderTraversal(action) {
            return this.root_.inorderTraversal(action);
        }
        /**
         * Traverses the map in reverse key order and calls the specified action function
         * for each key/value pair.
         *
         * @param action - Callback function to be called
         * for each key/value pair.  If action returns true, traversal is aborted.
         * @returns True if the traversal was aborted.
         */
        reverseTraversal(action) {
            return this.root_.reverseTraversal(action);
        }
        /**
         * Returns an iterator over the SortedMap.
         * @returns The iterator.
         */
        getIterator(resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
        }
        getIteratorFrom(key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
        }
        getReverseIteratorFrom(key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
        }
        getReverseIterator(resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
        }
    }
    /**
     * Always use the same empty node, to reduce memory.
     */
    SortedMap.EMPTY_NODE = new LLRBEmptyNode();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function NAME_ONLY_COMPARATOR(left, right) {
        return nameCompare(left.name, right.name);
    }
    function NAME_COMPARATOR(left, right) {
        return nameCompare(left, right);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let MAX_NODE$2;
    function setMaxNode$1(val) {
        MAX_NODE$2 = val;
    }
    const priorityHashText = function (priority) {
        if (typeof priority === 'number') {
            return 'number:' + doubleToIEEE754String(priority);
        }
        else {
            return 'string:' + priority;
        }
    };
    /**
     * Validates that a priority snapshot Node is valid.
     */
    const validatePriorityNode = function (priorityNode) {
        if (priorityNode.isLeafNode()) {
            const val = priorityNode.val();
            assert(typeof val === 'string' ||
                typeof val === 'number' ||
                (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');
        }
        else {
            assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');
        }
        // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
        assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let __childrenNodeConstructor;
    /**
     * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
     * implements Node and stores the value of the node (a string,
     * number, or boolean) accessible via getValue().
     */
    class LeafNode {
        static set __childrenNodeConstructor(val) {
            __childrenNodeConstructor = val;
        }
        static get __childrenNodeConstructor() {
            return __childrenNodeConstructor;
        }
        /**
         * @param value_ - The value to store in this leaf node. The object type is
         * possible in the event of a deferred value
         * @param priorityNode_ - The priority of this node.
         */
        constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
            this.value_ = value_;
            this.priorityNode_ = priorityNode_;
            this.lazyHash_ = null;
            assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
            validatePriorityNode(this.priorityNode_);
        }
        /** @inheritDoc */
        isLeafNode() {
            return true;
        }
        /** @inheritDoc */
        getPriority() {
            return this.priorityNode_;
        }
        /** @inheritDoc */
        updatePriority(newPriorityNode) {
            return new LeafNode(this.value_, newPriorityNode);
        }
        /** @inheritDoc */
        getImmediateChild(childName) {
            // Hack to treat priority as a regular child
            if (childName === '.priority') {
                return this.priorityNode_;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        }
        /** @inheritDoc */
        getChild(path) {
            if (pathIsEmpty(path)) {
                return this;
            }
            else if (pathGetFront(path) === '.priority') {
                return this.priorityNode_;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        }
        hasChild() {
            return false;
        }
        /** @inheritDoc */
        getPredecessorChildName(childName, childNode) {
            return null;
        }
        /** @inheritDoc */
        updateImmediateChild(childName, newChildNode) {
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            }
            else if (newChildNode.isEmpty() && childName !== '.priority') {
                return this;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
            }
        }
        /** @inheritDoc */
        updateChild(path, newChildNode) {
            const front = pathGetFront(path);
            if (front === null) {
                return newChildNode;
            }
            else if (newChildNode.isEmpty() && front !== '.priority') {
                return this;
            }
            else {
                assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
                return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
            }
        }
        /** @inheritDoc */
        isEmpty() {
            return false;
        }
        /** @inheritDoc */
        numChildren() {
            return 0;
        }
        /** @inheritDoc */
        forEachChild(index, action) {
            return false;
        }
        val(exportFormat) {
            if (exportFormat && !this.getPriority().isEmpty()) {
                return {
                    '.value': this.getValue(),
                    '.priority': this.getPriority().val()
                };
            }
            else {
                return this.getValue();
            }
        }
        /** @inheritDoc */
        hash() {
            if (this.lazyHash_ === null) {
                let toHash = '';
                if (!this.priorityNode_.isEmpty()) {
                    toHash +=
                        'priority:' +
                            priorityHashText(this.priorityNode_.val()) +
                            ':';
                }
                const type = typeof this.value_;
                toHash += type + ':';
                if (type === 'number') {
                    toHash += doubleToIEEE754String(this.value_);
                }
                else {
                    toHash += this.value_;
                }
                this.lazyHash_ = sha1(toHash);
            }
            return this.lazyHash_;
        }
        /**
         * Returns the value of the leaf node.
         * @returns The value of the node.
         */
        getValue() {
            return this.value_;
        }
        compareTo(other) {
            if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
                return 1;
            }
            else if (other instanceof LeafNode.__childrenNodeConstructor) {
                return -1;
            }
            else {
                assert(other.isLeafNode(), 'Unknown node type');
                return this.compareToLeafNode_(other);
            }
        }
        /**
         * Comparison specifically for two leaf nodes
         */
        compareToLeafNode_(otherLeaf) {
            const otherLeafType = typeof otherLeaf.value_;
            const thisLeafType = typeof this.value_;
            const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
            const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
            assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
            assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
            if (otherIndex === thisIndex) {
                // Same type, compare values
                if (thisLeafType === 'object') {
                    // Deferred value nodes are all equal, but we should also never get to this point...
                    return 0;
                }
                else {
                    // Note that this works because true > false, all others are number or string comparisons
                    if (this.value_ < otherLeaf.value_) {
                        return -1;
                    }
                    else if (this.value_ === otherLeaf.value_) {
                        return 0;
                    }
                    else {
                        return 1;
                    }
                }
            }
            else {
                return thisIndex - otherIndex;
            }
        }
        withIndex() {
            return this;
        }
        isIndexed() {
            return true;
        }
        equals(other) {
            if (other === this) {
                return true;
            }
            else if (other.isLeafNode()) {
                const otherLeaf = other;
                return (this.value_ === otherLeaf.value_ &&
                    this.priorityNode_.equals(otherLeaf.priorityNode_));
            }
            else {
                return false;
            }
        }
    }
    /**
     * The sort order for comparing leaf nodes of different types. If two leaf nodes have
     * the same type, the comparison falls back to their value
     */
    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let nodeFromJSON$1;
    let MAX_NODE$1;
    function setNodeFromJSON(val) {
        nodeFromJSON$1 = val;
    }
    function setMaxNode(val) {
        MAX_NODE$1 = val;
    }
    class PriorityIndex extends Index {
        compare(a, b) {
            const aPriority = a.node.getPriority();
            const bPriority = b.node.getPriority();
            const indexCmp = aPriority.compareTo(bPriority);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        }
        isDefinedOn(node) {
            return !node.getPriority().isEmpty();
        }
        indexedValueChanged(oldNode, newNode) {
            return !oldNode.getPriority().equals(newNode.getPriority());
        }
        minPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        }
        maxPost() {
            return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
        }
        makePost(indexValue, name) {
            const priorityNode = nodeFromJSON$1(indexValue);
            return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
        }
        /**
         * @returns String representation for inclusion in a query spec
         */
        toString() {
            return '.priority';
        }
    }
    const PRIORITY_INDEX = new PriorityIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const LOG_2 = Math.log(2);
    class Base12Num {
        constructor(length) {
            const logBase2 = (num) => 
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            parseInt((Math.log(num) / LOG_2), 10);
            const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);
            this.count = logBase2(length + 1);
            this.current_ = this.count - 1;
            const mask = bitMask(this.count);
            this.bits_ = (length + 1) & mask;
        }
        nextBitIsOne() {
            //noinspection JSBitwiseOperatorUsage
            const result = !(this.bits_ & (0x1 << this.current_));
            this.current_--;
            return result;
        }
    }
    /**
     * Takes a list of child nodes and constructs a SortedSet using the given comparison
     * function
     *
     * Uses the algorithm described in the paper linked here:
     * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
     *
     * @param childList - Unsorted list of children
     * @param cmp - The comparison method to be used
     * @param keyFn - An optional function to extract K from a node wrapper, if K's
     * type is not NamedNode
     * @param mapSortFn - An optional override for comparator used by the generated sorted map
     */
    const buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
        childList.sort(cmp);
        const buildBalancedTree = function (low, high) {
            const length = high - low;
            let namedNode;
            let key;
            if (length === 0) {
                return null;
            }
            else if (length === 1) {
                namedNode = childList[low];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const middle = parseInt((length / 2), 10) + low;
                const left = buildBalancedTree(low, middle);
                const right = buildBalancedTree(middle + 1, high);
                namedNode = childList[middle];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
            }
        };
        const buildFrom12Array = function (base12) {
            let node = null;
            let root = null;
            let index = childList.length;
            const buildPennant = function (chunkSize, color) {
                const low = index - chunkSize;
                const high = index;
                index -= chunkSize;
                const childTree = buildBalancedTree(low + 1, high);
                const namedNode = childList[low];
                const key = keyFn ? keyFn(namedNode) : namedNode;
                attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
            };
            const attachPennant = function (pennant) {
                if (node) {
                    node.left = pennant;
                    node = pennant;
                }
                else {
                    root = pennant;
                    node = pennant;
                }
            };
            for (let i = 0; i < base12.count; ++i) {
                const isOne = base12.nextBitIsOne();
                // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
                const chunkSize = Math.pow(2, base12.count - (i + 1));
                if (isOne) {
                    buildPennant(chunkSize, LLRBNode.BLACK);
                }
                else {
                    // current == 2
                    buildPennant(chunkSize, LLRBNode.BLACK);
                    buildPennant(chunkSize, LLRBNode.RED);
                }
            }
            return root;
        };
        const base12 = new Base12Num(childList.length);
        const root = buildFrom12Array(base12);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new SortedMap(mapSortFn || cmp, root);
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let _defaultIndexMap;
    const fallbackObject = {};
    class IndexMap {
        /**
         * The default IndexMap for nodes without a priority
         */
        static get Default() {
            assert(PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
            _defaultIndexMap =
                _defaultIndexMap ||
                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
            return _defaultIndexMap;
        }
        constructor(indexes_, indexSet_) {
            this.indexes_ = indexes_;
            this.indexSet_ = indexSet_;
        }
        get(indexKey) {
            const sortedMap = safeGet(this.indexes_, indexKey);
            if (!sortedMap) {
                throw new Error('No index defined for ' + indexKey);
            }
            if (sortedMap instanceof SortedMap) {
                return sortedMap;
            }
            else {
                // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
                // regular child map
                return null;
            }
        }
        hasIndex(indexDefinition) {
            return contains(this.indexSet_, indexDefinition.toString());
        }
        addIndex(indexDefinition, existingChildren) {
            assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
            const childList = [];
            let sawIndexedValue = false;
            const iter = existingChildren.getIterator(NamedNode.Wrap);
            let next = iter.getNext();
            while (next) {
                sawIndexedValue =
                    sawIndexedValue || indexDefinition.isDefinedOn(next.node);
                childList.push(next);
                next = iter.getNext();
            }
            let newIndex;
            if (sawIndexedValue) {
                newIndex = buildChildSet(childList, indexDefinition.getCompare());
            }
            else {
                newIndex = fallbackObject;
            }
            const indexName = indexDefinition.toString();
            const newIndexSet = Object.assign({}, this.indexSet_);
            newIndexSet[indexName] = indexDefinition;
            const newIndexes = Object.assign({}, this.indexes_);
            newIndexes[indexName] = newIndex;
            return new IndexMap(newIndexes, newIndexSet);
        }
        /**
         * Ensure that this node is properly tracked in any indexes that we're maintaining
         */
        addToIndexes(namedNode, existingChildren) {
            const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {
                const index = safeGet(this.indexSet_, indexName);
                assert(index, 'Missing index implementation for ' + indexName);
                if (indexedChildren === fallbackObject) {
                    // Check to see if we need to index everything
                    if (index.isDefinedOn(namedNode.node)) {
                        // We need to build this index
                        const childList = [];
                        const iter = existingChildren.getIterator(NamedNode.Wrap);
                        let next = iter.getNext();
                        while (next) {
                            if (next.name !== namedNode.name) {
                                childList.push(next);
                            }
                            next = iter.getNext();
                        }
                        childList.push(namedNode);
                        return buildChildSet(childList, index.getCompare());
                    }
                    else {
                        // No change, this remains a fallback
                        return fallbackObject;
                    }
                }
                else {
                    const existingSnap = existingChildren.get(namedNode.name);
                    let newChildren = indexedChildren;
                    if (existingSnap) {
                        newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
                    }
                    return newChildren.insert(namedNode, namedNode.node);
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        }
        /**
         * Create a new IndexMap instance with the given value removed
         */
        removeFromIndexes(namedNode, existingChildren) {
            const newIndexes = map(this.indexes_, (indexedChildren) => {
                if (indexedChildren === fallbackObject) {
                    // This is the fallback. Just return it, nothing to do in this case
                    return indexedChildren;
                }
                else {
                    const existingSnap = existingChildren.get(namedNode.name);
                    if (existingSnap) {
                        return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
                    }
                    else {
                        // No record of this child
                        return indexedChildren;
                    }
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO: For memory savings, don't store priorityNode_ if it's empty.
    let EMPTY_NODE;
    /**
     * ChildrenNode is a class for storing internal nodes in a DataSnapshot
     * (i.e. nodes with children).  It implements Node and stores the
     * list of children in the children property, sorted by child name.
     */
    class ChildrenNode {
        static get EMPTY_NODE() {
            return (EMPTY_NODE ||
                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
        }
        /**
         * @param children_ - List of children of this node..
         * @param priorityNode_ - The priority of this node (as a snapshot node).
         */
        constructor(children_, priorityNode_, indexMap_) {
            this.children_ = children_;
            this.priorityNode_ = priorityNode_;
            this.indexMap_ = indexMap_;
            this.lazyHash_ = null;
            /**
             * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
             * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
             * class instead of an empty ChildrenNode.
             */
            if (this.priorityNode_) {
                validatePriorityNode(this.priorityNode_);
            }
            if (this.children_.isEmpty()) {
                assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
            }
        }
        /** @inheritDoc */
        isLeafNode() {
            return false;
        }
        /** @inheritDoc */
        getPriority() {
            return this.priorityNode_ || EMPTY_NODE;
        }
        /** @inheritDoc */
        updatePriority(newPriorityNode) {
            if (this.children_.isEmpty()) {
                // Don't allow priorities on empty nodes
                return this;
            }
            else {
                return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
            }
        }
        /** @inheritDoc */
        getImmediateChild(childName) {
            // Hack to treat priority as a regular child
            if (childName === '.priority') {
                return this.getPriority();
            }
            else {
                const child = this.children_.get(childName);
                return child === null ? EMPTY_NODE : child;
            }
        }
        /** @inheritDoc */
        getChild(path) {
            const front = pathGetFront(path);
            if (front === null) {
                return this;
            }
            return this.getImmediateChild(front).getChild(pathPopFront(path));
        }
        /** @inheritDoc */
        hasChild(childName) {
            return this.children_.get(childName) !== null;
        }
        /** @inheritDoc */
        updateImmediateChild(childName, newChildNode) {
            assert(newChildNode, 'We should always be passing snapshot nodes');
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            }
            else {
                const namedNode = new NamedNode(childName, newChildNode);
                let newChildren, newIndexMap;
                if (newChildNode.isEmpty()) {
                    newChildren = this.children_.remove(childName);
                    newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
                }
                else {
                    newChildren = this.children_.insert(childName, newChildNode);
                    newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
                }
                const newPriority = newChildren.isEmpty()
                    ? EMPTY_NODE
                    : this.priorityNode_;
                return new ChildrenNode(newChildren, newPriority, newIndexMap);
            }
        }
        /** @inheritDoc */
        updateChild(path, newChildNode) {
            const front = pathGetFront(path);
            if (front === null) {
                return newChildNode;
            }
            else {
                assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
                const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
                return this.updateImmediateChild(front, newImmediateChild);
            }
        }
        /** @inheritDoc */
        isEmpty() {
            return this.children_.isEmpty();
        }
        /** @inheritDoc */
        numChildren() {
            return this.children_.count();
        }
        /** @inheritDoc */
        val(exportFormat) {
            if (this.isEmpty()) {
                return null;
            }
            const obj = {};
            let numKeys = 0, maxKey = 0, allIntegerKeys = true;
            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                obj[key] = childNode.val(exportFormat);
                numKeys++;
                if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                    maxKey = Math.max(maxKey, Number(key));
                }
                else {
                    allIntegerKeys = false;
                }
            });
            if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
                // convert to array.
                const array = [];
                // eslint-disable-next-line guard-for-in
                for (const key in obj) {
                    array[key] = obj[key];
                }
                return array;
            }
            else {
                if (exportFormat && !this.getPriority().isEmpty()) {
                    obj['.priority'] = this.getPriority().val();
                }
                return obj;
            }
        }
        /** @inheritDoc */
        hash() {
            if (this.lazyHash_ === null) {
                let toHash = '';
                if (!this.getPriority().isEmpty()) {
                    toHash +=
                        'priority:' +
                            priorityHashText(this.getPriority().val()) +
                            ':';
                }
                this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                    const childHash = childNode.hash();
                    if (childHash !== '') {
                        toHash += ':' + key + ':' + childHash;
                    }
                });
                this.lazyHash_ = toHash === '' ? '' : sha1(toHash);
            }
            return this.lazyHash_;
        }
        /** @inheritDoc */
        getPredecessorChildName(childName, childNode, index) {
            const idx = this.resolveIndex_(index);
            if (idx) {
                const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
                return predecessor ? predecessor.name : null;
            }
            else {
                return this.children_.getPredecessorKey(childName);
            }
        }
        getFirstChildName(indexDefinition) {
            const idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                const minKey = idx.minKey();
                return minKey && minKey.name;
            }
            else {
                return this.children_.minKey();
            }
        }
        getFirstChild(indexDefinition) {
            const minKey = this.getFirstChildName(indexDefinition);
            if (minKey) {
                return new NamedNode(minKey, this.children_.get(minKey));
            }
            else {
                return null;
            }
        }
        /**
         * Given an index, return the key name of the largest value we have, according to that index
         */
        getLastChildName(indexDefinition) {
            const idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                const maxKey = idx.maxKey();
                return maxKey && maxKey.name;
            }
            else {
                return this.children_.maxKey();
            }
        }
        getLastChild(indexDefinition) {
            const maxKey = this.getLastChildName(indexDefinition);
            if (maxKey) {
                return new NamedNode(maxKey, this.children_.get(maxKey));
            }
            else {
                return null;
            }
        }
        forEachChild(index, action) {
            const idx = this.resolveIndex_(index);
            if (idx) {
                return idx.inorderTraversal(wrappedNode => {
                    return action(wrappedNode.name, wrappedNode.node);
                });
            }
            else {
                return this.children_.inorderTraversal(action);
            }
        }
        getIterator(indexDefinition) {
            return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
        }
        getIteratorFrom(startPost, indexDefinition) {
            const idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                return idx.getIteratorFrom(startPost, key => key);
            }
            else {
                const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
                let next = iterator.peek();
                while (next != null && indexDefinition.compare(next, startPost) < 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }
                return iterator;
            }
        }
        getReverseIterator(indexDefinition) {
            return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
        }
        getReverseIteratorFrom(endPost, indexDefinition) {
            const idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                return idx.getReverseIteratorFrom(endPost, key => {
                    return key;
                });
            }
            else {
                const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
                let next = iterator.peek();
                while (next != null && indexDefinition.compare(next, endPost) > 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }
                return iterator;
            }
        }
        compareTo(other) {
            if (this.isEmpty()) {
                if (other.isEmpty()) {
                    return 0;
                }
                else {
                    return -1;
                }
            }
            else if (other.isLeafNode() || other.isEmpty()) {
                return 1;
            }
            else if (other === MAX_NODE) {
                return -1;
            }
            else {
                // Must be another node with children.
                return 0;
            }
        }
        withIndex(indexDefinition) {
            if (indexDefinition === KEY_INDEX ||
                this.indexMap_.hasIndex(indexDefinition)) {
                return this;
            }
            else {
                const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
                return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
            }
        }
        isIndexed(index) {
            return index === KEY_INDEX || this.indexMap_.hasIndex(index);
        }
        equals(other) {
            if (other === this) {
                return true;
            }
            else if (other.isLeafNode()) {
                return false;
            }
            else {
                const otherChildrenNode = other;
                if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                    return false;
                }
                else if (this.children_.count() === otherChildrenNode.children_.count()) {
                    const thisIter = this.getIterator(PRIORITY_INDEX);
                    const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                    let thisCurrent = thisIter.getNext();
                    let otherCurrent = otherIter.getNext();
                    while (thisCurrent && otherCurrent) {
                        if (thisCurrent.name !== otherCurrent.name ||
                            !thisCurrent.node.equals(otherCurrent.node)) {
                            return false;
                        }
                        thisCurrent = thisIter.getNext();
                        otherCurrent = otherIter.getNext();
                    }
                    return thisCurrent === null && otherCurrent === null;
                }
                else {
                    return false;
                }
            }
        }
        /**
         * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
         * instead.
         *
         */
        resolveIndex_(indexDefinition) {
            if (indexDefinition === KEY_INDEX) {
                return null;
            }
            else {
                return this.indexMap_.get(indexDefinition.toString());
            }
        }
    }
    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
    class MaxNode extends ChildrenNode {
        constructor() {
            super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);
        }
        compareTo(other) {
            if (other === this) {
                return 0;
            }
            else {
                return 1;
            }
        }
        equals(other) {
            // Not that we every compare it, but MAX_NODE is only ever equal to itself
            return other === this;
        }
        getPriority() {
            return this;
        }
        getImmediateChild(childName) {
            return ChildrenNode.EMPTY_NODE;
        }
        isEmpty() {
            return false;
        }
    }
    /**
     * Marker that will sort higher than any other snapshot.
     */
    const MAX_NODE = new MaxNode();
    Object.defineProperties(NamedNode, {
        MIN: {
            value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
        },
        MAX: {
            value: new NamedNode(MAX_NAME, MAX_NODE)
        }
    });
    /**
     * Reference Extensions
     */
    KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
    LeafNode.__childrenNodeConstructor = ChildrenNode;
    setMaxNode$1(MAX_NODE);
    setMaxNode(MAX_NODE);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const USE_HINZE = true;
    /**
     * Constructs a snapshot node representing the passed JSON and returns it.
     * @param json - JSON to create a node for.
     * @param priority - Optional priority to use.  This will be ignored if the
     * passed JSON contains a .priority property.
     */
    function nodeFromJSON(json, priority = null) {
        if (json === null) {
            return ChildrenNode.EMPTY_NODE;
        }
        if (typeof json === 'object' && '.priority' in json) {
            priority = json['.priority'];
        }
        assert(priority === null ||
            typeof priority === 'string' ||
            typeof priority === 'number' ||
            (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
        if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
            json = json['.value'];
        }
        // Valid leaf nodes include non-objects or server-value wrapper objects
        if (typeof json !== 'object' || '.sv' in json) {
            const jsonLeaf = json;
            return new LeafNode(jsonLeaf, nodeFromJSON(priority));
        }
        if (!(json instanceof Array) && USE_HINZE) {
            const children = [];
            let childrenHavePriority = false;
            const hinzeJsonObj = json;
            each(hinzeJsonObj, (key, child) => {
                if (key.substring(0, 1) !== '.') {
                    // Ignore metadata nodes
                    const childNode = nodeFromJSON(child);
                    if (!childNode.isEmpty()) {
                        childrenHavePriority =
                            childrenHavePriority || !childNode.getPriority().isEmpty();
                        children.push(new NamedNode(key, childNode));
                    }
                }
            });
            if (children.length === 0) {
                return ChildrenNode.EMPTY_NODE;
            }
            const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);
            if (childrenHavePriority) {
                const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());
                return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
            }
            else {
                return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
            }
        }
        else {
            let node = ChildrenNode.EMPTY_NODE;
            each(json, (key, childData) => {
                if (contains(json, key)) {
                    if (key.substring(0, 1) !== '.') {
                        // ignore metadata nodes.
                        const childNode = nodeFromJSON(childData);
                        if (childNode.isLeafNode() || !childNode.isEmpty()) {
                            node = node.updateImmediateChild(key, childNode);
                        }
                    }
                }
            });
            return node.updatePriority(nodeFromJSON(priority));
        }
    }
    setNodeFromJSON(nodeFromJSON);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PathIndex extends Index {
        constructor(indexPath_) {
            super();
            this.indexPath_ = indexPath_;
            assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', "Can't create PathIndex with empty path or .priority key");
        }
        extractChild(snap) {
            return snap.getChild(this.indexPath_);
        }
        isDefinedOn(node) {
            return !node.getChild(this.indexPath_).isEmpty();
        }
        compare(a, b) {
            const aChild = this.extractChild(a.node);
            const bChild = this.extractChild(b.node);
            const indexCmp = aChild.compareTo(bChild);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        }
        makePost(indexValue, name) {
            const valueNode = nodeFromJSON(indexValue);
            const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
            return new NamedNode(name, node);
        }
        maxPost() {
            const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
            return new NamedNode(MAX_NAME, node);
        }
        toString() {
            return pathSlice(this.indexPath_, 0).join('/');
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ValueIndex extends Index {
        compare(a, b) {
            const indexCmp = a.node.compareTo(b.node);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        }
        isDefinedOn(node) {
            return true;
        }
        indexedValueChanged(oldNode, newNode) {
            return !oldNode.equals(newNode);
        }
        minPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        }
        maxPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MAX;
        }
        makePost(indexValue, name) {
            const valueNode = nodeFromJSON(indexValue);
            return new NamedNode(name, valueNode);
        }
        /**
         * @returns String representation for inclusion in a query spec
         */
        toString() {
            return '.value';
        }
    }
    const VALUE_INDEX = new ValueIndex();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function changeValue(snapshotNode) {
        return { type: "value" /* ChangeType.VALUE */, snapshotNode };
    }
    function changeChildAdded(childName, snapshotNode) {
        return { type: "child_added" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };
    }
    function changeChildRemoved(childName, snapshotNode) {
        return { type: "child_removed" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };
    }
    function changeChildChanged(childName, snapshotNode, oldSnap) {
        return {
            type: "child_changed" /* ChangeType.CHILD_CHANGED */,
            snapshotNode,
            childName,
            oldSnap
        };
    }
    function changeChildMoved(childName, snapshotNode) {
        return { type: "child_moved" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
     */
    class IndexedFilter {
        constructor(index_) {
            this.index_ = index_;
        }
        updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
            const oldChild = snap.getImmediateChild(key);
            // Check if anything actually changed.
            if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
                // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
                // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
                // to avoid treating these cases as "nothing changed."
                if (oldChild.isEmpty() === newChild.isEmpty()) {
                    // Nothing changed.
                    // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                    //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                    return snap;
                }
            }
            if (optChangeAccumulator != null) {
                if (newChild.isEmpty()) {
                    if (snap.hasChild(key)) {
                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));
                    }
                    else {
                        assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                    }
                }
                else if (oldChild.isEmpty()) {
                    optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));
                }
                else {
                    optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));
                }
            }
            if (snap.isLeafNode() && newChild.isEmpty()) {
                return snap;
            }
            else {
                // Make sure the node is indexed
                return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
            }
        }
        updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
            if (optChangeAccumulator != null) {
                if (!oldSnap.isLeafNode()) {
                    oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                        if (!newSnap.hasChild(key)) {
                            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));
                        }
                    });
                }
                if (!newSnap.isLeafNode()) {
                    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                        if (oldSnap.hasChild(key)) {
                            const oldChild = oldSnap.getImmediateChild(key);
                            if (!oldChild.equals(childNode)) {
                                optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));
                            }
                        }
                        else {
                            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));
                        }
                    });
                }
            }
            return newSnap.withIndex(this.index_);
        }
        updatePriority(oldSnap, newPriority) {
            if (oldSnap.isEmpty()) {
                return ChildrenNode.EMPTY_NODE;
            }
            else {
                return oldSnap.updatePriority(newPriority);
            }
        }
        filtersNodes() {
            return false;
        }
        getIndexedFilter() {
            return this;
        }
        getIndex() {
            return this.index_;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
     */
    class RangedFilter {
        constructor(params) {
            this.indexedFilter_ = new IndexedFilter(params.getIndex());
            this.index_ = params.getIndex();
            this.startPost_ = RangedFilter.getStartPost_(params);
            this.endPost_ = RangedFilter.getEndPost_(params);
            this.startIsInclusive_ = !params.startAfterSet_;
            this.endIsInclusive_ = !params.endBeforeSet_;
        }
        getStartPost() {
            return this.startPost_;
        }
        getEndPost() {
            return this.endPost_;
        }
        matches(node) {
            const isWithinStart = this.startIsInclusive_
                ? this.index_.compare(this.getStartPost(), node) <= 0
                : this.index_.compare(this.getStartPost(), node) < 0;
            const isWithinEnd = this.endIsInclusive_
                ? this.index_.compare(node, this.getEndPost()) <= 0
                : this.index_.compare(node, this.getEndPost()) < 0;
            return isWithinStart && isWithinEnd;
        }
        updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.matches(new NamedNode(key, newChild))) {
                newChild = ChildrenNode.EMPTY_NODE;
            }
            return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        }
        updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
            if (newSnap.isLeafNode()) {
                // Make sure we have a children node with the correct index, not a leaf node;
                newSnap = ChildrenNode.EMPTY_NODE;
            }
            let filtered = newSnap.withIndex(this.index_);
            // Don't support priorities on queries
            filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
            const self = this;
            newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                if (!self.matches(new NamedNode(key, childNode))) {
                    filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
                }
            });
            return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
        }
        updatePriority(oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
        }
        filtersNodes() {
            return true;
        }
        getIndexedFilter() {
            return this.indexedFilter_;
        }
        getIndex() {
            return this.index_;
        }
        static getStartPost_(params) {
            if (params.hasStart()) {
                const startName = params.getIndexStartName();
                return params.getIndex().makePost(params.getIndexStartValue(), startName);
            }
            else {
                return params.getIndex().minPost();
            }
        }
        static getEndPost_(params) {
            if (params.hasEnd()) {
                const endName = params.getIndexEndName();
                return params.getIndex().makePost(params.getIndexEndValue(), endName);
            }
            else {
                return params.getIndex().maxPost();
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
     */
    class LimitedFilter {
        constructor(params) {
            this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);
            this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);
            this.withinStartPost = (node) => {
                const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);
                return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;
            };
            this.withinEndPost = (node) => {
                const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());
                return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;
            };
            this.rangedFilter_ = new RangedFilter(params);
            this.index_ = params.getIndex();
            this.limit_ = params.getLimit();
            this.reverse_ = !params.isViewFromLeft();
            this.startIsInclusive_ = !params.startAfterSet_;
            this.endIsInclusive_ = !params.endBeforeSet_;
        }
        updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
                newChild = ChildrenNode.EMPTY_NODE;
            }
            if (snap.getImmediateChild(key).equals(newChild)) {
                // No change
                return snap;
            }
            else if (snap.numChildren() < this.limit_) {
                return this.rangedFilter_
                    .getIndexedFilter()
                    .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
            }
            else {
                return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
            }
        }
        updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
            let filtered;
            if (newSnap.isLeafNode() || newSnap.isEmpty()) {
                // Make sure we have a children node with the correct index, not a leaf node;
                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            }
            else {
                if (this.limit_ * 2 < newSnap.numChildren() &&
                    newSnap.isIndexed(this.index_)) {
                    // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                    filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                    // anchor to the startPost, endPost, or last element as appropriate
                    let iterator;
                    if (this.reverse_) {
                        iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                    }
                    else {
                        iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                    }
                    let count = 0;
                    while (iterator.hasNext() && count < this.limit_) {
                        const next = iterator.getNext();
                        if (!this.withinDirectionalStart(next)) {
                            // if we have not reached the start, skip to the next element
                            continue;
                        }
                        else if (!this.withinDirectionalEnd(next)) {
                            // if we have reached the end, stop adding elements
                            break;
                        }
                        else {
                            filtered = filtered.updateImmediateChild(next.name, next.node);
                            count++;
                        }
                    }
                }
                else {
                    // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                    filtered = newSnap.withIndex(this.index_);
                    // Don't support priorities on queries
                    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
                    let iterator;
                    if (this.reverse_) {
                        iterator = filtered.getReverseIterator(this.index_);
                    }
                    else {
                        iterator = filtered.getIterator(this.index_);
                    }
                    let count = 0;
                    while (iterator.hasNext()) {
                        const next = iterator.getNext();
                        const inRange = count < this.limit_ &&
                            this.withinDirectionalStart(next) &&
                            this.withinDirectionalEnd(next);
                        if (inRange) {
                            count++;
                        }
                        else {
                            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
                        }
                    }
                }
            }
            return this.rangedFilter_
                .getIndexedFilter()
                .updateFullNode(oldSnap, filtered, optChangeAccumulator);
        }
        updatePriority(oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
        }
        filtersNodes() {
            return true;
        }
        getIndexedFilter() {
            return this.rangedFilter_.getIndexedFilter();
        }
        getIndex() {
            return this.index_;
        }
        fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {
            // TODO: rename all cache stuff etc to general snap terminology
            let cmp;
            if (this.reverse_) {
                const indexCmp = this.index_.getCompare();
                cmp = (a, b) => indexCmp(b, a);
            }
            else {
                cmp = this.index_.getCompare();
            }
            const oldEventCache = snap;
            assert(oldEventCache.numChildren() === this.limit_, '');
            const newChildNamedNode = new NamedNode(childKey, childSnap);
            const windowBoundary = this.reverse_
                ? oldEventCache.getFirstChild(this.index_)
                : oldEventCache.getLastChild(this.index_);
            const inRange = this.rangedFilter_.matches(newChildNamedNode);
            if (oldEventCache.hasChild(childKey)) {
                const oldChildSnap = oldEventCache.getImmediateChild(childKey);
                let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
                while (nextChild != null &&
                    (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
                    // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                    // been applied to the limited filter yet. Ignore this next child which will be updated later in
                    // the limited filter...
                    nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
                }
                const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
                const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
                if (remainsInWindow) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));
                    }
                    return oldEventCache.updateImmediateChild(childKey, childSnap);
                }
                else {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));
                    }
                    const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
                    const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                    if (nextChildInRange) {
                        if (changeAccumulator != null) {
                            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));
                        }
                        return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                    }
                    else {
                        return newEventCache;
                    }
                }
            }
            else if (childSnap.isEmpty()) {
                // we're deleting a node, but it was not in the window, so ignore it
                return snap;
            }
            else if (inRange) {
                if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));
                        changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));
                    }
                    return oldEventCache
                        .updateImmediateChild(childKey, childSnap)
                        .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
                }
                else {
                    return snap;
                }
            }
            else {
                return snap;
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
     * range to be returned for a particular location. It is assumed that validation of parameters is done at the
     * user-facing API level, so it is not done here.
     *
     * @internal
     */
    class QueryParams {
        constructor() {
            this.limitSet_ = false;
            this.startSet_ = false;
            this.startNameSet_ = false;
            this.startAfterSet_ = false; // can only be true if startSet_ is true
            this.endSet_ = false;
            this.endNameSet_ = false;
            this.endBeforeSet_ = false; // can only be true if endSet_ is true
            this.limit_ = 0;
            this.viewFrom_ = '';
            this.indexStartValue_ = null;
            this.indexStartName_ = '';
            this.indexEndValue_ = null;
            this.indexEndName_ = '';
            this.index_ = PRIORITY_INDEX;
        }
        hasStart() {
            return this.startSet_;
        }
        /**
         * @returns True if it would return from left.
         */
        isViewFromLeft() {
            if (this.viewFrom_ === '') {
                // limit(), rather than limitToFirst or limitToLast was called.
                // This means that only one of startSet_ and endSet_ is true. Use them
                // to calculate which side of the view to anchor to. If neither is set,
                // anchor to the end.
                return this.startSet_;
            }
            else {
                return this.viewFrom_ === "l" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;
            }
        }
        /**
         * Only valid to call if hasStart() returns true
         */
        getIndexStartValue() {
            assert(this.startSet_, 'Only valid if start has been set');
            return this.indexStartValue_;
        }
        /**
         * Only valid to call if hasStart() returns true.
         * Returns the starting key name for the range defined by these query parameters
         */
        getIndexStartName() {
            assert(this.startSet_, 'Only valid if start has been set');
            if (this.startNameSet_) {
                return this.indexStartName_;
            }
            else {
                return MIN_NAME;
            }
        }
        hasEnd() {
            return this.endSet_;
        }
        /**
         * Only valid to call if hasEnd() returns true.
         */
        getIndexEndValue() {
            assert(this.endSet_, 'Only valid if end has been set');
            return this.indexEndValue_;
        }
        /**
         * Only valid to call if hasEnd() returns true.
         * Returns the end key name for the range defined by these query parameters
         */
        getIndexEndName() {
            assert(this.endSet_, 'Only valid if end has been set');
            if (this.endNameSet_) {
                return this.indexEndName_;
            }
            else {
                return MAX_NAME;
            }
        }
        hasLimit() {
            return this.limitSet_;
        }
        /**
         * @returns True if a limit has been set and it has been explicitly anchored
         */
        hasAnchoredLimit() {
            return this.limitSet_ && this.viewFrom_ !== '';
        }
        /**
         * Only valid to call if hasLimit() returns true
         */
        getLimit() {
            assert(this.limitSet_, 'Only valid if limit has been set');
            return this.limit_;
        }
        getIndex() {
            return this.index_;
        }
        loadsAllData() {
            return !(this.startSet_ || this.endSet_ || this.limitSet_);
        }
        isDefault() {
            return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
        }
        copy() {
            const copy = new QueryParams();
            copy.limitSet_ = this.limitSet_;
            copy.limit_ = this.limit_;
            copy.startSet_ = this.startSet_;
            copy.startAfterSet_ = this.startAfterSet_;
            copy.indexStartValue_ = this.indexStartValue_;
            copy.startNameSet_ = this.startNameSet_;
            copy.indexStartName_ = this.indexStartName_;
            copy.endSet_ = this.endSet_;
            copy.endBeforeSet_ = this.endBeforeSet_;
            copy.indexEndValue_ = this.indexEndValue_;
            copy.endNameSet_ = this.endNameSet_;
            copy.indexEndName_ = this.indexEndName_;
            copy.index_ = this.index_;
            copy.viewFrom_ = this.viewFrom_;
            return copy;
        }
    }
    function queryParamsGetNodeFilter(queryParams) {
        if (queryParams.loadsAllData()) {
            return new IndexedFilter(queryParams.getIndex());
        }
        else if (queryParams.hasLimit()) {
            return new LimitedFilter(queryParams);
        }
        else {
            return new RangedFilter(queryParams);
        }
    }
    /**
     * Returns a set of REST query string parameters representing this query.
     *
     * @returns query string parameters
     */
    function queryParamsToRestQueryStringParameters(queryParams) {
        const qs = {};
        if (queryParams.isDefault()) {
            return qs;
        }
        let orderBy;
        if (queryParams.index_ === PRIORITY_INDEX) {
            orderBy = "$priority" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;
        }
        else if (queryParams.index_ === VALUE_INDEX) {
            orderBy = "$value" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;
        }
        else if (queryParams.index_ === KEY_INDEX) {
            orderBy = "$key" /* REST_QUERY_CONSTANTS.KEY_INDEX */;
        }
        else {
            assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');
            orderBy = queryParams.index_.toString();
        }
        qs["orderBy" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);
        if (queryParams.startSet_) {
            const startParam = queryParams.startAfterSet_
                ? "startAfter" /* REST_QUERY_CONSTANTS.START_AFTER */
                : "startAt" /* REST_QUERY_CONSTANTS.START_AT */;
            qs[startParam] = stringify(queryParams.indexStartValue_);
            if (queryParams.startNameSet_) {
                qs[startParam] += ',' + stringify(queryParams.indexStartName_);
            }
        }
        if (queryParams.endSet_) {
            const endParam = queryParams.endBeforeSet_
                ? "endBefore" /* REST_QUERY_CONSTANTS.END_BEFORE */
                : "endAt" /* REST_QUERY_CONSTANTS.END_AT */;
            qs[endParam] = stringify(queryParams.indexEndValue_);
            if (queryParams.endNameSet_) {
                qs[endParam] += ',' + stringify(queryParams.indexEndName_);
            }
        }
        if (queryParams.limitSet_) {
            if (queryParams.isViewFromLeft()) {
                qs["limitToFirst" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;
            }
            else {
                qs["limitToLast" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;
            }
        }
        return qs;
    }
    function queryParamsGetQueryObject(queryParams) {
        const obj = {};
        if (queryParams.startSet_) {
            obj["sp" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =
                queryParams.indexStartValue_;
            if (queryParams.startNameSet_) {
                obj["sn" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =
                    queryParams.indexStartName_;
            }
            obj["sin" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =
                !queryParams.startAfterSet_;
        }
        if (queryParams.endSet_) {
            obj["ep" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;
            if (queryParams.endNameSet_) {
                obj["en" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;
            }
            obj["ein" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =
                !queryParams.endBeforeSet_;
        }
        if (queryParams.limitSet_) {
            obj["l" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;
            let viewFrom = queryParams.viewFrom_;
            if (viewFrom === '') {
                if (queryParams.isViewFromLeft()) {
                    viewFrom = "l" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;
                }
                else {
                    viewFrom = "r" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;
                }
            }
            obj["vf" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;
        }
        // For now, priority index is the default, so we only specify if it's some other index
        if (queryParams.index_ !== PRIORITY_INDEX) {
            obj["i" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();
        }
        return obj;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An implementation of ServerActions that communicates with the server via REST requests.
     * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
     * persistent connection (using WebSockets or long-polling)
     */
    class ReadonlyRestClient extends ServerActions {
        reportStats(stats) {
            throw new Error('Method not implemented.');
        }
        static getListenId_(query, tag) {
            if (tag !== undefined) {
                return 'tag$' + tag;
            }
            else {
                assert(query._queryParams.isDefault(), "should have a tag if it's not a default query.");
                return query._path.toString();
            }
        }
        /**
         * @param repoInfo_ - Data about the namespace we are connecting to
         * @param onDataUpdate_ - A callback for new data from the server
         */
        constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {
            super();
            this.repoInfo_ = repoInfo_;
            this.onDataUpdate_ = onDataUpdate_;
            this.authTokenProvider_ = authTokenProvider_;
            this.appCheckTokenProvider_ = appCheckTokenProvider_;
            /** @private {function(...[*])} */
            this.log_ = logWrapper('p:rest:');
            /**
             * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
             * that's been removed. :-/
             */
            this.listens_ = {};
        }
        /** @inheritDoc */
        listen(query, currentHashFn, tag, onComplete) {
            const pathString = query._path.toString();
            this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);
            // Mark this listener so we can tell if it's removed.
            const listenId = ReadonlyRestClient.getListenId_(query, tag);
            const thisListen = {};
            this.listens_[listenId] = thisListen;
            const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
            this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {
                let data = result;
                if (error === 404) {
                    data = null;
                    error = null;
                }
                if (error === null) {
                    this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
                }
                if (safeGet(this.listens_, listenId) === thisListen) {
                    let status;
                    if (!error) {
                        status = 'ok';
                    }
                    else if (error === 401) {
                        status = 'permission_denied';
                    }
                    else {
                        status = 'rest_error:' + error;
                    }
                    onComplete(status, null);
                }
            });
        }
        /** @inheritDoc */
        unlisten(query, tag) {
            const listenId = ReadonlyRestClient.getListenId_(query, tag);
            delete this.listens_[listenId];
        }
        get(query) {
            const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
            const pathString = query._path.toString();
            const deferred = new Deferred();
            this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {
                let data = result;
                if (error === 404) {
                    data = null;
                    error = null;
                }
                if (error === null) {
                    this.onDataUpdate_(pathString, data, 
                    /*isMerge=*/ false, 
                    /*tag=*/ null);
                    deferred.resolve(data);
                }
                else {
                    deferred.reject(new Error(data));
                }
            });
            return deferred.promise;
        }
        /** @inheritDoc */
        refreshAuthToken(token) {
            // no-op since we just always call getToken.
        }
        /**
         * Performs a REST request to the given path, with the provided query string parameters,
         * and any auth credentials we have.
         */
        restRequest_(pathString, queryStringParameters = {}, callback) {
            queryStringParameters['format'] = 'export';
            return Promise.all([
                this.authTokenProvider_.getToken(/*forceRefresh=*/ false),
                this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)
            ]).then(([authToken, appCheckToken]) => {
                if (authToken && authToken.accessToken) {
                    queryStringParameters['auth'] = authToken.accessToken;
                }
                if (appCheckToken && appCheckToken.token) {
                    queryStringParameters['ac'] = appCheckToken.token;
                }
                const url = (this.repoInfo_.secure ? 'https://' : 'http://') +
                    this.repoInfo_.host +
                    pathString +
                    '?' +
                    'ns=' +
                    this.repoInfo_.namespace +
                    querystring(queryStringParameters);
                this.log_('Sending REST request for ' + url);
                const xhr = new XMLHttpRequest();
                xhr.onreadystatechange = () => {
                    if (callback && xhr.readyState === 4) {
                        this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                        let res = null;
                        if (xhr.status >= 200 && xhr.status < 300) {
                            try {
                                res = jsonEval(xhr.responseText);
                            }
                            catch (e) {
                                warn('Failed to parse JSON response for ' +
                                    url +
                                    ': ' +
                                    xhr.responseText);
                            }
                            callback(null, res);
                        }
                        else {
                            // 401 and 404 are expected.
                            if (xhr.status !== 401 && xhr.status !== 404) {
                                warn('Got unsuccessful REST response for ' +
                                    url +
                                    ' Status: ' +
                                    xhr.status);
                            }
                            callback(xhr.status);
                        }
                        callback = null;
                    }
                };
                xhr.open('GET', url, /*asynchronous=*/ true);
                xhr.send();
            });
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
     */
    class SnapshotHolder {
        constructor() {
            this.rootNode_ = ChildrenNode.EMPTY_NODE;
        }
        getNode(path) {
            return this.rootNode_.getChild(path);
        }
        updateSnapshot(path, newSnapshotNode) {
            this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function newSparseSnapshotTree() {
        return {
            value: null,
            children: new Map()
        };
    }
    /**
     * Stores the given node at the specified path. If there is already a node
     * at a shallower path, it merges the new data into that snapshot node.
     *
     * @param path - Path to look up snapshot for.
     * @param data - The new data, or null.
     */
    function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
        if (pathIsEmpty(path)) {
            sparseSnapshotTree.value = data;
            sparseSnapshotTree.children.clear();
        }
        else if (sparseSnapshotTree.value !== null) {
            sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
        }
        else {
            const childKey = pathGetFront(path);
            if (!sparseSnapshotTree.children.has(childKey)) {
                sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());
            }
            const child = sparseSnapshotTree.children.get(childKey);
            path = pathPopFront(path);
            sparseSnapshotTreeRemember(child, path, data);
        }
    }
    /**
     * Recursively iterates through all of the stored tree and calls the
     * callback on each one.
     *
     * @param prefixPath - Path to look up node for.
     * @param func - The function to invoke for each tree.
     */
    function sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
        if (sparseSnapshotTree.value !== null) {
            func(prefixPath, sparseSnapshotTree.value);
        }
        else {
            sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {
                const path = new Path(prefixPath.toString() + '/' + key);
                sparseSnapshotTreeForEachTree(tree, path, func);
            });
        }
    }
    /**
     * Iterates through each immediate child and triggers the callback.
     * Only seems to be used in tests.
     *
     * @param func - The function to invoke for each child.
     */
    function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
        sparseSnapshotTree.children.forEach((tree, key) => {
            func(key, tree);
        });
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns the delta from the previous call to get stats.
     *
     * @param collection_ - The collection to "listen" to.
     */
    class StatsListener {
        constructor(collection_) {
            this.collection_ = collection_;
            this.last_ = null;
        }
        get() {
            const newStats = this.collection_.get();
            const delta = Object.assign({}, newStats);
            if (this.last_) {
                each(this.last_, (stat, value) => {
                    delta[stat] = delta[stat] - value;
                });
            }
            this.last_ = newStats;
            return delta;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
    // happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
    // seconds to try to ensure the Firebase connection is established / settled.
    const FIRST_STATS_MIN_TIME = 10 * 1000;
    const FIRST_STATS_MAX_TIME = 30 * 1000;
    // We'll continue to report stats on average every 5 minutes.
    const REPORT_STATS_INTERVAL = 5 * 60 * 1000;
    class StatsReporter {
        constructor(collection, server_) {
            this.server_ = server_;
            this.statsToReport_ = {};
            this.statsListener_ = new StatsListener(collection);
            const timeout = FIRST_STATS_MIN_TIME +
                (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
            setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
        }
        reportStats_() {
            const stats = this.statsListener_.get();
            const reportedStats = {};
            let haveStatsToReport = false;
            each(stats, (stat, value) => {
                if (value > 0 && contains(this.statsToReport_, stat)) {
                    reportedStats[stat] = value;
                    haveStatsToReport = true;
                }
            });
            if (haveStatsToReport) {
                this.server_.reportStats(reportedStats);
            }
            // queue our next run.
            setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @enum
     */
    var OperationType;
    (function (OperationType) {
        OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
        OperationType[OperationType["MERGE"] = 1] = "MERGE";
        OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
        OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
    })(OperationType || (OperationType = {}));
    function newOperationSourceUser() {
        return {
            fromUser: true,
            fromServer: false,
            queryId: null,
            tagged: false
        };
    }
    function newOperationSourceServer() {
        return {
            fromUser: false,
            fromServer: true,
            queryId: null,
            tagged: false
        };
    }
    function newOperationSourceServerTaggedQuery(queryId) {
        return {
            fromUser: false,
            fromServer: true,
            queryId,
            tagged: true
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AckUserWrite {
        /**
         * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.
         */
        constructor(
        /** @inheritDoc */ path, 
        /** @inheritDoc */ affectedTree, 
        /** @inheritDoc */ revert) {
            this.path = path;
            this.affectedTree = affectedTree;
            this.revert = revert;
            /** @inheritDoc */
            this.type = OperationType.ACK_USER_WRITE;
            /** @inheritDoc */
            this.source = newOperationSourceUser();
        }
        operationForChild(childName) {
            if (!pathIsEmpty(this.path)) {
                assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');
                return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);
            }
            else if (this.affectedTree.value != null) {
                assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
                // All child locations are affected as well; just return same operation.
                return this;
            }
            else {
                const childTree = this.affectedTree.subtree(new Path(childName));
                return new AckUserWrite(newEmptyPath(), childTree, this.revert);
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ListenComplete {
        constructor(source, path) {
            this.source = source;
            this.path = path;
            /** @inheritDoc */
            this.type = OperationType.LISTEN_COMPLETE;
        }
        operationForChild(childName) {
            if (pathIsEmpty(this.path)) {
                return new ListenComplete(this.source, newEmptyPath());
            }
            else {
                return new ListenComplete(this.source, pathPopFront(this.path));
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Overwrite {
        constructor(source, path, snap) {
            this.source = source;
            this.path = path;
            this.snap = snap;
            /** @inheritDoc */
            this.type = OperationType.OVERWRITE;
        }
        operationForChild(childName) {
            if (pathIsEmpty(this.path)) {
                return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
            }
            else {
                return new Overwrite(this.source, pathPopFront(this.path), this.snap);
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Merge {
        constructor(
        /** @inheritDoc */ source, 
        /** @inheritDoc */ path, 
        /** @inheritDoc */ children) {
            this.source = source;
            this.path = path;
            this.children = children;
            /** @inheritDoc */
            this.type = OperationType.MERGE;
        }
        operationForChild(childName) {
            if (pathIsEmpty(this.path)) {
                const childTree = this.children.subtree(new Path(childName));
                if (childTree.isEmpty()) {
                    // This child is unaffected
                    return null;
                }
                else if (childTree.value) {
                    // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                    return new Overwrite(this.source, newEmptyPath(), childTree.value);
                }
                else {
                    // This is a merge at a deeper level
                    return new Merge(this.source, newEmptyPath(), childTree);
                }
            }
            else {
                assert(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
                return new Merge(this.source, pathPopFront(this.path), this.children);
            }
        }
        toString() {
            return ('Operation(' +
                this.path +
                ': ' +
                this.source.toString() +
                ' merge: ' +
                this.children.toString() +
                ')');
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
     * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
     * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
     * whether a node potentially had children removed due to a filter.
     */
    class CacheNode {
        constructor(node_, fullyInitialized_, filtered_) {
            this.node_ = node_;
            this.fullyInitialized_ = fullyInitialized_;
            this.filtered_ = filtered_;
        }
        /**
         * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
         */
        isFullyInitialized() {
            return this.fullyInitialized_;
        }
        /**
         * Returns whether this node is potentially missing children due to a filter applied to the node
         */
        isFiltered() {
            return this.filtered_;
        }
        isCompleteForPath(path) {
            if (pathIsEmpty(path)) {
                return this.isFullyInitialized() && !this.filtered_;
            }
            const childKey = pathGetFront(path);
            return this.isCompleteForChild(childKey);
        }
        isCompleteForChild(key) {
            return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
        }
        getNode() {
            return this.node_;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An EventGenerator is used to convert "raw" changes (Change) as computed by the
     * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
     * for details.
     *
     */
    class EventGenerator {
        constructor(query_) {
            this.query_ = query_;
            this.index_ = this.query_._queryParams.getIndex();
        }
    }
    /**
     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
     *
     * Notes:
     *  - child_moved events will be synthesized at this time for any child_changed events that affect
     *    our index.
     *  - prevName will be calculated based on the index ordering.
     */
    function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
        const events = [];
        const moves = [];
        changes.forEach(change => {
            if (change.type === "child_changed" /* ChangeType.CHILD_CHANGED */ &&
                eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
                moves.push(changeChildMoved(change.childName, change.snapshotNode));
            }
        });
        eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);
        eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);
        eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);
        eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);
        eventGeneratorGenerateEventsForType(eventGenerator, events, "value" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);
        return events;
    }
    /**
     * Given changes of a single change type, generate the corresponding events.
     */
    function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
        const filteredChanges = changes.filter(change => change.type === eventType);
        filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));
        filteredChanges.forEach(change => {
            const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
            registrations.forEach(registration => {
                if (registration.respondsTo(change.type)) {
                    events.push(registration.createEvent(materializedChange, eventGenerator.query_));
                }
            });
        });
    }
    function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
        if (change.type === 'value' || change.type === 'child_removed') {
            return change;
        }
        else {
            change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
            return change;
        }
    }
    function eventGeneratorCompareChanges(eventGenerator, a, b) {
        if (a.childName == null || b.childName == null) {
            throw assertionError('Should only compare child_ events.');
        }
        const aWrapped = new NamedNode(a.childName, a.snapshotNode);
        const bWrapped = new NamedNode(b.childName, b.snapshotNode);
        return eventGenerator.index_.compare(aWrapped, bWrapped);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function newViewCache(eventCache, serverCache) {
        return { eventCache, serverCache };
    }
    function viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
        return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
    }
    function viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
        return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));
    }
    function viewCacheGetCompleteEventSnap(viewCache) {
        return viewCache.eventCache.isFullyInitialized()
            ? viewCache.eventCache.getNode()
            : null;
    }
    function viewCacheGetCompleteServerSnap(viewCache) {
        return viewCache.serverCache.isFullyInitialized()
            ? viewCache.serverCache.getNode()
            : null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let emptyChildrenSingleton;
    /**
     * Singleton empty children collection.
     *
     */
    const EmptyChildren = () => {
        if (!emptyChildrenSingleton) {
            emptyChildrenSingleton = new SortedMap(stringCompare);
        }
        return emptyChildrenSingleton;
    };
    /**
     * A tree with immutable elements.
     */
    class ImmutableTree {
        static fromObject(obj) {
            let tree = new ImmutableTree(null);
            each(obj, (childPath, childSnap) => {
                tree = tree.set(new Path(childPath), childSnap);
            });
            return tree;
        }
        constructor(value, children = EmptyChildren()) {
            this.value = value;
            this.children = children;
        }
        /**
         * True if the value is empty and there are no children
         */
        isEmpty() {
            return this.value === null && this.children.isEmpty();
        }
        /**
         * Given a path and predicate, return the first node and the path to that node
         * where the predicate returns true.
         *
         * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`
         * objects on the way back out, it may be better to pass down a pathSoFar obj.
         *
         * @param relativePath - The remainder of the path
         * @param predicate - The predicate to satisfy to return a node
         */
        findRootMostMatchingPathAndValue(relativePath, predicate) {
            if (this.value != null && predicate(this.value)) {
                return { path: newEmptyPath(), value: this.value };
            }
            else {
                if (pathIsEmpty(relativePath)) {
                    return null;
                }
                else {
                    const front = pathGetFront(relativePath);
                    const child = this.children.get(front);
                    if (child !== null) {
                        const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);
                        if (childExistingPathAndValue != null) {
                            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
                            return { path: fullPath, value: childExistingPathAndValue.value };
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        }
        /**
         * Find, if it exists, the shortest subpath of the given path that points a defined
         * value in the tree
         */
        findRootMostValueAndPath(relativePath) {
            return this.findRootMostMatchingPathAndValue(relativePath, () => true);
        }
        /**
         * @returns The subtree at the given path
         */
        subtree(relativePath) {
            if (pathIsEmpty(relativePath)) {
                return this;
            }
            else {
                const front = pathGetFront(relativePath);
                const childTree = this.children.get(front);
                if (childTree !== null) {
                    return childTree.subtree(pathPopFront(relativePath));
                }
                else {
                    return new ImmutableTree(null);
                }
            }
        }
        /**
         * Sets a value at the specified path.
         *
         * @param relativePath - Path to set value at.
         * @param toSet - Value to set.
         * @returns Resulting tree.
         */
        set(relativePath, toSet) {
            if (pathIsEmpty(relativePath)) {
                return new ImmutableTree(toSet, this.children);
            }
            else {
                const front = pathGetFront(relativePath);
                const child = this.children.get(front) || new ImmutableTree(null);
                const newChild = child.set(pathPopFront(relativePath), toSet);
                const newChildren = this.children.insert(front, newChild);
                return new ImmutableTree(this.value, newChildren);
            }
        }
        /**
         * Removes the value at the specified path.
         *
         * @param relativePath - Path to value to remove.
         * @returns Resulting tree.
         */
        remove(relativePath) {
            if (pathIsEmpty(relativePath)) {
                if (this.children.isEmpty()) {
                    return new ImmutableTree(null);
                }
                else {
                    return new ImmutableTree(null, this.children);
                }
            }
            else {
                const front = pathGetFront(relativePath);
                const child = this.children.get(front);
                if (child) {
                    const newChild = child.remove(pathPopFront(relativePath));
                    let newChildren;
                    if (newChild.isEmpty()) {
                        newChildren = this.children.remove(front);
                    }
                    else {
                        newChildren = this.children.insert(front, newChild);
                    }
                    if (this.value === null && newChildren.isEmpty()) {
                        return new ImmutableTree(null);
                    }
                    else {
                        return new ImmutableTree(this.value, newChildren);
                    }
                }
                else {
                    return this;
                }
            }
        }
        /**
         * Gets a value from the tree.
         *
         * @param relativePath - Path to get value for.
         * @returns Value at path, or null.
         */
        get(relativePath) {
            if (pathIsEmpty(relativePath)) {
                return this.value;
            }
            else {
                const front = pathGetFront(relativePath);
                const child = this.children.get(front);
                if (child) {
                    return child.get(pathPopFront(relativePath));
                }
                else {
                    return null;
                }
            }
        }
        /**
         * Replace the subtree at the specified path with the given new tree.
         *
         * @param relativePath - Path to replace subtree for.
         * @param newTree - New tree.
         * @returns Resulting tree.
         */
        setTree(relativePath, newTree) {
            if (pathIsEmpty(relativePath)) {
                return newTree;
            }
            else {
                const front = pathGetFront(relativePath);
                const child = this.children.get(front) || new ImmutableTree(null);
                const newChild = child.setTree(pathPopFront(relativePath), newTree);
                let newChildren;
                if (newChild.isEmpty()) {
                    newChildren = this.children.remove(front);
                }
                else {
                    newChildren = this.children.insert(front, newChild);
                }
                return new ImmutableTree(this.value, newChildren);
            }
        }
        /**
         * Performs a depth first fold on this tree. Transforms a tree into a single
         * value, given a function that operates on the path to a node, an optional
         * current value, and a map of child names to folded subtrees
         */
        fold(fn) {
            return this.fold_(newEmptyPath(), fn);
        }
        /**
         * Recursive helper for public-facing fold() method
         */
        fold_(pathSoFar, fn) {
            const accum = {};
            this.children.inorderTraversal((childKey, childTree) => {
                accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);
            });
            return fn(pathSoFar, this.value, accum);
        }
        /**
         * Find the first matching value on the given path. Return the result of applying f to it.
         */
        findOnPath(path, f) {
            return this.findOnPath_(path, newEmptyPath(), f);
        }
        findOnPath_(pathToFollow, pathSoFar, f) {
            const result = this.value ? f(pathSoFar, this.value) : false;
            if (result) {
                return result;
            }
            else {
                if (pathIsEmpty(pathToFollow)) {
                    return null;
                }
                else {
                    const front = pathGetFront(pathToFollow);
                    const nextChild = this.children.get(front);
                    if (nextChild) {
                        return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);
                    }
                    else {
                        return null;
                    }
                }
            }
        }
        foreachOnPath(path, f) {
            return this.foreachOnPath_(path, newEmptyPath(), f);
        }
        foreachOnPath_(pathToFollow, currentRelativePath, f) {
            if (pathIsEmpty(pathToFollow)) {
                return this;
            }
            else {
                if (this.value) {
                    f(currentRelativePath, this.value);
                }
                const front = pathGetFront(pathToFollow);
                const nextChild = this.children.get(front);
                if (nextChild) {
                    return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);
                }
                else {
                    return new ImmutableTree(null);
                }
            }
        }
        /**
         * Calls the given function for each node in the tree that has a value.
         *
         * @param f - A function to be called with the path from the root of the tree to
         * a node, and the value at that node. Called in depth-first order.
         */
        foreach(f) {
            this.foreach_(newEmptyPath(), f);
        }
        foreach_(currentRelativePath, f) {
            this.children.inorderTraversal((childName, childTree) => {
                childTree.foreach_(pathChild(currentRelativePath, childName), f);
            });
            if (this.value) {
                f(currentRelativePath, this.value);
            }
        }
        foreachChild(f) {
            this.children.inorderTraversal((childName, childTree) => {
                if (childTree.value) {
                    f(childName, childTree.value);
                }
            });
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
     * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
     * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
     * to reflect the write added.
     */
    class CompoundWrite {
        constructor(writeTree_) {
            this.writeTree_ = writeTree_;
        }
        static empty() {
            return new CompoundWrite(new ImmutableTree(null));
        }
    }
    function compoundWriteAddWrite(compoundWrite, path, node) {
        if (pathIsEmpty(path)) {
            return new CompoundWrite(new ImmutableTree(node));
        }
        else {
            const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
            if (rootmost != null) {
                const rootMostPath = rootmost.path;
                let value = rootmost.value;
                const relativePath = newRelativePath(rootMostPath, path);
                value = value.updateChild(relativePath, node);
                return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
            }
            else {
                const subtree = new ImmutableTree(node);
                const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);
                return new CompoundWrite(newWriteTree);
            }
        }
    }
    function compoundWriteAddWrites(compoundWrite, path, updates) {
        let newWrite = compoundWrite;
        each(updates, (childKey, node) => {
            newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
        });
        return newWrite;
    }
    /**
     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
     * location, which must be removed by calling this method with that path.
     *
     * @param compoundWrite - The CompoundWrite to remove.
     * @param path - The path at which a write and all deeper writes should be removed
     * @returns The new CompoundWrite with the removed path
     */
    function compoundWriteRemoveWrite(compoundWrite, path) {
        if (pathIsEmpty(path)) {
            return CompoundWrite.empty();
        }
        else {
            const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
            return new CompoundWrite(newWriteTree);
        }
    }
    /**
     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
     * considered "complete".
     *
     * @param compoundWrite - The CompoundWrite to check.
     * @param path - The path to check for
     * @returns Whether there is a complete write at that path
     */
    function compoundWriteHasCompleteWrite(compoundWrite, path) {
        return compoundWriteGetCompleteNode(compoundWrite, path) != null;
    }
    /**
     * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
     * writes from deeper paths, but will return child nodes from a more shallow path.
     *
     * @param compoundWrite - The CompoundWrite to get the node from.
     * @param path - The path to get a complete write
     * @returns The node if complete at that path, or null otherwise.
     */
    function compoundWriteGetCompleteNode(compoundWrite, path) {
        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
        if (rootmost != null) {
            return compoundWrite.writeTree_
                .get(rootmost.path)
                .getChild(newRelativePath(rootmost.path, path));
        }
        else {
            return null;
        }
    }
    /**
     * Returns all children that are guaranteed to be a complete overwrite.
     *
     * @param compoundWrite - The CompoundWrite to get children from.
     * @returns A list of all complete children.
     */
    function compoundWriteGetCompleteChildren(compoundWrite) {
        const children = [];
        const node = compoundWrite.writeTree_.value;
        if (node != null) {
            // If it's a leaf node, it has no children; so nothing to do.
            if (!node.isLeafNode()) {
                node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
                    children.push(new NamedNode(childName, childNode));
                });
            }
        }
        else {
            compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {
                if (childTree.value != null) {
                    children.push(new NamedNode(childName, childTree.value));
                }
            });
        }
        return children;
    }
    function compoundWriteChildCompoundWrite(compoundWrite, path) {
        if (pathIsEmpty(path)) {
            return compoundWrite;
        }
        else {
            const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);
            if (shadowingNode != null) {
                return new CompoundWrite(new ImmutableTree(shadowingNode));
            }
            else {
                return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
            }
        }
    }
    /**
     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
     * @returns Whether this CompoundWrite is empty
     */
    function compoundWriteIsEmpty(compoundWrite) {
        return compoundWrite.writeTree_.isEmpty();
    }
    /**
     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
     * node
     * @param node - The node to apply this CompoundWrite to
     * @returns The node with all writes applied
     */
    function compoundWriteApply(compoundWrite, node) {
        return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
    }
    function applySubtreeWrite(relativePath, writeTree, node) {
        if (writeTree.value != null) {
            // Since there a write is always a leaf, we're done here
            return node.updateChild(relativePath, writeTree.value);
        }
        else {
            let priorityWrite = null;
            writeTree.children.inorderTraversal((childKey, childTree) => {
                if (childKey === '.priority') {
                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                    // to apply priorities to empty nodes that are later filled
                    assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                    priorityWrite = childTree.value;
                }
                else {
                    node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
                }
            });
            // If there was a priority write, we only apply it if the node is not empty
            if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {
                node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);
            }
            return node;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
     *
     */
    function writeTreeChildWrites(writeTree, path) {
        return newWriteTreeRef(path, writeTree);
    }
    /**
     * Record a new overwrite from user code.
     *
     * @param visible - This is set to false by some transactions. It should be excluded from event caches
     */
    function writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
        assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');
        if (visible === undefined) {
            visible = true;
        }
        writeTree.allWrites.push({
            path,
            snap,
            writeId,
            visible
        });
        if (visible) {
            writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
        }
        writeTree.lastWriteId = writeId;
    }
    function writeTreeGetWrite(writeTree, writeId) {
        for (let i = 0; i < writeTree.allWrites.length; i++) {
            const record = writeTree.allWrites[i];
            if (record.writeId === writeId) {
                return record;
            }
        }
        return null;
    }
    /**
     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
     *
     * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise
     * events as a result).
     */
    function writeTreeRemoveWrite(writeTree, writeId) {
        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
        // out of order.
        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
        //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
        const idx = writeTree.allWrites.findIndex(s => {
            return s.writeId === writeId;
        });
        assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
        const writeToRemove = writeTree.allWrites[idx];
        writeTree.allWrites.splice(idx, 1);
        let removedWriteWasVisible = writeToRemove.visible;
        let removedWriteOverlapsWithOtherWrites = false;
        let i = writeTree.allWrites.length - 1;
        while (removedWriteWasVisible && i >= 0) {
            const currentWrite = writeTree.allWrites[i];
            if (currentWrite.visible) {
                if (i >= idx &&
                    writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {
                    // The removed write was completely shadowed by a subsequent write.
                    removedWriteWasVisible = false;
                }
                else if (pathContains(writeToRemove.path, currentWrite.path)) {
                    // Either we're covering some writes or they're covering part of us (depending on which came first).
                    removedWriteOverlapsWithOtherWrites = true;
                }
            }
            i--;
        }
        if (!removedWriteWasVisible) {
            return false;
        }
        else if (removedWriteOverlapsWithOtherWrites) {
            // There's some shadowing going on. Just rebuild the visible writes from scratch.
            writeTreeResetTree_(writeTree);
            return true;
        }
        else {
            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
            if (writeToRemove.snap) {
                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
            }
            else {
                const children = writeToRemove.children;
                each(children, (childName) => {
                    writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));
                });
            }
            return true;
        }
    }
    function writeTreeRecordContainsPath_(writeRecord, path) {
        if (writeRecord.snap) {
            return pathContains(writeRecord.path, path);
        }
        else {
            for (const childName in writeRecord.children) {
                if (writeRecord.children.hasOwnProperty(childName) &&
                    pathContains(pathChild(writeRecord.path, childName), path)) {
                    return true;
                }
            }
            return false;
        }
    }
    /**
     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
     */
    function writeTreeResetTree_(writeTree) {
        writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());
        if (writeTree.allWrites.length > 0) {
            writeTree.lastWriteId =
                writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
        }
        else {
            writeTree.lastWriteId = -1;
        }
    }
    /**
     * The default filter used when constructing the tree. Keep everything that's visible.
     */
    function writeTreeDefaultFilter_(write) {
        return write.visible;
    }
    /**
     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
     * event data at that path.
     */
    function writeTreeLayerTree_(writes, filter, treeRoot) {
        let compoundWrite = CompoundWrite.empty();
        for (let i = 0; i < writes.length; ++i) {
            const write = writes[i];
            // Theory, a later set will either:
            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
            if (filter(write)) {
                const writePath = write.path;
                let relativePath;
                if (write.snap) {
                    if (pathContains(treeRoot, writePath)) {
                        relativePath = newRelativePath(treeRoot, writePath);
                        compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
                    }
                    else if (pathContains(writePath, treeRoot)) {
                        relativePath = newRelativePath(writePath, treeRoot);
                        compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));
                    }
                    else ;
                }
                else if (write.children) {
                    if (pathContains(treeRoot, writePath)) {
                        relativePath = newRelativePath(treeRoot, writePath);
                        compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);
                    }
                    else if (pathContains(writePath, treeRoot)) {
                        relativePath = newRelativePath(writePath, treeRoot);
                        if (pathIsEmpty(relativePath)) {
                            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);
                        }
                        else {
                            const child = safeGet(write.children, pathGetFront(relativePath));
                            if (child) {
                                // There exists a child in this node that matches the root path
                                const deepNode = child.getChild(pathPopFront(relativePath));
                                compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
                            }
                        }
                    }
                    else ;
                }
                else {
                    throw assertionError('WriteRecord should have .snap or .children');
                }
            }
        }
        return compoundWrite;
    }
    /**
     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
     * writes), attempt to calculate a complete snapshot for the given path
     *
     * @param writeIdsToExclude - An optional set to be excluded
     * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
     */
    function writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
        if (!writeIdsToExclude && !includeHiddenWrites) {
            const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
            if (shadowingNode != null) {
                return shadowingNode;
            }
            else {
                const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
                if (compoundWriteIsEmpty(subMerge)) {
                    return completeServerCache;
                }
                else if (completeServerCache == null &&
                    !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {
                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                    return null;
                }
                else {
                    const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                    return compoundWriteApply(subMerge, layeredCache);
                }
            }
        }
        else {
            const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
            if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
                return completeServerCache;
            }
            else {
                // If the server cache is null, and we don't have a complete cache, we need to return null
                if (!includeHiddenWrites &&
                    completeServerCache == null &&
                    !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {
                    return null;
                }
                else {
                    const filter = function (write) {
                        return ((write.visible || includeHiddenWrites) &&
                            (!writeIdsToExclude ||
                                !~writeIdsToExclude.indexOf(write.writeId)) &&
                            (pathContains(write.path, treePath) ||
                                pathContains(treePath, write.path)));
                    };
                    const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
                    const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                    return compoundWriteApply(mergeAtPath, layeredCache);
                }
            }
        }
    }
    /**
     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
     * Used when creating new views, to pre-fill their complete event children snapshot.
     */
    function writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
        let completeChildren = ChildrenNode.EMPTY_NODE;
        const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
        if (topLevelSet) {
            if (!topLevelSet.isLeafNode()) {
                // we're shadowing everything. Return the children.
                topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {
                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
                });
            }
            return completeChildren;
        }
        else if (completeServerChildren) {
            // Layer any children we have on top of this
            // We know we don't have a top-level set, so just enumerate existing children
            const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
            completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
                const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);
                completeChildren = completeChildren.updateImmediateChild(childName, node);
            });
            // Add any complete children we have from the set
            compoundWriteGetCompleteChildren(merge).forEach(namedNode => {
                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
            });
            return completeChildren;
        }
        else {
            // We don't have anything to layer on top of. Layer on any children we have
            // Note that we can return an empty snap if we have a defined delete
            const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
            compoundWriteGetCompleteChildren(merge).forEach(namedNode => {
                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
            });
            return completeChildren;
        }
    }
    /**
     * Given that the underlying server data has updated, determine what, if anything, needs to be
     * applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events
     *
     * Either existingEventSnap or existingServerSnap must exist
     */
    function writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
        assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
        const path = pathChild(treePath, childPath);
        if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {
            // At this point we can probably guarantee that we're in case 2, meaning no events
            // May need to check visibility while doing the findRootMostValueAndPath call
            return null;
        }
        else {
            // No complete shadowing. We're either partially shadowing or not shadowing at all.
            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
            if (compoundWriteIsEmpty(childMerge)) {
                // We're not shadowing at all. Case 1
                return existingServerSnap.getChild(childPath);
            }
            else {
                // This could be more efficient if the serverNode + updates doesn't change the eventSnap
                // However this is tricky to find out, since user updates don't necessary change the server
                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
                // adds nodes, but doesn't change any existing writes. It is therefore not enough to
                // only check if the updates change the serverNode.
                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
                return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
            }
        }
    }
    /**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     */
    function writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
        const path = pathChild(treePath, childKey);
        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
        if (shadowingNode != null) {
            return shadowingNode;
        }
        else {
            if (existingServerSnap.isCompleteForChild(childKey)) {
                const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
                return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
            }
            else {
                return null;
            }
        }
    }
    /**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     */
    function writeTreeShadowingWrite(writeTree, path) {
        return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
    }
    /**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window.
     */
    function writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
        let toIterate;
        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());
        if (shadowingNode != null) {
            toIterate = shadowingNode;
        }
        else if (completeServerData != null) {
            toIterate = compoundWriteApply(merge, completeServerData);
        }
        else {
            // no children to iterate on
            return [];
        }
        toIterate = toIterate.withIndex(index);
        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
            const nodes = [];
            const cmp = index.getCompare();
            const iter = reverse
                ? toIterate.getReverseIteratorFrom(startPost, index)
                : toIterate.getIteratorFrom(startPost, index);
            let next = iter.getNext();
            while (next && nodes.length < count) {
                if (cmp(next, startPost) !== 0) {
                    nodes.push(next);
                }
                next = iter.getNext();
            }
            return nodes;
        }
        else {
            return [];
        }
    }
    function newWriteTree() {
        return {
            visibleWrites: CompoundWrite.empty(),
            allWrites: [],
            lastWriteId: -1
        };
    }
    /**
     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
     * can lead to a more expensive calculation.
     *
     * @param writeIdsToExclude - Optional writes to exclude.
     * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
     */
    function writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
        return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
    }
    /**
     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
     * mix of the given server data and write data.
     *
     */
    function writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
        return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
    }
    /**
     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
     * if anything, needs to be applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events should be raised
     *
     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
     *
     *
     */
    function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
        return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
    }
    /**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     *
     */
    function writeTreeRefShadowingWrite(writeTreeRef, path) {
        return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));
    }
    /**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window
     */
    function writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
        return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
    }
    /**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     */
    function writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
        return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
    }
    /**
     * Return a WriteTreeRef for a child.
     */
    function writeTreeRefChild(writeTreeRef, childName) {
        return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
    }
    function newWriteTreeRef(path, writeTree) {
        return {
            treePath: path,
            writeTree
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ChildChangeAccumulator {
        constructor() {
            this.changeMap = new Map();
        }
        trackChildChange(change) {
            const type = change.type;
            const childKey = change.childName;
            assert(type === "child_added" /* ChangeType.CHILD_ADDED */ ||
                type === "child_changed" /* ChangeType.CHILD_CHANGED */ ||
                type === "child_removed" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');
            assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
            const oldChange = this.changeMap.get(childKey);
            if (oldChange) {
                const oldType = oldChange.type;
                if (type === "child_added" /* ChangeType.CHILD_ADDED */ &&
                    oldType === "child_removed" /* ChangeType.CHILD_REMOVED */) {
                    this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
                }
                else if (type === "child_removed" /* ChangeType.CHILD_REMOVED */ &&
                    oldType === "child_added" /* ChangeType.CHILD_ADDED */) {
                    this.changeMap.delete(childKey);
                }
                else if (type === "child_removed" /* ChangeType.CHILD_REMOVED */ &&
                    oldType === "child_changed" /* ChangeType.CHILD_CHANGED */) {
                    this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
                }
                else if (type === "child_changed" /* ChangeType.CHILD_CHANGED */ &&
                    oldType === "child_added" /* ChangeType.CHILD_ADDED */) {
                    this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
                }
                else if (type === "child_changed" /* ChangeType.CHILD_CHANGED */ &&
                    oldType === "child_changed" /* ChangeType.CHILD_CHANGED */) {
                    this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
                }
                else {
                    throw assertionError('Illegal combination of changes: ' +
                        change +
                        ' occurred after ' +
                        oldChange);
                }
            }
            else {
                this.changeMap.set(childKey, change);
            }
        }
        getChanges() {
            return Array.from(this.changeMap.values());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An implementation of CompleteChildSource that never returns any additional children
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    class NoCompleteChildSource_ {
        getCompleteChild(childKey) {
            return null;
        }
        getChildAfterChild(index, child, reverse) {
            return null;
        }
    }
    /**
     * Singleton instance.
     */
    const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
    /**
     * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
     * old event caches available to calculate complete children.
     */
    class WriteTreeCompleteChildSource {
        constructor(writes_, viewCache_, optCompleteServerCache_ = null) {
            this.writes_ = writes_;
            this.viewCache_ = viewCache_;
            this.optCompleteServerCache_ = optCompleteServerCache_;
        }
        getCompleteChild(childKey) {
            const node = this.viewCache_.eventCache;
            if (node.isCompleteForChild(childKey)) {
                return node.getNode().getImmediateChild(childKey);
            }
            else {
                const serverNode = this.optCompleteServerCache_ != null
                    ? new CacheNode(this.optCompleteServerCache_, true, false)
                    : this.viewCache_.serverCache;
                return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
            }
        }
        getChildAfterChild(index, child, reverse) {
            const completeServerData = this.optCompleteServerCache_ != null
                ? this.optCompleteServerCache_
                : viewCacheGetCompleteServerSnap(this.viewCache_);
            const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);
            if (nodes.length === 0) {
                return null;
            }
            else {
                return nodes[0];
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function newViewProcessor(filter) {
        return { filter };
    }
    function viewProcessorAssertIndexed(viewProcessor, viewCache) {
        assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');
        assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');
    }
    function viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
        const accumulator = new ChildChangeAccumulator();
        let newViewCache, filterServerNode;
        if (operation.type === OperationType.OVERWRITE) {
            const overwrite = operation;
            if (overwrite.source.fromUser) {
                newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
            }
            else {
                assert(overwrite.source.fromServer, 'Unknown source.');
                // We filter the node if it's a tagged update or the node has been previously filtered  and the
                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
                // again
                filterServerNode =
                    overwrite.source.tagged ||
                        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));
                newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
            }
        }
        else if (operation.type === OperationType.MERGE) {
            const merge = operation;
            if (merge.source.fromUser) {
                newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
            }
            else {
                assert(merge.source.fromServer, 'Unknown source.');
                // We filter the node if it's a tagged update or the node has been previously filtered
                filterServerNode =
                    merge.source.tagged || oldViewCache.serverCache.isFiltered();
                newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
            }
        }
        else if (operation.type === OperationType.ACK_USER_WRITE) {
            const ackUserWrite = operation;
            if (!ackUserWrite.revert) {
                newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
            }
            else {
                newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
            }
        }
        else if (operation.type === OperationType.LISTEN_COMPLETE) {
            newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
        }
        else {
            throw assertionError('Unknown operation type: ' + operation.type);
        }
        const changes = accumulator.getChanges();
        viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);
        return { viewCache: newViewCache, changes };
    }
    function viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {
        const eventSnap = newViewCache.eventCache;
        if (eventSnap.isFullyInitialized()) {
            const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
            const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);
            if (accumulator.length > 0 ||
                !oldViewCache.eventCache.isFullyInitialized() ||
                (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||
                !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
                accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));
            }
        }
    }
    function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
        const oldEventSnap = viewCache.eventCache;
        if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {
            // we have a shadowing write, ignore changes
            return viewCache;
        }
        else {
            let newEventCache, serverNode;
            if (pathIsEmpty(changePath)) {
                // TODO: figure out how this plays with "sliding ack windows"
                assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');
                if (viewCache.serverCache.isFiltered()) {
                    // We need to special case this, because we need to only apply writes to complete children, or
                    // we might end up raising events for incomplete children. If the server data is filtered deep
                    // writes cannot be guaranteed to be complete
                    const serverCache = viewCacheGetCompleteServerSnap(viewCache);
                    const completeChildren = serverCache instanceof ChildrenNode
                        ? serverCache
                        : ChildrenNode.EMPTY_NODE;
                    const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
                    newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
                }
                else {
                    const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                    newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
                }
            }
            else {
                const childKey = pathGetFront(changePath);
                if (childKey === '.priority') {
                    assert(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
                    const oldEventNode = oldEventSnap.getNode();
                    serverNode = viewCache.serverCache.getNode();
                    // we might have overwrites for this priority
                    const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);
                    if (updatedPriority != null) {
                        newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
                    }
                    else {
                        // priority didn't change, keep old node
                        newEventCache = oldEventSnap.getNode();
                    }
                }
                else {
                    const childChangePath = pathPopFront(changePath);
                    // update child
                    let newEventChild;
                    if (oldEventSnap.isCompleteForChild(childKey)) {
                        serverNode = viewCache.serverCache.getNode();
                        const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);
                        if (eventChildUpdate != null) {
                            newEventChild = oldEventSnap
                                .getNode()
                                .getImmediateChild(childKey)
                                .updateChild(childChangePath, eventChildUpdate);
                        }
                        else {
                            // Nothing changed, just keep the old child
                            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
                        }
                    }
                    else {
                        newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
                    }
                    if (newEventChild != null) {
                        newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                    }
                    else {
                        // no complete child available or no change
                        newEventCache = oldEventSnap.getNode();
                    }
                }
            }
            return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
        }
    }
    function viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
        const oldServerSnap = oldViewCache.serverCache;
        let newServerCache;
        const serverFilter = filterServerNode
            ? viewProcessor.filter
            : viewProcessor.filter.getIndexedFilter();
        if (pathIsEmpty(changePath)) {
            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
        }
        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
            const newServerNode = oldServerSnap
                .getNode()
                .updateChild(changePath, changedSnap);
            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
        }
        else {
            const childKey = pathGetFront(changePath);
            if (!oldServerSnap.isCompleteForPath(changePath) &&
                pathGetLength(changePath) > 1) {
                // We don't update incomplete nodes with updates intended for other listeners
                return oldViewCache;
            }
            const childChangePath = pathPopFront(changePath);
            const childNode = oldServerSnap.getNode().getImmediateChild(childKey);
            const newChildNode = childNode.updateChild(childChangePath, changedSnap);
            if (childKey === '.priority') {
                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
            }
            else {
                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
            }
        }
        const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
        const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
        return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);
    }
    function viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
        const oldEventSnap = oldViewCache.eventCache;
        let newViewCache, newEventCache;
        const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
        if (pathIsEmpty(changePath)) {
            newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
        }
        else {
            const childKey = pathGetFront(changePath);
            if (childKey === '.priority') {
                newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
            }
            else {
                const childChangePath = pathPopFront(changePath);
                const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                let newChild;
                if (pathIsEmpty(childChangePath)) {
                    // Child overwrite, we can replace the child
                    newChild = changedSnap;
                }
                else {
                    const childNode = source.getCompleteChild(childKey);
                    if (childNode != null) {
                        if (pathGetBack(childChangePath) === '.priority' &&
                            childNode.getChild(pathParent(childChangePath)).isEmpty()) {
                            // This is a priority update on an empty node. If this node exists on the server, the
                            // server will send down the priority in the update, so ignore for now
                            newChild = childNode;
                        }
                        else {
                            newChild = childNode.updateChild(childChangePath, changedSnap);
                        }
                    }
                    else {
                        // There is no complete child node available
                        newChild = ChildrenNode.EMPTY_NODE;
                    }
                }
                if (!oldChild.equals(newChild)) {
                    const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
                }
                else {
                    newViewCache = oldViewCache;
                }
            }
        }
        return newViewCache;
    }
    function viewProcessorCacheHasChild(viewCache, childKey) {
        return viewCache.eventCache.isCompleteForChild(childKey);
    }
    function viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
        // HACK: In the case of a limit query, there may be some changes that bump things out of the
        // window leaving room for new items.  It's important we process these changes first, so we
        // iterate the changes twice, first processing any that affect items currently in view.
        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
        // not the other.
        let curViewCache = viewCache;
        changedChildren.foreach((relativePath, childNode) => {
            const writePath = pathChild(path, relativePath);
            if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
                curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
            }
        });
        changedChildren.foreach((relativePath, childNode) => {
            const writePath = pathChild(path, relativePath);
            if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
                curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
            }
        });
        return curViewCache;
    }
    function viewProcessorApplyMerge(viewProcessor, node, merge) {
        merge.foreach((relativePath, childNode) => {
            node = node.updateChild(relativePath, childNode);
        });
        return node;
    }
    function viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
        // wait for the complete data update coming soon.
        if (viewCache.serverCache.getNode().isEmpty() &&
            !viewCache.serverCache.isFullyInitialized()) {
            return viewCache;
        }
        // HACK: In the case of a limit query, there may be some changes that bump things out of the
        // window leaving room for new items.  It's important we process these changes first, so we
        // iterate the changes twice, first processing any that affect items currently in view.
        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
        // not the other.
        let curViewCache = viewCache;
        let viewMergeTree;
        if (pathIsEmpty(path)) {
            viewMergeTree = changedChildren;
        }
        else {
            viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
        }
        const serverNode = viewCache.serverCache.getNode();
        viewMergeTree.children.inorderTraversal((childKey, childTree) => {
            if (serverNode.hasChild(childKey)) {
                const serverChild = viewCache.serverCache
                    .getNode()
                    .getImmediateChild(childKey);
                const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
                curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
            }
        });
        viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {
            const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&
                childMergeTree.value === null;
            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                const serverChild = viewCache.serverCache
                    .getNode()
                    .getImmediateChild(childKey);
                const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
                curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
            }
        });
        return curViewCache;
    }
    function viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
        if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {
            return viewCache;
        }
        // Only filter server node if it is currently filtered
        const filterServerNode = viewCache.serverCache.isFiltered();
        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
        // now that it won't be shadowed.
        const serverCache = viewCache.serverCache;
        if (affectedTree.value != null) {
            // This is an overwrite.
            if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||
                serverCache.isCompleteForPath(ackPath)) {
                return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
            }
            else if (pathIsEmpty(ackPath)) {
                // This is a goofy edge case where we are acking data at this location but don't have full data.  We
                // should just re-apply whatever we have in our cache as a merge.
                let changedChildren = new ImmutableTree(null);
                serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {
                    changedChildren = changedChildren.set(new Path(name), node);
                });
                return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
            }
            else {
                return viewCache;
            }
        }
        else {
            // This is a merge.
            let changedChildren = new ImmutableTree(null);
            affectedTree.foreach((mergePath, value) => {
                const serverCachePath = pathChild(ackPath, mergePath);
                if (serverCache.isCompleteForPath(serverCachePath)) {
                    changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                }
            });
            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
        }
    }
    function viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
        const oldServerNode = viewCache.serverCache;
        const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
        return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
    }
    function viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
        let complete;
        if (writeTreeRefShadowingWrite(writesCache, path) != null) {
            return viewCache;
        }
        else {
            const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
            const oldEventCache = viewCache.eventCache.getNode();
            let newEventCache;
            if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {
                let newNode;
                if (viewCache.serverCache.isFullyInitialized()) {
                    newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                }
                else {
                    const serverChildren = viewCache.serverCache.getNode();
                    assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
                    newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
                }
                newNode = newNode;
                newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
            }
            else {
                const childKey = pathGetFront(path);
                let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
                if (newChild == null &&
                    viewCache.serverCache.isCompleteForChild(childKey)) {
                    newChild = oldEventCache.getImmediateChild(childKey);
                }
                if (newChild != null) {
                    newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
                }
                else if (viewCache.eventCache.getNode().hasChild(childKey)) {
                    // No complete child available, delete the existing one, if any
                    newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
                }
                else {
                    newEventCache = oldEventCache;
                }
                if (newEventCache.isEmpty() &&
                    viewCache.serverCache.isFullyInitialized()) {
                    // We might have reverted all child writes. Maybe the old event was a leaf node
                    complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                    if (complete.isLeafNode()) {
                        newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
                    }
                }
            }
            complete =
                viewCache.serverCache.isFullyInitialized() ||
                    writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
            return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A view represents a specific location and query that has 1 or more event registrations.
     *
     * It does several things:
     *  - Maintains the list of event registrations for this location/query.
     *  - Maintains a cache of the data visible for this location/query.
     *  - Applies new operations (via applyOperation), updates the cache, and based on the event
     *    registrations returns the set of events to be raised.
     */
    class View {
        constructor(query_, initialViewCache) {
            this.query_ = query_;
            this.eventRegistrations_ = [];
            const params = this.query_._queryParams;
            const indexFilter = new IndexedFilter(params.getIndex());
            const filter = queryParamsGetNodeFilter(params);
            this.processor_ = newViewProcessor(filter);
            const initialServerCache = initialViewCache.serverCache;
            const initialEventCache = initialViewCache.eventCache;
            // Don't filter server node with other filter than index, wait for tagged listen
            const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
            const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
            const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
            const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
            this.viewCache_ = newViewCache(newEventCache, newServerCache);
            this.eventGenerator_ = new EventGenerator(this.query_);
        }
        get query() {
            return this.query_;
        }
    }
    function viewGetServerCache(view) {
        return view.viewCache_.serverCache.getNode();
    }
    function viewGetCompleteNode(view) {
        return viewCacheGetCompleteEventSnap(view.viewCache_);
    }
    function viewGetCompleteServerCache(view, path) {
        const cache = viewCacheGetCompleteServerSnap(view.viewCache_);
        if (cache) {
            // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
            // we need to see if it contains the child we're interested in.
            if (view.query._queryParams.loadsAllData() ||
                (!pathIsEmpty(path) &&
                    !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {
                return cache.getChild(path);
            }
        }
        return null;
    }
    function viewIsEmpty(view) {
        return view.eventRegistrations_.length === 0;
    }
    function viewAddEventRegistration(view, eventRegistration) {
        view.eventRegistrations_.push(eventRegistration);
    }
    /**
     * @param eventRegistration - If null, remove all callbacks.
     * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
     * @returns Cancel events, if cancelError was provided.
     */
    function viewRemoveEventRegistration(view, eventRegistration, cancelError) {
        const cancelEvents = [];
        if (cancelError) {
            assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
            const path = view.query._path;
            view.eventRegistrations_.forEach(registration => {
                const maybeEvent = registration.createCancelEvent(cancelError, path);
                if (maybeEvent) {
                    cancelEvents.push(maybeEvent);
                }
            });
        }
        if (eventRegistration) {
            let remaining = [];
            for (let i = 0; i < view.eventRegistrations_.length; ++i) {
                const existing = view.eventRegistrations_[i];
                if (!existing.matches(eventRegistration)) {
                    remaining.push(existing);
                }
                else if (eventRegistration.hasAnyCallback()) {
                    // We're removing just this one
                    remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));
                    break;
                }
            }
            view.eventRegistrations_ = remaining;
        }
        else {
            view.eventRegistrations_ = [];
        }
        return cancelEvents;
    }
    /**
     * Applies the given Operation, updates our cache, and returns the appropriate events.
     */
    function viewApplyOperation(view, operation, writesCache, completeServerCache) {
        if (operation.type === OperationType.MERGE &&
            operation.source.queryId !== null) {
            assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');
            assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');
        }
        const oldViewCache = view.viewCache_;
        const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
        viewProcessorAssertIndexed(view.processor_, result.viewCache);
        assert(result.viewCache.serverCache.isFullyInitialized() ||
            !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');
        view.viewCache_ = result.viewCache;
        return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);
    }
    function viewGetInitialEvents(view, registration) {
        const eventSnap = view.viewCache_.eventCache;
        const initialChanges = [];
        if (!eventSnap.getNode().isLeafNode()) {
            const eventNode = eventSnap.getNode();
            eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                initialChanges.push(changeChildAdded(key, childNode));
            });
        }
        if (eventSnap.isFullyInitialized()) {
            initialChanges.push(changeValue(eventSnap.getNode()));
        }
        return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);
    }
    function viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
        const registrations = eventRegistration
            ? [eventRegistration]
            : view.eventRegistrations_;
        return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let referenceConstructor$1;
    /**
     * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
     * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
     * and user writes (set, transaction, update).
     *
     * It's responsible for:
     *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
     *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
     *    applyUserOverwrite, etc.)
     */
    class SyncPoint {
        constructor() {
            /**
             * The Views being tracked at this location in the tree, stored as a map where the key is a
             * queryId and the value is the View for that query.
             *
             * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
             */
            this.views = new Map();
        }
    }
    function syncPointSetReferenceConstructor(val) {
        assert(!referenceConstructor$1, '__referenceConstructor has already been defined');
        referenceConstructor$1 = val;
    }
    function syncPointGetReferenceConstructor() {
        assert(referenceConstructor$1, 'Reference.ts has not been loaded');
        return referenceConstructor$1;
    }
    function syncPointIsEmpty(syncPoint) {
        return syncPoint.views.size === 0;
    }
    function syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
        const queryId = operation.source.queryId;
        if (queryId !== null) {
            const view = syncPoint.views.get(queryId);
            assert(view != null, 'SyncTree gave us an op for an invalid query.');
            return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
        }
        else {
            let events = [];
            for (const view of syncPoint.views.values()) {
                events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
            }
            return events;
        }
    }
    /**
     * Get a view for the specified query.
     *
     * @param query - The query to return a view for
     * @param writesCache
     * @param serverCache
     * @param serverCacheComplete
     * @returns Events to raise.
     */
    function syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {
        const queryId = query._queryIdentifier;
        const view = syncPoint.views.get(queryId);
        if (!view) {
            // TODO: make writesCache take flag for complete server node
            let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);
            let eventCacheComplete = false;
            if (eventCache) {
                eventCacheComplete = true;
            }
            else if (serverCache instanceof ChildrenNode) {
                eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);
                eventCacheComplete = false;
            }
            else {
                eventCache = ChildrenNode.EMPTY_NODE;
                eventCacheComplete = false;
            }
            const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
            return new View(query, viewCache);
        }
        return view;
    }
    /**
     * Add an event callback for the specified query.
     *
     * @param query
     * @param eventRegistration
     * @param writesCache
     * @param serverCache - Complete server cache, if we have it.
     * @param serverCacheComplete
     * @returns Events to raise.
     */
    function syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
        const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);
        if (!syncPoint.views.has(query._queryIdentifier)) {
            syncPoint.views.set(query._queryIdentifier, view);
        }
        // This is guaranteed to exist now, we just created anything that was missing
        viewAddEventRegistration(view, eventRegistration);
        return viewGetInitialEvents(view, eventRegistration);
    }
    /**
     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
     *
     * If query is the default query, we'll check all views for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
     *
     * @param eventRegistration - If null, remove all callbacks.
     * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
     * @returns removed queries and any cancel events
     */
    function syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {
        const queryId = query._queryIdentifier;
        const removed = [];
        let cancelEvents = [];
        const hadCompleteView = syncPointHasCompleteView(syncPoint);
        if (queryId === 'default') {
            // When you do ref.off(...), we search all views for the registration to remove.
            for (const [viewQueryId, view] of syncPoint.views.entries()) {
                cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
                if (viewIsEmpty(view)) {
                    syncPoint.views.delete(viewQueryId);
                    // We'll deal with complete views later.
                    if (!view.query._queryParams.loadsAllData()) {
                        removed.push(view.query);
                    }
                }
            }
        }
        else {
            // remove the callback from the specific view.
            const view = syncPoint.views.get(queryId);
            if (view) {
                cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
                if (viewIsEmpty(view)) {
                    syncPoint.views.delete(queryId);
                    // We'll deal with complete views later.
                    if (!view.query._queryParams.loadsAllData()) {
                        removed.push(view.query);
                    }
                }
            }
        }
        if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {
            // We removed our last complete view.
            removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));
        }
        return { removed, events: cancelEvents };
    }
    function syncPointGetQueryViews(syncPoint) {
        const result = [];
        for (const view of syncPoint.views.values()) {
            if (!view.query._queryParams.loadsAllData()) {
                result.push(view);
            }
        }
        return result;
    }
    /**
     * @param path - The path to the desired complete snapshot
     * @returns A complete cache, if it exists
     */
    function syncPointGetCompleteServerCache(syncPoint, path) {
        let serverCache = null;
        for (const view of syncPoint.views.values()) {
            serverCache = serverCache || viewGetCompleteServerCache(view, path);
        }
        return serverCache;
    }
    function syncPointViewForQuery(syncPoint, query) {
        const params = query._queryParams;
        if (params.loadsAllData()) {
            return syncPointGetCompleteView(syncPoint);
        }
        else {
            const queryId = query._queryIdentifier;
            return syncPoint.views.get(queryId);
        }
    }
    function syncPointViewExistsForQuery(syncPoint, query) {
        return syncPointViewForQuery(syncPoint, query) != null;
    }
    function syncPointHasCompleteView(syncPoint) {
        return syncPointGetCompleteView(syncPoint) != null;
    }
    function syncPointGetCompleteView(syncPoint) {
        for (const view of syncPoint.views.values()) {
            if (view.query._queryParams.loadsAllData()) {
                return view;
            }
        }
        return null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let referenceConstructor;
    function syncTreeSetReferenceConstructor(val) {
        assert(!referenceConstructor, '__referenceConstructor has already been defined');
        referenceConstructor = val;
    }
    function syncTreeGetReferenceConstructor() {
        assert(referenceConstructor, 'Reference.ts has not been loaded');
        return referenceConstructor;
    }
    /**
     * Static tracker for next query tag.
     */
    let syncTreeNextQueryTag_ = 1;
    /**
     * SyncTree is the central class for managing event callback registration, data caching, views
     * (query processing), and event generation.  There are typically two SyncTree instances for
     * each Repo, one for the normal Firebase data, and one for the .info data.
     *
     * It has a number of responsibilities, including:
     *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
     *  - Applying and caching data changes for user set(), transaction(), and update() calls
     *    (applyUserOverwrite(), applyUserMerge()).
     *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
     *    applyServerMerge()).
     *  - Generating user-facing events for server and user changes (all of the apply* methods
     *    return the set of events that need to be raised as a result).
     *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
     *    to the correct set of paths and queries to satisfy the current set of user event
     *    callbacks (listens are started/stopped using the provided listenProvider).
     *
     * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
     * events are returned to the caller rather than raised synchronously.
     *
     */
    class SyncTree {
        /**
         * @param listenProvider_ - Used by SyncTree to start / stop listening
         *   to server data.
         */
        constructor(listenProvider_) {
            this.listenProvider_ = listenProvider_;
            /**
             * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
             */
            this.syncPointTree_ = new ImmutableTree(null);
            /**
             * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
             */
            this.pendingWriteTree_ = newWriteTree();
            this.tagToQueryMap = new Map();
            this.queryToTagMap = new Map();
        }
    }
    /**
     * Apply the data changes for a user-generated set() or transaction() call.
     *
     * @returns Events to raise.
     */
    function syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
        // Record pending write.
        writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);
        if (!visible) {
            return [];
        }
        else {
            return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));
        }
    }
    /**
     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
     *
     * @param revert - True if the given write failed and needs to be reverted
     * @returns Events to raise.
     */
    function syncTreeAckUserWrite(syncTree, writeId, revert = false) {
        const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
        const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);
        if (!needToReevaluate) {
            return [];
        }
        else {
            let affectedTree = new ImmutableTree(null);
            if (write.snap != null) {
                // overwrite
                affectedTree = affectedTree.set(newEmptyPath(), true);
            }
            else {
                each(write.children, (pathString) => {
                    affectedTree = affectedTree.set(new Path(pathString), true);
                });
            }
            return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));
        }
    }
    /**
     * Apply new server data for the specified path..
     *
     * @returns Events to raise.
     */
    function syncTreeApplyServerOverwrite(syncTree, path, newData) {
        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));
    }
    /**
     * Apply new server data to be merged in at the specified path.
     *
     * @returns Events to raise.
     */
    function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
        const changeTree = ImmutableTree.fromObject(changedChildren);
        return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));
    }
    /**
     * Apply a listen complete for a query
     *
     * @returns Events to raise.
     */
    function syncTreeApplyListenComplete(syncTree, path) {
        return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));
    }
    /**
     * Apply a listen complete for a tagged query
     *
     * @returns Events to raise.
     */
    function syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
        const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
        if (queryKey) {
            const r = syncTreeParseQueryKey_(queryKey);
            const queryPath = r.path, queryId = r.queryId;
            const relativePath = newRelativePath(queryPath, path);
            const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);
            return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
        }
        else {
            // We've already removed the query. No big deal, ignore the update
            return [];
        }
    }
    /**
     * Remove event callback(s).
     *
     * If query is the default query, we'll check all queries for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
     *
     * @param eventRegistration - If null, all callbacks are removed.
     * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
     * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no
     *  deduping needs to take place. This flag allows toggling of that behavior
     * @returns Cancel events, if cancelError was provided.
     */
    function syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {
        // Find the syncPoint first. Then deal with whether or not it has matching listeners
        const path = query._path;
        const maybeSyncPoint = syncTree.syncPointTree_.get(path);
        let cancelEvents = [];
        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
        // not loadsAllData().
        if (maybeSyncPoint &&
            (query._queryIdentifier === 'default' ||
                syncPointViewExistsForQuery(maybeSyncPoint, query))) {
            const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);
            if (syncPointIsEmpty(maybeSyncPoint)) {
                syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
            }
            const removed = removedAndEvents.removed;
            cancelEvents = removedAndEvents.events;
            if (!skipListenerDedup) {
                /**
                 * We may have just removed one of many listeners and can short-circuit this whole process
                 * We may also not have removed a default listener, in which case all of the descendant listeners should already be
                 * properly set up.
                 */
                // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
                // queryId === 'default'
                const removingDefault = -1 !==
                    removed.findIndex(query => {
                        return query._queryParams.loadsAllData();
                    });
                const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));
                if (removingDefault && !covered) {
                    const subtree = syncTree.syncPointTree_.subtree(path);
                    // There are potentially child listeners. Determine what if any listens we need to send before executing the
                    // removal
                    if (!subtree.isEmpty()) {
                        // We need to fold over our subtree and collect the listeners to send
                        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);
                        // Ok, we've collected all the listens we need. Set them up.
                        for (let i = 0; i < newViews.length; ++i) {
                            const view = newViews[i], newQuery = view.query;
                            const listener = syncTreeCreateListenerForView_(syncTree, view);
                            syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);
                        }
                    }
                    // Otherwise there's nothing below us, so nothing we need to start listening on
                }
                // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
                // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
                // Also, note that if we have a cancelError, it's already been removed at the provider level.
                if (!covered && removed.length > 0 && !cancelError) {
                    // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                    // default. Otherwise, we need to iterate through and cancel each individual query
                    if (removingDefault) {
                        // We don't tag default listeners
                        const defaultTag = null;
                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);
                    }
                    else {
                        removed.forEach((queryToRemove) => {
                            const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));
                            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);
                        });
                    }
                }
            }
            // Now, clear all of the tags we're tracking for the removed listens
            syncTreeRemoveTags_(syncTree, removed);
        }
        return cancelEvents;
    }
    /**
     * Apply new server data for the specified tagged query.
     *
     * @returns Events to raise.
     */
    function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
        const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
        if (queryKey != null) {
            const r = syncTreeParseQueryKey_(queryKey);
            const queryPath = r.path, queryId = r.queryId;
            const relativePath = newRelativePath(queryPath, path);
            const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
            return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
        }
        else {
            // Query must have been removed already
            return [];
        }
    }
    /**
     * Apply server data to be merged in for the specified tagged query.
     *
     * @returns Events to raise.
     */
    function syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
        const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
        if (queryKey) {
            const r = syncTreeParseQueryKey_(queryKey);
            const queryPath = r.path, queryId = r.queryId;
            const relativePath = newRelativePath(queryPath, path);
            const changeTree = ImmutableTree.fromObject(changedChildren);
            const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
            return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
        }
        else {
            // We've already removed the query. No big deal, ignore the update
            return [];
        }
    }
    /**
     * Add an event callback for the specified query.
     *
     * @returns Events to raise.
     */
    function syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {
        const path = query._path;
        let serverCache = null;
        let foundAncestorDefaultView = false;
        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
        // Consider optimizing this once there's a better understanding of what actual behavior will be.
        syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {
            const relativePath = newRelativePath(pathToSyncPoint, path);
            serverCache =
                serverCache || syncPointGetCompleteServerCache(sp, relativePath);
            foundAncestorDefaultView =
                foundAncestorDefaultView || syncPointHasCompleteView(sp);
        });
        let syncPoint = syncTree.syncPointTree_.get(path);
        if (!syncPoint) {
            syncPoint = new SyncPoint();
            syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
        }
        else {
            foundAncestorDefaultView =
                foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);
            serverCache =
                serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
        }
        let serverCacheComplete;
        if (serverCache != null) {
            serverCacheComplete = true;
        }
        else {
            serverCacheComplete = false;
            serverCache = ChildrenNode.EMPTY_NODE;
            const subtree = syncTree.syncPointTree_.subtree(path);
            subtree.foreachChild((childName, childSyncPoint) => {
                const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());
                if (completeCache) {
                    serverCache = serverCache.updateImmediateChild(childName, completeCache);
                }
            });
        }
        const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);
        if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {
            // We need to track a tag for this query
            const queryKey = syncTreeMakeQueryKey_(query);
            assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
            const tag = syncTreeGetNextQueryTag_();
            syncTree.queryToTagMap.set(queryKey, tag);
            syncTree.tagToQueryMap.set(tag, queryKey);
        }
        const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);
        let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);
        if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {
            const view = syncPointViewForQuery(syncPoint, query);
            events = events.concat(syncTreeSetupListener_(syncTree, query, view));
        }
        return events;
    }
    /**
     * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
     * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
     * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
     *     <incremented total> as the write is applied locally and then acknowledged at the server.
     *
     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
     *
     * @param path - The path to the data we want
     * @param writeIdsToExclude - A specific set to be excluded
     */
    function syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
        const includeHiddenSets = true;
        const writeTree = syncTree.pendingWriteTree_;
        const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {
            const relativePath = newRelativePath(pathSoFar, path);
            const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);
            if (serverCache) {
                return serverCache;
            }
        });
        return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
    }
    function syncTreeGetServerValue(syncTree, query) {
        const path = query._path;
        let serverCache = null;
        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
        // Consider optimizing this once there's a better understanding of what actual behavior will be.
        syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {
            const relativePath = newRelativePath(pathToSyncPoint, path);
            serverCache =
                serverCache || syncPointGetCompleteServerCache(sp, relativePath);
        });
        let syncPoint = syncTree.syncPointTree_.get(path);
        if (!syncPoint) {
            syncPoint = new SyncPoint();
            syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
        }
        else {
            serverCache =
                serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
        }
        const serverCacheComplete = serverCache != null;
        const serverCacheNode = serverCacheComplete
            ? new CacheNode(serverCache, true, false)
            : null;
        const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);
        const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);
        return viewGetCompleteNode(view);
    }
    /**
     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
     *
     * NOTES:
     * - Descendant SyncPoints will be visited first (since we raise events depth-first).
     *
     * - We call applyOperation() on each SyncPoint passing three things:
     *   1. A version of the Operation that has been made relative to the SyncPoint location.
     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
     *   3. A snapshot Node with cached server data, if we have it.
     *
     * - We concatenate all of the events returned by each SyncPoint and return the result.
     */
    function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
        return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, 
        /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));
    }
    /**
     * Recursive helper for applyOperationToSyncPoints_
     */
    function syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
        if (pathIsEmpty(operation.path)) {
            return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
        }
        else {
            const syncPoint = syncPointTree.get(newEmptyPath());
            // If we don't have cached server data, see if we can get it from this SyncPoint.
            if (serverCache == null && syncPoint != null) {
                serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
            }
            let events = [];
            const childName = pathGetFront(operation.path);
            const childOperation = operation.operationForChild(childName);
            const childTree = syncPointTree.children.get(childName);
            if (childTree && childOperation) {
                const childServerCache = serverCache
                    ? serverCache.getImmediateChild(childName)
                    : null;
                const childWritesCache = writeTreeRefChild(writesCache, childName);
                events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
            }
            if (syncPoint) {
                events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
            }
            return events;
        }
    }
    /**
     * Recursive helper for applyOperationToSyncPoints_
     */
    function syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
        const syncPoint = syncPointTree.get(newEmptyPath());
        // If we don't have cached server data, see if we can get it from this SyncPoint.
        if (serverCache == null && syncPoint != null) {
            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
        }
        let events = [];
        syncPointTree.children.inorderTraversal((childName, childTree) => {
            const childServerCache = serverCache
                ? serverCache.getImmediateChild(childName)
                : null;
            const childWritesCache = writeTreeRefChild(writesCache, childName);
            const childOperation = operation.operationForChild(childName);
            if (childOperation) {
                events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
            }
        });
        if (syncPoint) {
            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
        }
        return events;
    }
    function syncTreeCreateListenerForView_(syncTree, view) {
        const query = view.query;
        const tag = syncTreeTagForQuery(syncTree, query);
        return {
            hashFn: () => {
                const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;
                return cache.hash();
            },
            onComplete: (status) => {
                if (status === 'ok') {
                    if (tag) {
                        return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);
                    }
                    else {
                        return syncTreeApplyListenComplete(syncTree, query._path);
                    }
                }
                else {
                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                    const error = errorForServerCode(status, query);
                    return syncTreeRemoveEventRegistration(syncTree, query, 
                    /*eventRegistration*/ null, error);
                }
            }
        };
    }
    /**
     * Return the tag associated with the given query.
     */
    function syncTreeTagForQuery(syncTree, query) {
        const queryKey = syncTreeMakeQueryKey_(query);
        return syncTree.queryToTagMap.get(queryKey);
    }
    /**
     * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
     */
    function syncTreeMakeQueryKey_(query) {
        return query._path.toString() + '$' + query._queryIdentifier;
    }
    /**
     * Return the query associated with the given tag, if we have one
     */
    function syncTreeQueryKeyForTag_(syncTree, tag) {
        return syncTree.tagToQueryMap.get(tag);
    }
    /**
     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
     */
    function syncTreeParseQueryKey_(queryKey) {
        const splitIndex = queryKey.indexOf('$');
        assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
        return {
            queryId: queryKey.substr(splitIndex + 1),
            path: new Path(queryKey.substr(0, splitIndex))
        };
    }
    /**
     * A helper method to apply tagged operations
     */
    function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
        const syncPoint = syncTree.syncPointTree_.get(queryPath);
        assert(syncPoint, "Missing sync point for query tag that we're tracking");
        const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
        return syncPointApplyOperation(syncPoint, operation, writesCache, null);
    }
    /**
     * This collapses multiple unfiltered views into a single view, since we only need a single
     * listener for them.
     */
    function syncTreeCollectDistinctViewsForSubTree_(subtree) {
        return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {
            if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
                const completeView = syncPointGetCompleteView(maybeChildSyncPoint);
                return [completeView];
            }
            else {
                // No complete view here, flatten any deeper listens into an array
                let views = [];
                if (maybeChildSyncPoint) {
                    views = syncPointGetQueryViews(maybeChildSyncPoint);
                }
                each(childMap, (_key, childViews) => {
                    views = views.concat(childViews);
                });
                return views;
            }
        });
    }
    /**
     * Normalizes a query to a query we send the server for listening
     *
     * @returns The normalized query
     */
    function syncTreeQueryForListening_(query) {
        if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {
            // We treat queries that load all data as default queries
            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
            // from Query
            return new (syncTreeGetReferenceConstructor())(query._repo, query._path);
        }
        else {
            return query;
        }
    }
    function syncTreeRemoveTags_(syncTree, queries) {
        for (let j = 0; j < queries.length; ++j) {
            const removedQuery = queries[j];
            if (!removedQuery._queryParams.loadsAllData()) {
                // We should have a tag for this
                const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);
                const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);
                syncTree.queryToTagMap.delete(removedQueryKey);
                syncTree.tagToQueryMap.delete(removedQueryTag);
            }
        }
    }
    /**
     * Static accessor for query tags.
     */
    function syncTreeGetNextQueryTag_() {
        return syncTreeNextQueryTag_++;
    }
    /**
     * For a given new listen, manage the de-duplication of outstanding subscriptions.
     *
     * @returns This method can return events to support synchronous data sources
     */
    function syncTreeSetupListener_(syncTree, query, view) {
        const path = query._path;
        const tag = syncTreeTagForQuery(syncTree, query);
        const listener = syncTreeCreateListenerForView_(syncTree, view);
        const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);
        const subtree = syncTree.syncPointTree_.subtree(path);
        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
        // may need to shadow other listens as well.
        if (tag) {
            assert(!syncPointHasCompleteView(subtree.value), "If we're adding a query, it shouldn't be shadowed");
        }
        else {
            // Shadow everything at or below this location, this is a default listener.
            const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {
                if (!pathIsEmpty(relativePath) &&
                    maybeChildSyncPoint &&
                    syncPointHasCompleteView(maybeChildSyncPoint)) {
                    return [syncPointGetCompleteView(maybeChildSyncPoint).query];
                }
                else {
                    // No default listener here, flatten any deeper queries into an array
                    let queries = [];
                    if (maybeChildSyncPoint) {
                        queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));
                    }
                    each(childMap, (_key, childQueries) => {
                        queries = queries.concat(childQueries);
                    });
                    return queries;
                }
            });
            for (let i = 0; i < queriesToStop.length; ++i) {
                const queryToStop = queriesToStop[i];
                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));
            }
        }
        return events;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ExistingValueProvider {
        constructor(node_) {
            this.node_ = node_;
        }
        getImmediateChild(childName) {
            const child = this.node_.getImmediateChild(childName);
            return new ExistingValueProvider(child);
        }
        node() {
            return this.node_;
        }
    }
    class DeferredValueProvider {
        constructor(syncTree, path) {
            this.syncTree_ = syncTree;
            this.path_ = path;
        }
        getImmediateChild(childName) {
            const childPath = pathChild(this.path_, childName);
            return new DeferredValueProvider(this.syncTree_, childPath);
        }
        node() {
            return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
        }
    }
    /**
     * Generate placeholders for deferred values.
     */
    const generateWithValues = function (values) {
        values = values || {};
        values['timestamp'] = values['timestamp'] || new Date().getTime();
        return values;
    };
    /**
     * Value to use when firing local events. When writing server values, fire
     * local events with an approximate value, otherwise return value as-is.
     */
    const resolveDeferredLeafValue = function (value, existingVal, serverValues) {
        if (!value || typeof value !== 'object') {
            return value;
        }
        assert('.sv' in value, 'Unexpected leaf node or priority contents');
        if (typeof value['.sv'] === 'string') {
            return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
        }
        else if (typeof value['.sv'] === 'object') {
            return resolveComplexDeferredValue(value['.sv'], existingVal);
        }
        else {
            assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
        }
    };
    const resolveScalarDeferredValue = function (op, existing, serverValues) {
        switch (op) {
            case 'timestamp':
                return serverValues['timestamp'];
            default:
                assert(false, 'Unexpected server value: ' + op);
        }
    };
    const resolveComplexDeferredValue = function (op, existing, unused) {
        if (!op.hasOwnProperty('increment')) {
            assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
        }
        const delta = op['increment'];
        if (typeof delta !== 'number') {
            assert(false, 'Unexpected increment value: ' + delta);
        }
        const existingNode = existing.node();
        assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
        // Incrementing a non-number sets the value to the incremented amount
        if (!existingNode.isLeafNode()) {
            return delta;
        }
        const leaf = existingNode;
        const existingVal = leaf.getValue();
        if (typeof existingVal !== 'number') {
            return delta;
        }
        // No need to do over/underflow arithmetic here because JS only handles floats under the covers
        return existingVal + delta;
    };
    /**
     * Recursively replace all deferred values and priorities in the tree with the
     * specified generated replacement values.
     * @param path - path to which write is relative
     * @param node - new data written at path
     * @param syncTree - current data
     */
    const resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
        return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
    };
    /**
     * Recursively replace all deferred values and priorities in the node with the
     * specified generated replacement values.  If there are no server values in the node,
     * it'll be returned as-is.
     */
    const resolveDeferredValueSnapshot = function (node, existing, serverValues) {
        return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
    };
    function resolveDeferredValue(node, existingVal, serverValues) {
        const rawPri = node.getPriority().val();
        const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
        let newNode;
        if (node.isLeafNode()) {
            const leafNode = node;
            const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
            if (value !== leafNode.getValue() ||
                priority !== leafNode.getPriority().val()) {
                return new LeafNode(value, nodeFromJSON(priority));
            }
            else {
                return node;
            }
        }
        else {
            const childrenNode = node;
            newNode = childrenNode;
            if (priority !== childrenNode.getPriority().val()) {
                newNode = newNode.updatePriority(new LeafNode(priority));
            }
            childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
                const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
                if (newChildNode !== childNode) {
                    newNode = newNode.updateImmediateChild(childName, newChildNode);
                }
            });
            return newNode;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A light-weight tree, traversable by path.  Nodes can have both values and children.
     * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
     * children.
     */
    class Tree {
        /**
         * @param name - Optional name of the node.
         * @param parent - Optional parent node.
         * @param node - Optional node to wrap.
         */
        constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {
            this.name = name;
            this.parent = parent;
            this.node = node;
        }
    }
    /**
     * Returns a sub-Tree for the given path.
     *
     * @param pathObj - Path to look up.
     * @returns Tree for path.
     */
    function treeSubTree(tree, pathObj) {
        // TODO: Require pathObj to be Path?
        let path = pathObj instanceof Path ? pathObj : new Path(pathObj);
        let child = tree, next = pathGetFront(path);
        while (next !== null) {
            const childNode = safeGet(child.node.children, next) || {
                children: {},
                childCount: 0
            };
            child = new Tree(next, child, childNode);
            path = pathPopFront(path);
            next = pathGetFront(path);
        }
        return child;
    }
    /**
     * Returns the data associated with this tree node.
     *
     * @returns The data or null if no data exists.
     */
    function treeGetValue(tree) {
        return tree.node.value;
    }
    /**
     * Sets data to this tree node.
     *
     * @param value - Value to set.
     */
    function treeSetValue(tree, value) {
        tree.node.value = value;
        treeUpdateParents(tree);
    }
    /**
     * @returns Whether the tree has any children.
     */
    function treeHasChildren(tree) {
        return tree.node.childCount > 0;
    }
    /**
     * @returns Whether the tree is empty (no value or children).
     */
    function treeIsEmpty(tree) {
        return treeGetValue(tree) === undefined && !treeHasChildren(tree);
    }
    /**
     * Calls action for each child of this tree node.
     *
     * @param action - Action to be called for each child.
     */
    function treeForEachChild(tree, action) {
        each(tree.node.children, (child, childTree) => {
            action(new Tree(child, tree, childTree));
        });
    }
    /**
     * Does a depth-first traversal of this node's descendants, calling action for each one.
     *
     * @param action - Action to be called for each child.
     * @param includeSelf - Whether to call action on this node as well. Defaults to
     *   false.
     * @param childrenFirst - Whether to call action on children before calling it on
     *   parent.
     */
    function treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
        if (includeSelf && true) {
            action(tree);
        }
        treeForEachChild(tree, child => {
            treeForEachDescendant(child, action, true);
        });
    }
    /**
     * Calls action on each ancestor node.
     *
     * @param action - Action to be called on each parent; return
     *   true to abort.
     * @param includeSelf - Whether to call action on this node as well.
     * @returns true if the action callback returned true.
     */
    function treeForEachAncestor(tree, action, includeSelf) {
        let node = tree.parent;
        while (node !== null) {
            if (action(node)) {
                return true;
            }
            node = node.parent;
        }
        return false;
    }
    /**
     * @returns The path of this tree node, as a Path.
     */
    function treeGetPath(tree) {
        return new Path(tree.parent === null
            ? tree.name
            : treeGetPath(tree.parent) + '/' + tree.name);
    }
    /**
     * Adds or removes this child from its parent based on whether it's empty or not.
     */
    function treeUpdateParents(tree) {
        if (tree.parent !== null) {
            treeUpdateChild(tree.parent, tree.name, tree);
        }
    }
    /**
     * Adds or removes the passed child to this tree node, depending on whether it's empty.
     *
     * @param childName - The name of the child to update.
     * @param child - The child to update.
     */
    function treeUpdateChild(tree, childName, child) {
        const childEmpty = treeIsEmpty(child);
        const childExists = contains(tree.node.children, childName);
        if (childEmpty && childExists) {
            delete tree.node.children[childName];
            tree.node.childCount--;
            treeUpdateParents(tree);
        }
        else if (!childEmpty && !childExists) {
            tree.node.children[childName] = child.node;
            tree.node.childCount++;
            treeUpdateParents(tree);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * True for invalid Firebase keys
     */
    const INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
    /**
     * True for invalid Firebase paths.
     * Allows '/' in paths.
     */
    const INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
    /**
     * Maximum number of characters to allow in leaf value
     */
    const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
    const isValidKey = function (key) {
        return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
    };
    const isValidPathString = function (pathString) {
        return (typeof pathString === 'string' &&
            pathString.length !== 0 &&
            !INVALID_PATH_REGEX_.test(pathString));
    };
    const isValidRootPathString = function (pathString) {
        if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }
        return isValidPathString(pathString);
    };
    /**
     * Pre-validate a datum passed as an argument to Firebase function.
     */
    const validateFirebaseDataArg = function (fnName, value, path, optional) {
        validateFirebaseData(errorPrefix(fnName, 'value'), value, path);
    };
    /**
     * Validate a data object client-side before sending to server.
     */
    const validateFirebaseData = function (errorPrefix, data, path_) {
        const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
        if (data === undefined) {
            throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));
        }
        if (typeof data === 'function') {
            throw new Error(errorPrefix +
                'contains a function ' +
                validationPathToErrorString(path) +
                ' with contents = ' +
                data.toString());
        }
        if (isInvalidJSONNumber(data)) {
            throw new Error(errorPrefix +
                'contains ' +
                data.toString() +
                ' ' +
                validationPathToErrorString(path));
        }
        // Check max leaf size, but try to avoid the utf8 conversion if we can.
        if (typeof data === 'string' &&
            data.length > MAX_LEAF_SIZE_ / 3 &&
            stringLength(data) > MAX_LEAF_SIZE_) {
            throw new Error(errorPrefix +
                'contains a string greater than ' +
                MAX_LEAF_SIZE_ +
                ' utf8 bytes ' +
                validationPathToErrorString(path) +
                " ('" +
                data.substring(0, 50) +
                "...')");
        }
        // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
        // to save extra walking of large objects.
        if (data && typeof data === 'object') {
            let hasDotValue = false;
            let hasActualChild = false;
            each(data, (key, value) => {
                if (key === '.value') {
                    hasDotValue = true;
                }
                else if (key !== '.priority' && key !== '.sv') {
                    hasActualChild = true;
                    if (!isValidKey(key)) {
                        throw new Error(errorPrefix +
                            ' contains an invalid key (' +
                            key +
                            ') ' +
                            validationPathToErrorString(path) +
                            '.  Keys must be non-empty strings ' +
                            'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                    }
                }
                validationPathPush(path, key);
                validateFirebaseData(errorPrefix, value, path);
                validationPathPop(path);
            });
            if (hasDotValue && hasActualChild) {
                throw new Error(errorPrefix +
                    ' contains ".value" child ' +
                    validationPathToErrorString(path) +
                    ' in addition to actual children.');
            }
        }
    };
    /**
     * @internal
     */
    const validatePathString = function (fnName, argumentName, pathString, optional) {
        if (!isValidPathString(pathString)) {
            throw new Error(errorPrefix(fnName, argumentName) +
                'was an invalid path = "' +
                pathString +
                '". Paths must be non-empty strings and ' +
                'can\'t contain ".", "#", "$", "[", or "]"');
        }
    };
    const validateRootPathString = function (fnName, argumentName, pathString, optional) {
        if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }
        validatePathString(fnName, argumentName, pathString);
    };
    /**
     * @internal
     */
    const validateWritablePath = function (fnName, path) {
        if (pathGetFront(path) === '.info') {
            throw new Error(fnName + " failed = Can't modify data under /.info/");
        }
    };
    const validateUrl = function (fnName, parsedUrl) {
        // TODO = Validate server better.
        const pathString = parsedUrl.path.toString();
        if (!(typeof parsedUrl.repoInfo.host === 'string') ||
            parsedUrl.repoInfo.host.length === 0 ||
            (!isValidKey(parsedUrl.repoInfo.namespace) &&
                parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
            (pathString.length !== 0 && !isValidRootPathString(pathString))) {
            throw new Error(errorPrefix(fnName, 'url') +
                'must be a valid firebase URL and ' +
                'the path can\'t contain ".", "#", "$", "[", or "]".');
        }
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The event queue serves a few purposes:
     * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
     *    events being queued.
     * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
     *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
     *    left off, ensuring that the events are still raised synchronously and in order.
     * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
     *    events are raised synchronously.
     *
     * NOTE: This can all go away if/when we move to async events.
     *
     */
    class EventQueue {
        constructor() {
            this.eventLists_ = [];
            /**
             * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
             */
            this.recursionDepth_ = 0;
        }
    }
    /**
     * @param eventDataList - The new events to queue.
     */
    function eventQueueQueueEvents(eventQueue, eventDataList) {
        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
        let currList = null;
        for (let i = 0; i < eventDataList.length; i++) {
            const data = eventDataList[i];
            const path = data.getPath();
            if (currList !== null && !pathEquals(path, currList.path)) {
                eventQueue.eventLists_.push(currList);
                currList = null;
            }
            if (currList === null) {
                currList = { events: [], path };
            }
            currList.events.push(data);
        }
        if (currList) {
            eventQueue.eventLists_.push(currList);
        }
    }
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones)
     * for the specified path.
     *
     * It is assumed that the new events are all for the specified path.
     *
     * @param path - The path to raise events for.
     * @param eventDataList - The new events to raise.
     */
    function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
        eventQueueQueueEvents(eventQueue, eventDataList);
        eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));
    }
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones) for
     * locations related to the specified change path (i.e. all ancestors and descendants).
     *
     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
     *
     * @param changedPath - The path to raise events for.
     * @param eventDataList - The events to raise
     */
    function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
        eventQueueQueueEvents(eventQueue, eventDataList);
        eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||
            pathContains(changedPath, eventPath));
    }
    function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
        eventQueue.recursionDepth_++;
        let sentAll = true;
        for (let i = 0; i < eventQueue.eventLists_.length; i++) {
            const eventList = eventQueue.eventLists_[i];
            if (eventList) {
                const eventPath = eventList.path;
                if (predicate(eventPath)) {
                    eventListRaise(eventQueue.eventLists_[i]);
                    eventQueue.eventLists_[i] = null;
                }
                else {
                    sentAll = false;
                }
            }
        }
        if (sentAll) {
            eventQueue.eventLists_ = [];
        }
        eventQueue.recursionDepth_--;
    }
    /**
     * Iterates through the list and raises each event
     */
    function eventListRaise(eventList) {
        for (let i = 0; i < eventList.events.length; i++) {
            const eventData = eventList.events[i];
            if (eventData !== null) {
                eventList.events[i] = null;
                const eventFn = eventData.getEventRunner();
                if (logger) {
                    log('event: ' + eventData.toString());
                }
                exceptionGuard(eventFn);
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const INTERRUPT_REASON = 'repo_interrupt';
    /**
     * If a transaction does not succeed after 25 retries, we abort it. Among other
     * things this ensure that if there's ever a bug causing a mismatch between
     * client / server hashes for some data, we won't retry indefinitely.
     */
    const MAX_TRANSACTION_RETRIES = 25;
    /**
     * A connection to a single data repository.
     */
    class Repo {
        constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {
            this.repoInfo_ = repoInfo_;
            this.forceRestClient_ = forceRestClient_;
            this.authTokenProvider_ = authTokenProvider_;
            this.appCheckProvider_ = appCheckProvider_;
            this.dataUpdateCount = 0;
            this.statsListener_ = null;
            this.eventQueue_ = new EventQueue();
            this.nextWriteId_ = 1;
            this.interceptServerDataCallback_ = null;
            /** A list of data pieces and paths to be set when this client disconnects. */
            this.onDisconnect_ = newSparseSnapshotTree();
            /** Stores queues of outstanding transactions for Firebase locations. */
            this.transactionQueueTree_ = new Tree();
            // TODO: This should be @private but it's used by test_access.js and internal.js
            this.persistentConnection_ = null;
            // This key is intentionally not updated if RepoInfo is later changed or replaced
            this.key = this.repoInfo_.toURLString();
        }
        /**
         * @returns The URL corresponding to the root of this Firebase.
         */
        toString() {
            return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
        }
    }
    function repoStart(repo, appId, authOverride) {
        repo.stats_ = statsManagerGetCollection(repo.repoInfo_);
        if (repo.forceRestClient_ || beingCrawled()) {
            repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {
                repoOnDataUpdate(repo, pathString, data, isMerge, tag);
            }, repo.authTokenProvider_, repo.appCheckProvider_);
            // Minor hack: Fire onConnect immediately, since there's no actual connection.
            setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);
        }
        else {
            // Validate authOverride
            if (typeof authOverride !== 'undefined' && authOverride !== null) {
                if (typeof authOverride !== 'object') {
                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');
                }
                try {
                    stringify(authOverride);
                }
                catch (e) {
                    throw new Error('Invalid authOverride provided: ' + e);
                }
            }
            repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {
                repoOnDataUpdate(repo, pathString, data, isMerge, tag);
            }, (connectStatus) => {
                repoOnConnectStatus(repo, connectStatus);
            }, (updates) => {
                repoOnServerInfoUpdate(repo, updates);
            }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
            repo.server_ = repo.persistentConnection_;
        }
        repo.authTokenProvider_.addTokenChangeListener(token => {
            repo.server_.refreshAuthToken(token);
        });
        repo.appCheckProvider_.addTokenChangeListener(result => {
            repo.server_.refreshAppCheckToken(result.token);
        });
        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
        repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));
        // Used for .info.
        repo.infoData_ = new SnapshotHolder();
        repo.infoSyncTree_ = new SyncTree({
            startListening: (query, tag, currentHashFn, onComplete) => {
                let infoEvents = [];
                const node = repo.infoData_.getNode(query._path);
                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
                // on initial data...
                if (!node.isEmpty()) {
                    infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);
                    setTimeout(() => {
                        onComplete('ok');
                    }, 0);
                }
                return infoEvents;
            },
            stopListening: () => { }
        });
        repoUpdateInfo(repo, 'connected', false);
        repo.serverSyncTree_ = new SyncTree({
            startListening: (query, tag, currentHashFn, onComplete) => {
                repo.server_.listen(query, currentHashFn, tag, (status, data) => {
                    const events = onComplete(status, data);
                    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
                });
                // No synchronous events for network-backed sync trees
                return [];
            },
            stopListening: (query, tag) => {
                repo.server_.unlisten(query, tag);
            }
        });
    }
    /**
     * @returns The time in milliseconds, taking the server offset into account if we have one.
     */
    function repoServerTime(repo) {
        const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));
        const offset = offsetNode.val() || 0;
        return new Date().getTime() + offset;
    }
    /**
     * Generate ServerValues using some variables from the repo object.
     */
    function repoGenerateServerValues(repo) {
        return generateWithValues({
            timestamp: repoServerTime(repo)
        });
    }
    /**
     * Called by realtime when we get new messages from the server.
     */
    function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
        // For testing.
        repo.dataUpdateCount++;
        const path = new Path(pathString);
        data = repo.interceptServerDataCallback_
            ? repo.interceptServerDataCallback_(pathString, data)
            : data;
        let events = [];
        if (tag) {
            if (isMerge) {
                const taggedChildren = map(data, (raw) => nodeFromJSON(raw));
                events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
            }
            else {
                const taggedSnap = nodeFromJSON(data);
                events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
            }
        }
        else if (isMerge) {
            const changedChildren = map(data, (raw) => nodeFromJSON(raw));
            events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
        }
        else {
            const snap = nodeFromJSON(data);
            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
        }
        let affectedPath = path;
        if (events.length > 0) {
            // Since we have a listener outstanding for each transaction, receiving any events
            // is a proxy for some change having occurred.
            affectedPath = repoRerunTransactions(repo, path);
        }
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
    }
    function repoOnConnectStatus(repo, connectStatus) {
        repoUpdateInfo(repo, 'connected', connectStatus);
        if (connectStatus === false) {
            repoRunOnDisconnectEvents(repo);
        }
    }
    function repoOnServerInfoUpdate(repo, updates) {
        each(updates, (key, value) => {
            repoUpdateInfo(repo, key, value);
        });
    }
    function repoUpdateInfo(repo, pathString, value) {
        const path = new Path('/.info/' + pathString);
        const newNode = nodeFromJSON(value);
        repo.infoData_.updateSnapshot(path, newNode);
        const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
    }
    function repoGetNextWriteId(repo) {
        return repo.nextWriteId_++;
    }
    /**
     * The purpose of `getValue` is to return the latest known value
     * satisfying `query`.
     *
     * This method will first check for in-memory cached values
     * belonging to active listeners. If they are found, such values
     * are considered to be the most up-to-date.
     *
     * If the client is not connected, this method will wait until the
     *  repo has established a connection and then request the value for `query`.
     * If the client is not able to retrieve the query result for another reason,
     * it reports an error.
     *
     * @param query - The query to surface a value for.
     */
    function repoGetValue(repo, query, eventRegistration) {
        // Only active queries are cached. There is no persisted cache.
        const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);
        if (cached != null) {
            return Promise.resolve(cached);
        }
        return repo.server_.get(query).then(payload => {
            const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());
            /**
             * Below we simulate the actions of an `onlyOnce` `onValue()` event where:
             * Add an event registration,
             * Update data at the path,
             * Raise any events,
             * Cleanup the SyncTree
             */
            syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);
            let events;
            if (query._queryParams.loadsAllData()) {
                events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);
            }
            else {
                const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);
                events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);
            }
            /*
             * We need to raise events in the scenario where `get()` is called at a parent path, and
             * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting
             * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree
             * and its corresponding serverCache, including the child location where `onValue` is called. Then,
             * `onValue` will receive the event from the server, but look at the syncTree and see that the data received
             * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.
             * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and
             * ensure the corresponding child events will get fired.
             */
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
            syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);
            return node;
        }, err => {
            repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);
            return Promise.reject(new Error(err));
        });
    }
    function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
        repoLog(repo, 'set', {
            path: path.toString(),
            value: newVal,
            priority: newPriority
        });
        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
        // (b) store unresolved paths on JSON parse
        const serverValues = repoGenerateServerValues(repo);
        const newNodeUnresolved = nodeFromJSON(newVal, newPriority);
        const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);
        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
        const writeId = repoGetNextWriteId(repo);
        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);
        eventQueueQueueEvents(repo.eventQueue_, events);
        repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {
            const success = status === 'ok';
            if (!success) {
                warn('set at ' + path + ' failed: ' + status);
            }
            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
        });
        const affectedPath = repoAbortTransactions(repo, path);
        repoRerunTransactions(repo, affectedPath);
        // We queued the events above, so just flush the queue here
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
    }
    /**
     * Applies all of the changes stored up in the onDisconnect_ tree.
     */
    function repoRunOnDisconnectEvents(repo) {
        repoLog(repo, 'onDisconnectEvents');
        const serverValues = repoGenerateServerValues(repo);
        const resolvedOnDisconnectTree = newSparseSnapshotTree();
        sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {
            const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
            sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
        });
        let events = [];
        sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {
            events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
            const affectedPath = repoAbortTransactions(repo, path);
            repoRerunTransactions(repo, affectedPath);
        });
        repo.onDisconnect_ = newSparseSnapshotTree();
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
    }
    function repoAddEventCallbackForQuery(repo, query, eventRegistration) {
        let events;
        if (pathGetFront(query._path) === '.info') {
            events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);
        }
        else {
            events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);
        }
        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
    }
    function repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {
        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
        // a little bit by handling the return values anyways.
        let events;
        if (pathGetFront(query._path) === '.info') {
            events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);
        }
        else {
            events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);
        }
        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
    }
    function repoInterrupt(repo) {
        if (repo.persistentConnection_) {
            repo.persistentConnection_.interrupt(INTERRUPT_REASON);
        }
    }
    function repoLog(repo, ...varArgs) {
        let prefix = '';
        if (repo.persistentConnection_) {
            prefix = repo.persistentConnection_.id + ':';
        }
        log(prefix, ...varArgs);
    }
    function repoCallOnCompleteCallback(repo, callback, status, errorReason) {
        if (callback) {
            exceptionGuard(() => {
                if (status === 'ok') {
                    callback(null);
                }
                else {
                    const code = (status || 'error').toUpperCase();
                    let message = code;
                    if (errorReason) {
                        message += ': ' + errorReason;
                    }
                    const error = new Error(message);
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    error.code = code;
                    callback(error);
                }
            });
        }
    }
    /**
     * @param excludeSets - A specific set to exclude
     */
    function repoGetLatestState(repo, path, excludeSets) {
        return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||
            ChildrenNode.EMPTY_NODE);
    }
    /**
     * Sends any already-run transactions that aren't waiting for outstanding
     * transactions to complete.
     *
     * Externally it's called with no arguments, but it calls itself recursively
     * with a particular transactionQueueTree node to recurse through the tree.
     *
     * @param node - transactionQueueTree node to start at.
     */
    function repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {
        // Before recursing, make sure any completed transactions are removed.
        if (!node) {
            repoPruneCompletedTransactionsBelowNode(repo, node);
        }
        if (treeGetValue(node)) {
            const queue = repoBuildTransactionQueue(repo, node);
            assert(queue.length > 0, 'Sending zero length transaction queue');
            const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);
            // If they're all run (and not sent), we can send them.  Else, we must wait.
            if (allRun) {
                repoSendTransactionQueue(repo, treeGetPath(node), queue);
            }
        }
        else if (treeHasChildren(node)) {
            treeForEachChild(node, childNode => {
                repoSendReadyTransactions(repo, childNode);
            });
        }
    }
    /**
     * Given a list of run transactions, send them to the server and then handle
     * the result (success or failure).
     *
     * @param path - The location of the queue.
     * @param queue - Queue of transactions under the specified location.
     */
    function repoSendTransactionQueue(repo, path, queue) {
        // Mark transactions as sent and increment retry count!
        const setsToIgnore = queue.map(txn => {
            return txn.currentWriteId;
        });
        const latestState = repoGetLatestState(repo, path, setsToIgnore);
        let snapToSend = latestState;
        const latestHash = latestState.hash();
        for (let i = 0; i < queue.length; i++) {
            const txn = queue[i];
            assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');
            txn.status = 1 /* TransactionStatus.SENT */;
            txn.retryCount++;
            const relativePath = newRelativePath(path, txn.path);
            // If we've gotten to this point, the output snapshot must be defined.
            snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);
        }
        const dataToSend = snapToSend.val(true);
        const pathToSend = path;
        // Send the put.
        repo.server_.put(pathToSend.toString(), dataToSend, (status) => {
            repoLog(repo, 'transaction put response', {
                path: pathToSend.toString(),
                status
            });
            let events = [];
            if (status === 'ok') {
                // Queue up the callbacks and fire them after cleaning up all of our
                // transaction state, since the callback could trigger more
                // transactions or sets.
                const callbacks = [];
                for (let i = 0; i < queue.length; i++) {
                    queue[i].status = 2 /* TransactionStatus.COMPLETED */;
                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));
                    if (queue[i].onComplete) {
                        // We never unset the output snapshot, and given that this
                        // transaction is complete, it should be set
                        callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));
                    }
                    queue[i].unwatcher();
                }
                // Now remove the completed transactions.
                repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));
                // There may be pending transactions that we can now send.
                repoSendReadyTransactions(repo, repo.transactionQueueTree_);
                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
                // Finally, trigger onComplete callbacks.
                for (let i = 0; i < callbacks.length; i++) {
                    exceptionGuard(callbacks[i]);
                }
            }
            else {
                // transactions are no longer sent.  Update their status appropriately.
                if (status === 'datastale') {
                    for (let i = 0; i < queue.length; i++) {
                        if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {
                            queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;
                        }
                        else {
                            queue[i].status = 0 /* TransactionStatus.RUN */;
                        }
                    }
                }
                else {
                    warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                    for (let i = 0; i < queue.length; i++) {
                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;
                        queue[i].abortReason = status;
                    }
                }
                repoRerunTransactions(repo, path);
            }
        }, latestHash);
    }
    /**
     * Finds all transactions dependent on the data at changedPath and reruns them.
     *
     * Should be called any time cached data changes.
     *
     * Return the highest path that was affected by rerunning transactions. This
     * is the path at which events need to be raised for.
     *
     * @param changedPath - The path in mergedData that changed.
     * @returns The rootmost path that was affected by rerunning transactions.
     */
    function repoRerunTransactions(repo, changedPath) {
        const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
        const path = treeGetPath(rootMostTransactionNode);
        const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);
        repoRerunTransactionQueue(repo, queue, path);
        return path;
    }
    /**
     * Does all the work of rerunning transactions (as well as cleans up aborted
     * transactions and whatnot).
     *
     * @param queue - The queue of transactions to run.
     * @param path - The path the queue is for.
     */
    function repoRerunTransactionQueue(repo, queue, path) {
        if (queue.length === 0) {
            return; // Nothing to do!
        }
        // Queue up the callbacks and fire them after cleaning up all of our
        // transaction state, since the callback could trigger more transactions or
        // sets.
        const callbacks = [];
        let events = [];
        // Ignore all of the sets we're going to re-run.
        const txnsToRerun = queue.filter(q => {
            return q.status === 0 /* TransactionStatus.RUN */;
        });
        const setsToIgnore = txnsToRerun.map(q => {
            return q.currentWriteId;
        });
        for (let i = 0; i < queue.length; i++) {
            const transaction = queue[i];
            const relativePath = newRelativePath(path, transaction.path);
            let abortTransaction = false, abortReason;
            assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
            if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {
                abortTransaction = true;
                abortReason = transaction.abortReason;
                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
            }
            else if (transaction.status === 0 /* TransactionStatus.RUN */) {
                if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
                    abortTransaction = true;
                    abortReason = 'maxretry';
                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
                }
                else {
                    // This code reruns a transaction
                    const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
                    transaction.currentInputSnapshot = currentNode;
                    const newData = queue[i].update(currentNode.val());
                    if (newData !== undefined) {
                        validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                        let newDataNode = nodeFromJSON(newData);
                        const hasExplicitPriority = typeof newData === 'object' &&
                            newData != null &&
                            contains(newData, '.priority');
                        if (!hasExplicitPriority) {
                            // Keep the old priority if there wasn't a priority explicitly specified.
                            newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                        }
                        const oldWriteId = transaction.currentWriteId;
                        const serverValues = repoGenerateServerValues(repo);
                        const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                        transaction.currentOutputSnapshotRaw = newDataNode;
                        transaction.currentOutputSnapshotResolved = newNodeResolved;
                        transaction.currentWriteId = repoGetNextWriteId(repo);
                        // Mutates setsToIgnore in place
                        setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                        events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
                    }
                    else {
                        abortTransaction = true;
                        abortReason = 'nodata';
                        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
                    }
                }
            }
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
            events = [];
            if (abortTransaction) {
                // Abort.
                queue[i].status = 2 /* TransactionStatus.COMPLETED */;
                // Removing a listener can trigger pruning which can muck with
                // mergedData/visibleData (as it prunes data). So defer the unwatcher
                // until we're done.
                (function (unwatcher) {
                    setTimeout(unwatcher, Math.floor(0));
                })(queue[i].unwatcher);
                if (queue[i].onComplete) {
                    if (abortReason === 'nodata') {
                        callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));
                    }
                    else {
                        callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));
                    }
                }
            }
        }
        // Clean up completed transactions.
        repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
        // Now fire callbacks, now that we're in a good, known state.
        for (let i = 0; i < callbacks.length; i++) {
            exceptionGuard(callbacks[i]);
        }
        // Try to send the transaction result to the server.
        repoSendReadyTransactions(repo, repo.transactionQueueTree_);
    }
    /**
     * Returns the rootmost ancestor node of the specified path that has a pending
     * transaction on it, or just returns the node for the given path if there are
     * no pending transactions on any ancestor.
     *
     * @param path - The location to start at.
     * @returns The rootmost node with a transaction.
     */
    function repoGetAncestorTransactionNode(repo, path) {
        let front;
        // Start at the root and walk deeper into the tree towards path until we
        // find a node with pending transactions.
        let transactionNode = repo.transactionQueueTree_;
        front = pathGetFront(path);
        while (front !== null && treeGetValue(transactionNode) === undefined) {
            transactionNode = treeSubTree(transactionNode, front);
            path = pathPopFront(path);
            front = pathGetFront(path);
        }
        return transactionNode;
    }
    /**
     * Builds the queue of all transactions at or below the specified
     * transactionNode.
     *
     * @param transactionNode
     * @returns The generated queue.
     */
    function repoBuildTransactionQueue(repo, transactionNode) {
        // Walk any child transaction queues and aggregate them into a single queue.
        const transactionQueue = [];
        repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
        // Sort them by the order the transactions were created.
        transactionQueue.sort((a, b) => a.order - b.order);
        return transactionQueue;
    }
    function repoAggregateTransactionQueuesForNode(repo, node, queue) {
        const nodeQueue = treeGetValue(node);
        if (nodeQueue) {
            for (let i = 0; i < nodeQueue.length; i++) {
                queue.push(nodeQueue[i]);
            }
        }
        treeForEachChild(node, child => {
            repoAggregateTransactionQueuesForNode(repo, child, queue);
        });
    }
    /**
     * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
     */
    function repoPruneCompletedTransactionsBelowNode(repo, node) {
        const queue = treeGetValue(node);
        if (queue) {
            let to = 0;
            for (let from = 0; from < queue.length; from++) {
                if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {
                    queue[to] = queue[from];
                    to++;
                }
            }
            queue.length = to;
            treeSetValue(node, queue.length > 0 ? queue : undefined);
        }
        treeForEachChild(node, childNode => {
            repoPruneCompletedTransactionsBelowNode(repo, childNode);
        });
    }
    /**
     * Aborts all transactions on ancestors or descendants of the specified path.
     * Called when doing a set() or update() since we consider them incompatible
     * with transactions.
     *
     * @param path - Path for which we want to abort related transactions.
     */
    function repoAbortTransactions(repo, path) {
        const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));
        const transactionNode = treeSubTree(repo.transactionQueueTree_, path);
        treeForEachAncestor(transactionNode, (node) => {
            repoAbortTransactionsOnNode(repo, node);
        });
        repoAbortTransactionsOnNode(repo, transactionNode);
        treeForEachDescendant(transactionNode, (node) => {
            repoAbortTransactionsOnNode(repo, node);
        });
        return affectedPath;
    }
    /**
     * Abort transactions stored in this transaction queue node.
     *
     * @param node - Node to abort transactions for.
     */
    function repoAbortTransactionsOnNode(repo, node) {
        const queue = treeGetValue(node);
        if (queue) {
            // Queue up the callbacks and fire them after cleaning up all of our
            // transaction state, since the callback could trigger more transactions
            // or sets.
            const callbacks = [];
            // Go through queue.  Any already-sent transactions must be marked for
            // abort, while the unsent ones can be immediately aborted and removed.
            let events = [];
            let lastSent = -1;
            for (let i = 0; i < queue.length; i++) {
                if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;
                else if (queue[i].status === 1 /* TransactionStatus.SENT */) {
                    assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                    lastSent = i;
                    // Mark transaction for abort when it comes back.
                    queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;
                    queue[i].abortReason = 'set';
                }
                else {
                    assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');
                    // We can abort it immediately.
                    queue[i].unwatcher();
                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));
                    if (queue[i].onComplete) {
                        callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));
                    }
                }
            }
            if (lastSent === -1) {
                // We're not waiting for any sent transactions.  We can clear the queue.
                treeSetValue(node, undefined);
            }
            else {
                // Remove the transactions we aborted.
                queue.length = lastSent + 1;
            }
            // Now fire the callbacks.
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);
            for (let i = 0; i < callbacks.length; i++) {
                exceptionGuard(callbacks[i]);
            }
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function decodePath(pathString) {
        let pathStringDecoded = '';
        const pieces = pathString.split('/');
        for (let i = 0; i < pieces.length; i++) {
            if (pieces[i].length > 0) {
                let piece = pieces[i];
                try {
                    piece = decodeURIComponent(piece.replace(/\+/g, ' '));
                }
                catch (e) { }
                pathStringDecoded += '/' + piece;
            }
        }
        return pathStringDecoded;
    }
    /**
     * @returns key value hash
     */
    function decodeQuery(queryString) {
        const results = {};
        if (queryString.charAt(0) === '?') {
            queryString = queryString.substring(1);
        }
        for (const segment of queryString.split('&')) {
            if (segment.length === 0) {
                continue;
            }
            const kv = segment.split('=');
            if (kv.length === 2) {
                results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
            }
            else {
                warn(`Invalid query segment '${segment}' in query '${queryString}'`);
            }
        }
        return results;
    }
    const parseRepoInfo = function (dataURL, nodeAdmin) {
        const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
        if (parsedUrl.domain === 'firebase.com') {
            fatal(parsedUrl.host +
                ' is no longer supported. ' +
                'Please use <YOUR FIREBASE>.firebaseio.com instead');
        }
        // Catch common error of uninitialized namespace value.
        if ((!namespace || namespace === 'undefined') &&
            parsedUrl.domain !== 'localhost') {
            fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
        }
        if (!parsedUrl.secure) {
            warnIfPageIsSecure();
        }
        const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
        return {
            repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, 
            /*persistenceKey=*/ '', 
            /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
            path: new Path(parsedUrl.pathString)
        };
    };
    const parseDatabaseURL = function (dataURL) {
        // Default to empty strings in the event of a malformed string.
        let host = '', domain = '', subdomain = '', pathString = '', namespace = '';
        // Always default to SSL, unless otherwise specified.
        let secure = true, scheme = 'https', port = 443;
        // Don't do any validation here. The caller is responsible for validating the result of parsing.
        if (typeof dataURL === 'string') {
            // Parse scheme.
            let colonInd = dataURL.indexOf('//');
            if (colonInd >= 0) {
                scheme = dataURL.substring(0, colonInd - 1);
                dataURL = dataURL.substring(colonInd + 2);
            }
            // Parse host, path, and query string.
            let slashInd = dataURL.indexOf('/');
            if (slashInd === -1) {
                slashInd = dataURL.length;
            }
            let questionMarkInd = dataURL.indexOf('?');
            if (questionMarkInd === -1) {
                questionMarkInd = dataURL.length;
            }
            host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
            if (slashInd < questionMarkInd) {
                // For pathString, questionMarkInd will always come after slashInd
                pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
            }
            const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
            // If we have a port, use scheme for determining if it's secure.
            colonInd = host.indexOf(':');
            if (colonInd >= 0) {
                secure = scheme === 'https' || scheme === 'wss';
                port = parseInt(host.substring(colonInd + 1), 10);
            }
            else {
                colonInd = host.length;
            }
            const hostWithoutPort = host.slice(0, colonInd);
            if (hostWithoutPort.toLowerCase() === 'localhost') {
                domain = 'localhost';
            }
            else if (hostWithoutPort.split('.').length <= 2) {
                domain = hostWithoutPort;
            }
            else {
                // Interpret the subdomain of a 3 or more component URL as the namespace name.
                const dotInd = host.indexOf('.');
                subdomain = host.substring(0, dotInd).toLowerCase();
                domain = host.substring(dotInd + 1);
                // Normalize namespaces to lowercase to share storage / connection.
                namespace = subdomain;
            }
            // Always treat the value of the `ns` as the namespace name if it is present.
            if ('ns' in queryParams) {
                namespace = queryParams['ns'];
            }
        }
        return {
            host,
            port,
            domain,
            subdomain,
            secure,
            scheme,
            pathString,
            namespace
        };
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encapsulates the data needed to raise an event
     */
    class DataEvent {
        /**
         * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed
         * @param eventRegistration - The function to call to with the event data. User provided
         * @param snapshot - The data backing the event
         * @param prevName - Optional, the name of the previous child for child_* events.
         */
        constructor(eventType, eventRegistration, snapshot, prevName) {
            this.eventType = eventType;
            this.eventRegistration = eventRegistration;
            this.snapshot = snapshot;
            this.prevName = prevName;
        }
        getPath() {
            const ref = this.snapshot.ref;
            if (this.eventType === 'value') {
                return ref._path;
            }
            else {
                return ref.parent._path;
            }
        }
        getEventType() {
            return this.eventType;
        }
        getEventRunner() {
            return this.eventRegistration.getEventRunner(this);
        }
        toString() {
            return (this.getPath().toString() +
                ':' +
                this.eventType +
                ':' +
                stringify(this.snapshot.exportVal()));
        }
    }
    class CancelEvent {
        constructor(eventRegistration, error, path) {
            this.eventRegistration = eventRegistration;
            this.error = error;
            this.path = path;
        }
        getPath() {
            return this.path;
        }
        getEventType() {
            return 'cancel';
        }
        getEventRunner() {
            return this.eventRegistration.getEventRunner(this);
        }
        toString() {
            return this.path.toString() + ':cancel';
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A wrapper class that converts events from the database@exp SDK to the legacy
     * Database SDK. Events are not converted directly as event registration relies
     * on reference comparison of the original user callback (see `matches()`) and
     * relies on equality of the legacy SDK's `context` object.
     */
    class CallbackContext {
        constructor(snapshotCallback, cancelCallback) {
            this.snapshotCallback = snapshotCallback;
            this.cancelCallback = cancelCallback;
        }
        onValue(expDataSnapshot, previousChildName) {
            this.snapshotCallback.call(null, expDataSnapshot, previousChildName);
        }
        onCancel(error) {
            assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');
            return this.cancelCallback.call(null, error);
        }
        get hasCancelCallback() {
            return !!this.cancelCallback;
        }
        matches(other) {
            return (this.snapshotCallback === other.snapshotCallback ||
                (this.snapshotCallback.userCallback !== undefined &&
                    this.snapshotCallback.userCallback ===
                        other.snapshotCallback.userCallback &&
                    this.snapshotCallback.context === other.snapshotCallback.context));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @internal
     */
    class QueryImpl {
        /**
         * @hideconstructor
         */
        constructor(_repo, _path, _queryParams, _orderByCalled) {
            this._repo = _repo;
            this._path = _path;
            this._queryParams = _queryParams;
            this._orderByCalled = _orderByCalled;
        }
        get key() {
            if (pathIsEmpty(this._path)) {
                return null;
            }
            else {
                return pathGetBack(this._path);
            }
        }
        get ref() {
            return new ReferenceImpl(this._repo, this._path);
        }
        get _queryIdentifier() {
            const obj = queryParamsGetQueryObject(this._queryParams);
            const id = ObjectToUniqueKey(obj);
            return id === '{}' ? 'default' : id;
        }
        /**
         * An object representation of the query parameters used by this Query.
         */
        get _queryObject() {
            return queryParamsGetQueryObject(this._queryParams);
        }
        isEqual(other) {
            other = getModularInstance(other);
            if (!(other instanceof QueryImpl)) {
                return false;
            }
            const sameRepo = this._repo === other._repo;
            const samePath = pathEquals(this._path, other._path);
            const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
            return sameRepo && samePath && sameQueryIdentifier;
        }
        toJSON() {
            return this.toString();
        }
        toString() {
            return this._repo.toString() + pathToUrlEncodedString(this._path);
        }
    }
    /**
     * @internal
     */
    class ReferenceImpl extends QueryImpl {
        /** @hideconstructor */
        constructor(repo, path) {
            super(repo, path, new QueryParams(), false);
        }
        get parent() {
            const parentPath = pathParent(this._path);
            return parentPath === null
                ? null
                : new ReferenceImpl(this._repo, parentPath);
        }
        get root() {
            let ref = this;
            while (ref.parent !== null) {
                ref = ref.parent;
            }
            return ref;
        }
    }
    /**
     * A `DataSnapshot` contains data from a Database location.
     *
     * Any time you read data from the Database, you receive the data as a
     * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach
     * with `on()` or `once()`. You can extract the contents of the snapshot as a
     * JavaScript object by calling the `val()` method. Alternatively, you can
     * traverse into the snapshot by calling `child()` to return child snapshots
     * (which you could then call `val()` on).
     *
     * A `DataSnapshot` is an efficiently generated, immutable copy of the data at
     * a Database location. It cannot be modified and will never change (to modify
     * data, you always call the `set()` method on a `Reference` directly).
     */
    class DataSnapshot {
        /**
         * @param _node - A SnapshotNode to wrap.
         * @param ref - The location this snapshot came from.
         * @param _index - The iteration order for this snapshot
         * @hideconstructor
         */
        constructor(_node, 
        /**
         * The location of this DataSnapshot.
         */
        ref, _index) {
            this._node = _node;
            this.ref = ref;
            this._index = _index;
        }
        /**
         * Gets the priority value of the data in this `DataSnapshot`.
         *
         * Applications need not use priority but can order collections by
         * ordinary properties (see
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}
         * ).
         */
        get priority() {
            // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
            return this._node.getPriority().val();
        }
        /**
         * The key (last part of the path) of the location of this `DataSnapshot`.
         *
         * The last token in a Database location is considered its key. For example,
         * "ada" is the key for the /users/ada/ node. Accessing the key on any
         * `DataSnapshot` will return the key for the location that generated it.
         * However, accessing the key on the root URL of a Database will return
         * `null`.
         */
        get key() {
            return this.ref.key;
        }
        /** Returns the number of child properties of this `DataSnapshot`. */
        get size() {
            return this._node.numChildren();
        }
        /**
         * Gets another `DataSnapshot` for the location at the specified relative path.
         *
         * Passing a relative path to the `child()` method of a DataSnapshot returns
         * another `DataSnapshot` for the location at the specified relative path. The
         * relative path can either be a simple child name (for example, "ada") or a
         * deeper, slash-separated path (for example, "ada/name/first"). If the child
         * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`
         * whose value is `null`) is returned.
         *
         * @param path - A relative path to the location of child data.
         */
        child(path) {
            const childPath = new Path(path);
            const childRef = child(this.ref, path);
            return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);
        }
        /**
         * Returns true if this `DataSnapshot` contains any data. It is slightly more
         * efficient than using `snapshot.val() !== null`.
         */
        exists() {
            return !this._node.isEmpty();
        }
        /**
         * Exports the entire contents of the DataSnapshot as a JavaScript object.
         *
         * The `exportVal()` method is similar to `val()`, except priority information
         * is included (if available), making it suitable for backing up your data.
         *
         * @returns The DataSnapshot's contents as a JavaScript value (Object,
         *   Array, string, number, boolean, or `null`).
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        exportVal() {
            return this._node.val(true);
        }
        /**
         * Enumerates the top-level children in the `IteratedDataSnapshot`.
         *
         * Because of the way JavaScript objects work, the ordering of data in the
         * JavaScript object returned by `val()` is not guaranteed to match the
         * ordering on the server nor the ordering of `onChildAdded()` events. That is
         * where `forEach()` comes in handy. It guarantees the children of a
         * `DataSnapshot` will be iterated in their query order.
         *
         * If no explicit `orderBy*()` method is used, results are returned
         * ordered by key (unless priorities are used, in which case, results are
         * returned by priority).
         *
         * @param action - A function that will be called for each child DataSnapshot.
         * The callback can return true to cancel further enumeration.
         * @returns true if enumeration was canceled due to your callback returning
         * true.
         */
        forEach(action) {
            if (this._node.isLeafNode()) {
                return false;
            }
            const childrenNode = this._node;
            // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
            return !!childrenNode.forEachChild(this._index, (key, node) => {
                return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));
            });
        }
        /**
         * Returns true if the specified child path has (non-null) data.
         *
         * @param path - A relative path to the location of a potential child.
         * @returns `true` if data exists at the specified child path; else
         *  `false`.
         */
        hasChild(path) {
            const childPath = new Path(path);
            return !this._node.getChild(childPath).isEmpty();
        }
        /**
         * Returns whether or not the `DataSnapshot` has any non-`null` child
         * properties.
         *
         * You can use `hasChildren()` to determine if a `DataSnapshot` has any
         * children. If it does, you can enumerate them using `forEach()`. If it
         * doesn't, then either this snapshot contains a primitive value (which can be
         * retrieved with `val()`) or it is empty (in which case, `val()` will return
         * `null`).
         *
         * @returns true if this snapshot has any children; else false.
         */
        hasChildren() {
            if (this._node.isLeafNode()) {
                return false;
            }
            else {
                return !this._node.isEmpty();
            }
        }
        /**
         * Returns a JSON-serializable representation of this object.
         */
        toJSON() {
            return this.exportVal();
        }
        /**
         * Extracts a JavaScript value from a `DataSnapshot`.
         *
         * Depending on the data in a `DataSnapshot`, the `val()` method may return a
         * scalar type (string, number, or boolean), an array, or an object. It may
         * also return null, indicating that the `DataSnapshot` is empty (contains no
         * data).
         *
         * @returns The DataSnapshot's contents as a JavaScript value (Object,
         *   Array, string, number, boolean, or `null`).
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        val() {
            return this._node.val();
        }
    }
    /**
     *
     * Returns a `Reference` representing the location in the Database
     * corresponding to the provided path. If no path is provided, the `Reference`
     * will point to the root of the Database.
     *
     * @param db - The database instance to obtain a reference for.
     * @param path - Optional path representing the location the returned
     *   `Reference` will point. If not provided, the returned `Reference` will
     *   point to the root of the Database.
     * @returns If a path is provided, a `Reference`
     *   pointing to the provided path. Otherwise, a `Reference` pointing to the
     *   root of the Database.
     */
    function ref(db, path) {
        db = getModularInstance(db);
        db._checkNotDeleted('ref');
        return path !== undefined ? child(db._root, path) : db._root;
    }
    /**
     * Gets a `Reference` for the location at the specified relative path.
     *
     * The relative path can either be a simple child name (for example, "ada") or
     * a deeper slash-separated path (for example, "ada/name/first").
     *
     * @param parent - The parent location.
     * @param path - A relative path from this location to the desired child
     *   location.
     * @returns The specified child location.
     */
    function child(parent, path) {
        parent = getModularInstance(parent);
        if (pathGetFront(parent._path) === null) {
            validateRootPathString('child', 'path', path);
        }
        else {
            validatePathString('child', 'path', path);
        }
        return new ReferenceImpl(parent._repo, pathChild(parent._path, path));
    }
    /**
     * Removes the data at this Database location.
     *
     * Any data at child locations will also be deleted.
     *
     * The effect of the remove will be visible immediately and the corresponding
     * event 'value' will be triggered. Synchronization of the remove to the
     * Firebase servers will also be started, and the returned Promise will resolve
     * when complete. If provided, the onComplete callback will be called
     * asynchronously after synchronization has finished.
     *
     * @param ref - The location to remove.
     * @returns Resolves when remove on server is complete.
     */
    function remove(ref) {
        validateWritablePath('remove', ref._path);
        return set(ref, null);
    }
    /**
     * Writes data to this Database location.
     *
     * This will overwrite any data at this location and all child locations.
     *
     * The effect of the write will be visible immediately, and the corresponding
     * events ("value", "child_added", etc.) will be triggered. Synchronization of
     * the data to the Firebase servers will also be started, and the returned
     * Promise will resolve when complete. If provided, the `onComplete` callback
     * will be called asynchronously after synchronization has finished.
     *
     * Passing `null` for the new value is equivalent to calling `remove()`; namely,
     * all data at this location and all child locations will be deleted.
     *
     * `set()` will remove any priority stored at this location, so if priority is
     * meant to be preserved, you need to use `setWithPriority()` instead.
     *
     * Note that modifying data with `set()` will cancel any pending transactions
     * at that location, so extreme care should be taken if mixing `set()` and
     * `transaction()` to modify the same data.
     *
     * A single `set()` will generate a single "value" event at the location where
     * the `set()` was performed.
     *
     * @param ref - The location to write to.
     * @param value - The value to be written (string, number, boolean, object,
     *   array, or null).
     * @returns Resolves when write to server is complete.
     */
    function set(ref, value) {
        ref = getModularInstance(ref);
        validateWritablePath('set', ref._path);
        validateFirebaseDataArg('set', value, ref._path);
        const deferred = new Deferred();
        repoSetWithPriority(ref._repo, ref._path, value, 
        /*priority=*/ null, deferred.wrapCallback(() => { }));
        return deferred.promise;
    }
    /**
     * Gets the most up-to-date result for this query.
     *
     * @param query - The query to run.
     * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is
     * available, or rejects if the client is unable to return a value (e.g., if the
     * server is unreachable and there is nothing cached).
     */
    function get(query) {
        query = getModularInstance(query);
        const callbackContext = new CallbackContext(() => { });
        const container = new ValueEventRegistration(callbackContext);
        return repoGetValue(query._repo, query, container).then(node => {
            return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());
        });
    }
    /**
     * Represents registration for 'value' events.
     */
    class ValueEventRegistration {
        constructor(callbackContext) {
            this.callbackContext = callbackContext;
        }
        respondsTo(eventType) {
            return eventType === 'value';
        }
        createEvent(change, query) {
            const index = query._queryParams.getIndex();
            return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));
        }
        getEventRunner(eventData) {
            if (eventData.getEventType() === 'cancel') {
                return () => this.callbackContext.onCancel(eventData.error);
            }
            else {
                return () => this.callbackContext.onValue(eventData.snapshot, null);
            }
        }
        createCancelEvent(error, path) {
            if (this.callbackContext.hasCancelCallback) {
                return new CancelEvent(this, error, path);
            }
            else {
                return null;
            }
        }
        matches(other) {
            if (!(other instanceof ValueEventRegistration)) {
                return false;
            }
            else if (!other.callbackContext || !this.callbackContext) {
                // If no callback specified, we consider it to match any callback.
                return true;
            }
            else {
                return other.callbackContext.matches(this.callbackContext);
            }
        }
        hasAnyCallback() {
            return this.callbackContext !== null;
        }
    }
    function addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {
        const callbackContext = new CallbackContext(callback, undefined);
        const container = new ValueEventRegistration(callbackContext)
            ;
        repoAddEventCallbackForQuery(query._repo, query, container);
        return () => repoRemoveEventCallbackForQuery(query._repo, query, container);
    }
    function onValue(query, callback, cancelCallbackOrListenOptions, options) {
        return addEventListener(query, 'value', callback);
    }
    /**
     * Define reference constructor in various modules
     *
     * We are doing this here to avoid several circular
     * dependency issues
     */
    syncPointSetReferenceConstructor(ReferenceImpl);
    syncTreeSetReferenceConstructor(ReferenceImpl);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This variable is also defined in the firebase Node.js Admin SDK. Before
     * modifying this definition, consult the definition in:
     *
     * https://github.com/firebase/firebase-admin-node
     *
     * and make sure the two are consistent.
     */
    const FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
    /**
     * Creates and caches `Repo` instances.
     */
    const repos = {};
    /**
     * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).
     */
    let useRestClient = false;
    /**
     * Update an existing `Repo` in place to point to a new host/port.
     */
    function repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {
        repo.repoInfo_ = new RepoInfo(`${host}:${port}`, 
        /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, 
        /*isUsingEmulator=*/ true);
        if (tokenProvider) {
            repo.authTokenProvider_ = tokenProvider;
        }
    }
    /**
     * This function should only ever be called to CREATE a new database instance.
     * @internal
     */
    function repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {
        let dbUrl = url || app.options.databaseURL;
        if (dbUrl === undefined) {
            if (!app.options.projectId) {
                fatal("Can't determine Firebase Database URL. Be sure to include " +
                    ' a Project ID when calling firebase.initializeApp().');
            }
            log('Using default host for project ', app.options.projectId);
            dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;
        }
        let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
        let repoInfo = parsedUrl.repoInfo;
        let dbEmulatorHost = undefined;
        if (typeof process !== 'undefined' && process.env) {
            dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
        }
        if (dbEmulatorHost) {
            dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;
            parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
            repoInfo = parsedUrl.repoInfo;
        }
        else {
            !parsedUrl.repoInfo.secure;
        }
        const authTokenProvider = new FirebaseAuthTokenProvider(app.name, app.options, authProvider);
        validateUrl('Invalid Firebase Database URL', parsedUrl);
        if (!pathIsEmpty(parsedUrl.path)) {
            fatal('Database URL must point to the root of a Firebase Database ' +
                '(not including a child path).');
        }
        const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));
        return new Database(repo, app);
    }
    /**
     * Remove the repo and make sure it is disconnected.
     *
     */
    function repoManagerDeleteRepo(repo, appName) {
        const appRepos = repos[appName];
        // This should never happen...
        if (!appRepos || appRepos[repo.key] !== repo) {
            fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);
        }
        repoInterrupt(repo);
        delete appRepos[repo.key];
    }
    /**
     * Ensures a repo doesn't already exist and then creates one using the
     * provided app.
     *
     * @param repoInfo - The metadata about the Repo
     * @returns The Repo object for the specified server / repoName.
     */
    function repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {
        let appRepos = repos[app.name];
        if (!appRepos) {
            appRepos = {};
            repos[app.name] = appRepos;
        }
        let repo = appRepos[repoInfo.toURLString()];
        if (repo) {
            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
        }
        repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);
        appRepos[repoInfo.toURLString()] = repo;
        return repo;
    }
    /**
     * Class representing a Firebase Realtime Database.
     */
    class Database {
        /** @hideconstructor */
        constructor(_repoInternal, 
        /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */
        app) {
            this._repoInternal = _repoInternal;
            this.app = app;
            /** Represents a `Database` instance. */
            this['type'] = 'database';
            /** Track if the instance has been used (root or repo accessed) */
            this._instanceStarted = false;
        }
        get _repo() {
            if (!this._instanceStarted) {
                repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);
                this._instanceStarted = true;
            }
            return this._repoInternal;
        }
        get _root() {
            if (!this._rootInternal) {
                this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());
            }
            return this._rootInternal;
        }
        _delete() {
            if (this._rootInternal !== null) {
                repoManagerDeleteRepo(this._repo, this.app.name);
                this._repoInternal = null;
                this._rootInternal = null;
            }
            return Promise.resolve();
        }
        _checkNotDeleted(apiName) {
            if (this._rootInternal === null) {
                fatal('Cannot call ' + apiName + ' on a deleted database.');
            }
        }
    }
    /**
     * Returns the instance of the Realtime Database SDK that is associated with the provided
     * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if
     * no instance exists or if the existing instance uses a custom database URL.
     *
     * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime
     * Database instance is associated with.
     * @param url - The URL of the Realtime Database instance to connect to. If not
     * provided, the SDK connects to the default instance of the Firebase App.
     * @returns The `Database` instance of the provided app.
     */
    function getDatabase(app = getApp(), url) {
        const db = _getProvider(app, 'database').getImmediate({
            identifier: url
        });
        if (!db._instanceStarted) {
            const emulator = getDefaultEmulatorHostnameAndPort('database');
            if (emulator) {
                connectDatabaseEmulator(db, ...emulator);
            }
        }
        return db;
    }
    /**
     * Modify the provided instance to communicate with the Realtime Database
     * emulator.
     *
     * <p>Note: This method must be called before performing any other operation.
     *
     * @param db - The instance to modify.
     * @param host - The emulator host (ex: localhost)
     * @param port - The emulator port (ex: 8080)
     * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
     */
    function connectDatabaseEmulator(db, host, port, options = {}) {
        db = getModularInstance(db);
        db._checkNotDeleted('useEmulator');
        if (db._instanceStarted) {
            fatal('Cannot call useEmulator() after instance has already been initialized.');
        }
        const repo = db._repoInternal;
        let tokenProvider = undefined;
        if (repo.repoInfo_.nodeAdmin) {
            if (options.mockUserToken) {
                fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
            }
            tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);
        }
        else if (options.mockUserToken) {
            const token = typeof options.mockUserToken === 'string'
                ? options.mockUserToken
                : createMockUserToken(options.mockUserToken, db.app.options.projectId);
            tokenProvider = new EmulatorTokenProvider(token);
        }
        // Modify the repo to apply emulator settings
        repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerDatabase(variant) {
        setSDKVersion(SDK_VERSION$1);
        _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {
            const app = container.getProvider('app').getImmediate();
            const authProvider = container.getProvider('auth-internal');
            const appCheckProvider = container.getProvider('app-check-internal');
            return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);
        }, "PUBLIC" /* ComponentType.PUBLIC */).setMultipleInstances(true));
        registerVersion(name, version$1, variant);
        // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
        registerVersion(name, version$1, 'esm2017');
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
        this.sendRequest('q', { p: pathString }, onComplete);
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PersistentConnection.prototype.echo = function (data, onEcho) {
        this.sendRequest('echo', { d: data }, onEcho);
    };

    /**
     * Firebase Realtime Database
     *
     * @packageDocumentation
     */
    registerDatabase();

    // src/config-firebase/script.js


    // =====================
    // Configuración de Firebase
    // =====================
    const configuracionFirebaseAutoQuiz = {
      apiKey: "AIzaSyANIA0nk7P3RTo33P86jmW3GM6jMxxdoAs",
      authDomain: "moodlequizdatascraping.firebaseapp.com",
      databaseURL: "https://moodlequizdatascraping-default-rtdb.firebaseio.com",
      projectId: "moodlequizdatascraping",
      storageBucket: "moodlequizdatascraping.appspot.com",
      messagingSenderId: "782692660220",
      appId: "1:782692660220:web:8258d30da03e338f4c3879"
    };

    // Muestra la configuración en la consola para depuración
    //console.log("Configuración de Firebase:", configuracionFirebaseAutoQuiz);

    // Inicializa Firebase
    const app = initializeApp(configuracionFirebaseAutoQuiz);
    //console.log("Firebase App inicializada:", app);

    // Inicializa servicios de Firebase
    const autenticacion = getAuth(app);
    //console.log("Servicio de autenticación (Auth) inicializado:", autenticacion);

    const database = getDatabase(app);
    //console.log("Servicio de base de datos (Database) inicializado:", database);

    // Exponer las variables en el objeto global `window`
    window.autenticacion = autenticacion;
    window.database = database;

    var css_248z$5 = "\r\n\r\n /* Estilos para el contenedor principal */\r\n .contenedor-login-autoquizfillapp {\r\n    width: 90%;\r\n    max-width: 400px;\r\n    /* Limitar el ancho máximo */\r\n    padding: 20px;\r\n    box-sizing: border-box;\r\n    background-color: #ffffff;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    top: 25%;\r\n    /* Centra verticalmente en la mitad superior */\r\n    left: 50%;\r\n    transform: translate(-50%, -25%);\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Aplicar fuente Poppins */\r\n}\r\n\r\n/* Estilos para el título */\r\n.contenedor-titulo-autoquizfillapp h2 {\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Asegurar que el título también use Poppins */\r\n    font-size: 32px;\r\n    color: #333;\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n}\r\n\r\n\r\n#titulo-verified {\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Asegurar que el título también use Poppins */\r\n    font-size: 18px;\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n    font-weight: 600;\r\n    color: #34495e;\r\n    margin: 0;\r\n\r\n}\r\n\r\n/* Estilos para los inputs */\r\n.contenedor-inputs-autoquizfillapp {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.login-entrada-autoquizfillapp {\r\n    width: 100%;\r\n    padding: 10px;\r\n    font-size: 16px;\r\n    border: 1px solid #bdc3c7;\r\n    border-radius: 5px;\r\n    box-sizing: border-box;\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Aplicar fuente Poppins a los inputs */\r\n}\r\n\r\n.login-entrada-autoquizfillapp:focus {\r\n    border-color: #3498db;\r\n    outline: none;\r\n    box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);\r\n}\r\n\r\n/* Estilos para el botón */\r\n.contenedor-boton-autoquizfillapp {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.login-boton-autoquizfillapp {\r\n    width: 100%;\r\n    padding: 10px;\r\n    background-color: #3498db;\r\n    color: white;\r\n    font-size: 16px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease;\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Aplicar fuente Poppins al botón */\r\n}\r\n\r\n.login-boton-autoquizfillapp:hover {\r\n    background-color: #2980b9;\r\n}";
    styleInject(css_248z$5);

    var css_248z$4 = "/* Título centrado */\r\n#titulo-autofillquizapp {\r\n    font-size: 1.5rem;\r\n    /* Tamaño más grande para el título */\r\n    font-weight: 600;\r\n    color: #34495e;\r\n    /* Un color más oscuro y elegante */\r\n    text-align: center;\r\n    flex-grow: 1;\r\n    /* Ocupar el espacio disponible */\r\n}\r\n\r\n/* Ajuste para asegurarse de que el botón tiene el espacio adecuado */\r\n#boton-hamburguesa-autofillquizapp {\r\n    background-color: #0073e6;\r\n    /* Fondo blanco */\r\n    color: #ffffff;\r\n    /* Azul moderno para el icono */\r\n    border: 2px solid #0073e6;\r\n    /* Bordes sutiles con el mismo color que el icono */\r\n    border-radius: 5px;\r\n    /* Botón redondo */\r\n    cursor: pointer;\r\n    /* Cambia el cursor a mano */\r\n    font-size: 24px;\r\n    /* Tamaño del icono */\r\n    width: 40px;\r\n    /* Ancho fijo */\r\n    height: 40px;\r\n    /* Alto fijo */\r\n    display: inline-flex;\r\n    /* Usar flexbox para alinear */\r\n    justify-content: center;\r\n    /* Centrar horizontalmente el icono */\r\n    align-items: center;\r\n    /* Centrar verticalmente el icono */\r\n    padding: 0;\r\n    /* Eliminar padding */\r\n    margin: 0;\r\n    /* Eliminar márgenes */\r\n    position: relative;\r\n    /* Mantener la posición en su contenedor */\r\n    z-index: 1000;\r\n    /* Asegura que el botón esté por encima de otros elementos */\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n    /* Sombra suave para darle profundidad */\r\n    transition: all 0.3s ease;\r\n    /* Transición suave para el hover */\r\n}\r\n\r\n/* Hover para darle efecto */\r\n#boton-hamburguesa-autofillquizapp:hover {\r\n    background-color: #002c67;\r\n    /* Fondo azul al hacer hover */\r\n    color: #ffffff;\r\n    /* Color blanco para el icono en hover */\r\n    border: 2px solid #002c67;\r\n    /* Bordes sutiles con el mismo color que el icono */\r\n\r\n    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\r\n    /* Aumenta ligeramente la sombra en hover */\r\n    transform: translateY(-2px);\r\n    /* Levanta el botón ligeramente en hover */\r\n}\r\n\r\n/* Icono del botón de hamburguesa */\r\n#boton-hamburguesa-autofillquizapp i {\r\n    pointer-events: none;\r\n    /* Asegura que el icono no interfiera con el clic */\r\n}\r\n\r\n\r\n/* Contenido principal ocupará el resto del espacio */\r\n\r\n\r\n/* Ocultar barra de desplazamiento en navegadores basados en WebKit */\r\n#contenido-principal::-webkit-scrollbar {\r\n    display: none;\r\n    /* Ocultar barra de desplazamiento */\r\n}\r\n\r\n    /* Cabecera del panel: botón a la izquierda, título centrado */\r\n    .panel-header {\r\n        display: flex;\r\n        justify-content: flex-start; /* Alinear el botón y el título */\r\n        align-items: center;\r\n        padding: 15px 20px; /* Mayor espacio para una mejor sensación */\r\n        background-color: #ffffff; /* Fondo blanco limpio para el header */\r\n        border-bottom: 1px solid #e1e4e8; /* Borde inferior suave */\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); /* Sombra ligera */\r\n        position: relative;\r\n        border-radius: 4px 4px 0 0; /* Redondea solo los bordes superiores */\r\n\r\n    }\r\n\r\n    #panel-autofillquizapp {\r\n        display: block;\r\n        border-radius: 4px;\r\n        width: 100%; /* Ocupa todo el ancho del contenedor */\r\n        height: 100vh; /* O ajustado al contenedor padre */\r\n        overflow-y: hidden; /* Deshabilita el desplazamiento vertical */\r\n        box-sizing: border-box;\r\n    }\r\n    \r\n    #contenido-principal {\r\n        width: 100%;\r\n        height: calc(100% - 60px); /* Por ejemplo, ajusta el espacio si hay un header */\r\n        padding: 20px;\r\n        background-color: #ffffff;\r\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\r\n        overflow-y: auto; /* Permitir scroll si el contenido es largo */\r\n        -ms-overflow-style: none; /* Ocultar barra en IE y Edge */\r\n        scrollbar-width: none; /* Ocultar barra en Firefox */\r\n        border-radius: 0 0 8px 8px;\r\n        box-sizing: border-box;\r\n    }\r\n    ";
    styleInject(css_248z$4);

    var css_248z$3 = ".dynamic-select {\r\n    width: 100%; /* Ocupar todo el ancho del contenedor */\r\n    padding: 0.5rem 1rem; /* Espaciado interno */\r\n    font-size: 1rem; /* Tamaño de fuente */\r\n    color: #333; /* Texto en gris oscuro */\r\n    background-color: #fff; /* Fondo blanco */\r\n    border: 1px solid #ccc; /* Borde tenue */\r\n    border-radius: 4px; /* Bordes redondeados */\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Sombra ligera */\r\n    transition: border-color 0.3s ease, box-shadow 0.3s ease; /* Transición en foco */\r\n}\r\n\r\n/* Estilo al pasar el mouse por encima */\r\n.dynamic-select:hover {\r\n    border-color: #888; /* Borde más visible */\r\n}\r\n\r\n/* Estilo al enfocar el select */\r\n.dynamic-select:focus {\r\n    border-color: #007bff; /* Azul para el foco */\r\n    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Sombra azul */\r\n    outline: none; /* Quitar borde predeterminado */\r\n}\r\n\r\n/* Estilo para las opciones dentro del select */\r\n.dynamic-select option {\r\n    font-size: 1rem; /* Tamaño de fuente uniforme */\r\n    color: #333; /* Color del texto */\r\n    padding: 0.5rem; /* Espaciado interno */\r\n}\r\n\r\n/* Estilo específico para pantallas pequeñas */\r\n@media (max-width: 600px) {\r\n    .dynamic-select {\r\n        font-size: 0.9rem; /* Ajustar tamaño de fuente */\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n                .autosavereview-verified {\r\n            display: inline-block;\r\n            background-color: LimeGreen;\r\n            color: white;\r\n            padding: 5px 10px;\r\n            margin-left: 10px;\r\n            border-radius: 5px;\r\n            font-weight: 600;\r\n    font-size: 14px;\r\n        }\r\n\r\n                .autosavereview-no-verified-correct {\r\n            display: inline-block;\r\n            background-color: LimeGreen;\r\n            color: white;\r\n            padding: 5px 10px;\r\n            margin-left: 10px;\r\n            border-radius: 5px;\r\n            font-weight: 600;\r\n    font-size: 14px;\r\n        }\r\n\r\n                        .autosavereview-no-verified {\r\n            display: inline-block;\r\n            background-color: Red;\r\n            color: white;\r\n            padding: 5px 10px;\r\n            margin-left: 10px;\r\n            border-radius: 5px;\r\n            font-weight: 600;\r\n    font-size: 14px;\r\n        }\r\n\r\n.autosavereview-contestar {\r\n            display: inline-block;\r\n            background-color: red;\r\n            color: white;\r\n            padding: 5px 10px;\r\n            margin-left: 10px;\r\n            border-radius: 5px;\r\n            font-weight: 600;\r\n    font-size: 14px;\r\n        }\r\n\r\n.select-siguiente-usuario {\r\n    font-size: 14px;              /* Tamaño de fuente para el texto seleccionado */\r\n    font-weight: 600;             /* Grosor de la fuente para el texto seleccionado */\r\n    color: #34495e;               /* Color del texto seleccionado */\r\n    border: none;                 /* Elimina el borde del select */\r\n    background-color: transparent;/* Fondo transparente */\r\n    outline: none;                /* Elimina el borde de enfoque */\r\n    appearance: none;             /* Quita el estilo predeterminado del navegador */\r\n    cursor: pointer;              /* Cambia el cursor a pointer */\r\n    text-align: right;            /* Alinea el texto seleccionado a la derecha */\r\n    padding-right: 0px;           /* Espacio entre el texto y el borde derecho */\r\n    direction: rtl;               /* Alinea el desplegable hacia la derecha */\r\n}\r\n\r\n/* Estilo de las opciones dentro del select */\r\n.select-siguiente-usuario option {\r\n    font-size: 12px;              /* Tamaño de fuente más pequeño para las opciones desplegables */\r\n    padding: 10px;            /* Espacio alrededor del texto en cada opción */\r\n    text-align: right;           /* Centra el texto dentro de las opciones */\r\n    direction: ltr;               /* Restablece la dirección del texto para que se lea correctamente */\r\n}\r\n\r\n/* Limita la altura del desplegable para mostrar un número reducido de opciones */\r\n.select-siguiente-usuario {\r\n    max-height: 30px;             /* Reduce la altura visible del select */\r\n    overflow-y: auto;             /* Habilita la barra de desplazamiento vertical */\r\n}\r\n\r\n/* Personalización de la barra de desplazamiento */\r\n.select-siguiente-usuario::-webkit-scrollbar {\r\n    width: 2px;                   /* Reduce la anchura de la barra de desplazamiento */\r\n}\r\n\r\n.select-siguiente-usuario::-webkit-scrollbar-thumb {\r\n    background-color: rgba(52, 73, 94, 0.2); /* Barra de desplazamiento más transparente */\r\n    border-radius: 10px;          /* Bordes redondeados para la barra */\r\n}\r\n\r\n.select-siguiente-usuario::-webkit-scrollbar-track {\r\n    background-color: transparent;/* Fondo transparente para la pista de la barra */\r\n}\r\n\r\n/* Destacar la opción seleccionada incluso al pasar el mouse */\r\n/* Nota: Debido a limitaciones, esto solo funciona en algunos navegadores */\r\n.select-siguiente-usuario option:checked {\r\n    background-color: #dcdde1;    /* Fondo diferente para la opción seleccionada */\r\n    font-weight: bold;            /* Fuente en negrita para la opción seleccionada */\r\n}\r\n\r\n/* Evitar que el hover cambie el estilo de la opción seleccionada */\r\n.select-siguiente-usuario option:hover {\r\n    background-color: #f1f2f6;    /* Fondo al pasar el mouse */\r\n}\r\n\r\n/* Mantener el estilo de la opción seleccionada al hacer hover */\r\n.select-siguiente-usuario option:hover:checked {\r\n    background-color: #dcdde1;    /* Mantiene el fondo de la opción seleccionada */\r\n}\r\n\r\n\r\n\r\n/* Estilos para los checkboxes de AutoQuiz */\r\n.autoquiz-checkbox {\r\n    accent-color: #0072c5; /* Color por defecto para checkboxes habilitados */\r\n    width: 20px; /* Tamaño opcional */\r\n    height: 20px; /* Tamaño opcional */\r\n}\r\n\r\n/* Cambiar el color del checkbox cuando está deshabilitado */\r\n.autoquiz-checkbox:disabled {\r\n    accent-color: green; /* Cambia a verde cuando está deshabilitado */\r\n    cursor: not-allowed; /* Cambiar el cursor para indicar que está deshabilitado */\r\n}\r\n\r\n/* Opcional: Mejorar la apariencia general de los checkboxes */\r\n.checkbox-item {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 8px; /* Espaciado entre los items */\r\n}\r\n\r\n.checkbox-verified {\r\n    margin-right: 8px; /* Espaciado entre el checkbox y el label */\r\n}\r\n\r\n\r\n.boton-siguiente-usuario {\r\n    margin-top: 0;\r\n    margin-bottom: 0;           /* Establece el margen superior a 0 */\r\n    font-weight: 600;       /* Hace el texto del botón más negrito (600) */\r\n    border: none;           /* Elimina cualquier borde */\r\n    background-color: transparent; /* Fondo transparente */\r\n    cursor: pointer;        /* Cambia el cursor a pointer para indicar que es interactivo */\r\n    padding: 0px 3px;      /* Espaciado interno opcional */\r\n}\r\n\r\n.boton-siguiente-usuario i {\r\n    font-size: 0.90em;       /* Ajusta el tamaño del ícono dentro del botón */\r\n    color: #34495e;         /* Color del ícono */\r\n}\r\n\r\n              /* Estilos básicos para los checkboxes */\r\n        .checkbox-item {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-top: 5px;\r\n        }\r\n        .checkbox-item label {\r\n            margin-left: 8px;\r\n            margin-bottom: 0px;\r\n            margin-top: 0px;\r\n        }\r\n\r\n\r\n      .boton-verificar {\r\n        width: 100%;\r\n        padding: 12px;\r\n        background-color: #0072c5;\r\n        color: white;\r\n        border: none;\r\n        border-radius: 5px;\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n        box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n        transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n    }\r\n\r\n    /* Efecto hover en los botones */\r\n    .boton-verificar:hover {\r\n        background-color: #002c67;\r\n        box-shadow: 0 4px 10px rgba(0,0,0,0.2);\r\n    }\r\n.buttons-container-verificar {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px; /* Espacio entre los botones */\r\n    margin-bottom: 10px; /* Espacio debajo de los botones */\r\n}\r\n\r\n\r\n\r\n        /* Estilos para el contenedor de Verificar */\r\n        .subcontainer-autoquiz-verificar {\r\n            margin-top: 10px; /* Espaciado superior para separar del contenido anterior */\r\n            margin-bottom: 10px; /* Espaciado inferior */\r\n            background-color: #f4f4f4; /* Color de fondo suave */\r\n            padding: 10px 15px; /* Relleno interno */\r\n            border-radius: 8px; /* Bordes redondeados */\r\n            border: 1px solid #dcdcdc; /* Borde suave */\r\n            overflow-y: auto; /* Habilitar desplazamiento si es necesario */\r\n            max-height: 100px; /* Limitar la altura máxima a 100px */\r\n        }\r\n\r\n        /* Estilos para el botón \"Verificar Preguntas\" */\r\n        .boton-verified {\r\n            width: 100%; /* Asegurarse de que ocupe todo el ancho disponible */\r\n            padding: 12px;\r\n            background-color: #0072c5; /* Color de fondo */\r\n            color: white; /* Color del texto */\r\n            border: none; /* Sin bordes */\r\n            border-radius: 5px; /* Bordes redondeados */\r\n            font-size: 16px; /* Tamaño de la fuente */\r\n            cursor: pointer; /* Cambiar el cursor al pasar sobre el botón */\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Sombra suave */\r\n            transition: background-color 0.3s ease, box-shadow 0.3s ease; /* Transiciones suaves */\r\n              margin-top: -4px; /* Margen inferior */\r\n              margin-bottom: 6px; /* Margen inferior */\r\n        }\r\n\r\n        /* Efecto hover en el botón \"Verificar Preguntas\" */\r\n        .boton-verified:hover {\r\n            background-color: #002c67; /* Cambio de color de fondo al pasar el cursor */\r\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* Sombra más pronunciada al pasar el cursor */\r\n        }\r\n\r\n        /* Estilos para el contenedor de cada pregunta */\r\n        .question-container-autoquiz {\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: flex-start;\r\n            align-items: flex-start;\r\n            padding: 0;\r\n            color: #34495e;\r\n            flex-wrap: wrap;\r\n            width: 100%;\r\n            word-wrap: break-word;\r\n            word-break: break-word;\r\n            margin-bottom: 7px; /* Espacio entre preguntas */\r\n        }\r\n\r\n        /* Estilos para el título de la pregunta */\r\n        .question-title-autoquiz {\r\n            color: #333;\r\n            font-size: 13px;\r\n            font-weight: 500;\r\n            margin-bottom: -1px; /* Espacio después del título */\r\n        }\r\n\r\n        /* Contenedor para agrupar cada par de etiqueta-valor (Estado y Similitud) */\r\n        .question-data-group {\r\n            display: flex; /* Asegura que los elementos se alineen horizontalmente */\r\n            flex-direction: row; /* Coloca la etiqueta y el valor en una sola línea */\r\n            justify-content: flex-start;\r\n            align-items: center; /* Alinea verticalmente el contenido al centro */\r\n            margin: 0 0 -4px 0px; /* Eliminar margen adicional */\r\n            padding: 0; /* Eliminar padding adicional */\r\n        }\r\n\r\n        /* Estilos para los elementos de etiqueta como Estado, Similitud */\r\n        .question-label-autoquiz {\r\n            color: #333;\r\n            font-size: 13px;\r\n            font-weight: 500;\r\n            margin-right: 3px; /* Espacio entre la etiqueta y el valor */\r\n        }\r\n\r\n        /* Estilos para los valores correspondientes a Estado y Similitud */\r\n        /* Estilos para los valores correspondientes a Estado, Similitud, Respuestas */\r\n        .question-value-autoquiz {\r\n            color: #333;\r\n            font-size: 12px;\r\n            font-weight: 400;\r\n            font-style: normal;\r\n            line-height: 1.2; /* Ajuste para eliminar el espacio entre líneas */\r\n        }\r\n\r\n\r\n        /* Estilo para el contenedor específico de las respuestas */\r\n        .responses-container {\r\n            margin: 0px; /* Sin margen adicional */\r\n        }\r\n\r\n        .responses-container .question-label-autoquiz {\r\n            display: block; /* Mantiene la etiqueta \"Respuestas\" en una sola línea */\r\n            margin-bottom: 0px; /* Sin espacio adicional debajo de la etiqueta */\r\n            margin-top: 0px; /* Sin espacio adicional debajo de la etiqueta */\r\n        }\r\n\r\n        .responses-container .question-value-autoquiz {\r\n            display: block; /* Asegura que las respuestas aparezcan en una nueva línea */\r\n            margin-top: -2px; /* Sin margen adicional arriba de las respuestas */\r\n            padding-left: 0px; /* Alineación directa debajo de la etiqueta */\r\n        }\r\n\r\n\r\n           /* Estilos para el contenedor principal que ocupa toda la ventana */\r\n\r\n        /* Ocultar la barra de desplazamiento en Chrome, Safari y Opera */\r\n\r\n            /* Estilo para el contenedor que muestra los usuarios actuales y siguientes */\r\n            .users {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n                width: 100%;\r\n                box-sizing: border-box;\r\n                margin-bottom: 15px ;\r\n            }\r\n\r\n            /* Estilo para el nombre de usuario */\r\n            .nombre-usuario, .nombre-siguiente-usuario {\r\n                font-size: 14px;\r\n                font-weight: 600;\r\n                color: #34495e;\r\n                margin: 0 5px;\r\n            }\r\n\r\n            /* Sección de usuario actual alineada a la izquierda */\r\n            .usuario-actual {\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: flex-start;\r\n                flex: 1;\r\n            }\r\n\r\n\r\n\r\n        /* Botón para el siguiente usuario sin fondo ni bordes */\r\n        .boton-simple-autoquiz {\r\n            background: none;\r\n            border: none;\r\n            color: #34495e;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            display: inline-flex; /* Cambiamos a inline-flex para respetar el ancho del texto */\r\n            align-items: center;\r\n            justify-content: flex-start; /* Alinea el texto y el ícono de forma continua */\r\n            width: auto; /* Ajusta el ancho según el contenido */\r\n            white-space: normal; /* Permite el quiebre del texto si el ancho es pequeño */\r\n            padding: 0;\r\n            margin: 0;\r\n        }\r\n\r\n        /* Alinear el ícono justo después del texto */\r\n        .boton-simple-autoquiz i {\r\n            margin-left: 5px; /* Añade un pequeño margen para separar el ícono del texto */\r\n            flex-shrink: 0; /* Evita que el ícono se reduzca en tamaños pequeños */\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        /* Efecto al hacer clic o al enfocarse */\r\n        .boton-simple-autoquiz:focus,\r\n        .boton-simple-autoquiz:active {\r\n            outline: none;\r\n            color: #2c3e50;\r\n            background: none;\r\n        }\r\n\r\n            /* Estilo para la ruta configurada */\r\n            .ruta-config {\r\n                margin-top: 10px;\r\n                font-size: 10px;\r\n                color: #34495e;\r\n            }\r\n\r\n        /* Ajuste para que el contenedor AutoSave ocupe todo el espacio restante */\r\n        .subcontainer-autoquiz-autofill {\r\n                margin-top: 10px;\r\n            margin-bottom: 10px;\r\n            background-color: #f4f4f4;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            border: 1px solid #dcdcdc;\r\n            overflow-y: auto; /* Habilitar desplazamiento si es necesario */\r\n            max-height: 300px; /* Limitar la altura máxima a 350px */\r\n\r\n        }\r\n        /* Estilos personalizados para la barra de desplazamiento */\r\n        .subcontainer-autoquiz-autofill::-webkit-scrollbar {\r\n            width: 3px; /* Ancho del scrollbar */\r\n        height: 3px; /* Alto del scrollbar horizontal */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autofill::-webkit-scrollbar-track {\r\n            background: transparent; /* Fondo del track transparente */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autofill::-webkit-scrollbar-thumb {\r\n            background-color: rgba(0, 0, 0, 0.2); /* Color tenue para el thumb */\r\n            border-radius: 10px; /* Bordes redondeados */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autofill::-webkit-scrollbar-thumb:hover {\r\n            background-color: rgba(0, 0, 0, 0.3); /* Color un poco más oscuro al pasar el mouse */\r\n        }\r\n\r\n        /* Ajuste para que el contenedor AutoSave ocupe todo el espacio restante */\r\n        .subcontainer-autoquiz-autosave {\r\n            margin-top: 10px;\r\n            margin-bottom: 10px;\r\n            background-color: #f4f4f4;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            border: 1px solid #dcdcdc;\r\n            overflow-y: auto; /* Habilitar desplazamiento si es necesario */\r\n            max-height: 300px; /* Limitar la altura máxima a 350px */\r\n        }\r\n\r\n        /* Estilos personalizados para la barra de desplazamiento */\r\n        .subcontainer-autoquiz-autosave::-webkit-scrollbar {\r\n            width: 3px; /* Ancho del scrollbar */\r\n            height: 3px; /* Alto del scrollbar horizontal */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autosave::-webkit-scrollbar-track {\r\n            background: transparent; /* Fondo del track transparente */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autosave::-webkit-scrollbar-thumb {\r\n            background-color: rgba(0, 0, 0, 0.2); /* Color tenue para el thumb */\r\n            border-radius: 10px; /* Bordes redondeados */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autosave::-webkit-scrollbar-thumb:hover {\r\n            background-color: rgba(0, 0, 0, 0.3); /* Color un poco más oscuro al pasar el mouse */\r\n        }\r\n\r\n        .subcontainer-autoquiz-verified {\r\n            margin-top: 10px;\r\n            margin-bottom: 10px;\r\n            background-color: #f4f4f4;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            border: 1px solid #dcdcdc;\r\n            overflow-y: auto; /* Habilitar desplazamiento si es necesario */\r\n            max-height: 350px; /* Limitar la altura máxima a 350px */\r\n        }\r\n\r\n        /* Estilos personalizados para la barra de desplazamiento */\r\n        .subcontainer-autoquiz-verified::-webkit-scrollbar {\r\n            width: 3px; /* Ancho del scrollbar */\r\n            height: 3px; /* Alto del scrollbar horizontal */\r\n        }\r\n\r\n        .subcontainer-autoquiz-verified::-webkit-scrollbar-track {\r\n            background: transparent; /* Fondo del track transparente */\r\n        }\r\n\r\n        .subcontainer-autoquiz-verified::-webkit-scrollbar-thumb {\r\n            background-color: rgba(0, 0, 0, 0.2); /* Color tenue para el thumb */\r\n            border-radius: 10px; /* Bordes redondeados */\r\n        }\r\n\r\n        .subcontainer-autoquiz-verified::-webkit-scrollbar-thumb:hover {\r\n            background-color: rgba(0, 0, 0, 0.3); /* Color un poco más oscuro al pasar el mouse */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autosavereview {\r\n            margin-top: 10px;\r\n            margin-bottom: 10px;\r\n            background-color: #f4f4f4;\r\n            padding: 10px 15px;\r\n            border-radius: 8px;\r\n            border: 1px solid #dcdcdc;\r\n            overflow-y: auto; /* Habilitar desplazamiento si es necesario */\r\n            max-height: 350px; /* Limitar la altura máxima a 350px */\r\n        }\r\n\r\n        /* Estilos personalizados para la barra de desplazamiento */\r\n        .subcontainer-autoquiz-autosavereview::-webkit-scrollbar {\r\n            width: 3px; /* Ancho del scrollbar */\r\n            height: 3px; /* Alto del scrollbar horizontal */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autosavereview::-webkit-scrollbar-track {\r\n            background: transparent; /* Fondo del track transparente */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autosavereview::-webkit-scrollbar-thumb {\r\n            background-color: rgba(0, 0, 0, 0.2); /* Color tenue para el thumb */\r\n            border-radius: 10px; /* Bordes redondeados */\r\n        }\r\n\r\n        .subcontainer-autoquiz-autosavereview::-webkit-scrollbar-thumb:hover {\r\n            background-color: rgba(0, 0, 0, 0.3); /* Color un poco más oscuro al pasar el mouse */\r\n        }\r\n\r\n            /* Estilo común para el header que contiene el título y el switch */\r\n        .header-autoquiz {\r\n            margin-top: 5px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        /* Estilo para el título */\r\n        .header-autoquiz h2 {\r\n            font-size: 22px;\r\n            font-weight: 600;\r\n            color: #34495e;\r\n            margin: 0;\r\n        }\r\n\r\n        .header-autoquiz h3 {\r\n            font-size: 20px;\r\n            font-weight: 600;\r\n            color: #34495e;\r\n            margin: 0;\r\n\r\n        }\r\n\r\n         .header-autoquiz h4 {\r\n         width: 100%;\r\n         display: flex;\r\n    justify-content: center;\r\n            font-size: 22px;\r\n            font-weight: 600;\r\n            color: #34495e;\r\n            margin: 0;\r\n            text-align: center;\r\n        }\r\n\r\n        /* Estilo para el switch */\r\n        .switch-autoquiz {\r\n            position: relative;\r\n            display: inline-block;\r\n            width: 34px;\r\n            height: 20px;\r\n        }\r\n\r\n        .switch-autoquiz input {\r\n            opacity: 0;\r\n            width: 0;\r\n            height: 0;\r\n        }\r\n\r\n        .slider {\r\n            position: absolute;\r\n            cursor: pointer;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background-color: #ccc;\r\n            transition: 0.4s;\r\n            border-radius: 20px;\r\n        }\r\n\r\n        .slider:before {\r\n            position: absolute;\r\n            content: \"\";\r\n            height: 12px;\r\n            width: 12px;\r\n            border-radius: 50%;\r\n            left: 4px;\r\n            bottom: 4px;\r\n            background-color: white;\r\n            transition: 0.4s;\r\n        }\r\n\r\n        input:checked + .slider {\r\n            background-color: #3498db;\r\n        }\r\n\r\n        input:checked + .slider:before {\r\n            transform: translateX(14px);\r\n        }\r\n\r\n        /* Estilo para el contenido dentro de los contenedores de AutoFill y AutoSave */\r\n        .body-autoquiz {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 0px;\r\n            font-size: 16px;\r\n            width: 100%; /* Para que ocupe el 100% del ancho del contenedor padre */\r\n        }\r\n\r\n        /* Estilo para cada línea de dato en AutoFill y AutoSave */\r\n        .dato-autoquiz {\r\n            display: flex;\r\n            justify-content: flex-start;\r\n            align-items: center;\r\n            padding: 0;\r\n            color: #34495e;\r\n            flex-wrap: wrap; /* Permitir que el contenido se ajuste si es muy largo */\r\n            width: 100%; /* Para que ocupe todo el ancho del contenedor */\r\n            word-wrap: break-word; /* Romper palabras si son muy largas */\r\n            word-break: break-word; /* Para manejar palabras largas en el texto */\r\n        }\r\n\r\n\r\n        /* Si la ruta no es válida, oculta los contenedores */\r\n        #container-autofill[style*=\"display: none\"],\r\n            #container-autosave[style*=\"display: none\"] {\r\n                display: none;\r\n            }\r\n\r\n        /* Estilo para el contenedor oculto que se muestra al hacer clic */\r\n        #container-viewquestion {\r\n            margin-top: 0;\r\n            padding: 10px;\r\n            font-size: 14px;\r\n            background-color: #f8f8f8;\r\n            border: 1px solid #ddd;\r\n            border-radius: 5px;\r\n        }\r\n\r\n        /* Estilos para la pregunta */\r\n        .preguntaautosave {\r\n            color: #333; /* Color casi negro */\r\n            font-size: 13px; /* Puedes ajustar el tamaño de la fuente aquí */\r\n            font-weight: 500;\r\n            margin-top: 5px;\r\n            /* Grosor modificable: 100 (fino), 400 (normal), 700 (grueso), etc. */\r\n        }\r\n\r\n        /* Estilos para las respuestas */\r\n        .respuestasautosave {\r\n            color: #333; /* Color casi negro, igual que las preguntas */\r\n            font-size: 12px; /* Tamaño de la fuente, ajustable */\r\n            font-weight: 400; /* Eliminar negritas */\r\n            font-style: normal; /* Eliminar la cursiva */\r\n        }\r\n\r\n        /* Estilos para la pregunta */\r\n        .preguntaautosavereview {\r\n            color: #333; /* Color casi negro */\r\n            font-size: 13px; /* Puedes ajustar el tamaño de la fuente aquí */\r\n            font-weight: 500;\r\n            margin-top: 5px;\r\n            /* Grosor modificable: 100 (fino), 400 (normal), 700 (grueso), etc. */\r\n        }\r\n\r\n        /* Estilos para las respuestas */\r\n        .respuestasautosavereview {\r\n            color: #333; /* Color casi negro, igual que las preguntas */\r\n            font-size: 12px; /* Tamaño de la fuente, ajustable */\r\n            font-weight: 400; /* Eliminar negritas */\r\n            font-style: normal; /* Eliminar la cursiva */\r\n        }\r\n\r\n";
    styleInject(css_248z$3);

    function contenedorUsers_js() {
        const elementoDesplegableUsuario = document.querySelector('.dropdown-user-nick');
        const elementoUsuarioActual = document.getElementById('nombre-usuario-actual');
        const selectSiguienteUsuario = document.getElementById('siguiente-usuario');
        const botonSiguienteUsuario = document.getElementById('boton-siguiente-usuario');

        let nombreUsuarioActual = null; // Inicializado como null por defecto

        if (!elementoDesplegableUsuario) {
            console.warn("Elemento .dropdown-user-nick no encontrado. Estableciendo 'No login'.");
            nombreUsuarioActual = "No login"; // Asignar 'No login' como usuario actual
        } else {
            nombreUsuarioActual = elementoDesplegableUsuario.childNodes[1]?.textContent.trim();
            if (!nombreUsuarioActual) {
                console.error("No se pudo obtener el nombre del usuario actual.");
                botonSiguienteUsuario.style.display = 'none';
                return;
            }
        }

        elementoUsuarioActual.textContent = nombreUsuarioActual;

        const usuariosGuardados = JSON.parse(localStorage.getItem('listaUsuariosFiltrados'));
        if (!usuariosGuardados) {
            // console.error("No se encontraron usuarios en localStorage.");
            botonSiguienteUsuario.style.display = 'none';
            return;
        }

        // console.log("Usuarios encontrados en localStorage:", usuariosGuardados);
        const listaUsuarios = Object.values(usuariosGuardados);

        selectSiguienteUsuario.innerHTML = ""; // Limpia el select

        // Identifica el índice del usuario actual
        const indiceUsuarioActual = listaUsuarios.findIndex(usuario => usuario.usuario === nombreUsuarioActual);

        let siguienteUsuarioPredeterminado = null;

        // Si es "No login", selecciona el primer usuario como predeterminado
        if (nombreUsuarioActual === "No login") {
            siguienteUsuarioPredeterminado = listaUsuarios[0]?.usuario || null; // Primer usuario o null si la lista está vacía
        } else if (indiceUsuarioActual !== -1 && indiceUsuarioActual < listaUsuarios.length - 1) {
            siguienteUsuarioPredeterminado = listaUsuarios[indiceUsuarioActual + 1].usuario;
        }

        // Crear opciones en el select
        listaUsuarios.forEach((usuario) => {
            const optionElement = document.createElement("option");
            optionElement.value = usuario.usuario;
            optionElement.textContent = usuario.usuario;

            // Marca la opción predeterminada
            if (usuario.usuario === siguienteUsuarioPredeterminado) {
                optionElement.selected = true;
            }

            selectSiguienteUsuario.appendChild(optionElement);
        });

        if (siguienteUsuarioPredeterminado) ; else if (indiceUsuarioActual === listaUsuarios.length - 1) ; else ;

        // Agregar evento click al botón
        botonSiguienteUsuario.addEventListener('click', procesarUsuarioSeleccionado);

        contenedorRuta_js();
    }

    async function procesarUsuarioSeleccionado() {
        try {
            // Obtiene el valor seleccionado en el select
            const select = document.getElementById('siguiente-usuario');
            const selectedUser = select.value;

            if (!selectedUser) {
                console.error("No se selecciono ningun usuario.");
                return;
            }

            // Obtiene la lista de usuarios desde localStorage
            const listaUsuariosFiltrados = JSON.parse(localStorage.getItem('listaUsuariosFiltrados'));
            if (!listaUsuariosFiltrados) {
                console.error("No se encontro 'listaUsuariosFiltrados' en localStorage.");
                return;
            }

            // Busca el usuario en la lista
            const usuario = listaUsuariosFiltrados.find(user => user.usuario === selectedUser);
            if (!usuario) {
                console.error(`El usuario '${selectedUser}' no fue encontrado en 'listaUsuariosFiltrados'.`);
                return;
            }

            const { usuario: username, contraseña: password } = usuario;

            console.log(`Username: ${username}`);
            console.log(`Password: ${password}`);

            // Verifica si hay una sesion activa
            const sesionActiva = await verificarAutenticacion();
            if (sesionActiva) {
                console.log("Hay una sesion activa. Cerrando sesion...");
                const logoutExitoso = await autoLogout();
                if (!logoutExitoso) {
                    console.error("Error al cerrar la sesion.");
                    return;
                }
            }

            // Inicia sesion con el usuario seleccionado
            console.log(`Iniciando sesion para el usuario: ${username}`);
            const loginExitoso = await autoLogin(username, password);

            if (loginExitoso) {
                console.log(`Redirigiendo a la pagina de calificaciones para el usuario: ${username}`);
                const dominioActual = new URL(localStorage.getItem("selectedLoginUrl")).origin; // Obtiene solo el dominio
                window.location.href = `${dominioActual}/grade/report/overview/index.php`; // Redirige
            } else {
                console.error("No se pudo iniciar sesion. Verifique las credenciales.");
            }
        } catch (error) {
            console.error("Ocurrio un error durante el proceso:", error);
        }
    }

    // <<<<<<<<<<<<<< Ruta Dinamica >>>>>>>>>>>>>>

    async function contenedorRutaDinamica_js() {
        // Obtiene los valores 'configRuta' y 'ciclo' del almacenamiento local
        const configRuta = localStorage.getItem('configRuta');
        const ciclo = localStorage.getItem('ciclo');

        // Verifica si 'configRuta' y 'ciclo' están definidos en el almacenamiento local
        if (!configRuta || !ciclo) {
            // Si alguno de los valores no está definido, llama a la función 'contenedorRuta_js' y termina la ejecución
            contenedorRuta_js$1();
            return;
        } else {
            // Obtiene el elemento con el ID 'ciclo-configruta' del DOM
            const cicloElemento = document.getElementById('ciclo-configruta');
            if (cicloElemento) {
                // Asigna el valor de 'ciclo' al contenido HTML del elemento, mostrando una etiqueta y el valor
                cicloElemento.innerHTML = `<span class="label-configruta">Ciclo:</span> ${ciclo}`;
                await actualizaConfigRutaDinamic();
            }
        }
    }


    async function actualizaConfigRutaDinamic() {
        const containerCicloContainer = document.querySelector('.ruta-ciclo-container');

        try {
            // ** 1. Recuperar la configuración de ruta desde localStorage **
            const configRuta = localStorage.getItem('configRuta');

            // ** 2. Extraer la universidad de la configuración de ruta **
            const universidad = configRuta.split('/')[0];

            // ** 3. Seleccionar los elementos del breadcrumb relacionados con cursos y quizzes **
            const breadcrumbItems = document.querySelectorAll('.breadcrumb-item a[href*="/course/view.php"]');
            const quizItems = document.querySelectorAll('.breadcrumb-item a[href*="/mod/quiz/"]');

            // ** 4. Obtener Materia **
            let materiaValor = null;

            if (breadcrumbItems.length > 0) {
                // Obtener el atributo 'title' del primer elemento del breadcrumb
                const breadcrumbTitle = breadcrumbItems[0].getAttribute('title');
                //console.log(`[opc-autofill-autosave-moodle: ruta]  Título encontrado: ${breadcrumbTitle}`);

                // Extraer las claves entre corchetes del título del breadcrumb
                const matches = breadcrumbTitle.match(/\[([A-Za-z]+[^\]]+)\]/g)?.filter(match => /[A-Za-z]/.test(match));

                if (matches && matches.length > 0) {
                    // Limpiar los corchetes para obtener la clave de búsqueda
                    const searchKey = matches[0].replace(/[\[\]]/g, '');
                    //console.log(`[opc-autofill-autosave-moodle: ruta]  Materia de la página: "${searchKey}"`);

                    // Definir la ruta en Firebase para obtener las opciones de materias
                    const materiaRuta = `ConfigRuta/opciones/${universidad}/unemi:codigo-materias-de-nivelacion`;

                    try {
                        // Obtener los datos de materias desde Firebase
                        const materiaSnapshot = await get(ref(database, materiaRuta));
                        const materiaOptions = materiaSnapshot.val();

                        if (materiaOptions) {
                            let found = false; // Bandera para indicar si se encontró una coincidencia

                            // Iterar sobre cada clave y valor en las opciones de materias
                            for (const [key, value] of Object.entries(materiaOptions)) {
                                // Separar los valores por comas y eliminar espacios
                                const values = value.split(',').map(item => item.trim());

                                for (const val of values) {
                                    if (val.includes(':')) {
                                        // Si el valor contiene ":", dividirlo en dos partes
                                        const [firstPart, secondPart] = val.split(':').map(part => part.trim());

                                        // Comparar la primera parte con la clave de búsqueda
                                        // y verificar si el título del breadcrumb contiene la segunda parte
                                        if (firstPart === searchKey && breadcrumbTitle.includes(secondPart)) {
                                            materiaValor = key;
                                            console.log(`[opc-autofill-autosave-moodle: ruta]  Materia encontrada: "${materiaValor}"`);
                                            found = true;
                                            break; // Salir del bucle interno si se encuentra una coincidencia
                                        }
                                    } else {
                                        // Si el valor no contiene ":", comparar directamente con la clave de búsqueda
                                        if (val === searchKey) {
                                            materiaValor = key;
                                            console.log(`[opc-autofill-autosave-moodle: ruta]  Materia encontrada: "${materiaValor}"`);
                                            found = true;
                                            break; // Salir del bucle interno si se encuentra una coincidencia
                                        }
                                    }
                                }

                                if (found) break; // Salir del bucle externo si se encontró una coincidencia
                            }

                            if (!found) {
                                console.warn(`[opc-autofill-autosave-moodle: ruta]  No se encontró ninguna coincidencia para la clave de búsqueda: ${searchKey}`);
                            }
                        } else {
                            console.warn(`[opc-autofill-autosave-moodle: ruta]  No se encontraron opciones para materias en la ruta: ${materiaRuta}`);
                        }
                    } catch (firebaseError) {
                        console.error(`Error al obtener datos de Firebase en la ruta ${materiaRuta}:`, firebaseError);
                    }
                } else {
                    console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontraron coincidencias en el título del breadcrumb.');
                }
            } else {
                console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontro materia.');
            }

            // ** 5. Obtener Test **
            let testClave = null;

            if (quizItems.length > 0) {
                // Obtener el texto del quiz desde el primer elemento del breadcrumb
                const quizTextElement = quizItems[0].querySelector('span.text-truncate');
                if (quizTextElement) {
                    const quizText = quizTextElement.textContent.trim();
                    // Buscar números en formato numérico en el texto del quiz
                    const quizNumberMatch = quizText.match(/\d+/);

                    let quizNumber = null;

                    if (quizNumberMatch) {
                        // Convertir el número encontrado a entero
                        quizNumber = parseInt(quizNumberMatch[0], 10);
                    } else {
                        // Si no se encuentran números, buscar números escritos en palabras
                        const numWords = {
                            'uno': 1,
                            'dos': 2,
                            'tres': 3,
                            'cuatro': 4,
                            'cinco': 5,
                            'seis': 6,
                            'siete': 7,
                            'ocho': 8,
                            'nueve': 9,
                            'diez': 10
                            // Puedes agregar más si lo necesitas
                        };

                        // Convertir el texto a minúsculas y buscar una palabra numérica
                        const wordMatch = quizText.toLowerCase().match(/\b(uno|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez)\b/);
                        if (wordMatch) {
                            quizNumber = numWords[wordMatch[0]];
                        }
                    }

                    if (quizNumber !== null) {
                        // Definir la ruta en Firebase para obtener las opciones de tests
                        const testRuta = `ConfigRuta/opciones/${universidad}/unemi:niv-test`;

                        try {
                            // Obtener los datos de tests desde Firebase
                            const testSnapshot = await get(ref(database, testRuta));
                            const testOptions = testSnapshot.val();

                            if (testOptions) {
                                // Buscar la clave que incluye "Test" seguido del número del quiz
                                testClave = Object.keys(testOptions).find(key => testOptions[key].includes(`Test ${quizNumber}`));
                                if (testClave) {
                                    console.log(`[opc-autofill-autosave-moodle: ruta]  Test encontrado: "${testClave}"`);
                                } else {
                                    console.warn(`[opc-autofill-autosave-moodle: ruta]  No se encontró una clave para Test ${quizNumber}`);
                                }
                            } else {
                                console.warn(`No se encontraron opciones para test en la ruta: ${testRuta}`);
                            }
                        } catch (firebaseError) {
                            console.error(`Error al obtener datos de Firebase en la ruta ${testRuta}:`, firebaseError);
                        }
                    } else {
                        console.warn(`[opc-autofill-autosave-moodle: ruta]  No se encontro número del test.`);
                    }
                } else {
                    console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontró el elemento de texto del quiz.');
                }
            } else {
                console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontro test.');
            }

            // ** 6. Verificar y Actualizar ConfigRutaDinamic **
            if (materiaValor && testClave) {
                // Dividir la configuración de ruta en partes
                const configRutaParts = configRuta.split('/');
                // Reemplazar las últimas dos partes con materiaValor y testClave
                configRutaParts[configRutaParts.length - 2] = materiaValor;
                configRutaParts[configRutaParts.length - 1] = testClave;

                // Unir las partes para formar la nueva configuración de ruta
                const updatedConfigRuta = configRutaParts.join('/');
                // Almacenar la configuración actualizada en sessionStorage
                sessionStorage.setItem('configRutaDinamic', updatedConfigRuta);

                // Actualizar el elemento HTML con la nueva ruta
                const rutaElement = document.getElementById('ruta-configruta');
                if (rutaElement) {
                    rutaElement.innerHTML = `<span class="label-configruta">Ruta:</span> <span style="font-weight: 500; color: green;">${updatedConfigRuta}</span>`;
                    console.log(`[opc-autofill-autosave-moodle: ruta]  Ruta actualizada: ${updatedConfigRuta}`);
                } else {
                    console.error("El elemento con ID 'ruta-configruta' no existe en el DOM.");
                }

                containerCicloContainer.style.display = 'block';

                return updatedConfigRuta;
            }

            else if ((!testClave || !materiaValor) && !window.location.href.includes("mod/quiz/")) {
                sessionStorage.setItem('configRutaDinamic', "dinámica");

                // Actualizar el elemento HTML con la ruta 'dinamica'
                const rutaElement = document.getElementById('ruta-configruta');
                if (rutaElement) {
                    rutaElement.innerHTML = `<span class="label-configruta">Ruta:</span> <span style="font-weight: 500; color: green;">dinámica</span>`;
                } else {
                    console.warn("El elemento con ID 'ruta-configruta' no existe en el DOM.");
                }

                console.log('[opc-autofill-autosave-moodle: ruta]  No se pudieron determinar materia ni quiz. Se ha establecido la ruta como "dinámica".');
                containerCicloContainer.style.display = 'block';
                return null;
            }

            else if ((!testClave || !materiaValor) && window.location.href.includes("mod/quiz/")) {
                // Obtener la configuración de ruta dinámica almacenada en sessionStorage
                console.log('[opc-autofill-autosave-moodle: ruta]  No se pudieron determinar la materia o quiz y el url incluye "mod/quiz/" ');
                await crearSelectsDinamicos(materiaValor, testClave);
            }


        } catch (error) {
            // Manejo de errores generales en la función
            console.error('Error en actualizaConfigRutaDinamic:', error);
            return null;
        }
    }

    async function crearSelectsDinamicos(materiaValor, testClave) {

        const containerCicloContainer = document.querySelector('.ruta-ciclo-container');
        const contenedorSelects = document.getElementById('subject-dinamic');

        // Asegurarse de limpiar completamente el contenedor
        if (contenedorSelects) {
            //console.log('Limpiando todos los elementos existentes en el contenedor.');
            contenedorSelects.innerHTML = ''; // Elimina todo el contenido del contenedor
        } else {
            console.error('No se encontró el contenedor con id="subject-dinamic".');
            return;
        }

        const rutaLista = (localStorage.getItem('configRuta') || '').split('/');

        // Asumiendo que estás dentro de una función async o que manejas las promesas adecuadamente
        if (rutaLista.includes('UNEMI')) {

            // Verifica si el elemento existe antes de modificar su estilo
            if (containerCicloContainer) {
                containerCicloContainer.style.display = 'block';

            } else {
                console.error('No se encontró ningún elemento con la clase "ruta-ciclo-container".');
            }

            // Establecer el valor de 'Ruta' y 'Ciclo' en el HTML correspondiente
            const rutaElemento = document.getElementById('ruta-configruta');

            console.log(`[opc-autofill-autosave-moodle: ruta]  Mostrando "rutaCicloContainerDinamic".`);

            const configRutaDinamic = sessionStorage.getItem('configRutaDinamic');

            // Verifica si 'configRutaDinamic' existe y no está vacío
            if (configRutaDinamic) {
                // Obtiene el elemento con el ID 'ruta-configruta'
                const rutaElemento = document.getElementById('ruta-configruta');

                // Verifica que el elemento exista en el DOM
                if (rutaElemento) {
                    // Actualiza el contenido HTML del elemento
                    rutaElemento.innerHTML = `<span class="label-configruta">Ruta:</span> <span style="font-weight: 500; color: green;">${configRutaDinamic}</span>`;
                    return;
                }
            } else {
                rutaElemento.innerHTML = `<span class="label-configruta">Ruta:</span> <span style="font-weight: 500; color: green;">dinámica</span> `;
            }

            if (rutaLista.includes('niv')) {

                // Determinar las rutas dinámicas basadas en las condiciones
                let rutasSelectDinamics = [
                    "ConfigRuta/opciones/UNEMI/unemi:niv-materias-de-nivelacion",
                    "ConfigRuta/opciones/UNEMI/unemi:niv-test"
                ];

                console.log('[opc-autofill-autosave-moodle: ruta]  Generando select dinamico para Materia y Test');

                try {
                    // Iterar sobre cada ruta dinámica seleccionada
                    for (const path of rutasSelectDinamics) {
                        // Obtener datos de Firebase para la ruta actual
                        const optionsSnapshot = await get(ref(database, path));
                        if (!optionsSnapshot.exists()) {
                            console.warn(`No se encontraron datos en la ruta: ${path}`);
                            continue; // Saltar a la siguiente ruta si no hay datos
                        }
                    
                        const options = optionsSnapshot.val();
                        //console.log(`Opciones obtenidas para la ruta ${path}:`, options);
                    
                        // Crear el elemento select
                        const selectElement = document.createElement('select');
                        selectElement.classList.add('dynamic-select');
                        selectElement.style.display = 'block'; // Asegura que el select sea visible
                    
                        // Añadir una opción por defecto
                        const defaultOption = document.createElement('option');
                        defaultOption.value = "";
                        
                        let isMateriaSelect = path === "ConfigRuta/opciones/UNEMI/unemi:niv-materias-de-nivelacion";
                        let isTestSelect = path === "ConfigRuta/opciones/UNEMI/unemi:niv-test";
                    
                        if (isMateriaSelect) {
                            defaultOption.textContent = "Seleccionar Materia";
                        } else if (isTestSelect) {
                            defaultOption.textContent = "Seleccionar Test";
                        }
                    
                        defaultOption.disabled = true;
                        defaultOption.selected = true;
                        selectElement.appendChild(defaultOption);
                    
                        // Añadir opciones al select
                        for (const [key, value] of Object.entries(options)) {
                            const optionElement = document.createElement('option');
                            optionElement.value = key;
                            optionElement.textContent = value;
                    
                            // Si es un select de materias y materiaValor coincide con la opción, seleccionarla
                            if (isMateriaSelect && materiaValor !== null && key === materiaValor) {
                                optionElement.selected = true;
                            }
                    
                            // Si es un select de test y testClave coincide con la opción, seleccionarla
                            if (isTestSelect && testClave !== null && key === testClave) {
                                optionElement.selected = true;
                            }
                    
                            selectElement.appendChild(optionElement);
                        }
                    
                        // Añadir el select al contenedor principal
                        contenedorSelects.appendChild(selectElement);
                        //console.log(`Select creado y agregado para la ruta: ${path}`);
                    }
                    

                    // Crear el botón "Guardar Ruta" después de todos los selects
                    const botonGuardarRuta = document.createElement('button');
                    botonGuardarRuta.textContent = 'Guardar Ruta';
                    botonGuardarRuta.classList.add('estilo-configruta-boton', 'generarpdf');
                    botonGuardarRuta.addEventListener('click', guardarRutaDinamica);

                    // Agregar el botón al contenedor
                    contenedorSelects.appendChild(botonGuardarRuta);
                    //console.log('Botón "Guardar ruta" agregado.');

                    // Actualizar la visibilidad de los selects si es necesario
                    actualizarVisibilidadSelects(true);

                } catch (error) {
                    console.error(`Error al procesar los selects dinámicos:`, error);
                }

            } else if (rutaLista.includes('adm')) {
                console.log(`[opc-autofill-autosave-moodle: ruta]  Ruta Dinámica no disponible para ${localStorage.getItem('configRuta')}`);
                contenedorRuta_js$1();

            } else {
                // Si 'UNEMI' está presente pero no incluye 'niv' ni 'adm'
                console.log(`[opc-autofill-autosave-moodle: ruta]  Ruta Dinámica no disponible para ${localStorage.getItem('configRuta')}`);
                contenedorRuta_js$1();
            }

        } else {
            // Si 'UNEMI' no está presente en rutaLista
            console.log(`[opc-autofill-autosave-moodle: ruta]  Ruta no incluye UNEMI`);
            contenedorRuta_js$1();
        }



    }


    function guardarRutaDinamica() {
        const containerCicloContainer = document.querySelector('.ruta-ciclo-container');
        console.log('Guardando ruta...');

        // Obtener todos los select creados dinámicamente
        const dynamicSelects = document.querySelectorAll('.dynamic-select');

        // Obtener los valores seleccionados en cada select
        const selectedValues = Array.from(dynamicSelects).map(select => select.value);
        console.log('Valores seleccionados:', selectedValues);

        // Obtener configRuta desde localStorage
        const configRuta = localStorage.getItem('configRuta');
        if (!configRuta) {
            console.error('No se encontró configRuta en localStorage.');
            return;
        }

        // Dividir la ruta por "/" y eliminar los últimos dos elementos
        const configRutaParts = configRuta.split('/');
        configRutaParts.splice(-2); // Elimina los últimos dos elementos
        console.log('Partes de configRuta después de eliminar los últimos dos elementos:', configRutaParts);

        // Combinar las partes de configRuta con los valores seleccionados
        const newRuta = [...configRutaParts, ...selectedValues].join('/');
        console.log('Nueva ruta construida:', newRuta);

        // Guardar la nueva ruta en sessionStorage
        sessionStorage.setItem('configRutaDinamic', newRuta);
        console.log('Ruta dinámica guardada en sessionStorage:', newRuta);

        const rutaElemento = document.getElementById('ruta-configruta');
        const configRutaDinamic = sessionStorage.getItem('configRutaDinamic');

        if (rutaElemento) {
            console.log("la ruta es", rutaElemento);
            // Asignar los valores de configRuta y ciclo en los elementos del DOM
            rutaElemento.innerHTML = `<span class="label-configruta">Ruta:</span> <span style="font-weight: 500; color: green;">${configRutaDinamic}</span> `;
            console.log("Se ha actualizado el contenido del elemento con ID 'ruta-configruta'.");
            containerCicloContainer.style.display = 'block';
        }
        else {
            console.log("El elemento con ID 'ruta-configruta' no existe en el DOM.");

        }

        // Ocultar el contenedor con id "subject-dinamic"
        const contenedorSelects = document.getElementById('subject-dinamic');
        if (contenedorSelects) {
            contenedorSelects.style.display = 'none';
            console.log('Contenedor "subject-dinamic" ocultado.');
        } else {
            console.error('No se encontró el contenedor con id="subject-dinamic".');
        }

        AutoSaveReview_LocalStorage();
    }

    function actualizarVisibilidadSelects(isVisible) {
        const selects = document.querySelectorAll('.dynamic-select');
        selects.forEach(select => select.style.display = 'block' );
        //console.log(`Selects ${isVisible ? "mostrados" : "ocultos"}`);
    }

    // <<<<<<<<<<<<<< Ruta >>>>>>>>>>>>>>

    function contenedorRuta_js$1() {
        // Selecciona todos los elementos con la clase 'container-autoquiz'

        const containerAutoQuiz = document.querySelector('.container-autoquiz');
        // Selecciona el único elemento con la clase 'ruta-ciclo-container'
        const containerCicloContainer = document.querySelector('.ruta-ciclo-container');

        const configRuta = localStorage.getItem('configRuta');
        const ciclo = localStorage.getItem('ciclo');

        // Verificar si configRuta y ciclo están definidos
        if (!configRuta || !ciclo) {
            // console.log('configRuta o ciclo no están definidos. Ocultando contenedores y mostrando mensaje de advertencia.');

            containerAutoQuiz.style.display = 'none';
            // console.log('Contenedor .container-autoquiz ocultado:', container);

            // Desactivar autofill y autosave
            localStorage.setItem('autofill-autoquizfillapp', 'desactivado');
            localStorage.setItem('autosave-autoquizfillapp', 'desactivado');
            //console.log('Autofill y autosave desactivados en localStorage.');

            // Crear y mostrar el mensaje de advertencia en 'contenido-principal'
            const mensaje = document.createElement('div');
            mensaje.textContent = 'No ha seleccionado una ruta o ciclo';
            mensaje.style.color = 'red';
            mensaje.style.fontWeight = '500';
            mensaje.style.fontSize = '0.95em';
            mensaje.style.fontStyle = 'italic';
            mensaje.style.textAlign = 'center';
            mensaje.id = 'mensaje-ruta-invalida';

            const contenidoPrincipal = document.getElementById('contenido-principal');
            if (contenidoPrincipal && !document.getElementById('mensaje-ruta-invalida')) {
                contenidoPrincipal.appendChild(mensaje);
                console.log('[opc-autofill-autosave-moodle: ruta]  No ha seleccionado una ruta o ciclo');
            }
        }

        else {
            console.log(`[opc-autofill-autosave-moodle: ruta]  Valor de configRuta: ${configRuta}, Valor de ciclo: ${ciclo}`);


            // Verifica si el elemento existe antes de modificar su estilo
            if (containerCicloContainer) {
                containerCicloContainer.style.display = 'block';
            } else {
                console.error('No se encontró ningún elemento con la clase "ruta-ciclo-container".');
            }

            if (containerAutoQuiz) {
                containerAutoQuiz.style.display = 'block';
            } else {
                console.error('No se encontró ningún elemento con la clase "ruta-ciclo-container".');
            }

            // Eliminar el mensaje si existe
            const mensajeExistente = document.getElementById('mensaje-ruta-invalida');
            if (mensajeExistente) {
                mensajeExistente.remove();
                console.log('Mensaje de advertencia eliminado.');
            }

            // Establecer el valor de 'Ruta' y 'Ciclo' en el HTML correspondiente
            const rutaElemento = document.getElementById('ruta-configruta');
            const cicloElemento = document.getElementById('ciclo-configruta');
            console.log(`[opc-autofill-autosave-moodle: ruta]  Mostrando "rutaCicloContainer".`);

            if (rutaElemento && cicloElemento) {
                // Asignar los valores de configRuta y ciclo en los elementos del DOM
                rutaElemento.innerHTML = `<span class="label-configruta">Ruta:</span> ${configRuta}`;
                cicloElemento.innerHTML = `<span class="label-configruta">Ciclo:</span> ${ciclo}`;
                // console.log(`Valores asignados: Ruta = ${configRuta}, Ciclo = ${ciclo}`);
            }
        }
    }

    var mathjax = {};

    var version = {};

    var hasRequiredVersion;

    function requireVersion () {
    	if (hasRequiredVersion) return version;
    	hasRequiredVersion = 1;
    	Object.defineProperty(version, "__esModule", { value: true });
    	version.VERSION = undefined;
    	version.VERSION = '3.2.2';
    	
    	return version;
    }

    var HandlerList = {};

    var PrioritizedList = {};

    var hasRequiredPrioritizedList;

    function requirePrioritizedList () {
    	if (hasRequiredPrioritizedList) return PrioritizedList;
    	hasRequiredPrioritizedList = 1;
    	Object.defineProperty(PrioritizedList, "__esModule", { value: true });
    	PrioritizedList.PrioritizedList = undefined;
    	var PrioritizedList$1 = (function () {
    	    function PrioritizedList() {
    	        this.items = [];
    	        this.items = [];
    	    }
    	    PrioritizedList.prototype[Symbol.iterator] = function () {
    	        var i = 0;
    	        var items = this.items;
    	        return {
    	            next: function () {
    	                return { value: items[i++], done: (i > items.length) };
    	            }
    	        };
    	    };
    	    PrioritizedList.prototype.add = function (item, priority) {
    	        if (priority === undefined) { priority = PrioritizedList.DEFAULTPRIORITY; }
    	        var i = this.items.length;
    	        do {
    	            i--;
    	        } while (i >= 0 && priority < this.items[i].priority);
    	        this.items.splice(i + 1, 0, { item: item, priority: priority });
    	        return item;
    	    };
    	    PrioritizedList.prototype.remove = function (item) {
    	        var i = this.items.length;
    	        do {
    	            i--;
    	        } while (i >= 0 && this.items[i].item !== item);
    	        if (i >= 0) {
    	            this.items.splice(i, 1);
    	        }
    	    };
    	    PrioritizedList.DEFAULTPRIORITY = 5;
    	    return PrioritizedList;
    	}());
    	PrioritizedList.PrioritizedList = PrioritizedList$1;
    	
    	return PrioritizedList;
    }

    var hasRequiredHandlerList;

    function requireHandlerList () {
    	if (hasRequiredHandlerList) return HandlerList;
    	hasRequiredHandlerList = 1;
    	var __extends = (HandlerList.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __values = (HandlerList.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(HandlerList, "__esModule", { value: true });
    	HandlerList.HandlerList = undefined;
    	var PrioritizedList_js_1 = requirePrioritizedList();
    	var HandlerList$1 = (function (_super) {
    	    __extends(HandlerList, _super);
    	    function HandlerList() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    HandlerList.prototype.register = function (handler) {
    	        return this.add(handler, handler.priority);
    	    };
    	    HandlerList.prototype.unregister = function (handler) {
    	        this.remove(handler);
    	    };
    	    HandlerList.prototype.handlesDocument = function (document) {
    	        var e_1, _a;
    	        try {
    	            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var item = _c.value;
    	                var handler = item.item;
    	                if (handler.handlesDocument(document)) {
    	                    return handler;
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        throw new Error("Can't find handler for document");
    	    };
    	    HandlerList.prototype.document = function (document, options) {
    	        if (options === undefined) { options = null; }
    	        return this.handlesDocument(document).create(document, options);
    	    };
    	    return HandlerList;
    	}(PrioritizedList_js_1.PrioritizedList));
    	HandlerList.HandlerList = HandlerList$1;
    	
    	return HandlerList;
    }

    var Retries = {};

    var hasRequiredRetries;

    function requireRetries () {
    	if (hasRequiredRetries) return Retries;
    	hasRequiredRetries = 1;
    	Object.defineProperty(Retries, "__esModule", { value: true });
    	Retries.retryAfter = Retries.handleRetriesFor = undefined;
    	function handleRetriesFor(code) {
    	    return new Promise(function run(ok, fail) {
    	        try {
    	            ok(code());
    	        }
    	        catch (err) {
    	            if (err.retry && err.retry instanceof Promise) {
    	                err.retry.then(function () { return run(ok, fail); })
    	                    .catch(function (perr) { return fail(perr); });
    	            }
    	            else if (err.restart && err.restart.isCallback) {
    	                MathJax.Callback.After(function () { return run(ok, fail); }, err.restart);
    	            }
    	            else {
    	                fail(err);
    	            }
    	        }
    	    });
    	}
    	Retries.handleRetriesFor = handleRetriesFor;
    	function retryAfter(promise) {
    	    var err = new Error('MathJax retry');
    	    err.retry = promise;
    	    throw err;
    	}
    	Retries.retryAfter = retryAfter;
    	
    	return Retries;
    }

    var hasRequiredMathjax;

    function requireMathjax () {
    	if (hasRequiredMathjax) return mathjax;
    	hasRequiredMathjax = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.mathjax = undefined;
    		var version_js_1 = requireVersion();
    		var HandlerList_js_1 = requireHandlerList();
    		var Retries_js_1 = requireRetries();
    		exports.mathjax = {
    		    version: version_js_1.VERSION,
    		    handlers: new HandlerList_js_1.HandlerList(),
    		    document: function (document, options) {
    		        return exports.mathjax.handlers.document(document, options);
    		    },
    		    handleRetriesFor: Retries_js_1.handleRetriesFor,
    		    retryAfter: Retries_js_1.retryAfter,
    		    asyncLoad: null,
    		};
    		
    	} (mathjax));
    	return mathjax;
    }

    requireMathjax();

    var tex = {};

    var InputJax = {};

    var Options = {};

    var hasRequiredOptions;

    function requireOptions () {
    	if (hasRequiredOptions) return Options;
    	hasRequiredOptions = 1;
    	(function (exports) {
    		var __values = (Options.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __read = (Options.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __spreadArray = (Options.__spreadArray) || function (to, from, pack) {
    		    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    		        if (ar || !(i in from)) {
    		            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    		            ar[i] = from[i];
    		        }
    		    }
    		    return to.concat(ar || Array.prototype.slice.call(from));
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.lookup = exports.separateOptions = exports.selectOptionsFromKeys = exports.selectOptions = exports.userOptions = exports.defaultOptions = exports.insert = exports.copy = exports.keys = exports.makeArray = exports.expandable = exports.Expandable = exports.OPTIONS = exports.REMOVE = exports.APPEND = exports.isObject = undefined;
    		var OBJECT = {}.constructor;
    		function isObject(obj) {
    		    return typeof obj === 'object' && obj !== null &&
    		        (obj.constructor === OBJECT || obj.constructor === Expandable);
    		}
    		exports.isObject = isObject;
    		exports.APPEND = '[+]';
    		exports.REMOVE = '[-]';
    		exports.OPTIONS = {
    		    invalidOption: 'warn',
    		    optionError: function (message, _key) {
    		        if (exports.OPTIONS.invalidOption === 'fatal') {
    		            throw new Error(message);
    		        }
    		        console.warn('MathJax: ' + message);
    		    }
    		};
    		var Expandable = (function () {
    		    function Expandable() {
    		    }
    		    return Expandable;
    		}());
    		exports.Expandable = Expandable;
    		function expandable(def) {
    		    return Object.assign(Object.create(Expandable.prototype), def);
    		}
    		exports.expandable = expandable;
    		function makeArray(x) {
    		    return Array.isArray(x) ? x : [x];
    		}
    		exports.makeArray = makeArray;
    		function keys(def) {
    		    if (!def) {
    		        return [];
    		    }
    		    return Object.keys(def).concat(Object.getOwnPropertySymbols(def));
    		}
    		exports.keys = keys;
    		function copy(def) {
    		    var e_1, _a;
    		    var props = {};
    		    try {
    		        for (var _b = __values(keys(def)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		            var key = _c.value;
    		            var prop = Object.getOwnPropertyDescriptor(def, key);
    		            var value = prop.value;
    		            if (Array.isArray(value)) {
    		                prop.value = insert([], value, false);
    		            }
    		            else if (isObject(value)) {
    		                prop.value = copy(value);
    		            }
    		            if (prop.enumerable) {
    		                props[key] = prop;
    		            }
    		        }
    		    }
    		    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		    finally {
    		        try {
    		            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		        }
    		        finally { if (e_1) throw e_1.error; }
    		    }
    		    return Object.defineProperties(def.constructor === Expandable ? expandable({}) : {}, props);
    		}
    		exports.copy = copy;
    		function insert(dst, src, warn) {
    		    var e_2, _a;
    		    if (warn === undefined) { warn = true; }
    		    var _loop_1 = function (key) {
    		        if (warn && dst[key] === undefined && dst.constructor !== Expandable) {
    		            if (typeof key === 'symbol') {
    		                key = key.toString();
    		            }
    		            exports.OPTIONS.optionError("Invalid option \"".concat(key, "\" (no default value)."), key);
    		            return "continue";
    		        }
    		        var sval = src[key], dval = dst[key];
    		        if (isObject(sval) && dval !== null &&
    		            (typeof dval === 'object' || typeof dval === 'function')) {
    		            var ids = keys(sval);
    		            if (Array.isArray(dval) &&
    		                ((ids.length === 1 && (ids[0] === exports.APPEND || ids[0] === exports.REMOVE) && Array.isArray(sval[ids[0]])) ||
    		                    (ids.length === 2 && ids.sort().join(',') === exports.APPEND + ',' + exports.REMOVE &&
    		                        Array.isArray(sval[exports.APPEND]) && Array.isArray(sval[exports.REMOVE])))) {
    		                if (sval[exports.REMOVE]) {
    		                    dval = dst[key] = dval.filter(function (x) { return sval[exports.REMOVE].indexOf(x) < 0; });
    		                }
    		                if (sval[exports.APPEND]) {
    		                    dst[key] = __spreadArray(__spreadArray([], __read(dval), false), __read(sval[exports.APPEND]), false);
    		                }
    		            }
    		            else {
    		                insert(dval, sval, warn);
    		            }
    		        }
    		        else if (Array.isArray(sval)) {
    		            dst[key] = [];
    		            insert(dst[key], sval, false);
    		        }
    		        else if (isObject(sval)) {
    		            dst[key] = copy(sval);
    		        }
    		        else {
    		            dst[key] = sval;
    		        }
    		    };
    		    try {
    		        for (var _b = __values(keys(src)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		            var key = _c.value;
    		            _loop_1(key);
    		        }
    		    }
    		    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		    finally {
    		        try {
    		            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		        }
    		        finally { if (e_2) throw e_2.error; }
    		    }
    		    return dst;
    		}
    		exports.insert = insert;
    		function defaultOptions(options) {
    		    var defs = [];
    		    for (var _i = 1; _i < arguments.length; _i++) {
    		        defs[_i - 1] = arguments[_i];
    		    }
    		    defs.forEach(function (def) { return insert(options, def, false); });
    		    return options;
    		}
    		exports.defaultOptions = defaultOptions;
    		function userOptions(options) {
    		    var defs = [];
    		    for (var _i = 1; _i < arguments.length; _i++) {
    		        defs[_i - 1] = arguments[_i];
    		    }
    		    defs.forEach(function (def) { return insert(options, def, true); });
    		    return options;
    		}
    		exports.userOptions = userOptions;
    		function selectOptions(options) {
    		    var e_3, _a;
    		    var keys = [];
    		    for (var _i = 1; _i < arguments.length; _i++) {
    		        keys[_i - 1] = arguments[_i];
    		    }
    		    var subset = {};
    		    try {
    		        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
    		            var key = keys_1_1.value;
    		            if (options.hasOwnProperty(key)) {
    		                subset[key] = options[key];
    		            }
    		        }
    		    }
    		    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		    finally {
    		        try {
    		            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
    		        }
    		        finally { if (e_3) throw e_3.error; }
    		    }
    		    return subset;
    		}
    		exports.selectOptions = selectOptions;
    		function selectOptionsFromKeys(options, object) {
    		    return selectOptions.apply(undefined, __spreadArray([options], __read(Object.keys(object)), false));
    		}
    		exports.selectOptionsFromKeys = selectOptionsFromKeys;
    		function separateOptions(options) {
    		    var e_4, _a, e_5, _b;
    		    var objects = [];
    		    for (var _i = 1; _i < arguments.length; _i++) {
    		        objects[_i - 1] = arguments[_i];
    		    }
    		    var results = [];
    		    try {
    		        for (var objects_1 = __values(objects), objects_1_1 = objects_1.next(); !objects_1_1.done; objects_1_1 = objects_1.next()) {
    		            var object = objects_1_1.value;
    		            var exists = {}, missing = {};
    		            try {
    		                for (var _c = (e_5 = void 0, __values(Object.keys(options || {}))), _d = _c.next(); !_d.done; _d = _c.next()) {
    		                    var key = _d.value;
    		                    (object[key] === undefined ? missing : exists)[key] = options[key];
    		                }
    		            }
    		            catch (e_5_1) { e_5 = { error: e_5_1 }; }
    		            finally {
    		                try {
    		                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
    		                }
    		                finally { if (e_5) throw e_5.error; }
    		            }
    		            results.push(exists);
    		            options = missing;
    		        }
    		    }
    		    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    		    finally {
    		        try {
    		            if (objects_1_1 && !objects_1_1.done && (_a = objects_1.return)) _a.call(objects_1);
    		        }
    		        finally { if (e_4) throw e_4.error; }
    		    }
    		    results.unshift(options);
    		    return results;
    		}
    		exports.separateOptions = separateOptions;
    		function lookup(name, lookup, def) {
    		    if (def === undefined) { def = null; }
    		    return (lookup.hasOwnProperty(name) ? lookup[name] : def);
    		}
    		exports.lookup = lookup;
    		
    	} (Options));
    	return Options;
    }

    var FunctionList = {};

    var hasRequiredFunctionList;

    function requireFunctionList () {
    	if (hasRequiredFunctionList) return FunctionList;
    	hasRequiredFunctionList = 1;
    	var __extends = (FunctionList.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __values = (FunctionList.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (FunctionList.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (FunctionList.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(FunctionList, "__esModule", { value: true });
    	FunctionList.FunctionList = undefined;
    	var PrioritizedList_js_1 = requirePrioritizedList();
    	var FunctionList$1 = (function (_super) {
    	    __extends(FunctionList, _super);
    	    function FunctionList() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    FunctionList.prototype.execute = function () {
    	        var e_1, _a;
    	        var data = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            data[_i] = arguments[_i];
    	        }
    	        try {
    	            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var item = _c.value;
    	                var result = item.item.apply(item, __spreadArray([], __read(data), false));
    	                if (result === false) {
    	                    return false;
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        return true;
    	    };
    	    FunctionList.prototype.asyncExecute = function () {
    	        var data = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            data[_i] = arguments[_i];
    	        }
    	        var i = -1;
    	        var items = this.items;
    	        return new Promise(function (ok, fail) {
    	            (function execute() {
    	                var _a;
    	                while (++i < items.length) {
    	                    var result = (_a = items[i]).item.apply(_a, __spreadArray([], __read(data), false));
    	                    if (result instanceof Promise) {
    	                        result.then(execute).catch(function (err) { return fail(err); });
    	                        return;
    	                    }
    	                    if (result === false) {
    	                        ok(false);
    	                        return;
    	                    }
    	                }
    	                ok(true);
    	            })();
    	        });
    	    };
    	    return FunctionList;
    	}(PrioritizedList_js_1.PrioritizedList));
    	FunctionList.FunctionList = FunctionList$1;
    	
    	return FunctionList;
    }

    var hasRequiredInputJax;

    function requireInputJax () {
    	if (hasRequiredInputJax) return InputJax;
    	hasRequiredInputJax = 1;
    	Object.defineProperty(InputJax, "__esModule", { value: true });
    	InputJax.AbstractInputJax = undefined;
    	var Options_js_1 = requireOptions();
    	var FunctionList_js_1 = requireFunctionList();
    	var AbstractInputJax = (function () {
    	    function AbstractInputJax(options) {
    	        if (options === undefined) { options = {}; }
    	        this.adaptor = null;
    	        this.mmlFactory = null;
    	        var CLASS = this.constructor;
    	        this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), options);
    	        this.preFilters = new FunctionList_js_1.FunctionList();
    	        this.postFilters = new FunctionList_js_1.FunctionList();
    	    }
    	    Object.defineProperty(AbstractInputJax.prototype, "name", {
    	        get: function () {
    	            return this.constructor.NAME;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    AbstractInputJax.prototype.setAdaptor = function (adaptor) {
    	        this.adaptor = adaptor;
    	    };
    	    AbstractInputJax.prototype.setMmlFactory = function (mmlFactory) {
    	        this.mmlFactory = mmlFactory;
    	    };
    	    AbstractInputJax.prototype.initialize = function () {
    	    };
    	    AbstractInputJax.prototype.reset = function () {
    	    };
    	    Object.defineProperty(AbstractInputJax.prototype, "processStrings", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    AbstractInputJax.prototype.findMath = function (_node, _options) {
    	        return [];
    	    };
    	    AbstractInputJax.prototype.executeFilters = function (filters, math, document, data) {
    	        var args = { math: math, document: document, data: data };
    	        filters.execute(args);
    	        return args.data;
    	    };
    	    AbstractInputJax.NAME = 'generic';
    	    AbstractInputJax.OPTIONS = {};
    	    return AbstractInputJax;
    	}());
    	InputJax.AbstractInputJax = AbstractInputJax;
    	
    	return InputJax;
    }

    var FindTeX = {};

    var FindMath = {};

    var hasRequiredFindMath;

    function requireFindMath () {
    	if (hasRequiredFindMath) return FindMath;
    	hasRequiredFindMath = 1;
    	Object.defineProperty(FindMath, "__esModule", { value: true });
    	FindMath.AbstractFindMath = undefined;
    	var Options_js_1 = requireOptions();
    	var AbstractFindMath = (function () {
    	    function AbstractFindMath(options) {
    	        var CLASS = this.constructor;
    	        this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), options);
    	    }
    	    AbstractFindMath.OPTIONS = {};
    	    return AbstractFindMath;
    	}());
    	FindMath.AbstractFindMath = AbstractFindMath;
    	
    	return FindMath;
    }

    var string = {};

    var hasRequiredString;

    function requireString () {
    	if (hasRequiredString) return string;
    	hasRequiredString = 1;
    	var __read = (string.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (string.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(string, "__esModule", { value: true });
    	string.split = string.isPercent = string.unicodeString = string.unicodeChars = string.quotePattern = string.sortLength = undefined;
    	function sortLength(a, b) {
    	    return a.length !== b.length ? b.length - a.length : a === b ? 0 : a < b ? -1 : 1;
    	}
    	string.sortLength = sortLength;
    	function quotePattern(text) {
    	    return text.replace(/([\^$(){}+*?\-|\[\]\:\\])/g, '\\$1');
    	}
    	string.quotePattern = quotePattern;
    	function unicodeChars(text) {
    	    return Array.from(text).map(function (c) { return c.codePointAt(0); });
    	}
    	string.unicodeChars = unicodeChars;
    	function unicodeString(data) {
    	    return String.fromCodePoint.apply(String, __spreadArray([], __read(data), false));
    	}
    	string.unicodeString = unicodeString;
    	function isPercent(x) {
    	    return !!x.match(/%\s*$/);
    	}
    	string.isPercent = isPercent;
    	function split(x) {
    	    return x.trim().split(/\s+/);
    	}
    	string.split = split;
    	
    	return string;
    }

    var MathItem = {};

    var hasRequiredMathItem;

    function requireMathItem () {
    	if (hasRequiredMathItem) return MathItem;
    	hasRequiredMathItem = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.newState = exports.STATE = exports.AbstractMathItem = exports.protoItem = undefined;
    		function protoItem(open, math, close, n, start, end, display) {
    		    if (display === undefined) { display = null; }
    		    var item = { open: open, math: math, close: close,
    		        n: n, start: { n: start }, end: { n: end }, display: display };
    		    return item;
    		}
    		exports.protoItem = protoItem;
    		var AbstractMathItem = (function () {
    		    function AbstractMathItem(math, jax, display, start, end) {
    		        if (display === undefined) { display = true; }
    		        if (start === undefined) { start = { i: 0, n: 0, delim: '' }; }
    		        if (end === undefined) { end = { i: 0, n: 0, delim: '' }; }
    		        this.root = null;
    		        this.typesetRoot = null;
    		        this.metrics = {};
    		        this.inputData = {};
    		        this.outputData = {};
    		        this._state = exports.STATE.UNPROCESSED;
    		        this.math = math;
    		        this.inputJax = jax;
    		        this.display = display;
    		        this.start = start;
    		        this.end = end;
    		        this.root = null;
    		        this.typesetRoot = null;
    		        this.metrics = {};
    		        this.inputData = {};
    		        this.outputData = {};
    		    }
    		    Object.defineProperty(AbstractMathItem.prototype, "isEscaped", {
    		        get: function () {
    		            return this.display === null;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractMathItem.prototype.render = function (document) {
    		        document.renderActions.renderMath(this, document);
    		    };
    		    AbstractMathItem.prototype.rerender = function (document, start) {
    		        if (start === undefined) { start = exports.STATE.RERENDER; }
    		        if (this.state() >= start) {
    		            this.state(start - 1);
    		        }
    		        document.renderActions.renderMath(this, document, start);
    		    };
    		    AbstractMathItem.prototype.convert = function (document, end) {
    		        if (end === undefined) { end = exports.STATE.LAST; }
    		        document.renderActions.renderConvert(this, document, end);
    		    };
    		    AbstractMathItem.prototype.compile = function (document) {
    		        if (this.state() < exports.STATE.COMPILED) {
    		            this.root = this.inputJax.compile(this, document);
    		            this.state(exports.STATE.COMPILED);
    		        }
    		    };
    		    AbstractMathItem.prototype.typeset = function (document) {
    		        if (this.state() < exports.STATE.TYPESET) {
    		            this.typesetRoot = document.outputJax[this.isEscaped ? 'escaped' : 'typeset'](this, document);
    		            this.state(exports.STATE.TYPESET);
    		        }
    		    };
    		    AbstractMathItem.prototype.updateDocument = function (_document) { };
    		    AbstractMathItem.prototype.removeFromDocument = function (_restore) {
    		    };
    		    AbstractMathItem.prototype.setMetrics = function (em, ex, cwidth, lwidth, scale) {
    		        this.metrics = {
    		            em: em, ex: ex,
    		            containerWidth: cwidth,
    		            lineWidth: lwidth,
    		            scale: scale
    		        };
    		    };
    		    AbstractMathItem.prototype.state = function (state, restore) {
    		        if (state === undefined) { state = null; }
    		        if (restore === undefined) { restore = false; }
    		        if (state != null) {
    		            if (state < exports.STATE.INSERTED && this._state >= exports.STATE.INSERTED) {
    		                this.removeFromDocument(restore);
    		            }
    		            if (state < exports.STATE.TYPESET && this._state >= exports.STATE.TYPESET) {
    		                this.outputData = {};
    		            }
    		            if (state < exports.STATE.COMPILED && this._state >= exports.STATE.COMPILED) {
    		                this.inputData = {};
    		            }
    		            this._state = state;
    		        }
    		        return this._state;
    		    };
    		    AbstractMathItem.prototype.reset = function (restore) {
    		        if (restore === undefined) { restore = false; }
    		        this.state(exports.STATE.UNPROCESSED, restore);
    		    };
    		    return AbstractMathItem;
    		}());
    		exports.AbstractMathItem = AbstractMathItem;
    		exports.STATE = {
    		    UNPROCESSED: 0,
    		    FINDMATH: 10,
    		    COMPILED: 20,
    		    CONVERT: 100,
    		    METRICS: 110,
    		    RERENDER: 125,
    		    TYPESET: 150,
    		    INSERTED: 200,
    		    LAST: 10000
    		};
    		function newState(name, state) {
    		    if (name in exports.STATE) {
    		        throw Error('State ' + name + ' already exists');
    		    }
    		    exports.STATE[name] = state;
    		}
    		exports.newState = newState;
    		
    	} (MathItem));
    	return MathItem;
    }

    var hasRequiredFindTeX;

    function requireFindTeX () {
    	if (hasRequiredFindTeX) return FindTeX;
    	hasRequiredFindTeX = 1;
    	var __extends = (FindTeX.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __read = (FindTeX.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	Object.defineProperty(FindTeX, "__esModule", { value: true });
    	FindTeX.FindTeX = undefined;
    	var FindMath_js_1 = requireFindMath();
    	var string_js_1 = requireString();
    	var MathItem_js_1 = requireMathItem();
    	var FindTeX$1 = (function (_super) {
    	    __extends(FindTeX, _super);
    	    function FindTeX(options) {
    	        var _this = _super.call(this, options) || this;
    	        _this.getPatterns();
    	        return _this;
    	    }
    	    FindTeX.prototype.getPatterns = function () {
    	        var _this = this;
    	        var options = this.options;
    	        var starts = [], parts = [], subparts = [];
    	        this.end = {};
    	        this.env = this.sub = 0;
    	        var i = 1;
    	        options['inlineMath'].forEach(function (delims) { return _this.addPattern(starts, delims, false); });
    	        options['displayMath'].forEach(function (delims) { return _this.addPattern(starts, delims, true); });
    	        if (starts.length) {
    	            parts.push(starts.sort(string_js_1.sortLength).join('|'));
    	        }
    	        if (options['processEnvironments']) {
    	            parts.push('\\\\begin\\s*\\{([^}]*)\\}');
    	            this.env = i;
    	            i++;
    	        }
    	        if (options['processEscapes']) {
    	            subparts.push('\\\\([\\\\$])');
    	        }
    	        if (options['processRefs']) {
    	            subparts.push('(\\\\(?:eq)?ref\\s*\\{[^}]*\\})');
    	        }
    	        if (subparts.length) {
    	            parts.push('(' + subparts.join('|') + ')');
    	            this.sub = i;
    	        }
    	        this.start = new RegExp(parts.join('|'), 'g');
    	        this.hasPatterns = (parts.length > 0);
    	    };
    	    FindTeX.prototype.addPattern = function (starts, delims, display) {
    	        var _a = __read(delims, 2), open = _a[0], close = _a[1];
    	        starts.push((0, string_js_1.quotePattern)(open));
    	        this.end[open] = [close, display, this.endPattern(close)];
    	    };
    	    FindTeX.prototype.endPattern = function (end, endp) {
    	        return new RegExp((endp || (0, string_js_1.quotePattern)(end)) + '|\\\\(?:[a-zA-Z]|.)|[{}]', 'g');
    	    };
    	    FindTeX.prototype.findEnd = function (text, n, start, end) {
    	        var _a = __read(end, 3), close = _a[0], display = _a[1], pattern = _a[2];
    	        var i = pattern.lastIndex = start.index + start[0].length;
    	        var match, braces = 0;
    	        while ((match = pattern.exec(text))) {
    	            if ((match[1] || match[0]) === close && braces === 0) {
    	                return (0, MathItem_js_1.protoItem)(start[0], text.substr(i, match.index - i), match[0], n, start.index, match.index + match[0].length, display);
    	            }
    	            else if (match[0] === '{') {
    	                braces++;
    	            }
    	            else if (match[0] === '}' && braces) {
    	                braces--;
    	            }
    	        }
    	        return null;
    	    };
    	    FindTeX.prototype.findMathInString = function (math, n, text) {
    	        var start, match;
    	        this.start.lastIndex = 0;
    	        while ((start = this.start.exec(text))) {
    	            if (start[this.env] !== undefined && this.env) {
    	                var end = '\\\\end\\s*(\\{' + (0, string_js_1.quotePattern)(start[this.env]) + '\\})';
    	                match = this.findEnd(text, n, start, ['{' + start[this.env] + '}', true, this.endPattern(null, end)]);
    	                if (match) {
    	                    match.math = match.open + match.math + match.close;
    	                    match.open = match.close = '';
    	                }
    	            }
    	            else if (start[this.sub] !== undefined && this.sub) {
    	                var math_1 = start[this.sub];
    	                var end = start.index + start[this.sub].length;
    	                if (math_1.length === 2) {
    	                    match = (0, MathItem_js_1.protoItem)('', math_1.substr(1), '', n, start.index, end);
    	                }
    	                else {
    	                    match = (0, MathItem_js_1.protoItem)('', math_1, '', n, start.index, end, false);
    	                }
    	            }
    	            else {
    	                match = this.findEnd(text, n, start, this.end[start[0]]);
    	            }
    	            if (match) {
    	                math.push(match);
    	                this.start.lastIndex = match.end.n;
    	            }
    	        }
    	    };
    	    FindTeX.prototype.findMath = function (strings) {
    	        var math = [];
    	        if (this.hasPatterns) {
    	            for (var i = 0, m = strings.length; i < m; i++) {
    	                this.findMathInString(math, i, strings[i]);
    	            }
    	        }
    	        return math;
    	    };
    	    FindTeX.OPTIONS = {
    	        inlineMath: [
    	            ['\\(', '\\)']
    	        ],
    	        displayMath: [
    	            ['$$', '$$'],
    	            ['\\[', '\\]']
    	        ],
    	        processEscapes: true,
    	        processEnvironments: true,
    	        processRefs: true,
    	    };
    	    return FindTeX;
    	}(FindMath_js_1.AbstractFindMath));
    	FindTeX.FindTeX = FindTeX$1;
    	
    	return FindTeX;
    }

    var FilterUtil = {};

    var MmlNode = {};

    var Attributes = {};

    var hasRequiredAttributes;

    function requireAttributes () {
    	if (hasRequiredAttributes) return Attributes;
    	hasRequiredAttributes = 1;
    	(function (exports) {
    		var __values = (Attributes.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.Attributes = exports.INHERIT = undefined;
    		exports.INHERIT = '_inherit_';
    		var Attributes$1 = (function () {
    		    function Attributes(defaults, global) {
    		        this.global = global;
    		        this.defaults = Object.create(global);
    		        this.inherited = Object.create(this.defaults);
    		        this.attributes = Object.create(this.inherited);
    		        Object.assign(this.defaults, defaults);
    		    }
    		    Attributes.prototype.set = function (name, value) {
    		        this.attributes[name] = value;
    		    };
    		    Attributes.prototype.setList = function (list) {
    		        Object.assign(this.attributes, list);
    		    };
    		    Attributes.prototype.get = function (name) {
    		        var value = this.attributes[name];
    		        if (value === exports.INHERIT) {
    		            value = this.global[name];
    		        }
    		        return value;
    		    };
    		    Attributes.prototype.getExplicit = function (name) {
    		        if (!this.attributes.hasOwnProperty(name)) {
    		            return undefined;
    		        }
    		        return this.attributes[name];
    		    };
    		    Attributes.prototype.getList = function () {
    		        var e_1, _a;
    		        var names = [];
    		        for (var _i = 0; _i < arguments.length; _i++) {
    		            names[_i] = arguments[_i];
    		        }
    		        var values = {};
    		        try {
    		            for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {
    		                var name_1 = names_1_1.value;
    		                values[name_1] = this.get(name_1);
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		        return values;
    		    };
    		    Attributes.prototype.setInherited = function (name, value) {
    		        this.inherited[name] = value;
    		    };
    		    Attributes.prototype.getInherited = function (name) {
    		        return this.inherited[name];
    		    };
    		    Attributes.prototype.getDefault = function (name) {
    		        return this.defaults[name];
    		    };
    		    Attributes.prototype.isSet = function (name) {
    		        return this.attributes.hasOwnProperty(name) || this.inherited.hasOwnProperty(name);
    		    };
    		    Attributes.prototype.hasDefault = function (name) {
    		        return (name in this.defaults);
    		    };
    		    Attributes.prototype.getExplicitNames = function () {
    		        return Object.keys(this.attributes);
    		    };
    		    Attributes.prototype.getInheritedNames = function () {
    		        return Object.keys(this.inherited);
    		    };
    		    Attributes.prototype.getDefaultNames = function () {
    		        return Object.keys(this.defaults);
    		    };
    		    Attributes.prototype.getGlobalNames = function () {
    		        return Object.keys(this.global);
    		    };
    		    Attributes.prototype.getAllAttributes = function () {
    		        return this.attributes;
    		    };
    		    Attributes.prototype.getAllInherited = function () {
    		        return this.inherited;
    		    };
    		    Attributes.prototype.getAllDefaults = function () {
    		        return this.defaults;
    		    };
    		    Attributes.prototype.getAllGlobals = function () {
    		        return this.global;
    		    };
    		    return Attributes;
    		}());
    		exports.Attributes = Attributes$1;
    		
    	} (Attributes));
    	return Attributes;
    }

    var Node$1 = {};

    var hasRequiredNode;

    function requireNode () {
    	if (hasRequiredNode) return Node$1;
    	hasRequiredNode = 1;
    	var __extends = (Node$1.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (Node$1.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __values = (Node$1.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(Node$1, "__esModule", { value: true });
    	Node$1.AbstractEmptyNode = Node$1.AbstractNode = undefined;
    	var AbstractNode = (function () {
    	    function AbstractNode(factory, properties, children) {
    	        var e_1, _a;
    	        if (properties === undefined) { properties = {}; }
    	        if (children === undefined) { children = []; }
    	        this.factory = factory;
    	        this.parent = null;
    	        this.properties = {};
    	        this.childNodes = [];
    	        try {
    	            for (var _b = __values(Object.keys(properties)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var name_1 = _c.value;
    	                this.setProperty(name_1, properties[name_1]);
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        if (children.length) {
    	            this.setChildren(children);
    	        }
    	    }
    	    Object.defineProperty(AbstractNode.prototype, "kind", {
    	        get: function () {
    	            return 'unknown';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    AbstractNode.prototype.setProperty = function (name, value) {
    	        this.properties[name] = value;
    	    };
    	    AbstractNode.prototype.getProperty = function (name) {
    	        return this.properties[name];
    	    };
    	    AbstractNode.prototype.getPropertyNames = function () {
    	        return Object.keys(this.properties);
    	    };
    	    AbstractNode.prototype.getAllProperties = function () {
    	        return this.properties;
    	    };
    	    AbstractNode.prototype.removeProperty = function () {
    	        var e_2, _a;
    	        var names = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            names[_i] = arguments[_i];
    	        }
    	        try {
    	            for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {
    	                var name_2 = names_1_1.value;
    	                delete this.properties[name_2];
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	    };
    	    AbstractNode.prototype.isKind = function (kind) {
    	        return this.factory.nodeIsKind(this, kind);
    	    };
    	    AbstractNode.prototype.setChildren = function (children) {
    	        var e_3, _a;
    	        this.childNodes = [];
    	        try {
    	            for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
    	                var child = children_1_1.value;
    	                this.appendChild(child);
    	            }
    	        }
    	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	        finally {
    	            try {
    	                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
    	            }
    	            finally { if (e_3) throw e_3.error; }
    	        }
    	    };
    	    AbstractNode.prototype.appendChild = function (child) {
    	        this.childNodes.push(child);
    	        child.parent = this;
    	        return child;
    	    };
    	    AbstractNode.prototype.replaceChild = function (newChild, oldChild) {
    	        var i = this.childIndex(oldChild);
    	        if (i !== null) {
    	            this.childNodes[i] = newChild;
    	            newChild.parent = this;
    	            oldChild.parent = null;
    	        }
    	        return newChild;
    	    };
    	    AbstractNode.prototype.removeChild = function (child) {
    	        var i = this.childIndex(child);
    	        if (i !== null) {
    	            this.childNodes.splice(i, 1);
    	            child.parent = null;
    	        }
    	        return child;
    	    };
    	    AbstractNode.prototype.childIndex = function (node) {
    	        var i = this.childNodes.indexOf(node);
    	        return (i === -1 ? null : i);
    	    };
    	    AbstractNode.prototype.copy = function () {
    	        var e_4, _a;
    	        var node = this.factory.create(this.kind);
    	        node.properties = __assign({}, this.properties);
    	        try {
    	            for (var _b = __values(this.childNodes || []), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                if (child) {
    	                    node.appendChild(child.copy());
    	                }
    	            }
    	        }
    	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_4) throw e_4.error; }
    	        }
    	        return node;
    	    };
    	    AbstractNode.prototype.findNodes = function (kind) {
    	        var nodes = [];
    	        this.walkTree(function (node) {
    	            if (node.isKind(kind)) {
    	                nodes.push(node);
    	            }
    	        });
    	        return nodes;
    	    };
    	    AbstractNode.prototype.walkTree = function (func, data) {
    	        var e_5, _a;
    	        func(this, data);
    	        try {
    	            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                if (child) {
    	                    child.walkTree(func, data);
    	                }
    	            }
    	        }
    	        catch (e_5_1) { e_5 = { error: e_5_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_5) throw e_5.error; }
    	        }
    	        return data;
    	    };
    	    AbstractNode.prototype.toString = function () {
    	        return this.kind + '(' + this.childNodes.join(',') + ')';
    	    };
    	    return AbstractNode;
    	}());
    	Node$1.AbstractNode = AbstractNode;
    	var AbstractEmptyNode = (function (_super) {
    	    __extends(AbstractEmptyNode, _super);
    	    function AbstractEmptyNode() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    AbstractEmptyNode.prototype.setChildren = function (_children) {
    	    };
    	    AbstractEmptyNode.prototype.appendChild = function (child) {
    	        return child;
    	    };
    	    AbstractEmptyNode.prototype.replaceChild = function (_newChild, oldChild) {
    	        return oldChild;
    	    };
    	    AbstractEmptyNode.prototype.childIndex = function (_node) {
    	        return null;
    	    };
    	    AbstractEmptyNode.prototype.walkTree = function (func, data) {
    	        func(this, data);
    	        return data;
    	    };
    	    AbstractEmptyNode.prototype.toString = function () {
    	        return this.kind;
    	    };
    	    return AbstractEmptyNode;
    	}(AbstractNode));
    	Node$1.AbstractEmptyNode = AbstractEmptyNode;
    	
    	return Node$1;
    }

    var hasRequiredMmlNode;

    function requireMmlNode () {
    	if (hasRequiredMmlNode) return MmlNode;
    	hasRequiredMmlNode = 1;
    	(function (exports) {
    		var __extends = (MmlNode.__extends) || (function () {
    		    var extendStatics = function (d, b) {
    		        extendStatics = Object.setPrototypeOf ||
    		            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    		            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    		        return extendStatics(d, b);
    		    };
    		    return function (d, b) {
    		        if (typeof b !== "function" && b !== null)
    		            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    		        extendStatics(d, b);
    		        function __() { this.constructor = d; }
    		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    		    };
    		})();
    		var __assign = (MmlNode.__assign) || function () {
    		    __assign = Object.assign || function(t) {
    		        for (var s, i = 1, n = arguments.length; i < n; i++) {
    		            s = arguments[i];
    		            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    		                t[p] = s[p];
    		        }
    		        return t;
    		    };
    		    return __assign.apply(this, arguments);
    		};
    		var __values = (MmlNode.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __read = (MmlNode.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.XMLNode = exports.TextNode = exports.AbstractMmlEmptyNode = exports.AbstractMmlBaseNode = exports.AbstractMmlLayoutNode = exports.AbstractMmlTokenNode = exports.AbstractMmlNode = exports.indentAttributes = exports.TEXCLASSNAMES = exports.TEXCLASS = undefined;
    		var Attributes_js_1 = requireAttributes();
    		var Node_js_1 = requireNode();
    		exports.TEXCLASS = {
    		    ORD: 0,
    		    OP: 1,
    		    BIN: 2,
    		    REL: 3,
    		    OPEN: 4,
    		    CLOSE: 5,
    		    PUNCT: 6,
    		    INNER: 7,
    		    VCENTER: 8,
    		    NONE: -1
    		};
    		exports.TEXCLASSNAMES = ['ORD', 'OP', 'BIN', 'REL', 'OPEN', 'CLOSE', 'PUNCT', 'INNER', 'VCENTER'];
    		var TEXSPACELENGTH = ['', 'thinmathspace', 'mediummathspace', 'thickmathspace'];
    		var TEXSPACE = [
    		    [0, -1, 2, 3, 0, 0, 0, 1],
    		    [-1, -1, 0, 3, 0, 0, 0, 1],
    		    [2, 2, 0, 0, 2, 0, 0, 2],
    		    [3, 3, 0, 0, 3, 0, 0, 3],
    		    [0, 0, 0, 0, 0, 0, 0, 0],
    		    [0, -1, 2, 3, 0, 0, 0, 1],
    		    [1, 1, 0, 1, 1, 1, 1, 1],
    		    [1, -1, 2, 3, 1, 0, 1, 1]
    		];
    		exports.indentAttributes = [
    		    'indentalign', 'indentalignfirst',
    		    'indentshift', 'indentshiftfirst'
    		];
    		var AbstractMmlNode = (function (_super) {
    		    __extends(AbstractMmlNode, _super);
    		    function AbstractMmlNode(factory, attributes, children) {
    		        if (attributes === undefined) { attributes = {}; }
    		        if (children === undefined) { children = []; }
    		        var _this = _super.call(this, factory) || this;
    		        _this.prevClass = null;
    		        _this.prevLevel = null;
    		        _this.texclass = null;
    		        if (_this.arity < 0) {
    		            _this.childNodes = [factory.create('inferredMrow')];
    		            _this.childNodes[0].parent = _this;
    		        }
    		        _this.setChildren(children);
    		        _this.attributes = new Attributes_js_1.Attributes(factory.getNodeClass(_this.kind).defaults, factory.getNodeClass('math').defaults);
    		        _this.attributes.setList(attributes);
    		        return _this;
    		    }
    		    AbstractMmlNode.prototype.copy = function (keepIds) {
    		        var e_1, _a, e_2, _b;
    		        if (keepIds === undefined) { keepIds = false; }
    		        var node = this.factory.create(this.kind);
    		        node.properties = __assign({}, this.properties);
    		        if (this.attributes) {
    		            var attributes = this.attributes.getAllAttributes();
    		            try {
    		                for (var _c = __values(Object.keys(attributes)), _d = _c.next(); !_d.done; _d = _c.next()) {
    		                    var name_1 = _d.value;
    		                    if (name_1 !== 'id' || keepIds) {
    		                        node.attributes.set(name_1, attributes[name_1]);
    		                    }
    		                }
    		            }
    		            catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		            finally {
    		                try {
    		                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    		                }
    		                finally { if (e_1) throw e_1.error; }
    		            }
    		        }
    		        if (this.childNodes && this.childNodes.length) {
    		            var children = this.childNodes;
    		            if (children.length === 1 && children[0].isInferred) {
    		                children = children[0].childNodes;
    		            }
    		            try {
    		                for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
    		                    var child = children_1_1.value;
    		                    if (child) {
    		                        node.appendChild(child.copy());
    		                    }
    		                    else {
    		                        node.childNodes.push(null);
    		                    }
    		                }
    		            }
    		            catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		            finally {
    		                try {
    		                    if (children_1_1 && !children_1_1.done && (_b = children_1.return)) _b.call(children_1);
    		                }
    		                finally { if (e_2) throw e_2.error; }
    		            }
    		        }
    		        return node;
    		    };
    		    Object.defineProperty(AbstractMmlNode.prototype, "texClass", {
    		        get: function () {
    		            return this.texclass;
    		        },
    		        set: function (texClass) {
    		            this.texclass = texClass;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "isToken", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "isEmbellished", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "isSpacelike", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "linebreakContainer", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "hasNewLine", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "arity", {
    		        get: function () {
    		            return Infinity;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "isInferred", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "Parent", {
    		        get: function () {
    		            var parent = this.parent;
    		            while (parent && parent.notParent) {
    		                parent = parent.Parent;
    		            }
    		            return parent;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlNode.prototype, "notParent", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractMmlNode.prototype.setChildren = function (children) {
    		        if (this.arity < 0) {
    		            return this.childNodes[0].setChildren(children);
    		        }
    		        return _super.prototype.setChildren.call(this, children);
    		    };
    		    AbstractMmlNode.prototype.appendChild = function (child) {
    		        var e_3, _a;
    		        var _this = this;
    		        if (this.arity < 0) {
    		            this.childNodes[0].appendChild(child);
    		            return child;
    		        }
    		        if (child.isInferred) {
    		            if (this.arity === Infinity) {
    		                child.childNodes.forEach(function (node) { return _super.prototype.appendChild.call(_this, node); });
    		                return child;
    		            }
    		            var original = child;
    		            child = this.factory.create('mrow');
    		            child.setChildren(original.childNodes);
    		            child.attributes = original.attributes;
    		            try {
    		                for (var _b = __values(original.getPropertyNames()), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                    var name_2 = _c.value;
    		                    child.setProperty(name_2, original.getProperty(name_2));
    		                }
    		            }
    		            catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		            finally {
    		                try {
    		                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		                }
    		                finally { if (e_3) throw e_3.error; }
    		            }
    		        }
    		        return _super.prototype.appendChild.call(this, child);
    		    };
    		    AbstractMmlNode.prototype.replaceChild = function (newChild, oldChild) {
    		        if (this.arity < 0) {
    		            this.childNodes[0].replaceChild(newChild, oldChild);
    		            return newChild;
    		        }
    		        return _super.prototype.replaceChild.call(this, newChild, oldChild);
    		    };
    		    AbstractMmlNode.prototype.core = function () {
    		        return this;
    		    };
    		    AbstractMmlNode.prototype.coreMO = function () {
    		        return this;
    		    };
    		    AbstractMmlNode.prototype.coreIndex = function () {
    		        return 0;
    		    };
    		    AbstractMmlNode.prototype.childPosition = function () {
    		        var e_4, _a;
    		        var child = this;
    		        var parent = child.parent;
    		        while (parent && parent.notParent) {
    		            child = parent;
    		            parent = parent.parent;
    		        }
    		        if (parent) {
    		            var i = 0;
    		            try {
    		                for (var _b = __values(parent.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                    var node = _c.value;
    		                    if (node === child) {
    		                        return i;
    		                    }
    		                    i++;
    		                }
    		            }
    		            catch (e_4_1) { e_4 = { error: e_4_1 }; }
    		            finally {
    		                try {
    		                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		                }
    		                finally { if (e_4) throw e_4.error; }
    		            }
    		        }
    		        return null;
    		    };
    		    AbstractMmlNode.prototype.setTeXclass = function (prev) {
    		        this.getPrevClass(prev);
    		        return (this.texClass != null ? this : prev);
    		    };
    		    AbstractMmlNode.prototype.updateTeXclass = function (core) {
    		        if (core) {
    		            this.prevClass = core.prevClass;
    		            this.prevLevel = core.prevLevel;
    		            core.prevClass = core.prevLevel = null;
    		            this.texClass = core.texClass;
    		        }
    		    };
    		    AbstractMmlNode.prototype.getPrevClass = function (prev) {
    		        if (prev) {
    		            this.prevClass = prev.texClass;
    		            this.prevLevel = prev.attributes.get('scriptlevel');
    		        }
    		    };
    		    AbstractMmlNode.prototype.texSpacing = function () {
    		        var prevClass = (this.prevClass != null ? this.prevClass : exports.TEXCLASS.NONE);
    		        var texClass = this.texClass || exports.TEXCLASS.ORD;
    		        if (prevClass === exports.TEXCLASS.NONE || texClass === exports.TEXCLASS.NONE) {
    		            return '';
    		        }
    		        if (prevClass === exports.TEXCLASS.VCENTER) {
    		            prevClass = exports.TEXCLASS.ORD;
    		        }
    		        if (texClass === exports.TEXCLASS.VCENTER) {
    		            texClass = exports.TEXCLASS.ORD;
    		        }
    		        var space = TEXSPACE[prevClass][texClass];
    		        if ((this.prevLevel > 0 || this.attributes.get('scriptlevel') > 0) && space >= 0) {
    		            return '';
    		        }
    		        return TEXSPACELENGTH[Math.abs(space)];
    		    };
    		    AbstractMmlNode.prototype.hasSpacingAttributes = function () {
    		        return this.isEmbellished && this.coreMO().hasSpacingAttributes();
    		    };
    		    AbstractMmlNode.prototype.setInheritedAttributes = function (attributes, display, level, prime) {
    		        var e_5, _a;
    		        if (attributes === undefined) { attributes = {}; }
    		        if (display === undefined) { display = false; }
    		        if (level === undefined) { level = 0; }
    		        if (prime === undefined) { prime = false; }
    		        var defaults = this.attributes.getAllDefaults();
    		        try {
    		            for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var key = _c.value;
    		                if (defaults.hasOwnProperty(key) || AbstractMmlNode.alwaysInherit.hasOwnProperty(key)) {
    		                    var _d = __read(attributes[key], 2), node = _d[0], value = _d[1];
    		                    var noinherit = (AbstractMmlNode.noInherit[node] || {})[this.kind] || {};
    		                    if (!noinherit[key]) {
    		                        this.attributes.setInherited(key, value);
    		                    }
    		                }
    		            }
    		        }
    		        catch (e_5_1) { e_5 = { error: e_5_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_5) throw e_5.error; }
    		        }
    		        var displaystyle = this.attributes.getExplicit('displaystyle');
    		        if (displaystyle === undefined) {
    		            this.attributes.setInherited('displaystyle', display);
    		        }
    		        var scriptlevel = this.attributes.getExplicit('scriptlevel');
    		        if (scriptlevel === undefined) {
    		            this.attributes.setInherited('scriptlevel', level);
    		        }
    		        if (prime) {
    		            this.setProperty('texprimestyle', prime);
    		        }
    		        var arity = this.arity;
    		        if (arity >= 0 && arity !== Infinity && ((arity === 1 && this.childNodes.length === 0) ||
    		            (arity !== 1 && this.childNodes.length !== arity))) {
    		            if (arity < this.childNodes.length) {
    		                this.childNodes = this.childNodes.slice(0, arity);
    		            }
    		            else {
    		                while (this.childNodes.length < arity) {
    		                    this.appendChild(this.factory.create('mrow'));
    		                }
    		            }
    		        }
    		        this.setChildInheritedAttributes(attributes, display, level, prime);
    		    };
    		    AbstractMmlNode.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    		        var e_6, _a;
    		        try {
    		            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var child = _c.value;
    		                child.setInheritedAttributes(attributes, display, level, prime);
    		            }
    		        }
    		        catch (e_6_1) { e_6 = { error: e_6_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_6) throw e_6.error; }
    		        }
    		    };
    		    AbstractMmlNode.prototype.addInheritedAttributes = function (current, attributes) {
    		        var e_7, _a;
    		        var updated = __assign({}, current);
    		        try {
    		            for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var name_3 = _c.value;
    		                if (name_3 !== 'displaystyle' && name_3 !== 'scriptlevel' && name_3 !== 'style') {
    		                    updated[name_3] = [this.kind, attributes[name_3]];
    		                }
    		            }
    		        }
    		        catch (e_7_1) { e_7 = { error: e_7_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_7) throw e_7.error; }
    		        }
    		        return updated;
    		    };
    		    AbstractMmlNode.prototype.inheritAttributesFrom = function (node) {
    		        var attributes = node.attributes;
    		        var display = attributes.get('displaystyle');
    		        var scriptlevel = attributes.get('scriptlevel');
    		        var defaults = (!attributes.isSet('mathsize') ? {} : {
    		            mathsize: ['math', attributes.get('mathsize')]
    		        });
    		        var prime = node.getProperty('texprimestyle') || false;
    		        this.setInheritedAttributes(defaults, display, scriptlevel, prime);
    		    };
    		    AbstractMmlNode.prototype.verifyTree = function (options) {
    		        if (options === undefined) { options = null; }
    		        if (options === null) {
    		            return;
    		        }
    		        this.verifyAttributes(options);
    		        var arity = this.arity;
    		        if (options['checkArity']) {
    		            if (arity >= 0 && arity !== Infinity &&
    		                ((arity === 1 && this.childNodes.length === 0) ||
    		                    (arity !== 1 && this.childNodes.length !== arity))) {
    		                this.mError('Wrong number of children for "' + this.kind + '" node', options, true);
    		            }
    		        }
    		        this.verifyChildren(options);
    		    };
    		    AbstractMmlNode.prototype.verifyAttributes = function (options) {
    		        var e_8, _a;
    		        if (options['checkAttributes']) {
    		            var attributes = this.attributes;
    		            var bad = [];
    		            try {
    		                for (var _b = __values(attributes.getExplicitNames()), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                    var name_4 = _c.value;
    		                    if (name_4.substr(0, 5) !== 'data-' && attributes.getDefault(name_4) === undefined &&
    		                        !name_4.match(/^(?:class|style|id|(?:xlink:)?href)$/)) {
    		                        bad.push(name_4);
    		                    }
    		                }
    		            }
    		            catch (e_8_1) { e_8 = { error: e_8_1 }; }
    		            finally {
    		                try {
    		                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		                }
    		                finally { if (e_8) throw e_8.error; }
    		            }
    		            if (bad.length) {
    		                this.mError('Unknown attributes for ' + this.kind + ' node: ' + bad.join(', '), options);
    		            }
    		        }
    		    };
    		    AbstractMmlNode.prototype.verifyChildren = function (options) {
    		        var e_9, _a;
    		        try {
    		            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var child = _c.value;
    		                child.verifyTree(options);
    		            }
    		        }
    		        catch (e_9_1) { e_9 = { error: e_9_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_9) throw e_9.error; }
    		        }
    		    };
    		    AbstractMmlNode.prototype.mError = function (message, options, short) {
    		        if (short === undefined) { short = false; }
    		        if (this.parent && this.parent.isKind('merror')) {
    		            return null;
    		        }
    		        var merror = this.factory.create('merror');
    		        merror.attributes.set('data-mjx-message', message);
    		        if (options['fullErrors'] || short) {
    		            var mtext = this.factory.create('mtext');
    		            var text = this.factory.create('text');
    		            text.setText(options['fullErrors'] ? message : this.kind);
    		            mtext.appendChild(text);
    		            merror.appendChild(mtext);
    		            this.parent.replaceChild(merror, this);
    		        }
    		        else {
    		            this.parent.replaceChild(merror, this);
    		            merror.appendChild(this);
    		        }
    		        return merror;
    		    };
    		    AbstractMmlNode.defaults = {
    		        mathbackground: Attributes_js_1.INHERIT,
    		        mathcolor: Attributes_js_1.INHERIT,
    		        mathsize: Attributes_js_1.INHERIT,
    		        dir: Attributes_js_1.INHERIT
    		    };
    		    AbstractMmlNode.noInherit = {
    		        mstyle: {
    		            mpadded: { width: true, height: true, depth: true, lspace: true, voffset: true },
    		            mtable: { width: true, height: true, depth: true, align: true }
    		        },
    		        maligngroup: {
    		            mrow: { groupalign: true },
    		            mtable: { groupalign: true }
    		        }
    		    };
    		    AbstractMmlNode.alwaysInherit = {
    		        scriptminsize: true,
    		        scriptsizemultiplier: true
    		    };
    		    AbstractMmlNode.verifyDefaults = {
    		        checkArity: true,
    		        checkAttributes: false,
    		        fullErrors: false,
    		        fixMmultiscripts: true,
    		        fixMtables: true
    		    };
    		    return AbstractMmlNode;
    		}(Node_js_1.AbstractNode));
    		exports.AbstractMmlNode = AbstractMmlNode;
    		var AbstractMmlTokenNode = (function (_super) {
    		    __extends(AbstractMmlTokenNode, _super);
    		    function AbstractMmlTokenNode() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    Object.defineProperty(AbstractMmlTokenNode.prototype, "isToken", {
    		        get: function () {
    		            return true;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractMmlTokenNode.prototype.getText = function () {
    		        var e_10, _a;
    		        var text = '';
    		        try {
    		            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var child = _c.value;
    		                if (child instanceof TextNode) {
    		                    text += child.getText();
    		                }
    		            }
    		        }
    		        catch (e_10_1) { e_10 = { error: e_10_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_10) throw e_10.error; }
    		        }
    		        return text;
    		    };
    		    AbstractMmlTokenNode.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    		        var e_11, _a;
    		        try {
    		            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var child = _c.value;
    		                if (child instanceof AbstractMmlNode) {
    		                    child.setInheritedAttributes(attributes, display, level, prime);
    		                }
    		            }
    		        }
    		        catch (e_11_1) { e_11 = { error: e_11_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_11) throw e_11.error; }
    		        }
    		    };
    		    AbstractMmlTokenNode.prototype.walkTree = function (func, data) {
    		        var e_12, _a;
    		        func(this, data);
    		        try {
    		            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var child = _c.value;
    		                if (child instanceof AbstractMmlNode) {
    		                    child.walkTree(func, data);
    		                }
    		            }
    		        }
    		        catch (e_12_1) { e_12 = { error: e_12_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_12) throw e_12.error; }
    		        }
    		        return data;
    		    };
    		    AbstractMmlTokenNode.defaults = __assign(__assign({}, AbstractMmlNode.defaults), { mathvariant: 'normal', mathsize: Attributes_js_1.INHERIT });
    		    return AbstractMmlTokenNode;
    		}(AbstractMmlNode));
    		exports.AbstractMmlTokenNode = AbstractMmlTokenNode;
    		var AbstractMmlLayoutNode = (function (_super) {
    		    __extends(AbstractMmlLayoutNode, _super);
    		    function AbstractMmlLayoutNode() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    Object.defineProperty(AbstractMmlLayoutNode.prototype, "isSpacelike", {
    		        get: function () {
    		            return this.childNodes[0].isSpacelike;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlLayoutNode.prototype, "isEmbellished", {
    		        get: function () {
    		            return this.childNodes[0].isEmbellished;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlLayoutNode.prototype, "arity", {
    		        get: function () {
    		            return -1;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractMmlLayoutNode.prototype.core = function () {
    		        return this.childNodes[0];
    		    };
    		    AbstractMmlLayoutNode.prototype.coreMO = function () {
    		        return this.childNodes[0].coreMO();
    		    };
    		    AbstractMmlLayoutNode.prototype.setTeXclass = function (prev) {
    		        prev = this.childNodes[0].setTeXclass(prev);
    		        this.updateTeXclass(this.childNodes[0]);
    		        return prev;
    		    };
    		    AbstractMmlLayoutNode.defaults = AbstractMmlNode.defaults;
    		    return AbstractMmlLayoutNode;
    		}(AbstractMmlNode));
    		exports.AbstractMmlLayoutNode = AbstractMmlLayoutNode;
    		var AbstractMmlBaseNode = (function (_super) {
    		    __extends(AbstractMmlBaseNode, _super);
    		    function AbstractMmlBaseNode() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    Object.defineProperty(AbstractMmlBaseNode.prototype, "isEmbellished", {
    		        get: function () {
    		            return this.childNodes[0].isEmbellished;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractMmlBaseNode.prototype.core = function () {
    		        return this.childNodes[0];
    		    };
    		    AbstractMmlBaseNode.prototype.coreMO = function () {
    		        return this.childNodes[0].coreMO();
    		    };
    		    AbstractMmlBaseNode.prototype.setTeXclass = function (prev) {
    		        var e_13, _a;
    		        this.getPrevClass(prev);
    		        this.texClass = exports.TEXCLASS.ORD;
    		        var base = this.childNodes[0];
    		        if (base) {
    		            if (this.isEmbellished || base.isKind('mi')) {
    		                prev = base.setTeXclass(prev);
    		                this.updateTeXclass(this.core());
    		            }
    		            else {
    		                base.setTeXclass(null);
    		                prev = this;
    		            }
    		        }
    		        else {
    		            prev = this;
    		        }
    		        try {
    		            for (var _b = __values(this.childNodes.slice(1)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var child = _c.value;
    		                if (child) {
    		                    child.setTeXclass(null);
    		                }
    		            }
    		        }
    		        catch (e_13_1) { e_13 = { error: e_13_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_13) throw e_13.error; }
    		        }
    		        return prev;
    		    };
    		    AbstractMmlBaseNode.defaults = AbstractMmlNode.defaults;
    		    return AbstractMmlBaseNode;
    		}(AbstractMmlNode));
    		exports.AbstractMmlBaseNode = AbstractMmlBaseNode;
    		var AbstractMmlEmptyNode = (function (_super) {
    		    __extends(AbstractMmlEmptyNode, _super);
    		    function AbstractMmlEmptyNode() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "isToken", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "isEmbellished", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "isSpacelike", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "linebreakContainer", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "hasNewLine", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "arity", {
    		        get: function () {
    		            return 0;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "isInferred", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "notParent", {
    		        get: function () {
    		            return false;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "Parent", {
    		        get: function () {
    		            return this.parent;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "texClass", {
    		        get: function () {
    		            return exports.TEXCLASS.NONE;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "prevClass", {
    		        get: function () {
    		            return exports.TEXCLASS.NONE;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "prevLevel", {
    		        get: function () {
    		            return 0;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractMmlEmptyNode.prototype.hasSpacingAttributes = function () {
    		        return false;
    		    };
    		    Object.defineProperty(AbstractMmlEmptyNode.prototype, "attributes", {
    		        get: function () {
    		            return null;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractMmlEmptyNode.prototype.core = function () {
    		        return this;
    		    };
    		    AbstractMmlEmptyNode.prototype.coreMO = function () {
    		        return this;
    		    };
    		    AbstractMmlEmptyNode.prototype.coreIndex = function () {
    		        return 0;
    		    };
    		    AbstractMmlEmptyNode.prototype.childPosition = function () {
    		        return 0;
    		    };
    		    AbstractMmlEmptyNode.prototype.setTeXclass = function (prev) {
    		        return prev;
    		    };
    		    AbstractMmlEmptyNode.prototype.texSpacing = function () {
    		        return '';
    		    };
    		    AbstractMmlEmptyNode.prototype.setInheritedAttributes = function (_attributes, _display, _level, _prime) { };
    		    AbstractMmlEmptyNode.prototype.inheritAttributesFrom = function (_node) { };
    		    AbstractMmlEmptyNode.prototype.verifyTree = function (_options) { };
    		    AbstractMmlEmptyNode.prototype.mError = function (_message, _options, _short) {
    		        return null;
    		    };
    		    return AbstractMmlEmptyNode;
    		}(Node_js_1.AbstractEmptyNode));
    		exports.AbstractMmlEmptyNode = AbstractMmlEmptyNode;
    		var TextNode = (function (_super) {
    		    __extends(TextNode, _super);
    		    function TextNode() {
    		        var _this = _super !== null && _super.apply(this, arguments) || this;
    		        _this.text = '';
    		        return _this;
    		    }
    		    Object.defineProperty(TextNode.prototype, "kind", {
    		        get: function () {
    		            return 'text';
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    TextNode.prototype.getText = function () {
    		        return this.text;
    		    };
    		    TextNode.prototype.setText = function (text) {
    		        this.text = text;
    		        return this;
    		    };
    		    TextNode.prototype.copy = function () {
    		        return this.factory.create(this.kind).setText(this.getText());
    		    };
    		    TextNode.prototype.toString = function () {
    		        return this.text;
    		    };
    		    return TextNode;
    		}(AbstractMmlEmptyNode));
    		exports.TextNode = TextNode;
    		var XMLNode = (function (_super) {
    		    __extends(XMLNode, _super);
    		    function XMLNode() {
    		        var _this = _super !== null && _super.apply(this, arguments) || this;
    		        _this.xml = null;
    		        _this.adaptor = null;
    		        return _this;
    		    }
    		    Object.defineProperty(XMLNode.prototype, "kind", {
    		        get: function () {
    		            return 'XML';
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    XMLNode.prototype.getXML = function () {
    		        return this.xml;
    		    };
    		    XMLNode.prototype.setXML = function (xml, adaptor) {
    		        if (adaptor === undefined) { adaptor = null; }
    		        this.xml = xml;
    		        this.adaptor = adaptor;
    		        return this;
    		    };
    		    XMLNode.prototype.getSerializedXML = function () {
    		        return this.adaptor.serializeXML(this.xml);
    		    };
    		    XMLNode.prototype.copy = function () {
    		        return this.factory.create(this.kind).setXML(this.adaptor.clone(this.xml));
    		    };
    		    XMLNode.prototype.toString = function () {
    		        return 'XML data';
    		    };
    		    return XMLNode;
    		}(AbstractMmlEmptyNode));
    		exports.XMLNode = XMLNode;
    		
    	} (MmlNode));
    	return MmlNode;
    }

    var NodeUtil = {};

    var mo = {};

    var OperatorDictionary = {};

    var hasRequiredOperatorDictionary;

    function requireOperatorDictionary () {
    	if (hasRequiredOperatorDictionary) return OperatorDictionary;
    	hasRequiredOperatorDictionary = 1;
    	(function (exports) {
    		var __values = (OperatorDictionary.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.OPTABLE = exports.MMLSPACING = exports.getRange = exports.RANGES = exports.MO = exports.OPDEF = undefined;
    		var MmlNode_js_1 = requireMmlNode();
    		function OPDEF(lspace, rspace, texClass, properties) {
    		    if (texClass === undefined) { texClass = MmlNode_js_1.TEXCLASS.BIN; }
    		    if (properties === undefined) { properties = null; }
    		    return [lspace, rspace, texClass, properties];
    		}
    		exports.OPDEF = OPDEF;
    		exports.MO = {
    		    ORD: OPDEF(0, 0, MmlNode_js_1.TEXCLASS.ORD),
    		    ORD11: OPDEF(1, 1, MmlNode_js_1.TEXCLASS.ORD),
    		    ORD21: OPDEF(2, 1, MmlNode_js_1.TEXCLASS.ORD),
    		    ORD02: OPDEF(0, 2, MmlNode_js_1.TEXCLASS.ORD),
    		    ORD55: OPDEF(5, 5, MmlNode_js_1.TEXCLASS.ORD),
    		    NONE: OPDEF(0, 0, MmlNode_js_1.TEXCLASS.NONE),
    		    OP: OPDEF(1, 2, MmlNode_js_1.TEXCLASS.OP, { largeop: true, movablelimits: true, symmetric: true }),
    		    OPFIXED: OPDEF(1, 2, MmlNode_js_1.TEXCLASS.OP, { largeop: true, movablelimits: true }),
    		    INTEGRAL: OPDEF(0, 1, MmlNode_js_1.TEXCLASS.OP, { largeop: true, symmetric: true }),
    		    INTEGRAL2: OPDEF(1, 2, MmlNode_js_1.TEXCLASS.OP, { largeop: true, symmetric: true }),
    		    BIN3: OPDEF(3, 3, MmlNode_js_1.TEXCLASS.BIN),
    		    BIN4: OPDEF(4, 4, MmlNode_js_1.TEXCLASS.BIN),
    		    BIN01: OPDEF(0, 1, MmlNode_js_1.TEXCLASS.BIN),
    		    BIN5: OPDEF(5, 5, MmlNode_js_1.TEXCLASS.BIN),
    		    TALLBIN: OPDEF(4, 4, MmlNode_js_1.TEXCLASS.BIN, { stretchy: true }),
    		    BINOP: OPDEF(4, 4, MmlNode_js_1.TEXCLASS.BIN, { largeop: true, movablelimits: true }),
    		    REL: OPDEF(5, 5, MmlNode_js_1.TEXCLASS.REL),
    		    REL1: OPDEF(1, 1, MmlNode_js_1.TEXCLASS.REL, { stretchy: true }),
    		    REL4: OPDEF(4, 4, MmlNode_js_1.TEXCLASS.REL),
    		    RELSTRETCH: OPDEF(5, 5, MmlNode_js_1.TEXCLASS.REL, { stretchy: true }),
    		    RELACCENT: OPDEF(5, 5, MmlNode_js_1.TEXCLASS.REL, { accent: true }),
    		    WIDEREL: OPDEF(5, 5, MmlNode_js_1.TEXCLASS.REL, { accent: true, stretchy: true }),
    		    OPEN: OPDEF(0, 0, MmlNode_js_1.TEXCLASS.OPEN, { fence: true, stretchy: true, symmetric: true }),
    		    CLOSE: OPDEF(0, 0, MmlNode_js_1.TEXCLASS.CLOSE, { fence: true, stretchy: true, symmetric: true }),
    		    INNER: OPDEF(0, 0, MmlNode_js_1.TEXCLASS.INNER),
    		    PUNCT: OPDEF(0, 3, MmlNode_js_1.TEXCLASS.PUNCT),
    		    ACCENT: OPDEF(0, 0, MmlNode_js_1.TEXCLASS.ORD, { accent: true }),
    		    WIDEACCENT: OPDEF(0, 0, MmlNode_js_1.TEXCLASS.ORD, { accent: true, stretchy: true })
    		};
    		exports.RANGES = [
    		    [0x0020, 0x007F, MmlNode_js_1.TEXCLASS.REL, 'mo'],
    		    [0x00A0, 0x00BF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x00C0, 0x024F, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0x02B0, 0x036F, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x0370, 0x1A20, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0x1AB0, 0x1AFF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x1B00, 0x1DBF, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0x1DC0, 0x1DFF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x1E00, 0x1FFF, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0x2000, 0x206F, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x2070, 0x209F, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x2100, 0x214F, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0x2150, 0x218F, MmlNode_js_1.TEXCLASS.ORD, 'mn'],
    		    [0x2190, 0x21FF, MmlNode_js_1.TEXCLASS.REL, 'mo'],
    		    [0x2200, 0x22FF, MmlNode_js_1.TEXCLASS.BIN, 'mo'],
    		    [0x2300, 0x23FF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x2460, 0x24FF, MmlNode_js_1.TEXCLASS.ORD, 'mn'],
    		    [0x2500, 0x27EF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x27F0, 0x27FF, MmlNode_js_1.TEXCLASS.REL, 'mo'],
    		    [0x2800, 0x28FF, MmlNode_js_1.TEXCLASS.ORD, 'mtext'],
    		    [0x2900, 0x297F, MmlNode_js_1.TEXCLASS.REL, 'mo'],
    		    [0x2980, 0x29FF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x2A00, 0x2AFF, MmlNode_js_1.TEXCLASS.BIN, 'mo'],
    		    [0x2B00, 0x2B2F, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x2B30, 0x2B4F, MmlNode_js_1.TEXCLASS.REL, 'mo'],
    		    [0x2B50, 0x2BFF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x2C00, 0x2DE0, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0x2E00, 0x2E7F, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x2E80, 0x2FDF, MmlNode_js_1.TEXCLASS.ORD, 'mi', 'normal'],
    		    [0x2FF0, 0x303F, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x3040, 0xA49F, MmlNode_js_1.TEXCLASS.ORD, 'mi', 'normal'],
    		    [0xA4D0, 0xA82F, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0xA830, 0xA83F, MmlNode_js_1.TEXCLASS.ORD, 'mn'],
    		    [0xA840, 0xD7FF, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0xF900, 0xFAFF, MmlNode_js_1.TEXCLASS.ORD, 'mi', 'normal'],
    		    [0xFB00, 0xFDFF, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0xFE00, 0xFE6F, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0xFE70, 0x100FF, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0x10100, 0x1018F, MmlNode_js_1.TEXCLASS.ORD, 'mn'],
    		    [0x10190, 0x123FF, MmlNode_js_1.TEXCLASS.ORD, 'mi', 'normal'],
    		    [0x12400, 0x1247F, MmlNode_js_1.TEXCLASS.ORD, 'mn'],
    		    [0x12480, 0x1BC9F, MmlNode_js_1.TEXCLASS.ORD, 'mi', 'normal'],
    		    [0x1BCA0, 0x1D25F, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x1D360, 0x1D37F, MmlNode_js_1.TEXCLASS.ORD, 'mn'],
    		    [0x1D400, 0x1D7CD, MmlNode_js_1.TEXCLASS.ORD, 'mi'],
    		    [0x1D7CE, 0x1D7FF, MmlNode_js_1.TEXCLASS.ORD, 'mn'],
    		    [0x1DF00, 0x1F7FF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x1F800, 0x1F8FF, MmlNode_js_1.TEXCLASS.REL, 'mo'],
    		    [0x1F900, 0x1F9FF, MmlNode_js_1.TEXCLASS.ORD, 'mo'],
    		    [0x20000, 0x2FA1F, MmlNode_js_1.TEXCLASS.ORD, 'mi', 'normnal'],
    		];
    		function getRange(text) {
    		    var e_1, _a;
    		    var n = text.codePointAt(0);
    		    try {
    		        for (var RANGES_1 = __values(exports.RANGES), RANGES_1_1 = RANGES_1.next(); !RANGES_1_1.done; RANGES_1_1 = RANGES_1.next()) {
    		            var range = RANGES_1_1.value;
    		            if (n <= range[1]) {
    		                if (n >= range[0]) {
    		                    return range;
    		                }
    		                break;
    		            }
    		        }
    		    }
    		    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		    finally {
    		        try {
    		            if (RANGES_1_1 && !RANGES_1_1.done && (_a = RANGES_1.return)) _a.call(RANGES_1);
    		        }
    		        finally { if (e_1) throw e_1.error; }
    		    }
    		    return null;
    		}
    		exports.getRange = getRange;
    		exports.MMLSPACING = [
    		    [0, 0],
    		    [1, 2],
    		    [3, 3],
    		    [4, 4],
    		    [0, 0],
    		    [0, 0],
    		    [0, 3]
    		];
    		exports.OPTABLE = {
    		    prefix: {
    		        '(': exports.MO.OPEN,
    		        '+': exports.MO.BIN01,
    		        '-': exports.MO.BIN01,
    		        '[': exports.MO.OPEN,
    		        '{': exports.MO.OPEN,
    		        '|': exports.MO.OPEN,
    		        '||': [0, 0, MmlNode_js_1.TEXCLASS.BIN, { fence: true, stretchy: true, symmetric: true }],
    		        '|||': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { fence: true, stretchy: true, symmetric: true }],
    		        '\u00AC': exports.MO.ORD21,
    		        '\u00B1': exports.MO.BIN01,
    		        '\u2016': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { fence: true, stretchy: true }],
    		        '\u2018': [0, 0, MmlNode_js_1.TEXCLASS.OPEN, { fence: true }],
    		        '\u201C': [0, 0, MmlNode_js_1.TEXCLASS.OPEN, { fence: true }],
    		        '\u2145': exports.MO.ORD21,
    		        '\u2146': OPDEF(2, 0, MmlNode_js_1.TEXCLASS.ORD),
    		        '\u2200': exports.MO.ORD21,
    		        '\u2202': exports.MO.ORD21,
    		        '\u2203': exports.MO.ORD21,
    		        '\u2204': exports.MO.ORD21,
    		        '\u2207': exports.MO.ORD21,
    		        '\u220F': exports.MO.OP,
    		        '\u2210': exports.MO.OP,
    		        '\u2211': exports.MO.OP,
    		        '\u2212': exports.MO.BIN01,
    		        '\u2213': exports.MO.BIN01,
    		        '\u221A': [1, 1, MmlNode_js_1.TEXCLASS.ORD, { stretchy: true }],
    		        '\u221B': exports.MO.ORD11,
    		        '\u221C': exports.MO.ORD11,
    		        '\u2220': exports.MO.ORD,
    		        '\u2221': exports.MO.ORD,
    		        '\u2222': exports.MO.ORD,
    		        '\u222B': exports.MO.INTEGRAL,
    		        '\u222C': exports.MO.INTEGRAL,
    		        '\u222D': exports.MO.INTEGRAL,
    		        '\u222E': exports.MO.INTEGRAL,
    		        '\u222F': exports.MO.INTEGRAL,
    		        '\u2230': exports.MO.INTEGRAL,
    		        '\u2231': exports.MO.INTEGRAL,
    		        '\u2232': exports.MO.INTEGRAL,
    		        '\u2233': exports.MO.INTEGRAL,
    		        '\u22C0': exports.MO.OP,
    		        '\u22C1': exports.MO.OP,
    		        '\u22C2': exports.MO.OP,
    		        '\u22C3': exports.MO.OP,
    		        '\u2308': exports.MO.OPEN,
    		        '\u230A': exports.MO.OPEN,
    		        '\u2329': exports.MO.OPEN,
    		        '\u2772': exports.MO.OPEN,
    		        '\u27E6': exports.MO.OPEN,
    		        '\u27E8': exports.MO.OPEN,
    		        '\u27EA': exports.MO.OPEN,
    		        '\u27EC': exports.MO.OPEN,
    		        '\u27EE': exports.MO.OPEN,
    		        '\u2980': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { fence: true, stretchy: true }],
    		        '\u2983': exports.MO.OPEN,
    		        '\u2985': exports.MO.OPEN,
    		        '\u2987': exports.MO.OPEN,
    		        '\u2989': exports.MO.OPEN,
    		        '\u298B': exports.MO.OPEN,
    		        '\u298D': exports.MO.OPEN,
    		        '\u298F': exports.MO.OPEN,
    		        '\u2991': exports.MO.OPEN,
    		        '\u2993': exports.MO.OPEN,
    		        '\u2995': exports.MO.OPEN,
    		        '\u2997': exports.MO.OPEN,
    		        '\u29FC': exports.MO.OPEN,
    		        '\u2A00': exports.MO.OP,
    		        '\u2A01': exports.MO.OP,
    		        '\u2A02': exports.MO.OP,
    		        '\u2A03': exports.MO.OP,
    		        '\u2A04': exports.MO.OP,
    		        '\u2A05': exports.MO.OP,
    		        '\u2A06': exports.MO.OP,
    		        '\u2A07': exports.MO.OP,
    		        '\u2A08': exports.MO.OP,
    		        '\u2A09': exports.MO.OP,
    		        '\u2A0A': exports.MO.OP,
    		        '\u2A0B': exports.MO.INTEGRAL2,
    		        '\u2A0C': exports.MO.INTEGRAL,
    		        '\u2A0D': exports.MO.INTEGRAL2,
    		        '\u2A0E': exports.MO.INTEGRAL2,
    		        '\u2A0F': exports.MO.INTEGRAL2,
    		        '\u2A10': exports.MO.OP,
    		        '\u2A11': exports.MO.OP,
    		        '\u2A12': exports.MO.OP,
    		        '\u2A13': exports.MO.OP,
    		        '\u2A14': exports.MO.OP,
    		        '\u2A15': exports.MO.INTEGRAL2,
    		        '\u2A16': exports.MO.INTEGRAL2,
    		        '\u2A17': exports.MO.INTEGRAL2,
    		        '\u2A18': exports.MO.INTEGRAL2,
    		        '\u2A19': exports.MO.INTEGRAL2,
    		        '\u2A1A': exports.MO.INTEGRAL2,
    		        '\u2A1B': exports.MO.INTEGRAL2,
    		        '\u2A1C': exports.MO.INTEGRAL2,
    		        '\u2AFC': exports.MO.OP,
    		        '\u2AFF': exports.MO.OP,
    		    },
    		    postfix: {
    		        '!!': OPDEF(1, 0),
    		        '!': [1, 0, MmlNode_js_1.TEXCLASS.CLOSE, null],
    		        '"': exports.MO.ACCENT,
    		        '&': exports.MO.ORD,
    		        ')': exports.MO.CLOSE,
    		        '++': OPDEF(0, 0),
    		        '--': OPDEF(0, 0),
    		        '..': OPDEF(0, 0),
    		        '...': exports.MO.ORD,
    		        '\'': exports.MO.ACCENT,
    		        ']': exports.MO.CLOSE,
    		        '^': exports.MO.WIDEACCENT,
    		        '_': exports.MO.WIDEACCENT,
    		        '`': exports.MO.ACCENT,
    		        '|': exports.MO.CLOSE,
    		        '}': exports.MO.CLOSE,
    		        '~': exports.MO.WIDEACCENT,
    		        '||': [0, 0, MmlNode_js_1.TEXCLASS.BIN, { fence: true, stretchy: true, symmetric: true }],
    		        '|||': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { fence: true, stretchy: true, symmetric: true }],
    		        '\u00A8': exports.MO.ACCENT,
    		        '\u00AA': exports.MO.ACCENT,
    		        '\u00AF': exports.MO.WIDEACCENT,
    		        '\u00B0': exports.MO.ORD,
    		        '\u00B2': exports.MO.ACCENT,
    		        '\u00B3': exports.MO.ACCENT,
    		        '\u00B4': exports.MO.ACCENT,
    		        '\u00B8': exports.MO.ACCENT,
    		        '\u00B9': exports.MO.ACCENT,
    		        '\u00BA': exports.MO.ACCENT,
    		        '\u02C6': exports.MO.WIDEACCENT,
    		        '\u02C7': exports.MO.WIDEACCENT,
    		        '\u02C9': exports.MO.WIDEACCENT,
    		        '\u02CA': exports.MO.ACCENT,
    		        '\u02CB': exports.MO.ACCENT,
    		        '\u02CD': exports.MO.WIDEACCENT,
    		        '\u02D8': exports.MO.ACCENT,
    		        '\u02D9': exports.MO.ACCENT,
    		        '\u02DA': exports.MO.ACCENT,
    		        '\u02DC': exports.MO.WIDEACCENT,
    		        '\u02DD': exports.MO.ACCENT,
    		        '\u02F7': exports.MO.WIDEACCENT,
    		        '\u0302': exports.MO.WIDEACCENT,
    		        '\u0311': exports.MO.ACCENT,
    		        '\u03F6': exports.MO.REL,
    		        '\u2016': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { fence: true, stretchy: true }],
    		        '\u2019': [0, 0, MmlNode_js_1.TEXCLASS.CLOSE, { fence: true }],
    		        '\u201A': exports.MO.ACCENT,
    		        '\u201B': exports.MO.ACCENT,
    		        '\u201D': [0, 0, MmlNode_js_1.TEXCLASS.CLOSE, { fence: true }],
    		        '\u201E': exports.MO.ACCENT,
    		        '\u201F': exports.MO.ACCENT,
    		        '\u2032': exports.MO.ORD,
    		        '\u2033': exports.MO.ACCENT,
    		        '\u2034': exports.MO.ACCENT,
    		        '\u2035': exports.MO.ACCENT,
    		        '\u2036': exports.MO.ACCENT,
    		        '\u2037': exports.MO.ACCENT,
    		        '\u203E': exports.MO.WIDEACCENT,
    		        '\u2057': exports.MO.ACCENT,
    		        '\u20DB': exports.MO.ACCENT,
    		        '\u20DC': exports.MO.ACCENT,
    		        '\u2309': exports.MO.CLOSE,
    		        '\u230B': exports.MO.CLOSE,
    		        '\u232A': exports.MO.CLOSE,
    		        '\u23B4': exports.MO.WIDEACCENT,
    		        '\u23B5': exports.MO.WIDEACCENT,
    		        '\u23DC': exports.MO.WIDEACCENT,
    		        '\u23DD': exports.MO.WIDEACCENT,
    		        '\u23DE': exports.MO.WIDEACCENT,
    		        '\u23DF': exports.MO.WIDEACCENT,
    		        '\u23E0': exports.MO.WIDEACCENT,
    		        '\u23E1': exports.MO.WIDEACCENT,
    		        '\u25A0': exports.MO.BIN3,
    		        '\u25A1': exports.MO.BIN3,
    		        '\u25AA': exports.MO.BIN3,
    		        '\u25AB': exports.MO.BIN3,
    		        '\u25AD': exports.MO.BIN3,
    		        '\u25AE': exports.MO.BIN3,
    		        '\u25AF': exports.MO.BIN3,
    		        '\u25B0': exports.MO.BIN3,
    		        '\u25B1': exports.MO.BIN3,
    		        '\u25B2': exports.MO.BIN4,
    		        '\u25B4': exports.MO.BIN4,
    		        '\u25B6': exports.MO.BIN4,
    		        '\u25B7': exports.MO.BIN4,
    		        '\u25B8': exports.MO.BIN4,
    		        '\u25BC': exports.MO.BIN4,
    		        '\u25BE': exports.MO.BIN4,
    		        '\u25C0': exports.MO.BIN4,
    		        '\u25C1': exports.MO.BIN4,
    		        '\u25C2': exports.MO.BIN4,
    		        '\u25C4': exports.MO.BIN4,
    		        '\u25C5': exports.MO.BIN4,
    		        '\u25C6': exports.MO.BIN4,
    		        '\u25C7': exports.MO.BIN4,
    		        '\u25C8': exports.MO.BIN4,
    		        '\u25C9': exports.MO.BIN4,
    		        '\u25CC': exports.MO.BIN4,
    		        '\u25CD': exports.MO.BIN4,
    		        '\u25CE': exports.MO.BIN4,
    		        '\u25CF': exports.MO.BIN4,
    		        '\u25D6': exports.MO.BIN4,
    		        '\u25D7': exports.MO.BIN4,
    		        '\u25E6': exports.MO.BIN4,
    		        '\u266D': exports.MO.ORD02,
    		        '\u266E': exports.MO.ORD02,
    		        '\u266F': exports.MO.ORD02,
    		        '\u2773': exports.MO.CLOSE,
    		        '\u27E7': exports.MO.CLOSE,
    		        '\u27E9': exports.MO.CLOSE,
    		        '\u27EB': exports.MO.CLOSE,
    		        '\u27ED': exports.MO.CLOSE,
    		        '\u27EF': exports.MO.CLOSE,
    		        '\u2980': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { fence: true, stretchy: true }],
    		        '\u2984': exports.MO.CLOSE,
    		        '\u2986': exports.MO.CLOSE,
    		        '\u2988': exports.MO.CLOSE,
    		        '\u298A': exports.MO.CLOSE,
    		        '\u298C': exports.MO.CLOSE,
    		        '\u298E': exports.MO.CLOSE,
    		        '\u2990': exports.MO.CLOSE,
    		        '\u2992': exports.MO.CLOSE,
    		        '\u2994': exports.MO.CLOSE,
    		        '\u2996': exports.MO.CLOSE,
    		        '\u2998': exports.MO.CLOSE,
    		        '\u29FD': exports.MO.CLOSE,
    		    },
    		    infix: {
    		        '!=': exports.MO.BIN4,
    		        '#': exports.MO.ORD,
    		        '$': exports.MO.ORD,
    		        '%': [3, 3, MmlNode_js_1.TEXCLASS.ORD, null],
    		        '&&': exports.MO.BIN4,
    		        '': exports.MO.ORD,
    		        '*': exports.MO.BIN3,
    		        '**': OPDEF(1, 1),
    		        '*=': exports.MO.BIN4,
    		        '+': exports.MO.BIN4,
    		        '+=': exports.MO.BIN4,
    		        ',': [0, 3, MmlNode_js_1.TEXCLASS.PUNCT, { linebreakstyle: 'after', separator: true }],
    		        '-': exports.MO.BIN4,
    		        '-=': exports.MO.BIN4,
    		        '->': exports.MO.BIN5,
    		        '.': [0, 3, MmlNode_js_1.TEXCLASS.PUNCT, { separator: true }],
    		        '/': exports.MO.ORD11,
    		        '//': OPDEF(1, 1),
    		        '/=': exports.MO.BIN4,
    		        ':': [1, 2, MmlNode_js_1.TEXCLASS.REL, null],
    		        ':=': exports.MO.BIN4,
    		        ';': [0, 3, MmlNode_js_1.TEXCLASS.PUNCT, { linebreakstyle: 'after', separator: true }],
    		        '<': exports.MO.REL,
    		        '<=': exports.MO.BIN5,
    		        '<>': OPDEF(1, 1),
    		        '=': exports.MO.REL,
    		        '==': exports.MO.BIN4,
    		        '>': exports.MO.REL,
    		        '>=': exports.MO.BIN5,
    		        '?': [1, 1, MmlNode_js_1.TEXCLASS.CLOSE, null],
    		        '@': exports.MO.ORD11,
    		        '\\': exports.MO.ORD,
    		        '^': exports.MO.ORD11,
    		        '_': exports.MO.ORD11,
    		        '|': [2, 2, MmlNode_js_1.TEXCLASS.ORD, { fence: true, stretchy: true, symmetric: true }],
    		        '||': [2, 2, MmlNode_js_1.TEXCLASS.BIN, { fence: true, stretchy: true, symmetric: true }],
    		        '|||': [2, 2, MmlNode_js_1.TEXCLASS.ORD, { fence: true, stretchy: true, symmetric: true }],
    		        '\u00B1': exports.MO.BIN4,
    		        '\u00B7': exports.MO.BIN4,
    		        '\u00D7': exports.MO.BIN4,
    		        '\u00F7': exports.MO.BIN4,
    		        '\u02B9': exports.MO.ORD,
    		        '\u0300': exports.MO.ACCENT,
    		        '\u0301': exports.MO.ACCENT,
    		        '\u0303': exports.MO.WIDEACCENT,
    		        '\u0304': exports.MO.ACCENT,
    		        '\u0306': exports.MO.ACCENT,
    		        '\u0307': exports.MO.ACCENT,
    		        '\u0308': exports.MO.ACCENT,
    		        '\u030C': exports.MO.ACCENT,
    		        '\u0332': exports.MO.WIDEACCENT,
    		        '\u0338': exports.MO.REL4,
    		        '\u2015': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { stretchy: true }],
    		        '\u2017': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { stretchy: true }],
    		        '\u2020': exports.MO.BIN3,
    		        '\u2021': exports.MO.BIN3,
    		        '\u2022': exports.MO.BIN4,
    		        '\u2026': exports.MO.INNER,
    		        '\u2043': exports.MO.BIN4,
    		        '\u2044': exports.MO.TALLBIN,
    		        '\u2061': exports.MO.NONE,
    		        '\u2062': exports.MO.NONE,
    		        '\u2063': [0, 0, MmlNode_js_1.TEXCLASS.NONE, { linebreakstyle: 'after', separator: true }],
    		        '\u2064': exports.MO.NONE,
    		        '\u20D7': exports.MO.ACCENT,
    		        '\u2111': exports.MO.ORD,
    		        '\u2113': exports.MO.ORD,
    		        '\u2118': exports.MO.ORD,
    		        '\u211C': exports.MO.ORD,
    		        '\u2190': exports.MO.WIDEREL,
    		        '\u2191': exports.MO.RELSTRETCH,
    		        '\u2192': exports.MO.WIDEREL,
    		        '\u2193': exports.MO.RELSTRETCH,
    		        '\u2194': exports.MO.WIDEREL,
    		        '\u2195': exports.MO.RELSTRETCH,
    		        '\u2196': exports.MO.RELSTRETCH,
    		        '\u2197': exports.MO.RELSTRETCH,
    		        '\u2198': exports.MO.RELSTRETCH,
    		        '\u2199': exports.MO.RELSTRETCH,
    		        '\u219A': exports.MO.RELACCENT,
    		        '\u219B': exports.MO.RELACCENT,
    		        '\u219C': exports.MO.WIDEREL,
    		        '\u219D': exports.MO.WIDEREL,
    		        '\u219E': exports.MO.WIDEREL,
    		        '\u219F': exports.MO.WIDEREL,
    		        '\u21A0': exports.MO.WIDEREL,
    		        '\u21A1': exports.MO.RELSTRETCH,
    		        '\u21A2': exports.MO.WIDEREL,
    		        '\u21A3': exports.MO.WIDEREL,
    		        '\u21A4': exports.MO.WIDEREL,
    		        '\u21A5': exports.MO.RELSTRETCH,
    		        '\u21A6': exports.MO.WIDEREL,
    		        '\u21A7': exports.MO.RELSTRETCH,
    		        '\u21A8': exports.MO.RELSTRETCH,
    		        '\u21A9': exports.MO.WIDEREL,
    		        '\u21AA': exports.MO.WIDEREL,
    		        '\u21AB': exports.MO.WIDEREL,
    		        '\u21AC': exports.MO.WIDEREL,
    		        '\u21AD': exports.MO.WIDEREL,
    		        '\u21AE': exports.MO.RELACCENT,
    		        '\u21AF': exports.MO.RELSTRETCH,
    		        '\u21B0': exports.MO.RELSTRETCH,
    		        '\u21B1': exports.MO.RELSTRETCH,
    		        '\u21B2': exports.MO.RELSTRETCH,
    		        '\u21B3': exports.MO.RELSTRETCH,
    		        '\u21B4': exports.MO.RELSTRETCH,
    		        '\u21B5': exports.MO.RELSTRETCH,
    		        '\u21B6': exports.MO.RELACCENT,
    		        '\u21B7': exports.MO.RELACCENT,
    		        '\u21B8': exports.MO.REL,
    		        '\u21B9': exports.MO.WIDEREL,
    		        '\u21BA': exports.MO.REL,
    		        '\u21BB': exports.MO.REL,
    		        '\u21BC': exports.MO.WIDEREL,
    		        '\u21BD': exports.MO.WIDEREL,
    		        '\u21BE': exports.MO.RELSTRETCH,
    		        '\u21BF': exports.MO.RELSTRETCH,
    		        '\u21C0': exports.MO.WIDEREL,
    		        '\u21C1': exports.MO.WIDEREL,
    		        '\u21C2': exports.MO.RELSTRETCH,
    		        '\u21C3': exports.MO.RELSTRETCH,
    		        '\u21C4': exports.MO.WIDEREL,
    		        '\u21C5': exports.MO.RELSTRETCH,
    		        '\u21C6': exports.MO.WIDEREL,
    		        '\u21C7': exports.MO.WIDEREL,
    		        '\u21C8': exports.MO.RELSTRETCH,
    		        '\u21C9': exports.MO.WIDEREL,
    		        '\u21CA': exports.MO.RELSTRETCH,
    		        '\u21CB': exports.MO.WIDEREL,
    		        '\u21CC': exports.MO.WIDEREL,
    		        '\u21CD': exports.MO.RELACCENT,
    		        '\u21CE': exports.MO.RELACCENT,
    		        '\u21CF': exports.MO.RELACCENT,
    		        '\u21D0': exports.MO.WIDEREL,
    		        '\u21D1': exports.MO.RELSTRETCH,
    		        '\u21D2': exports.MO.WIDEREL,
    		        '\u21D3': exports.MO.RELSTRETCH,
    		        '\u21D4': exports.MO.WIDEREL,
    		        '\u21D5': exports.MO.RELSTRETCH,
    		        '\u21D6': exports.MO.RELSTRETCH,
    		        '\u21D7': exports.MO.RELSTRETCH,
    		        '\u21D8': exports.MO.RELSTRETCH,
    		        '\u21D9': exports.MO.RELSTRETCH,
    		        '\u21DA': exports.MO.WIDEREL,
    		        '\u21DB': exports.MO.WIDEREL,
    		        '\u21DC': exports.MO.WIDEREL,
    		        '\u21DD': exports.MO.WIDEREL,
    		        '\u21DE': exports.MO.REL,
    		        '\u21DF': exports.MO.REL,
    		        '\u21E0': exports.MO.WIDEREL,
    		        '\u21E1': exports.MO.RELSTRETCH,
    		        '\u21E2': exports.MO.WIDEREL,
    		        '\u21E3': exports.MO.RELSTRETCH,
    		        '\u21E4': exports.MO.WIDEREL,
    		        '\u21E5': exports.MO.WIDEREL,
    		        '\u21E6': exports.MO.WIDEREL,
    		        '\u21E7': exports.MO.RELSTRETCH,
    		        '\u21E8': exports.MO.WIDEREL,
    		        '\u21E9': exports.MO.RELSTRETCH,
    		        '\u21EA': exports.MO.RELSTRETCH,
    		        '\u21EB': exports.MO.RELSTRETCH,
    		        '\u21EC': exports.MO.RELSTRETCH,
    		        '\u21ED': exports.MO.RELSTRETCH,
    		        '\u21EE': exports.MO.RELSTRETCH,
    		        '\u21EF': exports.MO.RELSTRETCH,
    		        '\u21F0': exports.MO.WIDEREL,
    		        '\u21F1': exports.MO.REL,
    		        '\u21F2': exports.MO.REL,
    		        '\u21F3': exports.MO.RELSTRETCH,
    		        '\u21F4': exports.MO.RELACCENT,
    		        '\u21F5': exports.MO.RELSTRETCH,
    		        '\u21F6': exports.MO.WIDEREL,
    		        '\u21F7': exports.MO.RELACCENT,
    		        '\u21F8': exports.MO.RELACCENT,
    		        '\u21F9': exports.MO.RELACCENT,
    		        '\u21FA': exports.MO.RELACCENT,
    		        '\u21FB': exports.MO.RELACCENT,
    		        '\u21FC': exports.MO.RELACCENT,
    		        '\u21FD': exports.MO.WIDEREL,
    		        '\u21FE': exports.MO.WIDEREL,
    		        '\u21FF': exports.MO.WIDEREL,
    		        '\u2201': OPDEF(1, 2, MmlNode_js_1.TEXCLASS.ORD),
    		        '\u2205': exports.MO.ORD,
    		        '\u2206': exports.MO.BIN3,
    		        '\u2208': exports.MO.REL,
    		        '\u2209': exports.MO.REL,
    		        '\u220A': exports.MO.REL,
    		        '\u220B': exports.MO.REL,
    		        '\u220C': exports.MO.REL,
    		        '\u220D': exports.MO.REL,
    		        '\u220E': exports.MO.BIN3,
    		        '\u2212': exports.MO.BIN4,
    		        '\u2213': exports.MO.BIN4,
    		        '\u2214': exports.MO.BIN4,
    		        '\u2215': exports.MO.TALLBIN,
    		        '\u2216': exports.MO.BIN4,
    		        '\u2217': exports.MO.BIN4,
    		        '\u2218': exports.MO.BIN4,
    		        '\u2219': exports.MO.BIN4,
    		        '\u221D': exports.MO.REL,
    		        '\u221E': exports.MO.ORD,
    		        '\u221F': exports.MO.REL,
    		        '\u2223': exports.MO.REL,
    		        '\u2224': exports.MO.REL,
    		        '\u2225': exports.MO.REL,
    		        '\u2226': exports.MO.REL,
    		        '\u2227': exports.MO.BIN4,
    		        '\u2228': exports.MO.BIN4,
    		        '\u2229': exports.MO.BIN4,
    		        '\u222A': exports.MO.BIN4,
    		        '\u2234': exports.MO.REL,
    		        '\u2235': exports.MO.REL,
    		        '\u2236': exports.MO.REL,
    		        '\u2237': exports.MO.REL,
    		        '\u2238': exports.MO.BIN4,
    		        '\u2239': exports.MO.REL,
    		        '\u223A': exports.MO.BIN4,
    		        '\u223B': exports.MO.REL,
    		        '\u223C': exports.MO.REL,
    		        '\u223D': exports.MO.REL,
    		        '\u223D\u0331': exports.MO.BIN3,
    		        '\u223E': exports.MO.REL,
    		        '\u223F': exports.MO.BIN3,
    		        '\u2240': exports.MO.BIN4,
    		        '\u2241': exports.MO.REL,
    		        '\u2242': exports.MO.REL,
    		        '\u2242\u0338': exports.MO.REL,
    		        '\u2243': exports.MO.REL,
    		        '\u2244': exports.MO.REL,
    		        '\u2245': exports.MO.REL,
    		        '\u2246': exports.MO.REL,
    		        '\u2247': exports.MO.REL,
    		        '\u2248': exports.MO.REL,
    		        '\u2249': exports.MO.REL,
    		        '\u224A': exports.MO.REL,
    		        '\u224B': exports.MO.REL,
    		        '\u224C': exports.MO.REL,
    		        '\u224D': exports.MO.REL,
    		        '\u224E': exports.MO.REL,
    		        '\u224E\u0338': exports.MO.REL,
    		        '\u224F': exports.MO.REL,
    		        '\u224F\u0338': exports.MO.REL,
    		        '\u2250': exports.MO.REL,
    		        '\u2251': exports.MO.REL,
    		        '\u2252': exports.MO.REL,
    		        '\u2253': exports.MO.REL,
    		        '\u2254': exports.MO.REL,
    		        '\u2255': exports.MO.REL,
    		        '\u2256': exports.MO.REL,
    		        '\u2257': exports.MO.REL,
    		        '\u2258': exports.MO.REL,
    		        '\u2259': exports.MO.REL,
    		        '\u225A': exports.MO.REL,
    		        '\u225B': exports.MO.REL,
    		        '\u225C': exports.MO.REL,
    		        '\u225D': exports.MO.REL,
    		        '\u225E': exports.MO.REL,
    		        '\u225F': exports.MO.REL,
    		        '\u2260': exports.MO.REL,
    		        '\u2261': exports.MO.REL,
    		        '\u2262': exports.MO.REL,
    		        '\u2263': exports.MO.REL,
    		        '\u2264': exports.MO.REL,
    		        '\u2265': exports.MO.REL,
    		        '\u2266': exports.MO.REL,
    		        '\u2266\u0338': exports.MO.REL,
    		        '\u2267': exports.MO.REL,
    		        '\u2268': exports.MO.REL,
    		        '\u2269': exports.MO.REL,
    		        '\u226A': exports.MO.REL,
    		        '\u226A\u0338': exports.MO.REL,
    		        '\u226B': exports.MO.REL,
    		        '\u226B\u0338': exports.MO.REL,
    		        '\u226C': exports.MO.REL,
    		        '\u226D': exports.MO.REL,
    		        '\u226E': exports.MO.REL,
    		        '\u226F': exports.MO.REL,
    		        '\u2270': exports.MO.REL,
    		        '\u2271': exports.MO.REL,
    		        '\u2272': exports.MO.REL,
    		        '\u2273': exports.MO.REL,
    		        '\u2274': exports.MO.REL,
    		        '\u2275': exports.MO.REL,
    		        '\u2276': exports.MO.REL,
    		        '\u2277': exports.MO.REL,
    		        '\u2278': exports.MO.REL,
    		        '\u2279': exports.MO.REL,
    		        '\u227A': exports.MO.REL,
    		        '\u227B': exports.MO.REL,
    		        '\u227C': exports.MO.REL,
    		        '\u227D': exports.MO.REL,
    		        '\u227E': exports.MO.REL,
    		        '\u227F': exports.MO.REL,
    		        '\u227F\u0338': exports.MO.REL,
    		        '\u2280': exports.MO.REL,
    		        '\u2281': exports.MO.REL,
    		        '\u2282': exports.MO.REL,
    		        '\u2282\u20D2': exports.MO.REL,
    		        '\u2283': exports.MO.REL,
    		        '\u2283\u20D2': exports.MO.REL,
    		        '\u2284': exports.MO.REL,
    		        '\u2285': exports.MO.REL,
    		        '\u2286': exports.MO.REL,
    		        '\u2287': exports.MO.REL,
    		        '\u2288': exports.MO.REL,
    		        '\u2289': exports.MO.REL,
    		        '\u228A': exports.MO.REL,
    		        '\u228B': exports.MO.REL,
    		        '\u228C': exports.MO.BIN4,
    		        '\u228D': exports.MO.BIN4,
    		        '\u228E': exports.MO.BIN4,
    		        '\u228F': exports.MO.REL,
    		        '\u228F\u0338': exports.MO.REL,
    		        '\u2290': exports.MO.REL,
    		        '\u2290\u0338': exports.MO.REL,
    		        '\u2291': exports.MO.REL,
    		        '\u2292': exports.MO.REL,
    		        '\u2293': exports.MO.BIN4,
    		        '\u2294': exports.MO.BIN4,
    		        '\u2295': exports.MO.BIN4,
    		        '\u2296': exports.MO.BIN4,
    		        '\u2297': exports.MO.BIN4,
    		        '\u2298': exports.MO.BIN4,
    		        '\u2299': exports.MO.BIN4,
    		        '\u229A': exports.MO.BIN4,
    		        '\u229B': exports.MO.BIN4,
    		        '\u229C': exports.MO.BIN4,
    		        '\u229D': exports.MO.BIN4,
    		        '\u229E': exports.MO.BIN4,
    		        '\u229F': exports.MO.BIN4,
    		        '\u22A0': exports.MO.BIN4,
    		        '\u22A1': exports.MO.BIN4,
    		        '\u22A2': exports.MO.REL,
    		        '\u22A3': exports.MO.REL,
    		        '\u22A4': exports.MO.ORD55,
    		        '\u22A5': exports.MO.REL,
    		        '\u22A6': exports.MO.REL,
    		        '\u22A7': exports.MO.REL,
    		        '\u22A8': exports.MO.REL,
    		        '\u22A9': exports.MO.REL,
    		        '\u22AA': exports.MO.REL,
    		        '\u22AB': exports.MO.REL,
    		        '\u22AC': exports.MO.REL,
    		        '\u22AD': exports.MO.REL,
    		        '\u22AE': exports.MO.REL,
    		        '\u22AF': exports.MO.REL,
    		        '\u22B0': exports.MO.REL,
    		        '\u22B1': exports.MO.REL,
    		        '\u22B2': exports.MO.REL,
    		        '\u22B3': exports.MO.REL,
    		        '\u22B4': exports.MO.REL,
    		        '\u22B5': exports.MO.REL,
    		        '\u22B6': exports.MO.REL,
    		        '\u22B7': exports.MO.REL,
    		        '\u22B8': exports.MO.REL,
    		        '\u22B9': exports.MO.REL,
    		        '\u22BA': exports.MO.BIN4,
    		        '\u22BB': exports.MO.BIN4,
    		        '\u22BC': exports.MO.BIN4,
    		        '\u22BD': exports.MO.BIN4,
    		        '\u22BE': exports.MO.BIN3,
    		        '\u22BF': exports.MO.BIN3,
    		        '\u22C4': exports.MO.BIN4,
    		        '\u22C5': exports.MO.BIN4,
    		        '\u22C6': exports.MO.BIN4,
    		        '\u22C7': exports.MO.BIN4,
    		        '\u22C8': exports.MO.REL,
    		        '\u22C9': exports.MO.BIN4,
    		        '\u22CA': exports.MO.BIN4,
    		        '\u22CB': exports.MO.BIN4,
    		        '\u22CC': exports.MO.BIN4,
    		        '\u22CD': exports.MO.REL,
    		        '\u22CE': exports.MO.BIN4,
    		        '\u22CF': exports.MO.BIN4,
    		        '\u22D0': exports.MO.REL,
    		        '\u22D1': exports.MO.REL,
    		        '\u22D2': exports.MO.BIN4,
    		        '\u22D3': exports.MO.BIN4,
    		        '\u22D4': exports.MO.REL,
    		        '\u22D5': exports.MO.REL,
    		        '\u22D6': exports.MO.REL,
    		        '\u22D7': exports.MO.REL,
    		        '\u22D8': exports.MO.REL,
    		        '\u22D9': exports.MO.REL,
    		        '\u22DA': exports.MO.REL,
    		        '\u22DB': exports.MO.REL,
    		        '\u22DC': exports.MO.REL,
    		        '\u22DD': exports.MO.REL,
    		        '\u22DE': exports.MO.REL,
    		        '\u22DF': exports.MO.REL,
    		        '\u22E0': exports.MO.REL,
    		        '\u22E1': exports.MO.REL,
    		        '\u22E2': exports.MO.REL,
    		        '\u22E3': exports.MO.REL,
    		        '\u22E4': exports.MO.REL,
    		        '\u22E5': exports.MO.REL,
    		        '\u22E6': exports.MO.REL,
    		        '\u22E7': exports.MO.REL,
    		        '\u22E8': exports.MO.REL,
    		        '\u22E9': exports.MO.REL,
    		        '\u22EA': exports.MO.REL,
    		        '\u22EB': exports.MO.REL,
    		        '\u22EC': exports.MO.REL,
    		        '\u22ED': exports.MO.REL,
    		        '\u22EE': exports.MO.ORD55,
    		        '\u22EF': exports.MO.INNER,
    		        '\u22F0': exports.MO.REL,
    		        '\u22F1': [5, 5, MmlNode_js_1.TEXCLASS.INNER, null],
    		        '\u22F2': exports.MO.REL,
    		        '\u22F3': exports.MO.REL,
    		        '\u22F4': exports.MO.REL,
    		        '\u22F5': exports.MO.REL,
    		        '\u22F6': exports.MO.REL,
    		        '\u22F7': exports.MO.REL,
    		        '\u22F8': exports.MO.REL,
    		        '\u22F9': exports.MO.REL,
    		        '\u22FA': exports.MO.REL,
    		        '\u22FB': exports.MO.REL,
    		        '\u22FC': exports.MO.REL,
    		        '\u22FD': exports.MO.REL,
    		        '\u22FE': exports.MO.REL,
    		        '\u22FF': exports.MO.REL,
    		        '\u2305': exports.MO.BIN3,
    		        '\u2306': exports.MO.BIN3,
    		        '\u2322': exports.MO.REL4,
    		        '\u2323': exports.MO.REL4,
    		        '\u2329': exports.MO.OPEN,
    		        '\u232A': exports.MO.CLOSE,
    		        '\u23AA': exports.MO.ORD,
    		        '\u23AF': [0, 0, MmlNode_js_1.TEXCLASS.ORD, { stretchy: true }],
    		        '\u23B0': exports.MO.OPEN,
    		        '\u23B1': exports.MO.CLOSE,
    		        '\u2500': exports.MO.ORD,
    		        '\u25B3': exports.MO.BIN4,
    		        '\u25B5': exports.MO.BIN4,
    		        '\u25B9': exports.MO.BIN4,
    		        '\u25BD': exports.MO.BIN4,
    		        '\u25BF': exports.MO.BIN4,
    		        '\u25C3': exports.MO.BIN4,
    		        '\u25EF': exports.MO.BIN3,
    		        '\u2660': exports.MO.ORD,
    		        '\u2661': exports.MO.ORD,
    		        '\u2662': exports.MO.ORD,
    		        '\u2663': exports.MO.ORD,
    		        '\u2758': exports.MO.REL,
    		        '\u27F0': exports.MO.RELSTRETCH,
    		        '\u27F1': exports.MO.RELSTRETCH,
    		        '\u27F5': exports.MO.WIDEREL,
    		        '\u27F6': exports.MO.WIDEREL,
    		        '\u27F7': exports.MO.WIDEREL,
    		        '\u27F8': exports.MO.WIDEREL,
    		        '\u27F9': exports.MO.WIDEREL,
    		        '\u27FA': exports.MO.WIDEREL,
    		        '\u27FB': exports.MO.WIDEREL,
    		        '\u27FC': exports.MO.WIDEREL,
    		        '\u27FD': exports.MO.WIDEREL,
    		        '\u27FE': exports.MO.WIDEREL,
    		        '\u27FF': exports.MO.WIDEREL,
    		        '\u2900': exports.MO.RELACCENT,
    		        '\u2901': exports.MO.RELACCENT,
    		        '\u2902': exports.MO.RELACCENT,
    		        '\u2903': exports.MO.RELACCENT,
    		        '\u2904': exports.MO.RELACCENT,
    		        '\u2905': exports.MO.RELACCENT,
    		        '\u2906': exports.MO.RELACCENT,
    		        '\u2907': exports.MO.RELACCENT,
    		        '\u2908': exports.MO.REL,
    		        '\u2909': exports.MO.REL,
    		        '\u290A': exports.MO.RELSTRETCH,
    		        '\u290B': exports.MO.RELSTRETCH,
    		        '\u290C': exports.MO.WIDEREL,
    		        '\u290D': exports.MO.WIDEREL,
    		        '\u290E': exports.MO.WIDEREL,
    		        '\u290F': exports.MO.WIDEREL,
    		        '\u2910': exports.MO.WIDEREL,
    		        '\u2911': exports.MO.RELACCENT,
    		        '\u2912': exports.MO.RELSTRETCH,
    		        '\u2913': exports.MO.RELSTRETCH,
    		        '\u2914': exports.MO.RELACCENT,
    		        '\u2915': exports.MO.RELACCENT,
    		        '\u2916': exports.MO.RELACCENT,
    		        '\u2917': exports.MO.RELACCENT,
    		        '\u2918': exports.MO.RELACCENT,
    		        '\u2919': exports.MO.RELACCENT,
    		        '\u291A': exports.MO.RELACCENT,
    		        '\u291B': exports.MO.RELACCENT,
    		        '\u291C': exports.MO.RELACCENT,
    		        '\u291D': exports.MO.RELACCENT,
    		        '\u291E': exports.MO.RELACCENT,
    		        '\u291F': exports.MO.RELACCENT,
    		        '\u2920': exports.MO.RELACCENT,
    		        '\u2921': exports.MO.RELSTRETCH,
    		        '\u2922': exports.MO.RELSTRETCH,
    		        '\u2923': exports.MO.REL,
    		        '\u2924': exports.MO.REL,
    		        '\u2925': exports.MO.REL,
    		        '\u2926': exports.MO.REL,
    		        '\u2927': exports.MO.REL,
    		        '\u2928': exports.MO.REL,
    		        '\u2929': exports.MO.REL,
    		        '\u292A': exports.MO.REL,
    		        '\u292B': exports.MO.REL,
    		        '\u292C': exports.MO.REL,
    		        '\u292D': exports.MO.REL,
    		        '\u292E': exports.MO.REL,
    		        '\u292F': exports.MO.REL,
    		        '\u2930': exports.MO.REL,
    		        '\u2931': exports.MO.REL,
    		        '\u2932': exports.MO.REL,
    		        '\u2933': exports.MO.RELACCENT,
    		        '\u2934': exports.MO.REL,
    		        '\u2935': exports.MO.REL,
    		        '\u2936': exports.MO.REL,
    		        '\u2937': exports.MO.REL,
    		        '\u2938': exports.MO.REL,
    		        '\u2939': exports.MO.REL,
    		        '\u293A': exports.MO.RELACCENT,
    		        '\u293B': exports.MO.RELACCENT,
    		        '\u293C': exports.MO.RELACCENT,
    		        '\u293D': exports.MO.RELACCENT,
    		        '\u293E': exports.MO.REL,
    		        '\u293F': exports.MO.REL,
    		        '\u2940': exports.MO.REL,
    		        '\u2941': exports.MO.REL,
    		        '\u2942': exports.MO.RELACCENT,
    		        '\u2943': exports.MO.RELACCENT,
    		        '\u2944': exports.MO.RELACCENT,
    		        '\u2945': exports.MO.RELACCENT,
    		        '\u2946': exports.MO.RELACCENT,
    		        '\u2947': exports.MO.RELACCENT,
    		        '\u2948': exports.MO.RELACCENT,
    		        '\u2949': exports.MO.REL,
    		        '\u294A': exports.MO.RELACCENT,
    		        '\u294B': exports.MO.RELACCENT,
    		        '\u294C': exports.MO.REL,
    		        '\u294D': exports.MO.REL,
    		        '\u294E': exports.MO.WIDEREL,
    		        '\u294F': exports.MO.RELSTRETCH,
    		        '\u2950': exports.MO.WIDEREL,
    		        '\u2951': exports.MO.RELSTRETCH,
    		        '\u2952': exports.MO.WIDEREL,
    		        '\u2953': exports.MO.WIDEREL,
    		        '\u2954': exports.MO.RELSTRETCH,
    		        '\u2955': exports.MO.RELSTRETCH,
    		        '\u2956': exports.MO.RELSTRETCH,
    		        '\u2957': exports.MO.RELSTRETCH,
    		        '\u2958': exports.MO.RELSTRETCH,
    		        '\u2959': exports.MO.RELSTRETCH,
    		        '\u295A': exports.MO.WIDEREL,
    		        '\u295B': exports.MO.WIDEREL,
    		        '\u295C': exports.MO.RELSTRETCH,
    		        '\u295D': exports.MO.RELSTRETCH,
    		        '\u295E': exports.MO.WIDEREL,
    		        '\u295F': exports.MO.WIDEREL,
    		        '\u2960': exports.MO.RELSTRETCH,
    		        '\u2961': exports.MO.RELSTRETCH,
    		        '\u2962': exports.MO.RELACCENT,
    		        '\u2963': exports.MO.REL,
    		        '\u2964': exports.MO.RELACCENT,
    		        '\u2965': exports.MO.REL,
    		        '\u2966': exports.MO.RELACCENT,
    		        '\u2967': exports.MO.RELACCENT,
    		        '\u2968': exports.MO.RELACCENT,
    		        '\u2969': exports.MO.RELACCENT,
    		        '\u296A': exports.MO.RELACCENT,
    		        '\u296B': exports.MO.RELACCENT,
    		        '\u296C': exports.MO.RELACCENT,
    		        '\u296D': exports.MO.RELACCENT,
    		        '\u296E': exports.MO.RELSTRETCH,
    		        '\u296F': exports.MO.RELSTRETCH,
    		        '\u2970': exports.MO.RELACCENT,
    		        '\u2971': exports.MO.RELACCENT,
    		        '\u2972': exports.MO.RELACCENT,
    		        '\u2973': exports.MO.RELACCENT,
    		        '\u2974': exports.MO.RELACCENT,
    		        '\u2975': exports.MO.RELACCENT,
    		        '\u2976': exports.MO.RELACCENT,
    		        '\u2977': exports.MO.RELACCENT,
    		        '\u2978': exports.MO.RELACCENT,
    		        '\u2979': exports.MO.RELACCENT,
    		        '\u297A': exports.MO.RELACCENT,
    		        '\u297B': exports.MO.RELACCENT,
    		        '\u297C': exports.MO.RELACCENT,
    		        '\u297D': exports.MO.RELACCENT,
    		        '\u297E': exports.MO.REL,
    		        '\u297F': exports.MO.REL,
    		        '\u2981': exports.MO.BIN3,
    		        '\u2982': exports.MO.BIN3,
    		        '\u2999': exports.MO.BIN3,
    		        '\u299A': exports.MO.BIN3,
    		        '\u299B': exports.MO.BIN3,
    		        '\u299C': exports.MO.BIN3,
    		        '\u299D': exports.MO.BIN3,
    		        '\u299E': exports.MO.BIN3,
    		        '\u299F': exports.MO.BIN3,
    		        '\u29A0': exports.MO.BIN3,
    		        '\u29A1': exports.MO.BIN3,
    		        '\u29A2': exports.MO.BIN3,
    		        '\u29A3': exports.MO.BIN3,
    		        '\u29A4': exports.MO.BIN3,
    		        '\u29A5': exports.MO.BIN3,
    		        '\u29A6': exports.MO.BIN3,
    		        '\u29A7': exports.MO.BIN3,
    		        '\u29A8': exports.MO.BIN3,
    		        '\u29A9': exports.MO.BIN3,
    		        '\u29AA': exports.MO.BIN3,
    		        '\u29AB': exports.MO.BIN3,
    		        '\u29AC': exports.MO.BIN3,
    		        '\u29AD': exports.MO.BIN3,
    		        '\u29AE': exports.MO.BIN3,
    		        '\u29AF': exports.MO.BIN3,
    		        '\u29B0': exports.MO.BIN3,
    		        '\u29B1': exports.MO.BIN3,
    		        '\u29B2': exports.MO.BIN3,
    		        '\u29B3': exports.MO.BIN3,
    		        '\u29B4': exports.MO.BIN3,
    		        '\u29B5': exports.MO.BIN3,
    		        '\u29B6': exports.MO.BIN4,
    		        '\u29B7': exports.MO.BIN4,
    		        '\u29B8': exports.MO.BIN4,
    		        '\u29B9': exports.MO.BIN4,
    		        '\u29BA': exports.MO.BIN4,
    		        '\u29BB': exports.MO.BIN4,
    		        '\u29BC': exports.MO.BIN4,
    		        '\u29BD': exports.MO.BIN4,
    		        '\u29BE': exports.MO.BIN4,
    		        '\u29BF': exports.MO.BIN4,
    		        '\u29C0': exports.MO.REL,
    		        '\u29C1': exports.MO.REL,
    		        '\u29C2': exports.MO.BIN3,
    		        '\u29C3': exports.MO.BIN3,
    		        '\u29C4': exports.MO.BIN4,
    		        '\u29C5': exports.MO.BIN4,
    		        '\u29C6': exports.MO.BIN4,
    		        '\u29C7': exports.MO.BIN4,
    		        '\u29C8': exports.MO.BIN4,
    		        '\u29C9': exports.MO.BIN3,
    		        '\u29CA': exports.MO.BIN3,
    		        '\u29CB': exports.MO.BIN3,
    		        '\u29CC': exports.MO.BIN3,
    		        '\u29CD': exports.MO.BIN3,
    		        '\u29CE': exports.MO.REL,
    		        '\u29CF': exports.MO.REL,
    		        '\u29CF\u0338': exports.MO.REL,
    		        '\u29D0': exports.MO.REL,
    		        '\u29D0\u0338': exports.MO.REL,
    		        '\u29D1': exports.MO.REL,
    		        '\u29D2': exports.MO.REL,
    		        '\u29D3': exports.MO.REL,
    		        '\u29D4': exports.MO.REL,
    		        '\u29D5': exports.MO.REL,
    		        '\u29D6': exports.MO.BIN4,
    		        '\u29D7': exports.MO.BIN4,
    		        '\u29D8': exports.MO.BIN3,
    		        '\u29D9': exports.MO.BIN3,
    		        '\u29DB': exports.MO.BIN3,
    		        '\u29DC': exports.MO.BIN3,
    		        '\u29DD': exports.MO.BIN3,
    		        '\u29DE': exports.MO.REL,
    		        '\u29DF': exports.MO.BIN3,
    		        '\u29E0': exports.MO.BIN3,
    		        '\u29E1': exports.MO.REL,
    		        '\u29E2': exports.MO.BIN4,
    		        '\u29E3': exports.MO.REL,
    		        '\u29E4': exports.MO.REL,
    		        '\u29E5': exports.MO.REL,
    		        '\u29E6': exports.MO.REL,
    		        '\u29E7': exports.MO.BIN3,
    		        '\u29E8': exports.MO.BIN3,
    		        '\u29E9': exports.MO.BIN3,
    		        '\u29EA': exports.MO.BIN3,
    		        '\u29EB': exports.MO.BIN3,
    		        '\u29EC': exports.MO.BIN3,
    		        '\u29ED': exports.MO.BIN3,
    		        '\u29EE': exports.MO.BIN3,
    		        '\u29EF': exports.MO.BIN3,
    		        '\u29F0': exports.MO.BIN3,
    		        '\u29F1': exports.MO.BIN3,
    		        '\u29F2': exports.MO.BIN3,
    		        '\u29F3': exports.MO.BIN3,
    		        '\u29F4': exports.MO.REL,
    		        '\u29F5': exports.MO.BIN4,
    		        '\u29F6': exports.MO.BIN4,
    		        '\u29F7': exports.MO.BIN4,
    		        '\u29F8': exports.MO.BIN3,
    		        '\u29F9': exports.MO.BIN3,
    		        '\u29FA': exports.MO.BIN3,
    		        '\u29FB': exports.MO.BIN3,
    		        '\u29FE': exports.MO.BIN4,
    		        '\u29FF': exports.MO.BIN4,
    		        '\u2A1D': exports.MO.BIN3,
    		        '\u2A1E': exports.MO.BIN3,
    		        '\u2A1F': exports.MO.BIN3,
    		        '\u2A20': exports.MO.BIN3,
    		        '\u2A21': exports.MO.BIN3,
    		        '\u2A22': exports.MO.BIN4,
    		        '\u2A23': exports.MO.BIN4,
    		        '\u2A24': exports.MO.BIN4,
    		        '\u2A25': exports.MO.BIN4,
    		        '\u2A26': exports.MO.BIN4,
    		        '\u2A27': exports.MO.BIN4,
    		        '\u2A28': exports.MO.BIN4,
    		        '\u2A29': exports.MO.BIN4,
    		        '\u2A2A': exports.MO.BIN4,
    		        '\u2A2B': exports.MO.BIN4,
    		        '\u2A2C': exports.MO.BIN4,
    		        '\u2A2D': exports.MO.BIN4,
    		        '\u2A2E': exports.MO.BIN4,
    		        '\u2A2F': exports.MO.BIN4,
    		        '\u2A30': exports.MO.BIN4,
    		        '\u2A31': exports.MO.BIN4,
    		        '\u2A32': exports.MO.BIN4,
    		        '\u2A33': exports.MO.BIN4,
    		        '\u2A34': exports.MO.BIN4,
    		        '\u2A35': exports.MO.BIN4,
    		        '\u2A36': exports.MO.BIN4,
    		        '\u2A37': exports.MO.BIN4,
    		        '\u2A38': exports.MO.BIN4,
    		        '\u2A39': exports.MO.BIN4,
    		        '\u2A3A': exports.MO.BIN4,
    		        '\u2A3B': exports.MO.BIN4,
    		        '\u2A3C': exports.MO.BIN4,
    		        '\u2A3D': exports.MO.BIN4,
    		        '\u2A3E': exports.MO.BIN4,
    		        '\u2A3F': exports.MO.BIN4,
    		        '\u2A40': exports.MO.BIN4,
    		        '\u2A41': exports.MO.BIN4,
    		        '\u2A42': exports.MO.BIN4,
    		        '\u2A43': exports.MO.BIN4,
    		        '\u2A44': exports.MO.BIN4,
    		        '\u2A45': exports.MO.BIN4,
    		        '\u2A46': exports.MO.BIN4,
    		        '\u2A47': exports.MO.BIN4,
    		        '\u2A48': exports.MO.BIN4,
    		        '\u2A49': exports.MO.BIN4,
    		        '\u2A4A': exports.MO.BIN4,
    		        '\u2A4B': exports.MO.BIN4,
    		        '\u2A4C': exports.MO.BIN4,
    		        '\u2A4D': exports.MO.BIN4,
    		        '\u2A4E': exports.MO.BIN4,
    		        '\u2A4F': exports.MO.BIN4,
    		        '\u2A50': exports.MO.BIN4,
    		        '\u2A51': exports.MO.BIN4,
    		        '\u2A52': exports.MO.BIN4,
    		        '\u2A53': exports.MO.BIN4,
    		        '\u2A54': exports.MO.BIN4,
    		        '\u2A55': exports.MO.BIN4,
    		        '\u2A56': exports.MO.BIN4,
    		        '\u2A57': exports.MO.BIN4,
    		        '\u2A58': exports.MO.BIN4,
    		        '\u2A59': exports.MO.REL,
    		        '\u2A5A': exports.MO.BIN4,
    		        '\u2A5B': exports.MO.BIN4,
    		        '\u2A5C': exports.MO.BIN4,
    		        '\u2A5D': exports.MO.BIN4,
    		        '\u2A5E': exports.MO.BIN4,
    		        '\u2A5F': exports.MO.BIN4,
    		        '\u2A60': exports.MO.BIN4,
    		        '\u2A61': exports.MO.BIN4,
    		        '\u2A62': exports.MO.BIN4,
    		        '\u2A63': exports.MO.BIN4,
    		        '\u2A64': exports.MO.BIN4,
    		        '\u2A65': exports.MO.BIN4,
    		        '\u2A66': exports.MO.REL,
    		        '\u2A67': exports.MO.REL,
    		        '\u2A68': exports.MO.REL,
    		        '\u2A69': exports.MO.REL,
    		        '\u2A6A': exports.MO.REL,
    		        '\u2A6B': exports.MO.REL,
    		        '\u2A6C': exports.MO.REL,
    		        '\u2A6D': exports.MO.REL,
    		        '\u2A6E': exports.MO.REL,
    		        '\u2A6F': exports.MO.REL,
    		        '\u2A70': exports.MO.REL,
    		        '\u2A71': exports.MO.BIN4,
    		        '\u2A72': exports.MO.BIN4,
    		        '\u2A73': exports.MO.REL,
    		        '\u2A74': exports.MO.REL,
    		        '\u2A75': exports.MO.REL,
    		        '\u2A76': exports.MO.REL,
    		        '\u2A77': exports.MO.REL,
    		        '\u2A78': exports.MO.REL,
    		        '\u2A79': exports.MO.REL,
    		        '\u2A7A': exports.MO.REL,
    		        '\u2A7B': exports.MO.REL,
    		        '\u2A7C': exports.MO.REL,
    		        '\u2A7D': exports.MO.REL,
    		        '\u2A7D\u0338': exports.MO.REL,
    		        '\u2A7E': exports.MO.REL,
    		        '\u2A7E\u0338': exports.MO.REL,
    		        '\u2A7F': exports.MO.REL,
    		        '\u2A80': exports.MO.REL,
    		        '\u2A81': exports.MO.REL,
    		        '\u2A82': exports.MO.REL,
    		        '\u2A83': exports.MO.REL,
    		        '\u2A84': exports.MO.REL,
    		        '\u2A85': exports.MO.REL,
    		        '\u2A86': exports.MO.REL,
    		        '\u2A87': exports.MO.REL,
    		        '\u2A88': exports.MO.REL,
    		        '\u2A89': exports.MO.REL,
    		        '\u2A8A': exports.MO.REL,
    		        '\u2A8B': exports.MO.REL,
    		        '\u2A8C': exports.MO.REL,
    		        '\u2A8D': exports.MO.REL,
    		        '\u2A8E': exports.MO.REL,
    		        '\u2A8F': exports.MO.REL,
    		        '\u2A90': exports.MO.REL,
    		        '\u2A91': exports.MO.REL,
    		        '\u2A92': exports.MO.REL,
    		        '\u2A93': exports.MO.REL,
    		        '\u2A94': exports.MO.REL,
    		        '\u2A95': exports.MO.REL,
    		        '\u2A96': exports.MO.REL,
    		        '\u2A97': exports.MO.REL,
    		        '\u2A98': exports.MO.REL,
    		        '\u2A99': exports.MO.REL,
    		        '\u2A9A': exports.MO.REL,
    		        '\u2A9B': exports.MO.REL,
    		        '\u2A9C': exports.MO.REL,
    		        '\u2A9D': exports.MO.REL,
    		        '\u2A9E': exports.MO.REL,
    		        '\u2A9F': exports.MO.REL,
    		        '\u2AA0': exports.MO.REL,
    		        '\u2AA1': exports.MO.REL,
    		        '\u2AA1\u0338': exports.MO.REL,
    		        '\u2AA2': exports.MO.REL,
    		        '\u2AA2\u0338': exports.MO.REL,
    		        '\u2AA3': exports.MO.REL,
    		        '\u2AA4': exports.MO.REL,
    		        '\u2AA5': exports.MO.REL,
    		        '\u2AA6': exports.MO.REL,
    		        '\u2AA7': exports.MO.REL,
    		        '\u2AA8': exports.MO.REL,
    		        '\u2AA9': exports.MO.REL,
    		        '\u2AAA': exports.MO.REL,
    		        '\u2AAB': exports.MO.REL,
    		        '\u2AAC': exports.MO.REL,
    		        '\u2AAD': exports.MO.REL,
    		        '\u2AAE': exports.MO.REL,
    		        '\u2AAF': exports.MO.REL,
    		        '\u2AAF\u0338': exports.MO.REL,
    		        '\u2AB0': exports.MO.REL,
    		        '\u2AB0\u0338': exports.MO.REL,
    		        '\u2AB1': exports.MO.REL,
    		        '\u2AB2': exports.MO.REL,
    		        '\u2AB3': exports.MO.REL,
    		        '\u2AB4': exports.MO.REL,
    		        '\u2AB5': exports.MO.REL,
    		        '\u2AB6': exports.MO.REL,
    		        '\u2AB7': exports.MO.REL,
    		        '\u2AB8': exports.MO.REL,
    		        '\u2AB9': exports.MO.REL,
    		        '\u2ABA': exports.MO.REL,
    		        '\u2ABB': exports.MO.REL,
    		        '\u2ABC': exports.MO.REL,
    		        '\u2ABD': exports.MO.REL,
    		        '\u2ABE': exports.MO.REL,
    		        '\u2ABF': exports.MO.REL,
    		        '\u2AC0': exports.MO.REL,
    		        '\u2AC1': exports.MO.REL,
    		        '\u2AC2': exports.MO.REL,
    		        '\u2AC3': exports.MO.REL,
    		        '\u2AC4': exports.MO.REL,
    		        '\u2AC5': exports.MO.REL,
    		        '\u2AC6': exports.MO.REL,
    		        '\u2AC7': exports.MO.REL,
    		        '\u2AC8': exports.MO.REL,
    		        '\u2AC9': exports.MO.REL,
    		        '\u2ACA': exports.MO.REL,
    		        '\u2ACB': exports.MO.REL,
    		        '\u2ACC': exports.MO.REL,
    		        '\u2ACD': exports.MO.REL,
    		        '\u2ACE': exports.MO.REL,
    		        '\u2ACF': exports.MO.REL,
    		        '\u2AD0': exports.MO.REL,
    		        '\u2AD1': exports.MO.REL,
    		        '\u2AD2': exports.MO.REL,
    		        '\u2AD3': exports.MO.REL,
    		        '\u2AD4': exports.MO.REL,
    		        '\u2AD5': exports.MO.REL,
    		        '\u2AD6': exports.MO.REL,
    		        '\u2AD7': exports.MO.REL,
    		        '\u2AD8': exports.MO.REL,
    		        '\u2AD9': exports.MO.REL,
    		        '\u2ADA': exports.MO.REL,
    		        '\u2ADB': exports.MO.REL,
    		        '\u2ADD': exports.MO.REL,
    		        '\u2ADD\u0338': exports.MO.REL,
    		        '\u2ADE': exports.MO.REL,
    		        '\u2ADF': exports.MO.REL,
    		        '\u2AE0': exports.MO.REL,
    		        '\u2AE1': exports.MO.REL,
    		        '\u2AE2': exports.MO.REL,
    		        '\u2AE3': exports.MO.REL,
    		        '\u2AE4': exports.MO.REL,
    		        '\u2AE5': exports.MO.REL,
    		        '\u2AE6': exports.MO.REL,
    		        '\u2AE7': exports.MO.REL,
    		        '\u2AE8': exports.MO.REL,
    		        '\u2AE9': exports.MO.REL,
    		        '\u2AEA': exports.MO.REL,
    		        '\u2AEB': exports.MO.REL,
    		        '\u2AEC': exports.MO.REL,
    		        '\u2AED': exports.MO.REL,
    		        '\u2AEE': exports.MO.REL,
    		        '\u2AEF': exports.MO.REL,
    		        '\u2AF0': exports.MO.REL,
    		        '\u2AF1': exports.MO.REL,
    		        '\u2AF2': exports.MO.REL,
    		        '\u2AF3': exports.MO.REL,
    		        '\u2AF4': exports.MO.BIN4,
    		        '\u2AF5': exports.MO.BIN4,
    		        '\u2AF6': exports.MO.BIN4,
    		        '\u2AF7': exports.MO.REL,
    		        '\u2AF8': exports.MO.REL,
    		        '\u2AF9': exports.MO.REL,
    		        '\u2AFA': exports.MO.REL,
    		        '\u2AFB': exports.MO.BIN4,
    		        '\u2AFD': exports.MO.BIN4,
    		        '\u2AFE': exports.MO.BIN3,
    		        '\u2B45': exports.MO.RELSTRETCH,
    		        '\u2B46': exports.MO.RELSTRETCH,
    		        '\u3008': exports.MO.OPEN,
    		        '\u3009': exports.MO.CLOSE,
    		        '\uFE37': exports.MO.WIDEACCENT,
    		        '\uFE38': exports.MO.WIDEACCENT,
    		    }
    		};
    		exports.OPTABLE.infix['^'] = exports.MO.WIDEREL;
    		exports.OPTABLE.infix['_'] = exports.MO.WIDEREL;
    		exports.OPTABLE.infix['\u2ADC'] = exports.MO.REL;
    		
    	} (OperatorDictionary));
    	return OperatorDictionary;
    }

    var hasRequiredMo;

    function requireMo () {
    	if (hasRequiredMo) return mo;
    	hasRequiredMo = 1;
    	var __extends = (mo.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mo.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __read = (mo.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __values = (mo.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(mo, "__esModule", { value: true });
    	mo.MmlMo = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var OperatorDictionary_js_1 = requireOperatorDictionary();
    	var string_js_1 = requireString();
    	var MmlMo = (function (_super) {
    	    __extends(MmlMo, _super);
    	    function MmlMo() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this._texClass = null;
    	        _this.lspace = 5 / 18;
    	        _this.rspace = 5 / 18;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMo.prototype, "texClass", {
    	        get: function () {
    	            if (this._texClass === null) {
    	                var mo = this.getText();
    	                var _a = __read(this.handleExplicitForm(this.getForms()), 3), form1 = _a[0], form2 = _a[1], form3 = _a[2];
    	                var OPTABLE_1 = this.constructor.OPTABLE;
    	                var def = OPTABLE_1[form1][mo] || OPTABLE_1[form2][mo] || OPTABLE_1[form3][mo];
    	                return def ? def[2] : MmlNode_js_1.TEXCLASS.REL;
    	            }
    	            return this._texClass;
    	        },
    	        set: function (value) {
    	            this._texClass = value;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMo.prototype, "kind", {
    	        get: function () {
    	            return 'mo';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMo.prototype, "isEmbellished", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMo.prototype, "hasNewLine", {
    	        get: function () {
    	            return this.attributes.get('linebreak') === 'newline';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMo.prototype.coreParent = function () {
    	        var embellished = this;
    	        var parent = this;
    	        var math = this.factory.getNodeClass('math');
    	        while (parent && parent.isEmbellished && parent.coreMO() === this && !(parent instanceof math)) {
    	            embellished = parent;
    	            parent = parent.parent;
    	        }
    	        return embellished;
    	    };
    	    MmlMo.prototype.coreText = function (parent) {
    	        if (!parent) {
    	            return '';
    	        }
    	        if (parent.isEmbellished) {
    	            return parent.coreMO().getText();
    	        }
    	        while ((((parent.isKind('mrow') ||
    	            (parent.isKind('TeXAtom') && parent.texClass !== MmlNode_js_1.TEXCLASS.VCENTER) ||
    	            parent.isKind('mstyle') ||
    	            parent.isKind('mphantom')) && parent.childNodes.length === 1) ||
    	            parent.isKind('munderover')) && parent.childNodes[0]) {
    	            parent = parent.childNodes[0];
    	        }
    	        return (parent.isToken ? parent.getText() : '');
    	    };
    	    MmlMo.prototype.hasSpacingAttributes = function () {
    	        return this.attributes.isSet('lspace') ||
    	            this.attributes.isSet('rspace');
    	    };
    	    Object.defineProperty(MmlMo.prototype, "isAccent", {
    	        get: function () {
    	            var accent = false;
    	            var node = this.coreParent().parent;
    	            if (node) {
    	                var key = (node.isKind('mover') ?
    	                    (node.childNodes[node.over].coreMO() ?
    	                        'accent' : '') :
    	                    node.isKind('munder') ?
    	                        (node.childNodes[node.under].coreMO() ?
    	                            'accentunder' : '') :
    	                        node.isKind('munderover') ?
    	                            (this === node.childNodes[node.over].coreMO() ?
    	                                'accent' :
    	                                this === node.childNodes[node.under].coreMO() ?
    	                                    'accentunder' : '') :
    	                            '');
    	                if (key) {
    	                    var value = node.attributes.getExplicit(key);
    	                    accent = (value !== undefined ? accent : this.attributes.get('accent'));
    	                }
    	            }
    	            return accent;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMo.prototype.setTeXclass = function (prev) {
    	        var _a = this.attributes.getList('form', 'fence'), form = _a.form, fence = _a.fence;
    	        if (this.getProperty('texClass') === undefined &&
    	            (this.attributes.isSet('lspace') || this.attributes.isSet('rspace'))) {
    	            return null;
    	        }
    	        if (fence && this.texClass === MmlNode_js_1.TEXCLASS.REL) {
    	            if (form === 'prefix') {
    	                this.texClass = MmlNode_js_1.TEXCLASS.OPEN;
    	            }
    	            if (form === 'postfix') {
    	                this.texClass = MmlNode_js_1.TEXCLASS.CLOSE;
    	            }
    	        }
    	        return this.adjustTeXclass(prev);
    	    };
    	    MmlMo.prototype.adjustTeXclass = function (prev) {
    	        var texClass = this.texClass;
    	        var prevClass = this.prevClass;
    	        if (texClass === MmlNode_js_1.TEXCLASS.NONE) {
    	            return prev;
    	        }
    	        if (prev) {
    	            if (prev.getProperty('autoOP') && (texClass === MmlNode_js_1.TEXCLASS.BIN || texClass === MmlNode_js_1.TEXCLASS.REL)) {
    	                prevClass = prev.texClass = MmlNode_js_1.TEXCLASS.ORD;
    	            }
    	            prevClass = this.prevClass = (prev.texClass || MmlNode_js_1.TEXCLASS.ORD);
    	            this.prevLevel = this.attributes.getInherited('scriptlevel');
    	        }
    	        else {
    	            prevClass = this.prevClass = MmlNode_js_1.TEXCLASS.NONE;
    	        }
    	        if (texClass === MmlNode_js_1.TEXCLASS.BIN &&
    	            (prevClass === MmlNode_js_1.TEXCLASS.NONE || prevClass === MmlNode_js_1.TEXCLASS.BIN || prevClass === MmlNode_js_1.TEXCLASS.OP ||
    	                prevClass === MmlNode_js_1.TEXCLASS.REL || prevClass === MmlNode_js_1.TEXCLASS.OPEN || prevClass === MmlNode_js_1.TEXCLASS.PUNCT)) {
    	            this.texClass = MmlNode_js_1.TEXCLASS.ORD;
    	        }
    	        else if (prevClass === MmlNode_js_1.TEXCLASS.BIN &&
    	            (texClass === MmlNode_js_1.TEXCLASS.REL || texClass === MmlNode_js_1.TEXCLASS.CLOSE || texClass === MmlNode_js_1.TEXCLASS.PUNCT)) {
    	            prev.texClass = this.prevClass = MmlNode_js_1.TEXCLASS.ORD;
    	        }
    	        else if (texClass === MmlNode_js_1.TEXCLASS.BIN) {
    	            var child = this;
    	            var parent_1 = this.parent;
    	            while (parent_1 && parent_1.parent && parent_1.isEmbellished &&
    	                (parent_1.childNodes.length === 1 ||
    	                    (!parent_1.isKind('mrow') && parent_1.core() === child))) {
    	                child = parent_1;
    	                parent_1 = parent_1.parent;
    	            }
    	            if (parent_1.childNodes[parent_1.childNodes.length - 1] === child) {
    	                this.texClass = MmlNode_js_1.TEXCLASS.ORD;
    	            }
    	        }
    	        return this;
    	    };
    	    MmlMo.prototype.setInheritedAttributes = function (attributes, display, level, prime) {
    	        if (attributes === undefined) { attributes = {}; }
    	        if (display === undefined) { display = false; }
    	        if (level === undefined) { level = 0; }
    	        if (prime === undefined) { prime = false; }
    	        _super.prototype.setInheritedAttributes.call(this, attributes, display, level, prime);
    	        var mo = this.getText();
    	        this.checkOperatorTable(mo);
    	        this.checkPseudoScripts(mo);
    	        this.checkPrimes(mo);
    	        this.checkMathAccent(mo);
    	    };
    	    MmlMo.prototype.checkOperatorTable = function (mo) {
    	        var e_1, _a;
    	        var _b = __read(this.handleExplicitForm(this.getForms()), 3), form1 = _b[0], form2 = _b[1], form3 = _b[2];
    	        this.attributes.setInherited('form', form1);
    	        var OPTABLE = this.constructor.OPTABLE;
    	        var def = OPTABLE[form1][mo] || OPTABLE[form2][mo] || OPTABLE[form3][mo];
    	        if (def) {
    	            if (this.getProperty('texClass') === undefined) {
    	                this.texClass = def[2];
    	            }
    	            try {
    	                for (var _c = __values(Object.keys(def[3] || {})), _d = _c.next(); !_d.done; _d = _c.next()) {
    	                    var name_1 = _d.value;
    	                    this.attributes.setInherited(name_1, def[3][name_1]);
    	                }
    	            }
    	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	            finally {
    	                try {
    	                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    	                }
    	                finally { if (e_1) throw e_1.error; }
    	            }
    	            this.lspace = (def[0] + 1) / 18;
    	            this.rspace = (def[1] + 1) / 18;
    	        }
    	        else {
    	            var range = (0, OperatorDictionary_js_1.getRange)(mo);
    	            if (range) {
    	                if (this.getProperty('texClass') === undefined) {
    	                    this.texClass = range[2];
    	                }
    	                var spacing = this.constructor.MMLSPACING[range[2]];
    	                this.lspace = (spacing[0] + 1) / 18;
    	                this.rspace = (spacing[1] + 1) / 18;
    	            }
    	        }
    	    };
    	    MmlMo.prototype.getForms = function () {
    	        var core = this;
    	        var parent = this.parent;
    	        var Parent = this.Parent;
    	        while (Parent && Parent.isEmbellished) {
    	            core = parent;
    	            parent = Parent.parent;
    	            Parent = Parent.Parent;
    	        }
    	        if (parent && parent.isKind('mrow') && parent.nonSpaceLength() !== 1) {
    	            if (parent.firstNonSpace() === core) {
    	                return ['prefix', 'infix', 'postfix'];
    	            }
    	            if (parent.lastNonSpace() === core) {
    	                return ['postfix', 'infix', 'prefix'];
    	            }
    	        }
    	        return ['infix', 'prefix', 'postfix'];
    	    };
    	    MmlMo.prototype.handleExplicitForm = function (forms) {
    	        if (this.attributes.isSet('form')) {
    	            var form_1 = this.attributes.get('form');
    	            forms = [form_1].concat(forms.filter(function (name) { return (name !== form_1); }));
    	        }
    	        return forms;
    	    };
    	    MmlMo.prototype.checkPseudoScripts = function (mo) {
    	        var PSEUDOSCRIPTS = this.constructor.pseudoScripts;
    	        if (!mo.match(PSEUDOSCRIPTS))
    	            return;
    	        var parent = this.coreParent().Parent;
    	        var isPseudo = !parent || !(parent.isKind('msubsup') && !parent.isKind('msub'));
    	        this.setProperty('pseudoscript', isPseudo);
    	        if (isPseudo) {
    	            this.attributes.setInherited('lspace', 0);
    	            this.attributes.setInherited('rspace', 0);
    	        }
    	    };
    	    MmlMo.prototype.checkPrimes = function (mo) {
    	        var PRIMES = this.constructor.primes;
    	        if (!mo.match(PRIMES))
    	            return;
    	        var REMAP = this.constructor.remapPrimes;
    	        var primes = (0, string_js_1.unicodeString)((0, string_js_1.unicodeChars)(mo).map(function (c) { return REMAP[c]; }));
    	        this.setProperty('primes', primes);
    	    };
    	    MmlMo.prototype.checkMathAccent = function (mo) {
    	        var parent = this.Parent;
    	        if (this.getProperty('mathaccent') !== undefined || !parent || !parent.isKind('munderover'))
    	            return;
    	        var base = parent.childNodes[0];
    	        if (base.isEmbellished && base.coreMO() === this)
    	            return;
    	        var MATHACCENT = this.constructor.mathaccents;
    	        if (mo.match(MATHACCENT)) {
    	            this.setProperty('mathaccent', true);
    	        }
    	    };
    	    MmlMo.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults), { form: 'infix', fence: false, separator: false, lspace: 'thickmathspace', rspace: 'thickmathspace', stretchy: false, symmetric: false, maxsize: 'infinity', minsize: '0em', largeop: false, movablelimits: false, accent: false, linebreak: 'auto', lineleading: '1ex', linebreakstyle: 'before', indentalign: 'auto', indentshift: '0', indenttarget: '', indentalignfirst: 'indentalign', indentshiftfirst: 'indentshift', indentalignlast: 'indentalign', indentshiftlast: 'indentshift' });
    	    MmlMo.MMLSPACING = OperatorDictionary_js_1.MMLSPACING;
    	    MmlMo.OPTABLE = OperatorDictionary_js_1.OPTABLE;
    	    MmlMo.pseudoScripts = new RegExp([
    	        '^["\'*`',
    	        '\u00AA',
    	        '\u00B0',
    	        '\u00B2-\u00B4',
    	        '\u00B9',
    	        '\u00BA',
    	        '\u2018-\u201F',
    	        '\u2032-\u2037\u2057',
    	        '\u2070\u2071',
    	        '\u2074-\u207F',
    	        '\u2080-\u208E',
    	        ']+$'
    	    ].join(''));
    	    MmlMo.primes = new RegExp([
    	        '^["\'`',
    	        '\u2018-\u201F',
    	        ']+$'
    	    ].join(''));
    	    MmlMo.remapPrimes = {
    	        0x0022: 0x2033,
    	        0x0027: 0x2032,
    	        0x0060: 0x2035,
    	        0x2018: 0x2035,
    	        0x2019: 0x2032,
    	        0x201A: 0x2032,
    	        0x201B: 0x2035,
    	        0x201C: 0x2036,
    	        0x201D: 0x2033,
    	        0x201E: 0x2033,
    	        0x201F: 0x2036,
    	    };
    	    MmlMo.mathaccents = new RegExp([
    	        '^[',
    	        '\u00B4\u0301\u02CA',
    	        '\u0060\u0300\u02CB',
    	        '\u00A8\u0308',
    	        '\u007E\u0303\u02DC',
    	        '\u00AF\u0304\u02C9',
    	        '\u02D8\u0306',
    	        '\u02C7\u030C',
    	        '\u005E\u0302\u02C6',
    	        '\u2192\u20D7',
    	        '\u02D9\u0307',
    	        '\u02DA\u030A',
    	        '\u20DB',
    	        '\u20DC',
    	        ']$'
    	    ].join(''));
    	    return MmlMo;
    	}(MmlNode_js_1.AbstractMmlTokenNode));
    	mo.MmlMo = MmlMo;
    	
    	return mo;
    }

    var hasRequiredNodeUtil;

    function requireNodeUtil () {
    	if (hasRequiredNodeUtil) return NodeUtil;
    	hasRequiredNodeUtil = 1;
    	var __values = (NodeUtil.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (NodeUtil.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (NodeUtil.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(NodeUtil, "__esModule", { value: true });
    	var MmlNode_js_1 = requireMmlNode();
    	var mo_js_1 = requireMo();
    	var NodeUtil$1;
    	(function (NodeUtil) {
    	    var attrs = new Map([
    	        ['autoOP', true],
    	        ['fnOP', true],
    	        ['movesupsub', true],
    	        ['subsupOK', true],
    	        ['texprimestyle', true],
    	        ['useHeight', true],
    	        ['variantForm', true],
    	        ['withDelims', true],
    	        ['mathaccent', true],
    	        ['open', true],
    	        ['close', true]
    	    ]);
    	    function createEntity(code) {
    	        return String.fromCodePoint(parseInt(code, 16));
    	    }
    	    NodeUtil.createEntity = createEntity;
    	    function getChildren(node) {
    	        return node.childNodes;
    	    }
    	    NodeUtil.getChildren = getChildren;
    	    function getText(node) {
    	        return node.getText();
    	    }
    	    NodeUtil.getText = getText;
    	    function appendChildren(node, children) {
    	        var e_1, _a;
    	        try {
    	            for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
    	                var child = children_1_1.value;
    	                node.appendChild(child);
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	    }
    	    NodeUtil.appendChildren = appendChildren;
    	    function setAttribute(node, attribute, value) {
    	        node.attributes.set(attribute, value);
    	    }
    	    NodeUtil.setAttribute = setAttribute;
    	    function setProperty(node, property, value) {
    	        node.setProperty(property, value);
    	    }
    	    NodeUtil.setProperty = setProperty;
    	    function setProperties(node, properties) {
    	        var e_2, _a;
    	        try {
    	            for (var _b = __values(Object.keys(properties)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var name_1 = _c.value;
    	                var value = properties[name_1];
    	                if (name_1 === 'texClass') {
    	                    node.texClass = value;
    	                    node.setProperty(name_1, value);
    	                }
    	                else if (name_1 === 'movablelimits') {
    	                    node.setProperty('movablelimits', value);
    	                    if (node.isKind('mo') || node.isKind('mstyle')) {
    	                        node.attributes.set('movablelimits', value);
    	                    }
    	                }
    	                else if (name_1 === 'inferred') {
    	                }
    	                else if (attrs.has(name_1)) {
    	                    node.setProperty(name_1, value);
    	                }
    	                else {
    	                    node.attributes.set(name_1, value);
    	                }
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	    }
    	    NodeUtil.setProperties = setProperties;
    	    function getProperty(node, property) {
    	        return node.getProperty(property);
    	    }
    	    NodeUtil.getProperty = getProperty;
    	    function getAttribute(node, attr) {
    	        return node.attributes.get(attr);
    	    }
    	    NodeUtil.getAttribute = getAttribute;
    	    function removeProperties(node) {
    	        var properties = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            properties[_i - 1] = arguments[_i];
    	        }
    	        node.removeProperty.apply(node, __spreadArray([], __read(properties), false));
    	    }
    	    NodeUtil.removeProperties = removeProperties;
    	    function getChildAt(node, position) {
    	        return node.childNodes[position];
    	    }
    	    NodeUtil.getChildAt = getChildAt;
    	    function setChild(node, position, child) {
    	        var children = node.childNodes;
    	        children[position] = child;
    	        if (child) {
    	            child.parent = node;
    	        }
    	    }
    	    NodeUtil.setChild = setChild;
    	    function copyChildren(oldNode, newNode) {
    	        var children = oldNode.childNodes;
    	        for (var i = 0; i < children.length; i++) {
    	            setChild(newNode, i, children[i]);
    	        }
    	    }
    	    NodeUtil.copyChildren = copyChildren;
    	    function copyAttributes(oldNode, newNode) {
    	        newNode.attributes = oldNode.attributes;
    	        setProperties(newNode, oldNode.getAllProperties());
    	    }
    	    NodeUtil.copyAttributes = copyAttributes;
    	    function isType(node, kind) {
    	        return node.isKind(kind);
    	    }
    	    NodeUtil.isType = isType;
    	    function isEmbellished(node) {
    	        return node.isEmbellished;
    	    }
    	    NodeUtil.isEmbellished = isEmbellished;
    	    function getTexClass(node) {
    	        return node.texClass;
    	    }
    	    NodeUtil.getTexClass = getTexClass;
    	    function getCoreMO(node) {
    	        return node.coreMO();
    	    }
    	    NodeUtil.getCoreMO = getCoreMO;
    	    function isNode(item) {
    	        return item instanceof MmlNode_js_1.AbstractMmlNode || item instanceof MmlNode_js_1.AbstractMmlEmptyNode;
    	    }
    	    NodeUtil.isNode = isNode;
    	    function isInferred(node) {
    	        return node.isInferred;
    	    }
    	    NodeUtil.isInferred = isInferred;
    	    function getForm(node) {
    	        var e_3, _a;
    	        if (!isType(node, 'mo')) {
    	            return null;
    	        }
    	        var mo = node;
    	        var forms = mo.getForms();
    	        try {
    	            for (var forms_1 = __values(forms), forms_1_1 = forms_1.next(); !forms_1_1.done; forms_1_1 = forms_1.next()) {
    	                var form = forms_1_1.value;
    	                var symbol = mo_js_1.MmlMo.OPTABLE[form][mo.getText()];
    	                if (symbol) {
    	                    return symbol;
    	                }
    	            }
    	        }
    	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	        finally {
    	            try {
    	                if (forms_1_1 && !forms_1_1.done && (_a = forms_1.return)) _a.call(forms_1);
    	            }
    	            finally { if (e_3) throw e_3.error; }
    	        }
    	        return null;
    	    }
    	    NodeUtil.getForm = getForm;
    	})(NodeUtil$1 || (NodeUtil$1 = {}));
    	NodeUtil.default = NodeUtil$1;
    	
    	return NodeUtil;
    }

    var hasRequiredFilterUtil;

    function requireFilterUtil () {
    	if (hasRequiredFilterUtil) return FilterUtil;
    	hasRequiredFilterUtil = 1;
    	var __values = (FilterUtil.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __importDefault = (FilterUtil.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(FilterUtil, "__esModule", { value: true });
    	var MmlNode_js_1 = requireMmlNode();
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var FilterUtil$1;
    	(function (FilterUtil) {
    	    FilterUtil.cleanStretchy = function (arg) {
    	        var e_1, _a;
    	        var options = arg.data;
    	        try {
    	            for (var _b = __values(options.getList('fixStretchy')), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var mo = _c.value;
    	                if (NodeUtil_js_1.default.getProperty(mo, 'fixStretchy')) {
    	                    var symbol = NodeUtil_js_1.default.getForm(mo);
    	                    if (symbol && symbol[3] && symbol[3]['stretchy']) {
    	                        NodeUtil_js_1.default.setAttribute(mo, 'stretchy', false);
    	                    }
    	                    var parent_1 = mo.parent;
    	                    if (!NodeUtil_js_1.default.getTexClass(mo) && (!symbol || !symbol[2])) {
    	                        var texAtom = options.nodeFactory.create('node', 'TeXAtom', [mo]);
    	                        parent_1.replaceChild(texAtom, mo);
    	                        texAtom.inheritAttributesFrom(mo);
    	                    }
    	                    NodeUtil_js_1.default.removeProperties(mo, 'fixStretchy');
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	    };
    	    FilterUtil.cleanAttributes = function (arg) {
    	        var node = arg.data.root;
    	        node.walkTree(function (mml, _d) {
    	            var e_2, _a;
    	            var attribs = mml.attributes;
    	            if (!attribs) {
    	                return;
    	            }
    	            var keep = new Set((attribs.get('mjx-keep-attrs') || '').split(/ /));
    	            delete (attribs.getAllAttributes())['mjx-keep-attrs'];
    	            try {
    	                for (var _b = __values(attribs.getExplicitNames()), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var key = _c.value;
    	                    if (!keep.has(key) && attribs.attributes[key] === mml.attributes.getInherited(key)) {
    	                        delete attribs.attributes[key];
    	                    }
    	                }
    	            }
    	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_2) throw e_2.error; }
    	            }
    	        }, {});
    	    };
    	    FilterUtil.combineRelations = function (arg) {
    	        var e_3, _a, e_4, _b;
    	        var remove = [];
    	        try {
    	            for (var _c = __values(arg.data.getList('mo')), _e = _c.next(); !_e.done; _e = _c.next()) {
    	                var mo = _e.value;
    	                if (mo.getProperty('relationsCombined') || !mo.parent ||
    	                    (mo.parent && !NodeUtil_js_1.default.isType(mo.parent, 'mrow')) ||
    	                    NodeUtil_js_1.default.getTexClass(mo) !== MmlNode_js_1.TEXCLASS.REL) {
    	                    continue;
    	                }
    	                var mml = mo.parent;
    	                var m2 = void 0;
    	                var children = mml.childNodes;
    	                var next = children.indexOf(mo) + 1;
    	                var variantForm = NodeUtil_js_1.default.getProperty(mo, 'variantForm');
    	                while (next < children.length && (m2 = children[next]) &&
    	                    NodeUtil_js_1.default.isType(m2, 'mo') &&
    	                    NodeUtil_js_1.default.getTexClass(m2) === MmlNode_js_1.TEXCLASS.REL) {
    	                    if (variantForm === NodeUtil_js_1.default.getProperty(m2, 'variantForm') &&
    	                        _compareExplicit(mo, m2)) {
    	                        NodeUtil_js_1.default.appendChildren(mo, NodeUtil_js_1.default.getChildren(m2));
    	                        _copyExplicit(['stretchy', 'rspace'], mo, m2);
    	                        try {
    	                            for (var _f = (e_4 = void 0, __values(m2.getPropertyNames())), _g = _f.next(); !_g.done; _g = _f.next()) {
    	                                var name_1 = _g.value;
    	                                mo.setProperty(name_1, m2.getProperty(name_1));
    	                            }
    	                        }
    	                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    	                        finally {
    	                            try {
    	                                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
    	                            }
    	                            finally { if (e_4) throw e_4.error; }
    	                        }
    	                        children.splice(next, 1);
    	                        remove.push(m2);
    	                        m2.parent = null;
    	                        m2.setProperty('relationsCombined', true);
    	                    }
    	                    else {
    	                        if (mo.attributes.getExplicit('rspace') == null) {
    	                            NodeUtil_js_1.default.setAttribute(mo, 'rspace', '0pt');
    	                        }
    	                        if (m2.attributes.getExplicit('lspace') == null) {
    	                            NodeUtil_js_1.default.setAttribute(m2, 'lspace', '0pt');
    	                        }
    	                        break;
    	                    }
    	                }
    	                mo.attributes.setInherited('form', mo.getForms()[0]);
    	            }
    	        }
    	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	        finally {
    	            try {
    	                if (_e && !_e.done && (_a = _c.return)) _a.call(_c);
    	            }
    	            finally { if (e_3) throw e_3.error; }
    	        }
    	        arg.data.removeFromList('mo', remove);
    	    };
    	    var _copyExplicit = function (attrs, node1, node2) {
    	        var attr1 = node1.attributes;
    	        var attr2 = node2.attributes;
    	        attrs.forEach(function (x) {
    	            var attr = attr2.getExplicit(x);
    	            if (attr != null) {
    	                attr1.set(x, attr);
    	            }
    	        });
    	    };
    	    var _compareExplicit = function (node1, node2) {
    	        var e_5, _a;
    	        var filter = function (attr, space) {
    	            var exp = attr.getExplicitNames();
    	            return exp.filter(function (x) {
    	                return x !== space &&
    	                    (x !== 'stretchy' ||
    	                        attr.getExplicit('stretchy'));
    	            });
    	        };
    	        var attr1 = node1.attributes;
    	        var attr2 = node2.attributes;
    	        var exp1 = filter(attr1, 'lspace');
    	        var exp2 = filter(attr2, 'rspace');
    	        if (exp1.length !== exp2.length) {
    	            return false;
    	        }
    	        try {
    	            for (var exp1_1 = __values(exp1), exp1_1_1 = exp1_1.next(); !exp1_1_1.done; exp1_1_1 = exp1_1.next()) {
    	                var name_2 = exp1_1_1.value;
    	                if (attr1.getExplicit(name_2) !== attr2.getExplicit(name_2)) {
    	                    return false;
    	                }
    	            }
    	        }
    	        catch (e_5_1) { e_5 = { error: e_5_1 }; }
    	        finally {
    	            try {
    	                if (exp1_1_1 && !exp1_1_1.done && (_a = exp1_1.return)) _a.call(exp1_1);
    	            }
    	            finally { if (e_5) throw e_5.error; }
    	        }
    	        return true;
    	    };
    	    var _cleanSubSup = function (options, low, up) {
    	        var e_6, _a;
    	        var remove = [];
    	        try {
    	            for (var _b = __values(options.getList('m' + low + up)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var mml = _c.value;
    	                var children = mml.childNodes;
    	                if (children[mml[low]] && children[mml[up]]) {
    	                    continue;
    	                }
    	                var parent_2 = mml.parent;
    	                var newNode = (children[mml[low]] ?
    	                    options.nodeFactory.create('node', 'm' + low, [children[mml.base], children[mml[low]]]) :
    	                    options.nodeFactory.create('node', 'm' + up, [children[mml.base], children[mml[up]]]));
    	                NodeUtil_js_1.default.copyAttributes(mml, newNode);
    	                if (parent_2) {
    	                    parent_2.replaceChild(newNode, mml);
    	                }
    	                else {
    	                    options.root = newNode;
    	                }
    	                remove.push(mml);
    	            }
    	        }
    	        catch (e_6_1) { e_6 = { error: e_6_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_6) throw e_6.error; }
    	        }
    	        options.removeFromList('m' + low + up, remove);
    	    };
    	    FilterUtil.cleanSubSup = function (arg) {
    	        var options = arg.data;
    	        if (options.error) {
    	            return;
    	        }
    	        _cleanSubSup(options, 'sub', 'sup');
    	        _cleanSubSup(options, 'under', 'over');
    	    };
    	    var _moveLimits = function (options, underover, subsup) {
    	        var e_7, _a;
    	        var remove = [];
    	        try {
    	            for (var _b = __values(options.getList(underover)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var mml = _c.value;
    	                if (mml.attributes.get('displaystyle')) {
    	                    continue;
    	                }
    	                var base = mml.childNodes[mml.base];
    	                var mo = base.coreMO();
    	                if (base.getProperty('movablelimits') && !mo.attributes.getExplicit('movablelimits')) {
    	                    var node = options.nodeFactory.create('node', subsup, mml.childNodes);
    	                    NodeUtil_js_1.default.copyAttributes(mml, node);
    	                    if (mml.parent) {
    	                        mml.parent.replaceChild(node, mml);
    	                    }
    	                    else {
    	                        options.root = node;
    	                    }
    	                    remove.push(mml);
    	                }
    	            }
    	        }
    	        catch (e_7_1) { e_7 = { error: e_7_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_7) throw e_7.error; }
    	        }
    	        options.removeFromList(underover, remove);
    	    };
    	    FilterUtil.moveLimits = function (arg) {
    	        var options = arg.data;
    	        _moveLimits(options, 'munderover', 'msubsup');
    	        _moveLimits(options, 'munder', 'msub');
    	        _moveLimits(options, 'mover', 'msup');
    	    };
    	    FilterUtil.setInherited = function (arg) {
    	        arg.data.root.setInheritedAttributes({}, arg.math['display'], 0, false);
    	    };
    	})(FilterUtil$1 || (FilterUtil$1 = {}));
    	FilterUtil.default = FilterUtil$1;
    	
    	return FilterUtil;
    }

    var TexParser = {};

    var ParseUtil = {};

    var TexError = {};

    var hasRequiredTexError;

    function requireTexError () {
    	if (hasRequiredTexError) return TexError;
    	hasRequiredTexError = 1;
    	Object.defineProperty(TexError, "__esModule", { value: true });
    	var TexError$1 = (function () {
    	    function TexError(id, message) {
    	        var rest = [];
    	        for (var _i = 2; _i < arguments.length; _i++) {
    	            rest[_i - 2] = arguments[_i];
    	        }
    	        this.id = id;
    	        this.message = TexError.processString(message, rest);
    	    }
    	    TexError.processString = function (str, args) {
    	        var parts = str.split(TexError.pattern);
    	        for (var i = 1, m = parts.length; i < m; i += 2) {
    	            var c = parts[i].charAt(0);
    	            if (c >= '0' && c <= '9') {
    	                parts[i] = args[parseInt(parts[i], 10) - 1];
    	                if (typeof parts[i] === 'number') {
    	                    parts[i] = parts[i].toString();
    	                }
    	            }
    	            else if (c === '{') {
    	                c = parts[i].substr(1);
    	                if (c >= '0' && c <= '9') {
    	                    parts[i] = args[parseInt(parts[i].substr(1, parts[i].length - 2), 10) - 1];
    	                    if (typeof parts[i] === 'number') {
    	                        parts[i] = parts[i].toString();
    	                    }
    	                }
    	                else {
    	                    var match = parts[i].match(/^\{([a-z]+):%(\d+)\|(.*)\}$/);
    	                    if (match) {
    	                        parts[i] = '%' + parts[i];
    	                    }
    	                }
    	            }
    	            if (parts[i] == null) {
    	                parts[i] = '???';
    	            }
    	        }
    	        return parts.join('');
    	    };
    	    TexError.pattern = /%(\d+|\{\d+\}|\{[a-z]+:\%\d+(?:\|(?:%\{\d+\}|%.|[^\}])*)+\}|.)/g;
    	    return TexError;
    	}());
    	TexError.default = TexError$1;
    	
    	return TexError;
    }

    var Entities = {};

    var AsyncLoad = {};

    var hasRequiredAsyncLoad;

    function requireAsyncLoad () {
    	if (hasRequiredAsyncLoad) return AsyncLoad;
    	hasRequiredAsyncLoad = 1;
    	Object.defineProperty(AsyncLoad, "__esModule", { value: true });
    	AsyncLoad.asyncLoad = undefined;
    	var mathjax_js_1 = requireMathjax();
    	function asyncLoad(name) {
    	    if (!mathjax_js_1.mathjax.asyncLoad) {
    	        return Promise.reject("Can't load '".concat(name, "': No asyncLoad method specified"));
    	    }
    	    return new Promise(function (ok, fail) {
    	        var result = mathjax_js_1.mathjax.asyncLoad(name);
    	        if (result instanceof Promise) {
    	            result.then(function (value) { return ok(value); }).catch(function (err) { return fail(err); });
    	        }
    	        else {
    	            ok(result);
    	        }
    	    });
    	}
    	AsyncLoad.asyncLoad = asyncLoad;
    	
    	return AsyncLoad;
    }

    var hasRequiredEntities;

    function requireEntities () {
    	if (hasRequiredEntities) return Entities;
    	hasRequiredEntities = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.numeric = exports.translate = exports.remove = exports.add = exports.entities = exports.options = undefined;
    		var Retries_js_1 = requireRetries();
    		var AsyncLoad_js_1 = requireAsyncLoad();
    		exports.options = {
    		    loadMissingEntities: true
    		};
    		exports.entities = {
    		    ApplyFunction: '\u2061',
    		    Backslash: '\u2216',
    		    Because: '\u2235',
    		    Breve: '\u02D8',
    		    Cap: '\u22D2',
    		    CenterDot: '\u00B7',
    		    CircleDot: '\u2299',
    		    CircleMinus: '\u2296',
    		    CirclePlus: '\u2295',
    		    CircleTimes: '\u2297',
    		    Congruent: '\u2261',
    		    ContourIntegral: '\u222E',
    		    Coproduct: '\u2210',
    		    Cross: '\u2A2F',
    		    Cup: '\u22D3',
    		    CupCap: '\u224D',
    		    Dagger: '\u2021',
    		    Del: '\u2207',
    		    Delta: '\u0394',
    		    Diamond: '\u22C4',
    		    DifferentialD: '\u2146',
    		    DotEqual: '\u2250',
    		    DoubleDot: '\u00A8',
    		    DoubleRightTee: '\u22A8',
    		    DoubleVerticalBar: '\u2225',
    		    DownArrow: '\u2193',
    		    DownLeftVector: '\u21BD',
    		    DownRightVector: '\u21C1',
    		    DownTee: '\u22A4',
    		    Downarrow: '\u21D3',
    		    Element: '\u2208',
    		    EqualTilde: '\u2242',
    		    Equilibrium: '\u21CC',
    		    Exists: '\u2203',
    		    ExponentialE: '\u2147',
    		    FilledVerySmallSquare: '\u25AA',
    		    ForAll: '\u2200',
    		    Gamma: '\u0393',
    		    Gg: '\u22D9',
    		    GreaterEqual: '\u2265',
    		    GreaterEqualLess: '\u22DB',
    		    GreaterFullEqual: '\u2267',
    		    GreaterLess: '\u2277',
    		    GreaterSlantEqual: '\u2A7E',
    		    GreaterTilde: '\u2273',
    		    Hacek: '\u02C7',
    		    Hat: '\u005E',
    		    HumpDownHump: '\u224E',
    		    HumpEqual: '\u224F',
    		    Im: '\u2111',
    		    ImaginaryI: '\u2148',
    		    Integral: '\u222B',
    		    Intersection: '\u22C2',
    		    InvisibleComma: '\u2063',
    		    InvisibleTimes: '\u2062',
    		    Lambda: '\u039B',
    		    Larr: '\u219E',
    		    LeftAngleBracket: '\u27E8',
    		    LeftArrow: '\u2190',
    		    LeftArrowRightArrow: '\u21C6',
    		    LeftCeiling: '\u2308',
    		    LeftDownVector: '\u21C3',
    		    LeftFloor: '\u230A',
    		    LeftRightArrow: '\u2194',
    		    LeftTee: '\u22A3',
    		    LeftTriangle: '\u22B2',
    		    LeftTriangleEqual: '\u22B4',
    		    LeftUpVector: '\u21BF',
    		    LeftVector: '\u21BC',
    		    Leftarrow: '\u21D0',
    		    Leftrightarrow: '\u21D4',
    		    LessEqualGreater: '\u22DA',
    		    LessFullEqual: '\u2266',
    		    LessGreater: '\u2276',
    		    LessSlantEqual: '\u2A7D',
    		    LessTilde: '\u2272',
    		    Ll: '\u22D8',
    		    Lleftarrow: '\u21DA',
    		    LongLeftArrow: '\u27F5',
    		    LongLeftRightArrow: '\u27F7',
    		    LongRightArrow: '\u27F6',
    		    Longleftarrow: '\u27F8',
    		    Longleftrightarrow: '\u27FA',
    		    Longrightarrow: '\u27F9',
    		    Lsh: '\u21B0',
    		    MinusPlus: '\u2213',
    		    NestedGreaterGreater: '\u226B',
    		    NestedLessLess: '\u226A',
    		    NotDoubleVerticalBar: '\u2226',
    		    NotElement: '\u2209',
    		    NotEqual: '\u2260',
    		    NotExists: '\u2204',
    		    NotGreater: '\u226F',
    		    NotGreaterEqual: '\u2271',
    		    NotLeftTriangle: '\u22EA',
    		    NotLeftTriangleEqual: '\u22EC',
    		    NotLess: '\u226E',
    		    NotLessEqual: '\u2270',
    		    NotPrecedes: '\u2280',
    		    NotPrecedesSlantEqual: '\u22E0',
    		    NotRightTriangle: '\u22EB',
    		    NotRightTriangleEqual: '\u22ED',
    		    NotSubsetEqual: '\u2288',
    		    NotSucceeds: '\u2281',
    		    NotSucceedsSlantEqual: '\u22E1',
    		    NotSupersetEqual: '\u2289',
    		    NotTilde: '\u2241',
    		    NotVerticalBar: '\u2224',
    		    Omega: '\u03A9',
    		    OverBar: '\u203E',
    		    OverBrace: '\u23DE',
    		    PartialD: '\u2202',
    		    Phi: '\u03A6',
    		    Pi: '\u03A0',
    		    PlusMinus: '\u00B1',
    		    Precedes: '\u227A',
    		    PrecedesEqual: '\u2AAF',
    		    PrecedesSlantEqual: '\u227C',
    		    PrecedesTilde: '\u227E',
    		    Product: '\u220F',
    		    Proportional: '\u221D',
    		    Psi: '\u03A8',
    		    Rarr: '\u21A0',
    		    Re: '\u211C',
    		    ReverseEquilibrium: '\u21CB',
    		    RightAngleBracket: '\u27E9',
    		    RightArrow: '\u2192',
    		    RightArrowLeftArrow: '\u21C4',
    		    RightCeiling: '\u2309',
    		    RightDownVector: '\u21C2',
    		    RightFloor: '\u230B',
    		    RightTee: '\u22A2',
    		    RightTeeArrow: '\u21A6',
    		    RightTriangle: '\u22B3',
    		    RightTriangleEqual: '\u22B5',
    		    RightUpVector: '\u21BE',
    		    RightVector: '\u21C0',
    		    Rightarrow: '\u21D2',
    		    Rrightarrow: '\u21DB',
    		    Rsh: '\u21B1',
    		    Sigma: '\u03A3',
    		    SmallCircle: '\u2218',
    		    Sqrt: '\u221A',
    		    Square: '\u25A1',
    		    SquareIntersection: '\u2293',
    		    SquareSubset: '\u228F',
    		    SquareSubsetEqual: '\u2291',
    		    SquareSuperset: '\u2290',
    		    SquareSupersetEqual: '\u2292',
    		    SquareUnion: '\u2294',
    		    Star: '\u22C6',
    		    Subset: '\u22D0',
    		    SubsetEqual: '\u2286',
    		    Succeeds: '\u227B',
    		    SucceedsEqual: '\u2AB0',
    		    SucceedsSlantEqual: '\u227D',
    		    SucceedsTilde: '\u227F',
    		    SuchThat: '\u220B',
    		    Sum: '\u2211',
    		    Superset: '\u2283',
    		    SupersetEqual: '\u2287',
    		    Supset: '\u22D1',
    		    Therefore: '\u2234',
    		    Theta: '\u0398',
    		    Tilde: '\u223C',
    		    TildeEqual: '\u2243',
    		    TildeFullEqual: '\u2245',
    		    TildeTilde: '\u2248',
    		    UnderBar: '\u005F',
    		    UnderBrace: '\u23DF',
    		    Union: '\u22C3',
    		    UnionPlus: '\u228E',
    		    UpArrow: '\u2191',
    		    UpDownArrow: '\u2195',
    		    UpTee: '\u22A5',
    		    Uparrow: '\u21D1',
    		    Updownarrow: '\u21D5',
    		    Upsilon: '\u03A5',
    		    Vdash: '\u22A9',
    		    Vee: '\u22C1',
    		    VerticalBar: '\u2223',
    		    VerticalTilde: '\u2240',
    		    Vvdash: '\u22AA',
    		    Wedge: '\u22C0',
    		    Xi: '\u039E',
    		    amp: '\u0026',
    		    acute: '\u00B4',
    		    aleph: '\u2135',
    		    alpha: '\u03B1',
    		    amalg: '\u2A3F',
    		    and: '\u2227',
    		    ang: '\u2220',
    		    angmsd: '\u2221',
    		    angsph: '\u2222',
    		    ape: '\u224A',
    		    backprime: '\u2035',
    		    backsim: '\u223D',
    		    backsimeq: '\u22CD',
    		    beta: '\u03B2',
    		    beth: '\u2136',
    		    between: '\u226C',
    		    bigcirc: '\u25EF',
    		    bigodot: '\u2A00',
    		    bigoplus: '\u2A01',
    		    bigotimes: '\u2A02',
    		    bigsqcup: '\u2A06',
    		    bigstar: '\u2605',
    		    bigtriangledown: '\u25BD',
    		    bigtriangleup: '\u25B3',
    		    biguplus: '\u2A04',
    		    blacklozenge: '\u29EB',
    		    blacktriangle: '\u25B4',
    		    blacktriangledown: '\u25BE',
    		    blacktriangleleft: '\u25C2',
    		    bowtie: '\u22C8',
    		    boxdl: '\u2510',
    		    boxdr: '\u250C',
    		    boxminus: '\u229F',
    		    boxplus: '\u229E',
    		    boxtimes: '\u22A0',
    		    boxul: '\u2518',
    		    boxur: '\u2514',
    		    bsol: '\u005C',
    		    bull: '\u2022',
    		    cap: '\u2229',
    		    check: '\u2713',
    		    chi: '\u03C7',
    		    circ: '\u02C6',
    		    circeq: '\u2257',
    		    circlearrowleft: '\u21BA',
    		    circlearrowright: '\u21BB',
    		    circledR: '\u00AE',
    		    circledS: '\u24C8',
    		    circledast: '\u229B',
    		    circledcirc: '\u229A',
    		    circleddash: '\u229D',
    		    clubs: '\u2663',
    		    colon: '\u003A',
    		    comp: '\u2201',
    		    ctdot: '\u22EF',
    		    cuepr: '\u22DE',
    		    cuesc: '\u22DF',
    		    cularr: '\u21B6',
    		    cup: '\u222A',
    		    curarr: '\u21B7',
    		    curlyvee: '\u22CE',
    		    curlywedge: '\u22CF',
    		    dagger: '\u2020',
    		    daleth: '\u2138',
    		    ddarr: '\u21CA',
    		    deg: '\u00B0',
    		    delta: '\u03B4',
    		    digamma: '\u03DD',
    		    div: '\u00F7',
    		    divideontimes: '\u22C7',
    		    dot: '\u02D9',
    		    doteqdot: '\u2251',
    		    dotplus: '\u2214',
    		    dotsquare: '\u22A1',
    		    dtdot: '\u22F1',
    		    ecir: '\u2256',
    		    efDot: '\u2252',
    		    egs: '\u2A96',
    		    ell: '\u2113',
    		    els: '\u2A95',
    		    empty: '\u2205',
    		    epsi: '\u03B5',
    		    epsiv: '\u03F5',
    		    erDot: '\u2253',
    		    eta: '\u03B7',
    		    eth: '\u00F0',
    		    flat: '\u266D',
    		    fork: '\u22D4',
    		    frown: '\u2322',
    		    gEl: '\u2A8C',
    		    gamma: '\u03B3',
    		    gap: '\u2A86',
    		    gimel: '\u2137',
    		    gnE: '\u2269',
    		    gnap: '\u2A8A',
    		    gne: '\u2A88',
    		    gnsim: '\u22E7',
    		    gt: '\u003E',
    		    gtdot: '\u22D7',
    		    harrw: '\u21AD',
    		    hbar: '\u210F',
    		    hellip: '\u2026',
    		    hookleftarrow: '\u21A9',
    		    hookrightarrow: '\u21AA',
    		    imath: '\u0131',
    		    infin: '\u221E',
    		    intcal: '\u22BA',
    		    iota: '\u03B9',
    		    jmath: '\u0237',
    		    kappa: '\u03BA',
    		    kappav: '\u03F0',
    		    lEg: '\u2A8B',
    		    lambda: '\u03BB',
    		    lap: '\u2A85',
    		    larrlp: '\u21AB',
    		    larrtl: '\u21A2',
    		    lbrace: '\u007B',
    		    lbrack: '\u005B',
    		    le: '\u2264',
    		    leftleftarrows: '\u21C7',
    		    leftthreetimes: '\u22CB',
    		    lessdot: '\u22D6',
    		    lmoust: '\u23B0',
    		    lnE: '\u2268',
    		    lnap: '\u2A89',
    		    lne: '\u2A87',
    		    lnsim: '\u22E6',
    		    longmapsto: '\u27FC',
    		    looparrowright: '\u21AC',
    		    lowast: '\u2217',
    		    loz: '\u25CA',
    		    lt: '\u003C',
    		    ltimes: '\u22C9',
    		    ltri: '\u25C3',
    		    macr: '\u00AF',
    		    malt: '\u2720',
    		    mho: '\u2127',
    		    mu: '\u03BC',
    		    multimap: '\u22B8',
    		    nLeftarrow: '\u21CD',
    		    nLeftrightarrow: '\u21CE',
    		    nRightarrow: '\u21CF',
    		    nVDash: '\u22AF',
    		    nVdash: '\u22AE',
    		    natur: '\u266E',
    		    nearr: '\u2197',
    		    nharr: '\u21AE',
    		    nlarr: '\u219A',
    		    not: '\u00AC',
    		    nrarr: '\u219B',
    		    nu: '\u03BD',
    		    nvDash: '\u22AD',
    		    nvdash: '\u22AC',
    		    nwarr: '\u2196',
    		    omega: '\u03C9',
    		    omicron: '\u03BF',
    		    or: '\u2228',
    		    osol: '\u2298',
    		    period: '\u002E',
    		    phi: '\u03C6',
    		    phiv: '\u03D5',
    		    pi: '\u03C0',
    		    piv: '\u03D6',
    		    prap: '\u2AB7',
    		    precnapprox: '\u2AB9',
    		    precneqq: '\u2AB5',
    		    precnsim: '\u22E8',
    		    prime: '\u2032',
    		    psi: '\u03C8',
    		    quot: '\u0022',
    		    rarrtl: '\u21A3',
    		    rbrace: '\u007D',
    		    rbrack: '\u005D',
    		    rho: '\u03C1',
    		    rhov: '\u03F1',
    		    rightrightarrows: '\u21C9',
    		    rightthreetimes: '\u22CC',
    		    ring: '\u02DA',
    		    rmoust: '\u23B1',
    		    rtimes: '\u22CA',
    		    rtri: '\u25B9',
    		    scap: '\u2AB8',
    		    scnE: '\u2AB6',
    		    scnap: '\u2ABA',
    		    scnsim: '\u22E9',
    		    sdot: '\u22C5',
    		    searr: '\u2198',
    		    sect: '\u00A7',
    		    sharp: '\u266F',
    		    sigma: '\u03C3',
    		    sigmav: '\u03C2',
    		    simne: '\u2246',
    		    smile: '\u2323',
    		    spades: '\u2660',
    		    sub: '\u2282',
    		    subE: '\u2AC5',
    		    subnE: '\u2ACB',
    		    subne: '\u228A',
    		    supE: '\u2AC6',
    		    supnE: '\u2ACC',
    		    supne: '\u228B',
    		    swarr: '\u2199',
    		    tau: '\u03C4',
    		    theta: '\u03B8',
    		    thetav: '\u03D1',
    		    tilde: '\u02DC',
    		    times: '\u00D7',
    		    triangle: '\u25B5',
    		    triangleq: '\u225C',
    		    upsi: '\u03C5',
    		    upuparrows: '\u21C8',
    		    veebar: '\u22BB',
    		    vellip: '\u22EE',
    		    weierp: '\u2118',
    		    xi: '\u03BE',
    		    yen: '\u00A5',
    		    zeta: '\u03B6',
    		    zigrarr: '\u21DD',
    		    nbsp: '\u00A0',
    		    rsquo: '\u2019',
    		    lsquo: '\u2018'
    		};
    		var loaded = {};
    		function add(additions, file) {
    		    Object.assign(exports.entities, additions);
    		    loaded[file] = true;
    		}
    		exports.add = add;
    		function remove(entity) {
    		    delete exports.entities[entity];
    		}
    		exports.remove = remove;
    		function translate(text) {
    		    return text.replace(/&([a-z][a-z0-9]*|#(?:[0-9]+|x[0-9a-f]+));/ig, replace);
    		}
    		exports.translate = translate;
    		function replace(match, entity) {
    		    if (entity.charAt(0) === '#') {
    		        return numeric(entity.slice(1));
    		    }
    		    if (exports.entities[entity]) {
    		        return exports.entities[entity];
    		    }
    		    if (exports.options['loadMissingEntities']) {
    		        var file = (entity.match(/^[a-zA-Z](fr|scr|opf)$/) ? RegExp.$1 : entity.charAt(0).toLowerCase());
    		        if (!loaded[file]) {
    		            loaded[file] = true;
    		            (0, Retries_js_1.retryAfter)((0, AsyncLoad_js_1.asyncLoad)('./util/entities/' + file + '.js'));
    		        }
    		    }
    		    return match;
    		}
    		function numeric(entity) {
    		    var n = (entity.charAt(0) === 'x' ?
    		        parseInt(entity.slice(1), 16) :
    		        parseInt(entity));
    		    return String.fromCodePoint(n);
    		}
    		exports.numeric = numeric;
    		
    	} (Entities));
    	return Entities;
    }

    var hasRequiredParseUtil;

    function requireParseUtil () {
    	if (hasRequiredParseUtil) return ParseUtil;
    	hasRequiredParseUtil = 1;
    	var __read = (ParseUtil.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __values = (ParseUtil.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __importDefault = (ParseUtil.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(ParseUtil, "__esModule", { value: true });
    	var MmlNode_js_1 = requireMmlNode();
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var Entities_js_1 = requireEntities();
    	var ParseUtil$1;
    	(function (ParseUtil) {
    	    var emPerInch = 7.2;
    	    var pxPerInch = 72;
    	    var UNIT_CASES = {
    	        'em': function (m) { return m; },
    	        'ex': function (m) { return m * .43; },
    	        'pt': function (m) { return m / 10; },
    	        'pc': function (m) { return m * 1.2; },
    	        'px': function (m) { return m * emPerInch / pxPerInch; },
    	        'in': function (m) { return m * emPerInch; },
    	        'cm': function (m) { return m * emPerInch / 2.54; },
    	        'mm': function (m) { return m * emPerInch / 25.4; },
    	        'mu': function (m) { return m / 18; },
    	    };
    	    var num = '([-+]?([.,]\\d+|\\d+([.,]\\d*)?))';
    	    var unit = '(pt|em|ex|mu|px|mm|cm|in|pc)';
    	    var dimenEnd = RegExp('^\\s*' + num + '\\s*' + unit + '\\s*$');
    	    var dimenRest = RegExp('^\\s*' + num + '\\s*' + unit + ' ?');
    	    function matchDimen(dim, rest) {
    	        if (rest === undefined) { rest = false; }
    	        var match = dim.match(rest ? dimenRest : dimenEnd);
    	        return match ?
    	            muReplace([match[1].replace(/,/, '.'), match[4], match[0].length]) :
    	            [null, null, 0];
    	    }
    	    ParseUtil.matchDimen = matchDimen;
    	    function muReplace(_a) {
    	        var _b = __read(_a, 3), value = _b[0], unit = _b[1], length = _b[2];
    	        if (unit !== 'mu') {
    	            return [value, unit, length];
    	        }
    	        var em = Em(UNIT_CASES[unit](parseFloat(value || '1')));
    	        return [em.slice(0, -2), 'em', length];
    	    }
    	    function dimen2em(dim) {
    	        var _a = __read(matchDimen(dim), 2), value = _a[0], unit = _a[1];
    	        var m = parseFloat(value || '1');
    	        var func = UNIT_CASES[unit];
    	        return func ? func(m) : 0;
    	    }
    	    ParseUtil.dimen2em = dimen2em;
    	    function Em(m) {
    	        if (Math.abs(m) < .0006) {
    	            return '0em';
    	        }
    	        return m.toFixed(3).replace(/\.?0+$/, '') + 'em';
    	    }
    	    ParseUtil.Em = Em;
    	    function cols() {
    	        var W = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            W[_i] = arguments[_i];
    	        }
    	        return W.map(function (n) { return Em(n); }).join(' ');
    	    }
    	    ParseUtil.cols = cols;
    	    function fenced(configuration, open, mml, close, big, color) {
    	        if (big === undefined) { big = ''; }
    	        if (color === undefined) { color = ''; }
    	        var nf = configuration.nodeFactory;
    	        var mrow = nf.create('node', 'mrow', [], { open: open, close: close, texClass: MmlNode_js_1.TEXCLASS.INNER });
    	        var mo;
    	        if (big) {
    	            mo = new TexParser_js_1.default('\\' + big + 'l' + open, configuration.parser.stack.env, configuration).mml();
    	        }
    	        else {
    	            var openNode = nf.create('text', open);
    	            mo = nf.create('node', 'mo', [], { fence: true, stretchy: true, symmetric: true, texClass: MmlNode_js_1.TEXCLASS.OPEN }, openNode);
    	        }
    	        NodeUtil_js_1.default.appendChildren(mrow, [mo, mml]);
    	        if (big) {
    	            mo = new TexParser_js_1.default('\\' + big + 'r' + close, configuration.parser.stack.env, configuration).mml();
    	        }
    	        else {
    	            var closeNode = nf.create('text', close);
    	            mo = nf.create('node', 'mo', [], { fence: true, stretchy: true, symmetric: true, texClass: MmlNode_js_1.TEXCLASS.CLOSE }, closeNode);
    	        }
    	        color && mo.attributes.set('mathcolor', color);
    	        NodeUtil_js_1.default.appendChildren(mrow, [mo]);
    	        return mrow;
    	    }
    	    ParseUtil.fenced = fenced;
    	    function fixedFence(configuration, open, mml, close) {
    	        var mrow = configuration.nodeFactory.create('node', 'mrow', [], { open: open, close: close, texClass: MmlNode_js_1.TEXCLASS.ORD });
    	        if (open) {
    	            NodeUtil_js_1.default.appendChildren(mrow, [mathPalette(configuration, open, 'l')]);
    	        }
    	        if (NodeUtil_js_1.default.isType(mml, 'mrow')) {
    	            NodeUtil_js_1.default.appendChildren(mrow, NodeUtil_js_1.default.getChildren(mml));
    	        }
    	        else {
    	            NodeUtil_js_1.default.appendChildren(mrow, [mml]);
    	        }
    	        if (close) {
    	            NodeUtil_js_1.default.appendChildren(mrow, [mathPalette(configuration, close, 'r')]);
    	        }
    	        return mrow;
    	    }
    	    ParseUtil.fixedFence = fixedFence;
    	    function mathPalette(configuration, fence, side) {
    	        if (fence === '{' || fence === '}') {
    	            fence = '\\' + fence;
    	        }
    	        var D = '{\\bigg' + side + ' ' + fence + '}';
    	        var T = '{\\big' + side + ' ' + fence + '}';
    	        return new TexParser_js_1.default('\\mathchoice' + D + T + T + T, {}, configuration).mml();
    	    }
    	    ParseUtil.mathPalette = mathPalette;
    	    function fixInitialMO(configuration, nodes) {
    	        for (var i = 0, m = nodes.length; i < m; i++) {
    	            var child = nodes[i];
    	            if (child && (!NodeUtil_js_1.default.isType(child, 'mspace') &&
    	                (!NodeUtil_js_1.default.isType(child, 'TeXAtom') ||
    	                    (NodeUtil_js_1.default.getChildren(child)[0] &&
    	                        NodeUtil_js_1.default.getChildren(NodeUtil_js_1.default.getChildren(child)[0]).length)))) {
    	                if (NodeUtil_js_1.default.isEmbellished(child) ||
    	                    (NodeUtil_js_1.default.isType(child, 'TeXAtom') && NodeUtil_js_1.default.getTexClass(child) === MmlNode_js_1.TEXCLASS.REL)) {
    	                    var mi = configuration.nodeFactory.create('node', 'mi');
    	                    nodes.unshift(mi);
    	                }
    	                break;
    	            }
    	        }
    	    }
    	    ParseUtil.fixInitialMO = fixInitialMO;
    	    function internalMath(parser, text, level, font) {
    	        if (parser.configuration.options.internalMath) {
    	            return parser.configuration.options.internalMath(parser, text, level, font);
    	        }
    	        var mathvariant = font || parser.stack.env.font;
    	        var def = (mathvariant ? { mathvariant: mathvariant } : {});
    	        var mml = [], i = 0, k = 0, c, node, match = '', braces = 0;
    	        if (text.match(/\\?[${}\\]|\\\(|\\(eq)?ref\s*\{/)) {
    	            while (i < text.length) {
    	                c = text.charAt(i++);
    	                if (c === '$') {
    	                    if (match === '$' && braces === 0) {
    	                        node = parser.create('node', 'TeXAtom', [(new TexParser_js_1.default(text.slice(k, i - 1), {}, parser.configuration)).mml()]);
    	                        mml.push(node);
    	                        match = '';
    	                        k = i;
    	                    }
    	                    else if (match === '') {
    	                        if (k < i - 1) {
    	                            mml.push(internalText(parser, text.slice(k, i - 1), def));
    	                        }
    	                        match = '$';
    	                        k = i;
    	                    }
    	                }
    	                else if (c === '{' && match !== '') {
    	                    braces++;
    	                }
    	                else if (c === '}') {
    	                    if (match === '}' && braces === 0) {
    	                        var atom = (new TexParser_js_1.default(text.slice(k, i), {}, parser.configuration)).mml();
    	                        node = parser.create('node', 'TeXAtom', [atom], def);
    	                        mml.push(node);
    	                        match = '';
    	                        k = i;
    	                    }
    	                    else if (match !== '') {
    	                        if (braces) {
    	                            braces--;
    	                        }
    	                    }
    	                }
    	                else if (c === '\\') {
    	                    if (match === '' && text.substr(i).match(/^(eq)?ref\s*\{/)) {
    	                        var len = RegExp['$&'].length;
    	                        if (k < i - 1) {
    	                            mml.push(internalText(parser, text.slice(k, i - 1), def));
    	                        }
    	                        match = '}';
    	                        k = i - 1;
    	                        i += len;
    	                    }
    	                    else {
    	                        c = text.charAt(i++);
    	                        if (c === '(' && match === '') {
    	                            if (k < i - 2) {
    	                                mml.push(internalText(parser, text.slice(k, i - 2), def));
    	                            }
    	                            match = ')';
    	                            k = i;
    	                        }
    	                        else if (c === ')' && match === ')' && braces === 0) {
    	                            node = parser.create('node', 'TeXAtom', [(new TexParser_js_1.default(text.slice(k, i - 2), {}, parser.configuration)).mml()]);
    	                            mml.push(node);
    	                            match = '';
    	                            k = i;
    	                        }
    	                        else if (c.match(/[${}\\]/) && match === '') {
    	                            i--;
    	                            text = text.substr(0, i - 1) + text.substr(i);
    	                        }
    	                    }
    	                }
    	            }
    	            if (match !== '') {
    	                throw new TexError_js_1.default('MathNotTerminated', 'Math not terminated in text box');
    	            }
    	        }
    	        if (k < text.length) {
    	            mml.push(internalText(parser, text.slice(k), def));
    	        }
    	        if (level != null) {
    	            mml = [parser.create('node', 'mstyle', mml, { displaystyle: false, scriptlevel: level })];
    	        }
    	        else if (mml.length > 1) {
    	            mml = [parser.create('node', 'mrow', mml)];
    	        }
    	        return mml;
    	    }
    	    ParseUtil.internalMath = internalMath;
    	    function internalText(parser, text, def) {
    	        text = text.replace(/^\s+/, Entities_js_1.entities.nbsp).replace(/\s+$/, Entities_js_1.entities.nbsp);
    	        var textNode = parser.create('text', text);
    	        return parser.create('node', 'mtext', [], def, textNode);
    	    }
    	    ParseUtil.internalText = internalText;
    	    function underOver(parser, base, script, pos, stack) {
    	        ParseUtil.checkMovableLimits(base);
    	        if (NodeUtil_js_1.default.isType(base, 'munderover') && NodeUtil_js_1.default.isEmbellished(base)) {
    	            NodeUtil_js_1.default.setProperties(NodeUtil_js_1.default.getCoreMO(base), { lspace: 0, rspace: 0 });
    	            var mo = parser.create('node', 'mo', [], { rspace: 0 });
    	            base = parser.create('node', 'mrow', [mo, base]);
    	        }
    	        var mml = parser.create('node', 'munderover', [base]);
    	        NodeUtil_js_1.default.setChild(mml, pos === 'over' ? mml.over : mml.under, script);
    	        var node = mml;
    	        if (stack) {
    	            node = parser.create('node', 'TeXAtom', [mml], { texClass: MmlNode_js_1.TEXCLASS.OP, movesupsub: true });
    	        }
    	        NodeUtil_js_1.default.setProperty(node, 'subsupOK', true);
    	        return node;
    	    }
    	    ParseUtil.underOver = underOver;
    	    function checkMovableLimits(base) {
    	        var symbol = (NodeUtil_js_1.default.isType(base, 'mo') ? NodeUtil_js_1.default.getForm(base) : null);
    	        if (NodeUtil_js_1.default.getProperty(base, 'movablelimits') || (symbol && symbol[3] && symbol[3].movablelimits)) {
    	            NodeUtil_js_1.default.setProperties(base, { movablelimits: false });
    	        }
    	    }
    	    ParseUtil.checkMovableLimits = checkMovableLimits;
    	    function trimSpaces(text) {
    	        if (typeof (text) !== 'string') {
    	            return text;
    	        }
    	        var TEXT = text.trim();
    	        if (TEXT.match(/\\$/) && text.match(/ $/)) {
    	            TEXT += ' ';
    	        }
    	        return TEXT;
    	    }
    	    ParseUtil.trimSpaces = trimSpaces;
    	    function setArrayAlign(array, align) {
    	        align = ParseUtil.trimSpaces(align || '');
    	        if (align === 't') {
    	            array.arraydef.align = 'baseline 1';
    	        }
    	        else if (align === 'b') {
    	            array.arraydef.align = 'baseline -1';
    	        }
    	        else if (align === 'c') {
    	            array.arraydef.align = 'axis';
    	        }
    	        else if (align) {
    	            array.arraydef.align = align;
    	        }
    	        return array;
    	    }
    	    ParseUtil.setArrayAlign = setArrayAlign;
    	    function substituteArgs(parser, args, str) {
    	        var text = '';
    	        var newstring = '';
    	        var i = 0;
    	        while (i < str.length) {
    	            var c = str.charAt(i++);
    	            if (c === '\\') {
    	                text += c + str.charAt(i++);
    	            }
    	            else if (c === '#') {
    	                c = str.charAt(i++);
    	                if (c === '#') {
    	                    text += c;
    	                }
    	                else {
    	                    if (!c.match(/[1-9]/) || parseInt(c, 10) > args.length) {
    	                        throw new TexError_js_1.default('IllegalMacroParam', 'Illegal macro parameter reference');
    	                    }
    	                    newstring = addArgs(parser, addArgs(parser, newstring, text), args[parseInt(c, 10) - 1]);
    	                    text = '';
    	                }
    	            }
    	            else {
    	                text += c;
    	            }
    	        }
    	        return addArgs(parser, newstring, text);
    	    }
    	    ParseUtil.substituteArgs = substituteArgs;
    	    function addArgs(parser, s1, s2) {
    	        if (s2.match(/^[a-z]/i) && s1.match(/(^|[^\\])(\\\\)*\\[a-z]+$/i)) {
    	            s1 += ' ';
    	        }
    	        if (s1.length + s2.length > parser.configuration.options['maxBuffer']) {
    	            throw new TexError_js_1.default('MaxBufferSize', 'MathJax internal buffer size exceeded; is there a' +
    	                ' recursive macro call?');
    	        }
    	        return s1 + s2;
    	    }
    	    ParseUtil.addArgs = addArgs;
    	    function checkMaxMacros(parser, isMacro) {
    	        if (isMacro === undefined) { isMacro = true; }
    	        if (++parser.macroCount <= parser.configuration.options['maxMacros']) {
    	            return;
    	        }
    	        if (isMacro) {
    	            throw new TexError_js_1.default('MaxMacroSub1', 'MathJax maximum macro substitution count exceeded; ' +
    	                'is here a recursive macro call?');
    	        }
    	        else {
    	            throw new TexError_js_1.default('MaxMacroSub2', 'MathJax maximum substitution count exceeded; ' +
    	                'is there a recursive latex environment?');
    	        }
    	    }
    	    ParseUtil.checkMaxMacros = checkMaxMacros;
    	    function checkEqnEnv(parser) {
    	        if (parser.stack.global.eqnenv) {
    	            throw new TexError_js_1.default('ErroneousNestingEq', 'Erroneous nesting of equation structures');
    	        }
    	        parser.stack.global.eqnenv = true;
    	    }
    	    ParseUtil.checkEqnEnv = checkEqnEnv;
    	    function copyNode(node, parser) {
    	        var tree = node.copy();
    	        var options = parser.configuration;
    	        tree.walkTree(function (n) {
    	            var e_1, _a;
    	            options.addNode(n.kind, n);
    	            var lists = (n.getProperty('in-lists') || '').split(/,/);
    	            try {
    	                for (var lists_1 = __values(lists), lists_1_1 = lists_1.next(); !lists_1_1.done; lists_1_1 = lists_1.next()) {
    	                    var list = lists_1_1.value;
    	                    list && options.addNode(list, n);
    	                }
    	            }
    	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	            finally {
    	                try {
    	                    if (lists_1_1 && !lists_1_1.done && (_a = lists_1.return)) _a.call(lists_1);
    	                }
    	                finally { if (e_1) throw e_1.error; }
    	            }
    	        });
    	        return tree;
    	    }
    	    ParseUtil.copyNode = copyNode;
    	    function MmlFilterAttribute(_parser, _name, value) {
    	        return value;
    	    }
    	    ParseUtil.MmlFilterAttribute = MmlFilterAttribute;
    	    function getFontDef(parser) {
    	        var font = parser.stack.env['font'];
    	        return (font ? { mathvariant: font } : {});
    	    }
    	    ParseUtil.getFontDef = getFontDef;
    	    function keyvalOptions(attrib, allowed, error) {
    	        var e_2, _a;
    	        if (allowed === undefined) { allowed = null; }
    	        if (error === undefined) { error = false; }
    	        var def = readKeyval(attrib);
    	        if (allowed) {
    	            try {
    	                for (var _b = __values(Object.keys(def)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var key = _c.value;
    	                    if (!allowed.hasOwnProperty(key)) {
    	                        if (error) {
    	                            throw new TexError_js_1.default('InvalidOption', 'Invalid option: %1', key);
    	                        }
    	                        delete def[key];
    	                    }
    	                }
    	            }
    	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_2) throw e_2.error; }
    	            }
    	        }
    	        return def;
    	    }
    	    ParseUtil.keyvalOptions = keyvalOptions;
    	    function readKeyval(text) {
    	        var _a, _b;
    	        var options = {};
    	        var rest = text;
    	        var end, key, val;
    	        while (rest) {
    	            _a = __read(readValue(rest, ['=', ',']), 3), key = _a[0], end = _a[1], rest = _a[2];
    	            if (end === '=') {
    	                _b = __read(readValue(rest, [',']), 3), val = _b[0], end = _b[1], rest = _b[2];
    	                val = (val === 'false' || val === 'true') ?
    	                    JSON.parse(val) : val;
    	                options[key] = val;
    	            }
    	            else if (key) {
    	                options[key] = true;
    	            }
    	        }
    	        return options;
    	    }
    	    function removeBraces(text, count) {
    	        while (count > 0) {
    	            text = text.trim().slice(1, -1);
    	            count--;
    	        }
    	        return text.trim();
    	    }
    	    function readValue(text, end) {
    	        var length = text.length;
    	        var braces = 0;
    	        var value = '';
    	        var index = 0;
    	        var start = 0;
    	        var startCount = true;
    	        var stopCount = false;
    	        while (index < length) {
    	            var c = text[index++];
    	            switch (c) {
    	                case ' ':
    	                    break;
    	                case '{':
    	                    if (startCount) {
    	                        start++;
    	                    }
    	                    else {
    	                        stopCount = false;
    	                        if (start > braces) {
    	                            start = braces;
    	                        }
    	                    }
    	                    braces++;
    	                    break;
    	                case '}':
    	                    if (braces) {
    	                        braces--;
    	                    }
    	                    if (startCount || stopCount) {
    	                        start--;
    	                        stopCount = true;
    	                    }
    	                    startCount = false;
    	                    break;
    	                default:
    	                    if (!braces && end.indexOf(c) !== -1) {
    	                        return [stopCount ? 'true' :
    	                                removeBraces(value, start), c, text.slice(index)];
    	                    }
    	                    startCount = false;
    	                    stopCount = false;
    	            }
    	            value += c;
    	        }
    	        if (braces) {
    	            throw new TexError_js_1.default('ExtraOpenMissingClose', 'Extra open brace or missing close brace');
    	        }
    	        return [stopCount ? 'true' : removeBraces(value, start), '', text.slice(index)];
    	    }
    	})(ParseUtil$1 || (ParseUtil$1 = {}));
    	ParseUtil.default = ParseUtil$1;
    	
    	return ParseUtil;
    }

    var Stack = {};

    var hasRequiredStack;

    function requireStack () {
    	if (hasRequiredStack) return Stack;
    	hasRequiredStack = 1;
    	var __values = (Stack.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (Stack.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (Stack.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __importDefault = (Stack.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(Stack, "__esModule", { value: true });
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var Stack$1 = (function () {
    	    function Stack(_factory, _env, inner) {
    	        this._factory = _factory;
    	        this._env = _env;
    	        this.global = {};
    	        this.stack = [];
    	        this.global = { isInner: inner };
    	        this.stack = [this._factory.create('start', this.global)];
    	        if (_env) {
    	            this.stack[0].env = _env;
    	        }
    	        this.env = this.stack[0].env;
    	    }
    	    Object.defineProperty(Stack.prototype, "env", {
    	        get: function () {
    	            return this._env;
    	        },
    	        set: function (env) {
    	            this._env = env;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Stack.prototype.Push = function () {
    	        var e_1, _a;
    	        var args = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            args[_i] = arguments[_i];
    	        }
    	        try {
    	            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
    	                var node = args_1_1.value;
    	                if (!node) {
    	                    continue;
    	                }
    	                var item = NodeUtil_js_1.default.isNode(node) ?
    	                    this._factory.create('mml', node) : node;
    	                item.global = this.global;
    	                var _b = __read(this.stack.length ? this.Top().checkItem(item) : [null, true], 2), top_1 = _b[0], success = _b[1];
    	                if (!success) {
    	                    continue;
    	                }
    	                if (top_1) {
    	                    this.Pop();
    	                    this.Push.apply(this, __spreadArray([], __read(top_1), false));
    	                    continue;
    	                }
    	                this.stack.push(item);
    	                if (item.env) {
    	                    if (item.copyEnv) {
    	                        Object.assign(item.env, this.env);
    	                    }
    	                    this.env = item.env;
    	                }
    	                else {
    	                    item.env = this.env;
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	    };
    	    Stack.prototype.Pop = function () {
    	        var item = this.stack.pop();
    	        if (!item.isOpen) {
    	            delete item.env;
    	        }
    	        this.env = (this.stack.length ? this.Top().env : {});
    	        return item;
    	    };
    	    Stack.prototype.Top = function (n) {
    	        if (n === undefined) { n = 1; }
    	        return this.stack.length < n ? null : this.stack[this.stack.length - n];
    	    };
    	    Stack.prototype.Prev = function (noPop) {
    	        var top = this.Top();
    	        return noPop ? top.First : top.Pop();
    	    };
    	    Stack.prototype.toString = function () {
    	        return 'stack[\n  ' + this.stack.join('\n  ') + '\n]';
    	    };
    	    return Stack;
    	}());
    	Stack.default = Stack$1;
    	
    	return Stack;
    }

    var hasRequiredTexParser;

    function requireTexParser () {
    	if (hasRequiredTexParser) return TexParser;
    	hasRequiredTexParser = 1;
    	var __values = (TexParser.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (TexParser.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (TexParser.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __importDefault = (TexParser.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(TexParser, "__esModule", { value: true });
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var Stack_js_1 = __importDefault(requireStack());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var MmlNode_js_1 = requireMmlNode();
    	var TexParser$1 = (function () {
    	    function TexParser(_string, env, configuration) {
    	        var e_1, _a;
    	        this._string = _string;
    	        this.configuration = configuration;
    	        this.macroCount = 0;
    	        this.i = 0;
    	        this.currentCS = '';
    	        var inner = env.hasOwnProperty('isInner');
    	        var isInner = env['isInner'];
    	        delete env['isInner'];
    	        var ENV;
    	        if (env) {
    	            ENV = {};
    	            try {
    	                for (var _b = __values(Object.keys(env)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var id = _c.value;
    	                    ENV[id] = env[id];
    	                }
    	            }
    	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_1) throw e_1.error; }
    	            }
    	        }
    	        this.configuration.pushParser(this);
    	        this.stack = new Stack_js_1.default(this.itemFactory, ENV, inner ? isInner : true);
    	        this.Parse();
    	        this.Push(this.itemFactory.create('stop'));
    	    }
    	    Object.defineProperty(TexParser.prototype, "options", {
    	        get: function () {
    	            return this.configuration.options;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(TexParser.prototype, "itemFactory", {
    	        get: function () {
    	            return this.configuration.itemFactory;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(TexParser.prototype, "tags", {
    	        get: function () {
    	            return this.configuration.tags;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(TexParser.prototype, "string", {
    	        get: function () {
    	            return this._string;
    	        },
    	        set: function (str) {
    	            this._string = str;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    TexParser.prototype.parse = function (kind, input) {
    	        return this.configuration.handlers.get(kind).parse(input);
    	    };
    	    TexParser.prototype.lookup = function (kind, symbol) {
    	        return this.configuration.handlers.get(kind).lookup(symbol);
    	    };
    	    TexParser.prototype.contains = function (kind, symbol) {
    	        return this.configuration.handlers.get(kind).contains(symbol);
    	    };
    	    TexParser.prototype.toString = function () {
    	        var e_2, _a;
    	        var str = '';
    	        try {
    	            for (var _b = __values(Array.from(this.configuration.handlers.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var config = _c.value;
    	                str += config + ': ' +
    	                    this.configuration.handlers.get(config) + '\n';
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	        return str;
    	    };
    	    TexParser.prototype.Parse = function () {
    	        var c;
    	        while (this.i < this.string.length) {
    	            c = this.getCodePoint();
    	            this.i += c.length;
    	            this.parse('character', [this, c]);
    	        }
    	    };
    	    TexParser.prototype.Push = function (arg) {
    	        if (arg instanceof MmlNode_js_1.AbstractMmlNode && arg.isInferred) {
    	            this.PushAll(arg.childNodes);
    	        }
    	        else {
    	            this.stack.Push(arg);
    	        }
    	    };
    	    TexParser.prototype.PushAll = function (args) {
    	        var e_3, _a;
    	        try {
    	            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
    	                var arg = args_1_1.value;
    	                this.stack.Push(arg);
    	            }
    	        }
    	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	        finally {
    	            try {
    	                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
    	            }
    	            finally { if (e_3) throw e_3.error; }
    	        }
    	    };
    	    TexParser.prototype.mml = function () {
    	        if (!this.stack.Top().isKind('mml')) {
    	            return null;
    	        }
    	        var node = this.stack.Top().First;
    	        this.configuration.popParser();
    	        return node;
    	    };
    	    TexParser.prototype.convertDelimiter = function (c) {
    	        var symbol = this.lookup('delimiter', c);
    	        return symbol ? symbol.char : null;
    	    };
    	    TexParser.prototype.getCodePoint = function () {
    	        var code = this.string.codePointAt(this.i);
    	        return code === undefined ? '' : String.fromCodePoint(code);
    	    };
    	    TexParser.prototype.nextIsSpace = function () {
    	        return !!this.string.charAt(this.i).match(/\s/);
    	    };
    	    TexParser.prototype.GetNext = function () {
    	        while (this.nextIsSpace()) {
    	            this.i++;
    	        }
    	        return this.getCodePoint();
    	    };
    	    TexParser.prototype.GetCS = function () {
    	        var CS = this.string.slice(this.i).match(/^(([a-z]+) ?|[\uD800-\uDBFF].|.)/i);
    	        if (CS) {
    	            this.i += CS[0].length;
    	            return CS[2] || CS[1];
    	        }
    	        else {
    	            this.i++;
    	            return ' ';
    	        }
    	    };
    	    TexParser.prototype.GetArgument = function (_name, noneOK) {
    	        switch (this.GetNext()) {
    	            case '':
    	                if (!noneOK) {
    	                    throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', this.currentCS);
    	                }
    	                return null;
    	            case '}':
    	                if (!noneOK) {
    	                    throw new TexError_js_1.default('ExtraCloseMissingOpen', 'Extra close brace or missing open brace');
    	                }
    	                return null;
    	            case '\\':
    	                this.i++;
    	                return '\\' + this.GetCS();
    	            case '{':
    	                var j = ++this.i, parens = 1;
    	                while (this.i < this.string.length) {
    	                    switch (this.string.charAt(this.i++)) {
    	                        case '\\':
    	                            this.i++;
    	                            break;
    	                        case '{':
    	                            parens++;
    	                            break;
    	                        case '}':
    	                            if (--parens === 0) {
    	                                return this.string.slice(j, this.i - 1);
    	                            }
    	                            break;
    	                    }
    	                }
    	                throw new TexError_js_1.default('MissingCloseBrace', 'Missing close brace');
    	        }
    	        var c = this.getCodePoint();
    	        this.i += c.length;
    	        return c;
    	    };
    	    TexParser.prototype.GetBrackets = function (_name, def) {
    	        if (this.GetNext() !== '[') {
    	            return def;
    	        }
    	        var j = ++this.i, parens = 0;
    	        while (this.i < this.string.length) {
    	            switch (this.string.charAt(this.i++)) {
    	                case '{':
    	                    parens++;
    	                    break;
    	                case '\\':
    	                    this.i++;
    	                    break;
    	                case '}':
    	                    if (parens-- <= 0) {
    	                        throw new TexError_js_1.default('ExtraCloseLooking', 'Extra close brace while looking for %1', '\']\'');
    	                    }
    	                    break;
    	                case ']':
    	                    if (parens === 0) {
    	                        return this.string.slice(j, this.i - 1);
    	                    }
    	                    break;
    	            }
    	        }
    	        throw new TexError_js_1.default('MissingCloseBracket', 'Could not find closing \']\' for argument to %1', this.currentCS);
    	    };
    	    TexParser.prototype.GetDelimiter = function (name, braceOK) {
    	        var c = this.GetNext();
    	        this.i += c.length;
    	        if (this.i <= this.string.length) {
    	            if (c === '\\') {
    	                c += this.GetCS();
    	            }
    	            else if (c === '{' && braceOK) {
    	                this.i--;
    	                c = this.GetArgument(name).trim();
    	            }
    	            if (this.contains('delimiter', c)) {
    	                return this.convertDelimiter(c);
    	            }
    	        }
    	        throw new TexError_js_1.default('MissingOrUnrecognizedDelim', 'Missing or unrecognized delimiter for %1', this.currentCS);
    	    };
    	    TexParser.prototype.GetDimen = function (name) {
    	        if (this.GetNext() === '{') {
    	            var dimen = this.GetArgument(name);
    	            var _a = __read(ParseUtil_js_1.default.matchDimen(dimen), 2), value = _a[0], unit = _a[1];
    	            if (value) {
    	                return value + unit;
    	            }
    	        }
    	        else {
    	            var dimen = this.string.slice(this.i);
    	            var _b = __read(ParseUtil_js_1.default.matchDimen(dimen, true), 3), value = _b[0], unit = _b[1], length_1 = _b[2];
    	            if (value) {
    	                this.i += length_1;
    	                return value + unit;
    	            }
    	        }
    	        throw new TexError_js_1.default('MissingDimOrUnits', 'Missing dimension or its units for %1', this.currentCS);
    	    };
    	    TexParser.prototype.GetUpTo = function (_name, token) {
    	        while (this.nextIsSpace()) {
    	            this.i++;
    	        }
    	        var j = this.i;
    	        var parens = 0;
    	        while (this.i < this.string.length) {
    	            var k = this.i;
    	            var c = this.GetNext();
    	            this.i += c.length;
    	            switch (c) {
    	                case '\\':
    	                    c += this.GetCS();
    	                    break;
    	                case '{':
    	                    parens++;
    	                    break;
    	                case '}':
    	                    if (parens === 0) {
    	                        throw new TexError_js_1.default('ExtraCloseLooking', 'Extra close brace while looking for %1', token);
    	                    }
    	                    parens--;
    	                    break;
    	            }
    	            if (parens === 0 && c === token) {
    	                return this.string.slice(j, k);
    	            }
    	        }
    	        throw new TexError_js_1.default('TokenNotFoundForCommand', 'Could not find %1 for %2', token, this.currentCS);
    	    };
    	    TexParser.prototype.ParseArg = function (name) {
    	        return new TexParser(this.GetArgument(name), this.stack.env, this.configuration).mml();
    	    };
    	    TexParser.prototype.ParseUpTo = function (name, token) {
    	        return new TexParser(this.GetUpTo(name, token), this.stack.env, this.configuration).mml();
    	    };
    	    TexParser.prototype.GetDelimiterArg = function (name) {
    	        var c = ParseUtil_js_1.default.trimSpaces(this.GetArgument(name));
    	        if (c === '') {
    	            return null;
    	        }
    	        if (this.contains('delimiter', c)) {
    	            return c;
    	        }
    	        throw new TexError_js_1.default('MissingOrUnrecognizedDelim', 'Missing or unrecognized delimiter for %1', this.currentCS);
    	    };
    	    TexParser.prototype.GetStar = function () {
    	        var star = (this.GetNext() === '*');
    	        if (star) {
    	            this.i++;
    	        }
    	        return star;
    	    };
    	    TexParser.prototype.create = function (kind) {
    	        var _a;
    	        var rest = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            rest[_i - 1] = arguments[_i];
    	        }
    	        return (_a = this.configuration.nodeFactory).create.apply(_a, __spreadArray([kind], __read(rest), false));
    	    };
    	    return TexParser;
    	}());
    	TexParser.default = TexParser$1;
    	
    	return TexParser;
    }

    var ParseOptions = {};

    var StackItemFactory = {};

    var StackItem = {};

    var hasRequiredStackItem;

    function requireStackItem () {
    	if (hasRequiredStackItem) return StackItem;
    	hasRequiredStackItem = 1;
    	var __extends = (StackItem.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __read = (StackItem.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (StackItem.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __values = (StackItem.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __importDefault = (StackItem.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(StackItem, "__esModule", { value: true });
    	StackItem.BaseItem = StackItem.MmlStack = undefined;
    	var TexError_js_1 = __importDefault(requireTexError());
    	var MmlStack = (function () {
    	    function MmlStack(_nodes) {
    	        this._nodes = _nodes;
    	    }
    	    Object.defineProperty(MmlStack.prototype, "nodes", {
    	        get: function () {
    	            return this._nodes;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlStack.prototype.Push = function () {
    	        var _a;
    	        var nodes = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            nodes[_i] = arguments[_i];
    	        }
    	        (_a = this._nodes).push.apply(_a, __spreadArray([], __read(nodes), false));
    	    };
    	    MmlStack.prototype.Pop = function () {
    	        return this._nodes.pop();
    	    };
    	    Object.defineProperty(MmlStack.prototype, "First", {
    	        get: function () {
    	            return this._nodes[this.Size() - 1];
    	        },
    	        set: function (node) {
    	            this._nodes[this.Size() - 1] = node;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlStack.prototype, "Last", {
    	        get: function () {
    	            return this._nodes[0];
    	        },
    	        set: function (node) {
    	            this._nodes[0] = node;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlStack.prototype.Peek = function (n) {
    	        if (n == null) {
    	            n = 1;
    	        }
    	        return this._nodes.slice(this.Size() - n);
    	    };
    	    MmlStack.prototype.Size = function () {
    	        return this._nodes.length;
    	    };
    	    MmlStack.prototype.Clear = function () {
    	        this._nodes = [];
    	    };
    	    MmlStack.prototype.toMml = function (inferred, forceRow) {
    	        if (inferred === undefined) { inferred = true; }
    	        if (this._nodes.length === 1 && !forceRow) {
    	            return this.First;
    	        }
    	        return this.create('node', inferred ? 'inferredMrow' : 'mrow', this._nodes, {});
    	    };
    	    MmlStack.prototype.create = function (kind) {
    	        var _a;
    	        var rest = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            rest[_i - 1] = arguments[_i];
    	        }
    	        return (_a = this.factory.configuration.nodeFactory).create.apply(_a, __spreadArray([kind], __read(rest), false));
    	    };
    	    return MmlStack;
    	}());
    	StackItem.MmlStack = MmlStack;
    	var BaseItem = (function (_super) {
    	    __extends(BaseItem, _super);
    	    function BaseItem(factory) {
    	        var nodes = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            nodes[_i - 1] = arguments[_i];
    	        }
    	        var _this = _super.call(this, nodes) || this;
    	        _this.factory = factory;
    	        _this.global = {};
    	        _this._properties = {};
    	        if (_this.isOpen) {
    	            _this._env = {};
    	        }
    	        return _this;
    	    }
    	    Object.defineProperty(BaseItem.prototype, "kind", {
    	        get: function () {
    	            return 'base';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(BaseItem.prototype, "env", {
    	        get: function () {
    	            return this._env;
    	        },
    	        set: function (value) {
    	            this._env = value;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(BaseItem.prototype, "copyEnv", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    BaseItem.prototype.getProperty = function (key) {
    	        return this._properties[key];
    	    };
    	    BaseItem.prototype.setProperty = function (key, value) {
    	        this._properties[key] = value;
    	        return this;
    	    };
    	    Object.defineProperty(BaseItem.prototype, "isOpen", {
    	        get: function () {
    	            return false;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(BaseItem.prototype, "isClose", {
    	        get: function () {
    	            return false;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(BaseItem.prototype, "isFinal", {
    	        get: function () {
    	            return false;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    BaseItem.prototype.isKind = function (kind) {
    	        return kind === this.kind;
    	    };
    	    BaseItem.prototype.checkItem = function (item) {
    	        if (item.isKind('over') && this.isOpen) {
    	            item.setProperty('num', this.toMml(false));
    	            this.Clear();
    	        }
    	        if (item.isKind('cell') && this.isOpen) {
    	            if (item.getProperty('linebreak')) {
    	                return BaseItem.fail;
    	            }
    	            throw new TexError_js_1.default('Misplaced', 'Misplaced %1', item.getName());
    	        }
    	        if (item.isClose && this.getErrors(item.kind)) {
    	            var _a = __read(this.getErrors(item.kind), 2), id = _a[0], message = _a[1];
    	            throw new TexError_js_1.default(id, message, item.getName());
    	        }
    	        if (!item.isFinal) {
    	            return BaseItem.success;
    	        }
    	        this.Push(item.First);
    	        return BaseItem.fail;
    	    };
    	    BaseItem.prototype.clearEnv = function () {
    	        var e_1, _a;
    	        try {
    	            for (var _b = __values(Object.keys(this.env)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var id = _c.value;
    	                delete this.env[id];
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	    };
    	    BaseItem.prototype.setProperties = function (def) {
    	        Object.assign(this._properties, def);
    	        return this;
    	    };
    	    BaseItem.prototype.getName = function () {
    	        return this.getProperty('name');
    	    };
    	    BaseItem.prototype.toString = function () {
    	        return this.kind + '[' + this.nodes.join('; ') + ']';
    	    };
    	    BaseItem.prototype.getErrors = function (kind) {
    	        var CLASS = this.constructor;
    	        return (CLASS.errors || {})[kind] || BaseItem.errors[kind];
    	    };
    	    BaseItem.fail = [null, false];
    	    BaseItem.success = [null, true];
    	    BaseItem.errors = {
    	        end: ['MissingBeginExtraEnd', 'Missing \\begin{%1} or extra \\end{%1}'],
    	        close: ['ExtraCloseMissingOpen', 'Extra close brace or missing open brace'],
    	        right: ['MissingLeftExtraRight', 'Missing \\left or extra \\right'],
    	        middle: ['ExtraMiddle', 'Extra \\middle']
    	    };
    	    return BaseItem;
    	}(MmlStack));
    	StackItem.BaseItem = BaseItem;
    	
    	return StackItem;
    }

    var Factory = {};

    var hasRequiredFactory;

    function requireFactory () {
    	if (hasRequiredFactory) return Factory;
    	hasRequiredFactory = 1;
    	var __values = (Factory.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (Factory.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (Factory.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(Factory, "__esModule", { value: true });
    	Factory.AbstractFactory = undefined;
    	var AbstractFactory = (function () {
    	    function AbstractFactory(nodes) {
    	        var e_1, _a;
    	        if (nodes === undefined) { nodes = null; }
    	        this.defaultKind = 'unknown';
    	        this.nodeMap = new Map();
    	        this.node = {};
    	        if (nodes === null) {
    	            nodes = this.constructor.defaultNodes;
    	        }
    	        try {
    	            for (var _b = __values(Object.keys(nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var kind = _c.value;
    	                this.setNodeClass(kind, nodes[kind]);
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	    }
    	    AbstractFactory.prototype.create = function (kind) {
    	        var args = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            args[_i - 1] = arguments[_i];
    	        }
    	        return (this.node[kind] || this.node[this.defaultKind]).apply(undefined, __spreadArray([], __read(args), false));
    	    };
    	    AbstractFactory.prototype.setNodeClass = function (kind, nodeClass) {
    	        this.nodeMap.set(kind, nodeClass);
    	        var THIS = this;
    	        var KIND = this.nodeMap.get(kind);
    	        this.node[kind] = function () {
    	            var args = [];
    	            for (var _i = 0; _i < arguments.length; _i++) {
    	                args[_i] = arguments[_i];
    	            }
    	            return new (KIND.bind.apply(KIND, __spreadArray([undefined, THIS], __read(args), false)))();
    	        };
    	    };
    	    AbstractFactory.prototype.getNodeClass = function (kind) {
    	        return this.nodeMap.get(kind);
    	    };
    	    AbstractFactory.prototype.deleteNodeClass = function (kind) {
    	        this.nodeMap.delete(kind);
    	        delete this.node[kind];
    	    };
    	    AbstractFactory.prototype.nodeIsKind = function (node, kind) {
    	        return (node instanceof this.getNodeClass(kind));
    	    };
    	    AbstractFactory.prototype.getKinds = function () {
    	        return Array.from(this.nodeMap.keys());
    	    };
    	    AbstractFactory.defaultNodes = {};
    	    return AbstractFactory;
    	}());
    	Factory.AbstractFactory = AbstractFactory;
    	
    	return Factory;
    }

    var hasRequiredStackItemFactory;

    function requireStackItemFactory () {
    	if (hasRequiredStackItemFactory) return StackItemFactory;
    	hasRequiredStackItemFactory = 1;
    	var __extends = (StackItemFactory.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var _a;
    	Object.defineProperty(StackItemFactory, "__esModule", { value: true });
    	var StackItem_js_1 = requireStackItem();
    	var Factory_js_1 = requireFactory();
    	var DummyItem = (function (_super) {
    	    __extends(DummyItem, _super);
    	    function DummyItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return DummyItem;
    	}(StackItem_js_1.BaseItem));
    	var StackItemFactory$1 = (function (_super) {
    	    __extends(StackItemFactory, _super);
    	    function StackItemFactory() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.defaultKind = 'dummy';
    	        _this.configuration = null;
    	        return _this;
    	    }
    	    StackItemFactory.DefaultStackItems = (_a = {},
    	        _a[DummyItem.prototype.kind] = DummyItem,
    	        _a);
    	    return StackItemFactory;
    	}(Factory_js_1.AbstractFactory));
    	StackItemFactory.default = StackItemFactory$1;
    	
    	return StackItemFactory;
    }

    var NodeFactory$1 = {};

    var hasRequiredNodeFactory$1;

    function requireNodeFactory$1 () {
    	if (hasRequiredNodeFactory$1) return NodeFactory$1;
    	hasRequiredNodeFactory$1 = 1;
    	var __read = (NodeFactory$1.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (NodeFactory$1.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __importDefault = (NodeFactory$1.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(NodeFactory$1, "__esModule", { value: true });
    	NodeFactory$1.NodeFactory = undefined;
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var NodeFactory = (function () {
    	    function NodeFactory() {
    	        this.mmlFactory = null;
    	        this.factory = { 'node': NodeFactory.createNode,
    	            'token': NodeFactory.createToken,
    	            'text': NodeFactory.createText,
    	            'error': NodeFactory.createError
    	        };
    	    }
    	    NodeFactory.createNode = function (factory, kind, children, def, text) {
    	        if (children === undefined) { children = []; }
    	        if (def === undefined) { def = {}; }
    	        var node = factory.mmlFactory.create(kind);
    	        node.setChildren(children);
    	        if (text) {
    	            node.appendChild(text);
    	        }
    	        NodeUtil_js_1.default.setProperties(node, def);
    	        return node;
    	    };
    	    NodeFactory.createToken = function (factory, kind, def, text) {
    	        if (def === undefined) { def = {}; }
    	        if (text === undefined) { text = ''; }
    	        var textNode = factory.create('text', text);
    	        return factory.create('node', kind, [], def, textNode);
    	    };
    	    NodeFactory.createText = function (factory, text) {
    	        if (text == null) {
    	            return null;
    	        }
    	        return factory.mmlFactory.create('text').setText(text);
    	    };
    	    NodeFactory.createError = function (factory, message) {
    	        var text = factory.create('text', message);
    	        var mtext = factory.create('node', 'mtext', [], {}, text);
    	        var error = factory.create('node', 'merror', [mtext], { 'data-mjx-error': message });
    	        return error;
    	    };
    	    NodeFactory.prototype.setMmlFactory = function (mmlFactory) {
    	        this.mmlFactory = mmlFactory;
    	    };
    	    NodeFactory.prototype.set = function (kind, func) {
    	        this.factory[kind] = func;
    	    };
    	    NodeFactory.prototype.setCreators = function (maps) {
    	        for (var kind in maps) {
    	            this.set(kind, maps[kind]);
    	        }
    	    };
    	    NodeFactory.prototype.create = function (kind) {
    	        var rest = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            rest[_i - 1] = arguments[_i];
    	        }
    	        var func = this.factory[kind] || this.factory['node'];
    	        var node = func.apply(undefined, __spreadArray([this, rest[0]], __read(rest.slice(1)), false));
    	        if (kind === 'node') {
    	            this.configuration.addNode(rest[0], node);
    	        }
    	        return node;
    	    };
    	    NodeFactory.prototype.get = function (kind) {
    	        return this.factory[kind];
    	    };
    	    return NodeFactory;
    	}());
    	NodeFactory$1.NodeFactory = NodeFactory;
    	
    	return NodeFactory$1;
    }

    var hasRequiredParseOptions;

    function requireParseOptions () {
    	if (hasRequiredParseOptions) return ParseOptions;
    	hasRequiredParseOptions = 1;
    	var __read = (ParseOptions.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (ParseOptions.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __values = (ParseOptions.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __importDefault = (ParseOptions.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(ParseOptions, "__esModule", { value: true });
    	var StackItemFactory_js_1 = __importDefault(requireStackItemFactory());
    	var NodeFactory_js_1 = requireNodeFactory$1();
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var Options_js_1 = requireOptions();
    	var ParseOptions$1 = (function () {
    	    function ParseOptions(configuration, options) {
    	        if (options === undefined) { options = []; }
    	        this.options = {};
    	        this.packageData = new Map();
    	        this.parsers = [];
    	        this.root = null;
    	        this.nodeLists = {};
    	        this.error = false;
    	        this.handlers = configuration.handlers;
    	        this.nodeFactory = new NodeFactory_js_1.NodeFactory();
    	        this.nodeFactory.configuration = this;
    	        this.nodeFactory.setCreators(configuration.nodes);
    	        this.itemFactory = new StackItemFactory_js_1.default(configuration.items);
    	        this.itemFactory.configuration = this;
    	        Options_js_1.defaultOptions.apply(undefined, __spreadArray([this.options], __read(options), false));
    	        (0, Options_js_1.defaultOptions)(this.options, configuration.options);
    	    }
    	    ParseOptions.prototype.pushParser = function (parser) {
    	        this.parsers.unshift(parser);
    	    };
    	    ParseOptions.prototype.popParser = function () {
    	        this.parsers.shift();
    	    };
    	    Object.defineProperty(ParseOptions.prototype, "parser", {
    	        get: function () {
    	            return this.parsers[0];
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    ParseOptions.prototype.clear = function () {
    	        this.parsers = [];
    	        this.root = null;
    	        this.nodeLists = {};
    	        this.error = false;
    	        this.tags.resetTag();
    	    };
    	    ParseOptions.prototype.addNode = function (property, node) {
    	        var list = this.nodeLists[property];
    	        if (!list) {
    	            list = this.nodeLists[property] = [];
    	        }
    	        list.push(node);
    	        if (node.kind !== property) {
    	            var inlists = (NodeUtil_js_1.default.getProperty(node, 'in-lists') || '');
    	            var lists = (inlists ? inlists.split(/,/) : []).concat(property).join(',');
    	            NodeUtil_js_1.default.setProperty(node, 'in-lists', lists);
    	        }
    	    };
    	    ParseOptions.prototype.getList = function (property) {
    	        var e_1, _a;
    	        var list = this.nodeLists[property] || [];
    	        var result = [];
    	        try {
    	            for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
    	                var node = list_1_1.value;
    	                if (this.inTree(node)) {
    	                    result.push(node);
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        this.nodeLists[property] = result;
    	        return result;
    	    };
    	    ParseOptions.prototype.removeFromList = function (property, nodes) {
    	        var e_2, _a;
    	        var list = this.nodeLists[property] || [];
    	        try {
    	            for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
    	                var node = nodes_1_1.value;
    	                var i = list.indexOf(node);
    	                if (i >= 0) {
    	                    list.splice(i, 1);
    	                }
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	    };
    	    ParseOptions.prototype.inTree = function (node) {
    	        while (node && node !== this.root) {
    	            node = node.parent;
    	        }
    	        return !!node;
    	    };
    	    return ParseOptions;
    	}());
    	ParseOptions.default = ParseOptions$1;
    	
    	return ParseOptions;
    }

    var Tags = {};

    var hasRequiredTags;

    function requireTags () {
    	if (hasRequiredTags) return Tags;
    	hasRequiredTags = 1;
    	(function (exports) {
    		var __extends = (Tags.__extends) || (function () {
    		    var extendStatics = function (d, b) {
    		        extendStatics = Object.setPrototypeOf ||
    		            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    		            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    		        return extendStatics(d, b);
    		    };
    		    return function (d, b) {
    		        if (typeof b !== "function" && b !== null)
    		            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    		        extendStatics(d, b);
    		        function __() { this.constructor = d; }
    		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    		    };
    		})();
    		var __values = (Tags.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __importDefault = (Tags.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.TagsFactory = exports.AllTags = exports.NoTags = exports.AbstractTags = exports.TagInfo = exports.Label = undefined;
    		var TexParser_js_1 = __importDefault(requireTexParser());
    		var Label = (function () {
    		    function Label(tag, id) {
    		        if (tag === undefined) { tag = '???'; }
    		        if (id === undefined) { id = ''; }
    		        this.tag = tag;
    		        this.id = id;
    		    }
    		    return Label;
    		}());
    		exports.Label = Label;
    		var TagInfo = (function () {
    		    function TagInfo(env, taggable, defaultTags, tag, tagId, tagFormat, noTag, labelId) {
    		        if (env === undefined) { env = ''; }
    		        if (taggable === undefined) { taggable = false; }
    		        if (defaultTags === undefined) { defaultTags = false; }
    		        if (tag === undefined) { tag = null; }
    		        if (tagId === undefined) { tagId = ''; }
    		        if (tagFormat === undefined) { tagFormat = ''; }
    		        if (noTag === undefined) { noTag = false; }
    		        if (labelId === undefined) { labelId = ''; }
    		        this.env = env;
    		        this.taggable = taggable;
    		        this.defaultTags = defaultTags;
    		        this.tag = tag;
    		        this.tagId = tagId;
    		        this.tagFormat = tagFormat;
    		        this.noTag = noTag;
    		        this.labelId = labelId;
    		    }
    		    return TagInfo;
    		}());
    		exports.TagInfo = TagInfo;
    		var AbstractTags = (function () {
    		    function AbstractTags() {
    		        this.counter = 0;
    		        this.allCounter = 0;
    		        this.configuration = null;
    		        this.ids = {};
    		        this.allIds = {};
    		        this.labels = {};
    		        this.allLabels = {};
    		        this.redo = false;
    		        this.refUpdate = false;
    		        this.currentTag = new TagInfo();
    		        this.history = [];
    		        this.stack = [];
    		        this.enTag = function (node, tag) {
    		            var nf = this.configuration.nodeFactory;
    		            var cell = nf.create('node', 'mtd', [node]);
    		            var row = nf.create('node', 'mlabeledtr', [tag, cell]);
    		            var table = nf.create('node', 'mtable', [row], {
    		                side: this.configuration.options['tagSide'],
    		                minlabelspacing: this.configuration.options['tagIndent'],
    		                displaystyle: true
    		            });
    		            return table;
    		        };
    		    }
    		    AbstractTags.prototype.start = function (env, taggable, defaultTags) {
    		        if (this.currentTag) {
    		            this.stack.push(this.currentTag);
    		        }
    		        this.currentTag = new TagInfo(env, taggable, defaultTags);
    		    };
    		    Object.defineProperty(AbstractTags.prototype, "env", {
    		        get: function () {
    		            return this.currentTag.env;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractTags.prototype.end = function () {
    		        this.history.push(this.currentTag);
    		        this.currentTag = this.stack.pop();
    		    };
    		    AbstractTags.prototype.tag = function (tag, noFormat) {
    		        this.currentTag.tag = tag;
    		        this.currentTag.tagFormat = noFormat ? tag : this.formatTag(tag);
    		        this.currentTag.noTag = false;
    		    };
    		    AbstractTags.prototype.notag = function () {
    		        this.tag('', true);
    		        this.currentTag.noTag = true;
    		    };
    		    Object.defineProperty(AbstractTags.prototype, "noTag", {
    		        get: function () {
    		            return this.currentTag.noTag;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(AbstractTags.prototype, "label", {
    		        get: function () {
    		            return this.currentTag.labelId;
    		        },
    		        set: function (label) {
    		            this.currentTag.labelId = label;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractTags.prototype.formatUrl = function (id, base) {
    		        return base + '#' + encodeURIComponent(id);
    		    };
    		    AbstractTags.prototype.formatTag = function (tag) {
    		        return '(' + tag + ')';
    		    };
    		    AbstractTags.prototype.formatId = function (id) {
    		        return 'mjx-eqn:' + id.replace(/\s/g, '_');
    		    };
    		    AbstractTags.prototype.formatNumber = function (n) {
    		        return n.toString();
    		    };
    		    AbstractTags.prototype.autoTag = function () {
    		        if (this.currentTag.tag == null) {
    		            this.counter++;
    		            this.tag(this.formatNumber(this.counter), false);
    		        }
    		    };
    		    AbstractTags.prototype.clearTag = function () {
    		        this.label = '';
    		        this.tag(null, true);
    		        this.currentTag.tagId = '';
    		    };
    		    AbstractTags.prototype.getTag = function (force) {
    		        if (force === undefined) { force = false; }
    		        if (force) {
    		            this.autoTag();
    		            return this.makeTag();
    		        }
    		        var ct = this.currentTag;
    		        if (ct.taggable && !ct.noTag) {
    		            if (ct.defaultTags) {
    		                this.autoTag();
    		            }
    		            if (ct.tag) {
    		                return this.makeTag();
    		            }
    		        }
    		        return null;
    		    };
    		    AbstractTags.prototype.resetTag = function () {
    		        this.history = [];
    		        this.redo = false;
    		        this.refUpdate = false;
    		        this.clearTag();
    		    };
    		    AbstractTags.prototype.reset = function (offset) {
    		        if (offset === undefined) { offset = 0; }
    		        this.resetTag();
    		        this.counter = this.allCounter = offset;
    		        this.allLabels = {};
    		        this.allIds = {};
    		    };
    		    AbstractTags.prototype.startEquation = function (math) {
    		        this.history = [];
    		        this.stack = [];
    		        this.clearTag();
    		        this.currentTag = new TagInfo('', undefined, undefined);
    		        this.labels = {};
    		        this.ids = {};
    		        this.counter = this.allCounter;
    		        this.redo = false;
    		        var recompile = math.inputData.recompile;
    		        if (recompile) {
    		            this.refUpdate = true;
    		            this.counter = recompile.counter;
    		        }
    		    };
    		    AbstractTags.prototype.finishEquation = function (math) {
    		        if (this.redo) {
    		            math.inputData.recompile = {
    		                state: math.state(),
    		                counter: this.allCounter
    		            };
    		        }
    		        if (!this.refUpdate) {
    		            this.allCounter = this.counter;
    		        }
    		        Object.assign(this.allIds, this.ids);
    		        Object.assign(this.allLabels, this.labels);
    		    };
    		    AbstractTags.prototype.finalize = function (node, env) {
    		        if (!env.display || this.currentTag.env ||
    		            this.currentTag.tag == null) {
    		            return node;
    		        }
    		        var tag = this.makeTag();
    		        var table = this.enTag(node, tag);
    		        return table;
    		    };
    		    AbstractTags.prototype.makeId = function () {
    		        this.currentTag.tagId = this.formatId(this.configuration.options['useLabelIds'] ?
    		            (this.label || this.currentTag.tag) : this.currentTag.tag);
    		    };
    		    AbstractTags.prototype.makeTag = function () {
    		        this.makeId();
    		        if (this.label) {
    		            this.labels[this.label] = new Label(this.currentTag.tag, this.currentTag.tagId);
    		        }
    		        var mml = new TexParser_js_1.default('\\text{' + this.currentTag.tagFormat + '}', {}, this.configuration).mml();
    		        return this.configuration.nodeFactory.create('node', 'mtd', [mml], { id: this.currentTag.tagId });
    		    };
    		    return AbstractTags;
    		}());
    		exports.AbstractTags = AbstractTags;
    		var NoTags = (function (_super) {
    		    __extends(NoTags, _super);
    		    function NoTags() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    NoTags.prototype.autoTag = function () { };
    		    NoTags.prototype.getTag = function () {
    		        return !this.currentTag.tag ? null : _super.prototype.getTag.call(this);
    		    };
    		    return NoTags;
    		}(AbstractTags));
    		exports.NoTags = NoTags;
    		var AllTags = (function (_super) {
    		    __extends(AllTags, _super);
    		    function AllTags() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    AllTags.prototype.finalize = function (node, env) {
    		        if (!env.display || this.history.find(function (x) { return x.taggable; })) {
    		            return node;
    		        }
    		        var tag = this.getTag(true);
    		        return this.enTag(node, tag);
    		    };
    		    return AllTags;
    		}(AbstractTags));
    		exports.AllTags = AllTags;
    		(function (TagsFactory) {
    		    var tagsMapping = new Map([
    		        ['none', NoTags],
    		        ['all', AllTags]
    		    ]);
    		    var defaultTags = 'none';
    		    TagsFactory.OPTIONS = {
    		        tags: defaultTags,
    		        tagSide: 'right',
    		        tagIndent: '0.8em',
    		        useLabelIds: true,
    		        ignoreDuplicateLabels: false
    		    };
    		    TagsFactory.add = function (name, constr) {
    		        tagsMapping.set(name, constr);
    		    };
    		    TagsFactory.addTags = function (tags) {
    		        var e_1, _a;
    		        try {
    		            for (var _b = __values(Object.keys(tags)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var key = _c.value;
    		                TagsFactory.add(key, tags[key]);
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		    };
    		    TagsFactory.create = function (name) {
    		        var constr = tagsMapping.get(name) || tagsMapping.get(defaultTags);
    		        if (!constr) {
    		            throw Error('Unknown tags class');
    		        }
    		        return new constr();
    		    };
    		    TagsFactory.setDefault = function (name) {
    		        defaultTags = name;
    		    };
    		    TagsFactory.getDefault = function () {
    		        return TagsFactory.create(defaultTags);
    		    };
    		})(exports.TagsFactory || (exports.TagsFactory = {}));
    		
    	} (Tags));
    	return Tags;
    }

    var Configuration = {};

    var MapHandler = {};

    var hasRequiredMapHandler;

    function requireMapHandler () {
    	if (hasRequiredMapHandler) return MapHandler;
    	hasRequiredMapHandler = 1;
    	(function (exports) {
    		var __values = (MapHandler.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __read = (MapHandler.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.SubHandlers = exports.SubHandler = exports.MapHandler = undefined;
    		var PrioritizedList_js_1 = requirePrioritizedList();
    		var FunctionList_js_1 = requireFunctionList();
    		var MapHandler$1;
    		(function (MapHandler) {
    		    var maps = new Map();
    		    MapHandler.register = function (map) {
    		        maps.set(map.name, map);
    		    };
    		    MapHandler.getMap = function (name) {
    		        return maps.get(name);
    		    };
    		})(MapHandler$1 = exports.MapHandler || (exports.MapHandler = {}));
    		var SubHandler = (function () {
    		    function SubHandler() {
    		        this._configuration = new PrioritizedList_js_1.PrioritizedList();
    		        this._fallback = new FunctionList_js_1.FunctionList();
    		    }
    		    SubHandler.prototype.add = function (maps, fallback, priority) {
    		        var e_1, _a;
    		        if (priority === undefined) { priority = PrioritizedList_js_1.PrioritizedList.DEFAULTPRIORITY; }
    		        try {
    		            for (var _b = __values(maps.slice().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var name_1 = _c.value;
    		                var map = MapHandler$1.getMap(name_1);
    		                if (!map) {
    		                    this.warn('Configuration ' + name_1 + ' not found! Omitted.');
    		                    return;
    		                }
    		                this._configuration.add(map, priority);
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		        if (fallback) {
    		            this._fallback.add(fallback, priority);
    		        }
    		    };
    		    SubHandler.prototype.parse = function (input) {
    		        var e_2, _a;
    		        try {
    		            for (var _b = __values(this._configuration), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var map = _c.value.item;
    		                var result = map.parse(input);
    		                if (result) {
    		                    return result;
    		                }
    		            }
    		        }
    		        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_2) throw e_2.error; }
    		        }
    		        var _d = __read(input, 2), env = _d[0], symbol = _d[1];
    		        Array.from(this._fallback)[0].item(env, symbol);
    		    };
    		    SubHandler.prototype.lookup = function (symbol) {
    		        var map = this.applicable(symbol);
    		        return map ? map.lookup(symbol) : null;
    		    };
    		    SubHandler.prototype.contains = function (symbol) {
    		        return this.applicable(symbol) ? true : false;
    		    };
    		    SubHandler.prototype.toString = function () {
    		        var e_3, _a;
    		        var names = [];
    		        try {
    		            for (var _b = __values(this._configuration), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var map = _c.value.item;
    		                names.push(map.name);
    		            }
    		        }
    		        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_3) throw e_3.error; }
    		        }
    		        return names.join(', ');
    		    };
    		    SubHandler.prototype.applicable = function (symbol) {
    		        var e_4, _a;
    		        try {
    		            for (var _b = __values(this._configuration), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var map = _c.value.item;
    		                if (map.contains(symbol)) {
    		                    return map;
    		                }
    		            }
    		        }
    		        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_4) throw e_4.error; }
    		        }
    		        return null;
    		    };
    		    SubHandler.prototype.retrieve = function (name) {
    		        var e_5, _a;
    		        try {
    		            for (var _b = __values(this._configuration), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var map = _c.value.item;
    		                if (map.name === name) {
    		                    return map;
    		                }
    		            }
    		        }
    		        catch (e_5_1) { e_5 = { error: e_5_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_5) throw e_5.error; }
    		        }
    		        return null;
    		    };
    		    SubHandler.prototype.warn = function (message) {
    		        console.log('TexParser Warning: ' + message);
    		    };
    		    return SubHandler;
    		}());
    		exports.SubHandler = SubHandler;
    		var SubHandlers = (function () {
    		    function SubHandlers() {
    		        this.map = new Map();
    		    }
    		    SubHandlers.prototype.add = function (handlers, fallbacks, priority) {
    		        var e_6, _a;
    		        if (priority === undefined) { priority = PrioritizedList_js_1.PrioritizedList.DEFAULTPRIORITY; }
    		        try {
    		            for (var _b = __values(Object.keys(handlers)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var key = _c.value;
    		                var name_2 = key;
    		                var subHandler = this.get(name_2);
    		                if (!subHandler) {
    		                    subHandler = new SubHandler();
    		                    this.set(name_2, subHandler);
    		                }
    		                subHandler.add(handlers[name_2], fallbacks[name_2], priority);
    		            }
    		        }
    		        catch (e_6_1) { e_6 = { error: e_6_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_6) throw e_6.error; }
    		        }
    		    };
    		    SubHandlers.prototype.set = function (name, subHandler) {
    		        this.map.set(name, subHandler);
    		    };
    		    SubHandlers.prototype.get = function (name) {
    		        return this.map.get(name);
    		    };
    		    SubHandlers.prototype.retrieve = function (name) {
    		        var e_7, _a;
    		        try {
    		            for (var _b = __values(this.map.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var handler = _c.value;
    		                var map = handler.retrieve(name);
    		                if (map) {
    		                    return map;
    		                }
    		            }
    		        }
    		        catch (e_7_1) { e_7 = { error: e_7_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_7) throw e_7.error; }
    		        }
    		        return null;
    		    };
    		    SubHandlers.prototype.keys = function () {
    		        return this.map.keys();
    		    };
    		    return SubHandlers;
    		}());
    		exports.SubHandlers = SubHandlers;
    		
    	} (MapHandler));
    	return MapHandler;
    }

    var hasRequiredConfiguration;

    function requireConfiguration () {
    	if (hasRequiredConfiguration) return Configuration;
    	hasRequiredConfiguration = 1;
    	(function (exports) {
    		var __values = (Configuration.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __read = (Configuration.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.ParserConfiguration = exports.ConfigurationHandler = exports.Configuration = undefined;
    		var Options_js_1 = requireOptions();
    		var MapHandler_js_1 = requireMapHandler();
    		var FunctionList_js_1 = requireFunctionList();
    		var PrioritizedList_js_1 = requirePrioritizedList();
    		var Tags_js_1 = requireTags();
    		var Configuration$1 = (function () {
    		    function Configuration(name, handler, fallback, items, tags, options, nodes, preprocessors, postprocessors, initMethod, configMethod, priority, parser) {
    		        if (handler === undefined) { handler = {}; }
    		        if (fallback === undefined) { fallback = {}; }
    		        if (items === undefined) { items = {}; }
    		        if (tags === undefined) { tags = {}; }
    		        if (options === undefined) { options = {}; }
    		        if (nodes === undefined) { nodes = {}; }
    		        if (preprocessors === undefined) { preprocessors = []; }
    		        if (postprocessors === undefined) { postprocessors = []; }
    		        if (initMethod === undefined) { initMethod = null; }
    		        if (configMethod === undefined) { configMethod = null; }
    		        this.name = name;
    		        this.handler = handler;
    		        this.fallback = fallback;
    		        this.items = items;
    		        this.tags = tags;
    		        this.options = options;
    		        this.nodes = nodes;
    		        this.preprocessors = preprocessors;
    		        this.postprocessors = postprocessors;
    		        this.initMethod = initMethod;
    		        this.configMethod = configMethod;
    		        this.priority = priority;
    		        this.parser = parser;
    		        this.handler = Object.assign({ character: [], delimiter: [], macro: [], environment: [] }, handler);
    		    }
    		    Configuration.makeProcessor = function (func, priority) {
    		        return Array.isArray(func) ? func : [func, priority];
    		    };
    		    Configuration._create = function (name, config) {
    		        var _this = this;
    		        if (config === undefined) { config = {}; }
    		        var priority = config.priority || PrioritizedList_js_1.PrioritizedList.DEFAULTPRIORITY;
    		        var init = config.init ? this.makeProcessor(config.init, priority) : null;
    		        var conf = config.config ? this.makeProcessor(config.config, priority) : null;
    		        var preprocessors = (config.preprocessors || []).map(function (pre) { return _this.makeProcessor(pre, priority); });
    		        var postprocessors = (config.postprocessors || []).map(function (post) { return _this.makeProcessor(post, priority); });
    		        var parser = config.parser || 'tex';
    		        return new Configuration(name, config.handler || {}, config.fallback || {}, config.items || {}, config.tags || {}, config.options || {}, config.nodes || {}, preprocessors, postprocessors, init, conf, priority, parser);
    		    };
    		    Configuration.create = function (name, config) {
    		        if (config === undefined) { config = {}; }
    		        var configuration = Configuration._create(name, config);
    		        ConfigurationHandler.set(name, configuration);
    		        return configuration;
    		    };
    		    Configuration.local = function (config) {
    		        if (config === undefined) { config = {}; }
    		        return Configuration._create('', config);
    		    };
    		    Object.defineProperty(Configuration.prototype, "init", {
    		        get: function () {
    		            return this.initMethod ? this.initMethod[0] : null;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(Configuration.prototype, "config", {
    		        get: function () {
    		            return this.configMethod ? this.configMethod[0] : null;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    return Configuration;
    		}());
    		exports.Configuration = Configuration$1;
    		var ConfigurationHandler;
    		(function (ConfigurationHandler) {
    		    var maps = new Map();
    		    ConfigurationHandler.set = function (name, map) {
    		        maps.set(name, map);
    		    };
    		    ConfigurationHandler.get = function (name) {
    		        return maps.get(name);
    		    };
    		    ConfigurationHandler.keys = function () {
    		        return maps.keys();
    		    };
    		})(ConfigurationHandler = exports.ConfigurationHandler || (exports.ConfigurationHandler = {}));
    		var ParserConfiguration = (function () {
    		    function ParserConfiguration(packages, parsers) {
    		        var e_1, _a, e_2, _b;
    		        if (parsers === undefined) { parsers = ['tex']; }
    		        this.initMethod = new FunctionList_js_1.FunctionList();
    		        this.configMethod = new FunctionList_js_1.FunctionList();
    		        this.configurations = new PrioritizedList_js_1.PrioritizedList();
    		        this.parsers = [];
    		        this.handlers = new MapHandler_js_1.SubHandlers();
    		        this.items = {};
    		        this.tags = {};
    		        this.options = {};
    		        this.nodes = {};
    		        this.parsers = parsers;
    		        try {
    		            for (var _c = __values(packages.slice().reverse()), _d = _c.next(); !_d.done; _d = _c.next()) {
    		                var pkg = _d.value;
    		                this.addPackage(pkg);
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		        try {
    		            for (var _e = __values(this.configurations), _f = _e.next(); !_f.done; _f = _e.next()) {
    		                var _g = _f.value, config = _g.item, priority = _g.priority;
    		                this.append(config, priority);
    		            }
    		        }
    		        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		        finally {
    		            try {
    		                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
    		            }
    		            finally { if (e_2) throw e_2.error; }
    		        }
    		    }
    		    ParserConfiguration.prototype.init = function () {
    		        this.initMethod.execute(this);
    		    };
    		    ParserConfiguration.prototype.config = function (jax) {
    		        var e_3, _a;
    		        this.configMethod.execute(this, jax);
    		        try {
    		            for (var _b = __values(this.configurations), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var config = _c.value;
    		                this.addFilters(jax, config.item);
    		            }
    		        }
    		        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_3) throw e_3.error; }
    		        }
    		    };
    		    ParserConfiguration.prototype.addPackage = function (pkg) {
    		        var name = typeof pkg === 'string' ? pkg : pkg[0];
    		        var conf = this.getPackage(name);
    		        conf && this.configurations.add(conf, typeof pkg === 'string' ? conf.priority : pkg[1]);
    		    };
    		    ParserConfiguration.prototype.add = function (name, jax, options) {
    		        var e_4, _a;
    		        if (options === undefined) { options = {}; }
    		        var config = this.getPackage(name);
    		        this.append(config);
    		        this.configurations.add(config, config.priority);
    		        this.init();
    		        var parser = jax.parseOptions;
    		        parser.nodeFactory.setCreators(config.nodes);
    		        try {
    		            for (var _b = __values(Object.keys(config.items)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var kind = _c.value;
    		                parser.itemFactory.setNodeClass(kind, config.items[kind]);
    		            }
    		        }
    		        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_4) throw e_4.error; }
    		        }
    		        Tags_js_1.TagsFactory.addTags(config.tags);
    		        (0, Options_js_1.defaultOptions)(parser.options, config.options);
    		        (0, Options_js_1.userOptions)(parser.options, options);
    		        this.addFilters(jax, config);
    		        if (config.config) {
    		            config.config(this, jax);
    		        }
    		    };
    		    ParserConfiguration.prototype.getPackage = function (name) {
    		        var config = ConfigurationHandler.get(name);
    		        if (config && this.parsers.indexOf(config.parser) < 0) {
    		            throw Error("Package ".concat(name, " doesn't target the proper parser"));
    		        }
    		        return config;
    		    };
    		    ParserConfiguration.prototype.append = function (config, priority) {
    		        priority = priority || config.priority;
    		        if (config.initMethod) {
    		            this.initMethod.add(config.initMethod[0], config.initMethod[1]);
    		        }
    		        if (config.configMethod) {
    		            this.configMethod.add(config.configMethod[0], config.configMethod[1]);
    		        }
    		        this.handlers.add(config.handler, config.fallback, priority);
    		        Object.assign(this.items, config.items);
    		        Object.assign(this.tags, config.tags);
    		        (0, Options_js_1.defaultOptions)(this.options, config.options);
    		        Object.assign(this.nodes, config.nodes);
    		    };
    		    ParserConfiguration.prototype.addFilters = function (jax, config) {
    		        var e_5, _a, e_6, _b;
    		        try {
    		            for (var _c = __values(config.preprocessors), _d = _c.next(); !_d.done; _d = _c.next()) {
    		                var _e = __read(_d.value, 2), pre = _e[0], priority = _e[1];
    		                jax.preFilters.add(pre, priority);
    		            }
    		        }
    		        catch (e_5_1) { e_5 = { error: e_5_1 }; }
    		        finally {
    		            try {
    		                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    		            }
    		            finally { if (e_5) throw e_5.error; }
    		        }
    		        try {
    		            for (var _f = __values(config.postprocessors), _g = _f.next(); !_g.done; _g = _f.next()) {
    		                var _h = __read(_g.value, 2), post = _h[0], priority = _h[1];
    		                jax.postFilters.add(post, priority);
    		            }
    		        }
    		        catch (e_6_1) { e_6 = { error: e_6_1 }; }
    		        finally {
    		            try {
    		                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
    		            }
    		            finally { if (e_6) throw e_6.error; }
    		        }
    		    };
    		    return ParserConfiguration;
    		}());
    		exports.ParserConfiguration = ParserConfiguration;
    		
    	} (Configuration));
    	return Configuration;
    }

    var BaseConfiguration = {};

    var SymbolMap = {};

    var _Symbol = {};

    var hasRequired_Symbol;

    function require_Symbol () {
    	if (hasRequired_Symbol) return _Symbol;
    	hasRequired_Symbol = 1;
    	Object.defineProperty(_Symbol, "__esModule", { value: true });
    	_Symbol.Macro = _Symbol.Symbol = undefined;
    	var Symbol = (function () {
    	    function Symbol(_symbol, _char, _attributes) {
    	        this._symbol = _symbol;
    	        this._char = _char;
    	        this._attributes = _attributes;
    	    }
    	    Object.defineProperty(Symbol.prototype, "symbol", {
    	        get: function () {
    	            return this._symbol;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(Symbol.prototype, "char", {
    	        get: function () {
    	            return this._char;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(Symbol.prototype, "attributes", {
    	        get: function () {
    	            return this._attributes;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return Symbol;
    	}());
    	_Symbol.Symbol = Symbol;
    	var Macro = (function () {
    	    function Macro(_symbol, _func, _args) {
    	        if (_args === undefined) { _args = []; }
    	        this._symbol = _symbol;
    	        this._func = _func;
    	        this._args = _args;
    	    }
    	    Object.defineProperty(Macro.prototype, "symbol", {
    	        get: function () {
    	            return this._symbol;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(Macro.prototype, "func", {
    	        get: function () {
    	            return this._func;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(Macro.prototype, "args", {
    	        get: function () {
    	            return this._args;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return Macro;
    	}());
    	_Symbol.Macro = Macro;
    	
    	return _Symbol;
    }

    var hasRequiredSymbolMap;

    function requireSymbolMap () {
    	if (hasRequiredSymbolMap) return SymbolMap;
    	hasRequiredSymbolMap = 1;
    	var __extends = (SymbolMap.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __read = (SymbolMap.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __values = (SymbolMap.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __spreadArray = (SymbolMap.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(SymbolMap, "__esModule", { value: true });
    	SymbolMap.EnvironmentMap = SymbolMap.CommandMap = SymbolMap.MacroMap = SymbolMap.DelimiterMap = SymbolMap.CharacterMap = SymbolMap.AbstractParseMap = SymbolMap.RegExpMap = SymbolMap.AbstractSymbolMap = SymbolMap.parseResult = undefined;
    	var Symbol_js_1 = require_Symbol();
    	var MapHandler_js_1 = requireMapHandler();
    	function parseResult(result) {
    	    return result === undefined ? true : result;
    	}
    	SymbolMap.parseResult = parseResult;
    	var AbstractSymbolMap = (function () {
    	    function AbstractSymbolMap(_name, _parser) {
    	        this._name = _name;
    	        this._parser = _parser;
    	        MapHandler_js_1.MapHandler.register(this);
    	    }
    	    Object.defineProperty(AbstractSymbolMap.prototype, "name", {
    	        get: function () {
    	            return this._name;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    AbstractSymbolMap.prototype.parserFor = function (symbol) {
    	        return this.contains(symbol) ? this.parser : null;
    	    };
    	    AbstractSymbolMap.prototype.parse = function (_a) {
    	        var _b = __read(_a, 2), env = _b[0], symbol = _b[1];
    	        var parser = this.parserFor(symbol);
    	        var mapped = this.lookup(symbol);
    	        return (parser && mapped) ? parseResult(parser(env, mapped)) : null;
    	    };
    	    Object.defineProperty(AbstractSymbolMap.prototype, "parser", {
    	        get: function () {
    	            return this._parser;
    	        },
    	        set: function (parser) {
    	            this._parser = parser;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return AbstractSymbolMap;
    	}());
    	SymbolMap.AbstractSymbolMap = AbstractSymbolMap;
    	var RegExpMap = (function (_super) {
    	    __extends(RegExpMap, _super);
    	    function RegExpMap(name, parser, _regExp) {
    	        var _this = _super.call(this, name, parser) || this;
    	        _this._regExp = _regExp;
    	        return _this;
    	    }
    	    RegExpMap.prototype.contains = function (symbol) {
    	        return this._regExp.test(symbol);
    	    };
    	    RegExpMap.prototype.lookup = function (symbol) {
    	        return this.contains(symbol) ? symbol : null;
    	    };
    	    return RegExpMap;
    	}(AbstractSymbolMap));
    	SymbolMap.RegExpMap = RegExpMap;
    	var AbstractParseMap = (function (_super) {
    	    __extends(AbstractParseMap, _super);
    	    function AbstractParseMap() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.map = new Map();
    	        return _this;
    	    }
    	    AbstractParseMap.prototype.lookup = function (symbol) {
    	        return this.map.get(symbol);
    	    };
    	    AbstractParseMap.prototype.contains = function (symbol) {
    	        return this.map.has(symbol);
    	    };
    	    AbstractParseMap.prototype.add = function (symbol, object) {
    	        this.map.set(symbol, object);
    	    };
    	    AbstractParseMap.prototype.remove = function (symbol) {
    	        this.map.delete(symbol);
    	    };
    	    return AbstractParseMap;
    	}(AbstractSymbolMap));
    	SymbolMap.AbstractParseMap = AbstractParseMap;
    	var CharacterMap = (function (_super) {
    	    __extends(CharacterMap, _super);
    	    function CharacterMap(name, parser, json) {
    	        var e_1, _a;
    	        var _this = _super.call(this, name, parser) || this;
    	        try {
    	            for (var _b = __values(Object.keys(json)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var key = _c.value;
    	                var value = json[key];
    	                var _d = __read((typeof (value) === 'string') ? [value, null] : value, 2), char = _d[0], attrs = _d[1];
    	                var character = new Symbol_js_1.Symbol(key, char, attrs);
    	                _this.add(key, character);
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        return _this;
    	    }
    	    return CharacterMap;
    	}(AbstractParseMap));
    	SymbolMap.CharacterMap = CharacterMap;
    	var DelimiterMap = (function (_super) {
    	    __extends(DelimiterMap, _super);
    	    function DelimiterMap() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    DelimiterMap.prototype.parse = function (_a) {
    	        var _b = __read(_a, 2), env = _b[0], symbol = _b[1];
    	        return _super.prototype.parse.call(this, [env, '\\' + symbol]);
    	    };
    	    return DelimiterMap;
    	}(CharacterMap));
    	SymbolMap.DelimiterMap = DelimiterMap;
    	var MacroMap = (function (_super) {
    	    __extends(MacroMap, _super);
    	    function MacroMap(name, json, functionMap) {
    	        var e_2, _a;
    	        var _this = _super.call(this, name, null) || this;
    	        try {
    	            for (var _b = __values(Object.keys(json)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var key = _c.value;
    	                var value = json[key];
    	                var _d = __read((typeof (value) === 'string') ? [value] : value), func = _d[0], attrs = _d.slice(1);
    	                var character = new Symbol_js_1.Macro(key, functionMap[func], attrs);
    	                _this.add(key, character);
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	        return _this;
    	    }
    	    MacroMap.prototype.parserFor = function (symbol) {
    	        var macro = this.lookup(symbol);
    	        return macro ? macro.func : null;
    	    };
    	    MacroMap.prototype.parse = function (_a) {
    	        var _b = __read(_a, 2), env = _b[0], symbol = _b[1];
    	        var macro = this.lookup(symbol);
    	        var parser = this.parserFor(symbol);
    	        if (!macro || !parser) {
    	            return null;
    	        }
    	        return parseResult(parser.apply(undefined, __spreadArray([env, macro.symbol], __read(macro.args), false)));
    	    };
    	    return MacroMap;
    	}(AbstractParseMap));
    	SymbolMap.MacroMap = MacroMap;
    	var CommandMap = (function (_super) {
    	    __extends(CommandMap, _super);
    	    function CommandMap() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    CommandMap.prototype.parse = function (_a) {
    	        var _b = __read(_a, 2), env = _b[0], symbol = _b[1];
    	        var macro = this.lookup(symbol);
    	        var parser = this.parserFor(symbol);
    	        if (!macro || !parser) {
    	            return null;
    	        }
    	        var saveCommand = env.currentCS;
    	        env.currentCS = '\\' + symbol;
    	        var result = parser.apply(undefined, __spreadArray([env, '\\' + macro.symbol], __read(macro.args), false));
    	        env.currentCS = saveCommand;
    	        return parseResult(result);
    	    };
    	    return CommandMap;
    	}(MacroMap));
    	SymbolMap.CommandMap = CommandMap;
    	var EnvironmentMap = (function (_super) {
    	    __extends(EnvironmentMap, _super);
    	    function EnvironmentMap(name, parser, json, functionMap) {
    	        var _this = _super.call(this, name, json, functionMap) || this;
    	        _this.parser = parser;
    	        return _this;
    	    }
    	    EnvironmentMap.prototype.parse = function (_a) {
    	        var _b = __read(_a, 2), env = _b[0], symbol = _b[1];
    	        var macro = this.lookup(symbol);
    	        var envParser = this.parserFor(symbol);
    	        if (!macro || !envParser) {
    	            return null;
    	        }
    	        return parseResult(this.parser(env, macro.symbol, envParser, macro.args));
    	    };
    	    return EnvironmentMap;
    	}(MacroMap));
    	SymbolMap.EnvironmentMap = EnvironmentMap;
    	
    	return SymbolMap;
    }

    var BaseItems = {};

    var hasRequiredBaseItems;

    function requireBaseItems () {
    	if (hasRequiredBaseItems) return BaseItems;
    	hasRequiredBaseItems = 1;
    	var __extends = (BaseItems.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __read = (BaseItems.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (BaseItems.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __importDefault = (BaseItems.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BaseItems, "__esModule", { value: true });
    	BaseItems.EquationItem = BaseItems.EqnArrayItem = BaseItems.ArrayItem = BaseItems.DotsItem = BaseItems.NonscriptItem = BaseItems.NotItem = BaseItems.FnItem = BaseItems.MmlItem = BaseItems.CellItem = BaseItems.PositionItem = BaseItems.StyleItem = BaseItems.EndItem = BaseItems.BeginItem = BaseItems.RightItem = BaseItems.Middle = BaseItems.LeftItem = BaseItems.OverItem = BaseItems.SubsupItem = BaseItems.PrimeItem = BaseItems.CloseItem = BaseItems.OpenItem = BaseItems.StopItem = BaseItems.StartItem = undefined;
    	var MapHandler_js_1 = requireMapHandler();
    	var Entities_js_1 = requireEntities();
    	var MmlNode_js_1 = requireMmlNode();
    	var TexError_js_1 = __importDefault(requireTexError());
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var StackItem_js_1 = requireStackItem();
    	var StartItem = (function (_super) {
    	    __extends(StartItem, _super);
    	    function StartItem(factory, global) {
    	        var _this = _super.call(this, factory) || this;
    	        _this.global = global;
    	        return _this;
    	    }
    	    Object.defineProperty(StartItem.prototype, "kind", {
    	        get: function () {
    	            return 'start';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(StartItem.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    StartItem.prototype.checkItem = function (item) {
    	        if (item.isKind('stop')) {
    	            var node = this.toMml();
    	            if (!this.global.isInner) {
    	                node = this.factory.configuration.tags.finalize(node, this.env);
    	            }
    	            return [[this.factory.create('mml', node)], true];
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    return StartItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.StartItem = StartItem;
    	var StopItem = (function (_super) {
    	    __extends(StopItem, _super);
    	    function StopItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(StopItem.prototype, "kind", {
    	        get: function () {
    	            return 'stop';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(StopItem.prototype, "isClose", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return StopItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.StopItem = StopItem;
    	var OpenItem = (function (_super) {
    	    __extends(OpenItem, _super);
    	    function OpenItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(OpenItem.prototype, "kind", {
    	        get: function () {
    	            return 'open';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(OpenItem.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    OpenItem.prototype.checkItem = function (item) {
    	        if (item.isKind('close')) {
    	            var mml = this.toMml();
    	            var node = this.create('node', 'TeXAtom', [mml]);
    	            return [[this.factory.create('mml', node)], true];
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    OpenItem.errors = Object.assign(Object.create(StackItem_js_1.BaseItem.errors), {
    	        'stop': ['ExtraOpenMissingClose',
    	            'Extra open brace or missing close brace']
    	    });
    	    return OpenItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.OpenItem = OpenItem;
    	var CloseItem = (function (_super) {
    	    __extends(CloseItem, _super);
    	    function CloseItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(CloseItem.prototype, "kind", {
    	        get: function () {
    	            return 'close';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(CloseItem.prototype, "isClose", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return CloseItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.CloseItem = CloseItem;
    	var PrimeItem = (function (_super) {
    	    __extends(PrimeItem, _super);
    	    function PrimeItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(PrimeItem.prototype, "kind", {
    	        get: function () {
    	            return 'prime';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    PrimeItem.prototype.checkItem = function (item) {
    	        var _a = __read(this.Peek(2), 2), top0 = _a[0], top1 = _a[1];
    	        if (!NodeUtil_js_1.default.isType(top0, 'msubsup') || NodeUtil_js_1.default.isType(top0, 'msup')) {
    	            var node = this.create('node', 'msup', [top0, top1]);
    	            return [[node, item], true];
    	        }
    	        NodeUtil_js_1.default.setChild(top0, top0.sup, top1);
    	        return [[top0, item], true];
    	    };
    	    return PrimeItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.PrimeItem = PrimeItem;
    	var SubsupItem = (function (_super) {
    	    __extends(SubsupItem, _super);
    	    function SubsupItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(SubsupItem.prototype, "kind", {
    	        get: function () {
    	            return 'subsup';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    SubsupItem.prototype.checkItem = function (item) {
    	        if (item.isKind('open') || item.isKind('left')) {
    	            return StackItem_js_1.BaseItem.success;
    	        }
    	        var top = this.First;
    	        var position = this.getProperty('position');
    	        if (item.isKind('mml')) {
    	            if (this.getProperty('primes')) {
    	                if (position !== 2) {
    	                    NodeUtil_js_1.default.setChild(top, 2, this.getProperty('primes'));
    	                }
    	                else {
    	                    NodeUtil_js_1.default.setProperty(this.getProperty('primes'), 'variantForm', true);
    	                    var node = this.create('node', 'mrow', [this.getProperty('primes'), item.First]);
    	                    item.First = node;
    	                }
    	            }
    	            NodeUtil_js_1.default.setChild(top, position, item.First);
    	            if (this.getProperty('movesupsub') != null) {
    	                NodeUtil_js_1.default.setProperty(top, 'movesupsub', this.getProperty('movesupsub'));
    	            }
    	            var result = this.factory.create('mml', top);
    	            return [[result], true];
    	        }
    	        if (_super.prototype.checkItem.call(this, item)[1]) {
    	            var error = this.getErrors(['', 'sub', 'sup'][position]);
    	            throw new (TexError_js_1.default.bind.apply(TexError_js_1.default, __spreadArray([undefined, error[0], error[1]], __read(error.splice(2)), false)))();
    	        }
    	        return null;
    	    };
    	    SubsupItem.errors = Object.assign(Object.create(StackItem_js_1.BaseItem.errors), {
    	        'stop': ['MissingScript',
    	            'Missing superscript or subscript argument'],
    	        'sup': ['MissingOpenForSup',
    	            'Missing open brace for superscript'],
    	        'sub': ['MissingOpenForSub',
    	            'Missing open brace for subscript']
    	    });
    	    return SubsupItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.SubsupItem = SubsupItem;
    	var OverItem = (function (_super) {
    	    __extends(OverItem, _super);
    	    function OverItem(factory) {
    	        var _this = _super.call(this, factory) || this;
    	        _this.setProperty('name', '\\over');
    	        return _this;
    	    }
    	    Object.defineProperty(OverItem.prototype, "kind", {
    	        get: function () {
    	            return 'over';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(OverItem.prototype, "isClose", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    OverItem.prototype.checkItem = function (item) {
    	        if (item.isKind('over')) {
    	            throw new TexError_js_1.default('AmbiguousUseOf', 'Ambiguous use of %1', item.getName());
    	        }
    	        if (item.isClose) {
    	            var mml = this.create('node', 'mfrac', [this.getProperty('num'), this.toMml(false)]);
    	            if (this.getProperty('thickness') != null) {
    	                NodeUtil_js_1.default.setAttribute(mml, 'linethickness', this.getProperty('thickness'));
    	            }
    	            if (this.getProperty('open') || this.getProperty('close')) {
    	                NodeUtil_js_1.default.setProperty(mml, 'withDelims', true);
    	                mml = ParseUtil_js_1.default.fixedFence(this.factory.configuration, this.getProperty('open'), mml, this.getProperty('close'));
    	            }
    	            return [[this.factory.create('mml', mml), item], true];
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    OverItem.prototype.toString = function () {
    	        return 'over[' + this.getProperty('num') +
    	            ' / ' + this.nodes.join('; ') + ']';
    	    };
    	    return OverItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.OverItem = OverItem;
    	var LeftItem = (function (_super) {
    	    __extends(LeftItem, _super);
    	    function LeftItem(factory, delim) {
    	        var _this = _super.call(this, factory) || this;
    	        _this.setProperty('delim', delim);
    	        return _this;
    	    }
    	    Object.defineProperty(LeftItem.prototype, "kind", {
    	        get: function () {
    	            return 'left';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(LeftItem.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    LeftItem.prototype.checkItem = function (item) {
    	        if (item.isKind('right')) {
    	            return [[this.factory.create('mml', ParseUtil_js_1.default.fenced(this.factory.configuration, this.getProperty('delim'), this.toMml(), item.getProperty('delim'), '', item.getProperty('color')))], true];
    	        }
    	        if (item.isKind('middle')) {
    	            var def = { stretchy: true };
    	            if (item.getProperty('color')) {
    	                def.mathcolor = item.getProperty('color');
    	            }
    	            this.Push(this.create('node', 'TeXAtom', [], { texClass: MmlNode_js_1.TEXCLASS.CLOSE }), this.create('token', 'mo', def, item.getProperty('delim')), this.create('node', 'TeXAtom', [], { texClass: MmlNode_js_1.TEXCLASS.OPEN }));
    	            this.env = {};
    	            return [[this], true];
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    LeftItem.errors = Object.assign(Object.create(StackItem_js_1.BaseItem.errors), {
    	        'stop': ['ExtraLeftMissingRight',
    	            'Extra \\left or missing \\right']
    	    });
    	    return LeftItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.LeftItem = LeftItem;
    	var Middle = (function (_super) {
    	    __extends(Middle, _super);
    	    function Middle(factory, delim, color) {
    	        var _this = _super.call(this, factory) || this;
    	        _this.setProperty('delim', delim);
    	        color && _this.setProperty('color', color);
    	        return _this;
    	    }
    	    Object.defineProperty(Middle.prototype, "kind", {
    	        get: function () {
    	            return 'middle';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(Middle.prototype, "isClose", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return Middle;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.Middle = Middle;
    	var RightItem = (function (_super) {
    	    __extends(RightItem, _super);
    	    function RightItem(factory, delim, color) {
    	        var _this = _super.call(this, factory) || this;
    	        _this.setProperty('delim', delim);
    	        color && _this.setProperty('color', color);
    	        return _this;
    	    }
    	    Object.defineProperty(RightItem.prototype, "kind", {
    	        get: function () {
    	            return 'right';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(RightItem.prototype, "isClose", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return RightItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.RightItem = RightItem;
    	var BeginItem = (function (_super) {
    	    __extends(BeginItem, _super);
    	    function BeginItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(BeginItem.prototype, "kind", {
    	        get: function () {
    	            return 'begin';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(BeginItem.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    BeginItem.prototype.checkItem = function (item) {
    	        if (item.isKind('end')) {
    	            if (item.getName() !== this.getName()) {
    	                throw new TexError_js_1.default('EnvBadEnd', '\\begin{%1} ended with \\end{%2}', this.getName(), item.getName());
    	            }
    	            if (!this.getProperty('end')) {
    	                return [[this.factory.create('mml', this.toMml())], true];
    	            }
    	            return StackItem_js_1.BaseItem.fail;
    	        }
    	        if (item.isKind('stop')) {
    	            throw new TexError_js_1.default('EnvMissingEnd', 'Missing \\end{%1}', this.getName());
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    return BeginItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.BeginItem = BeginItem;
    	var EndItem = (function (_super) {
    	    __extends(EndItem, _super);
    	    function EndItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(EndItem.prototype, "kind", {
    	        get: function () {
    	            return 'end';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(EndItem.prototype, "isClose", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return EndItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.EndItem = EndItem;
    	var StyleItem = (function (_super) {
    	    __extends(StyleItem, _super);
    	    function StyleItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(StyleItem.prototype, "kind", {
    	        get: function () {
    	            return 'style';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    StyleItem.prototype.checkItem = function (item) {
    	        if (!item.isClose) {
    	            return _super.prototype.checkItem.call(this, item);
    	        }
    	        var mml = this.create('node', 'mstyle', this.nodes, this.getProperty('styles'));
    	        return [[this.factory.create('mml', mml), item], true];
    	    };
    	    return StyleItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.StyleItem = StyleItem;
    	var PositionItem = (function (_super) {
    	    __extends(PositionItem, _super);
    	    function PositionItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(PositionItem.prototype, "kind", {
    	        get: function () {
    	            return 'position';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    PositionItem.prototype.checkItem = function (item) {
    	        if (item.isClose) {
    	            throw new TexError_js_1.default('MissingBoxFor', 'Missing box for %1', this.getName());
    	        }
    	        if (item.isFinal) {
    	            var mml = item.toMml();
    	            switch (this.getProperty('move')) {
    	                case 'vertical':
    	                    mml = this.create('node', 'mpadded', [mml], { height: this.getProperty('dh'),
    	                        depth: this.getProperty('dd'),
    	                        voffset: this.getProperty('dh') });
    	                    return [[this.factory.create('mml', mml)], true];
    	                case 'horizontal':
    	                    return [[this.factory.create('mml', this.getProperty('left')), item,
    	                            this.factory.create('mml', this.getProperty('right'))], true];
    	            }
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    return PositionItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.PositionItem = PositionItem;
    	var CellItem = (function (_super) {
    	    __extends(CellItem, _super);
    	    function CellItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(CellItem.prototype, "kind", {
    	        get: function () {
    	            return 'cell';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(CellItem.prototype, "isClose", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return CellItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.CellItem = CellItem;
    	var MmlItem = (function (_super) {
    	    __extends(MmlItem, _super);
    	    function MmlItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlItem.prototype, "isFinal", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlItem.prototype, "kind", {
    	        get: function () {
    	            return 'mml';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return MmlItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.MmlItem = MmlItem;
    	var FnItem = (function (_super) {
    	    __extends(FnItem, _super);
    	    function FnItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(FnItem.prototype, "kind", {
    	        get: function () {
    	            return 'fn';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    FnItem.prototype.checkItem = function (item) {
    	        var top = this.First;
    	        if (top) {
    	            if (item.isOpen) {
    	                return StackItem_js_1.BaseItem.success;
    	            }
    	            if (!item.isKind('fn')) {
    	                var mml = item.First;
    	                if (!item.isKind('mml') || !mml) {
    	                    return [[top, item], true];
    	                }
    	                if ((NodeUtil_js_1.default.isType(mml, 'mstyle') && mml.childNodes.length &&
    	                    NodeUtil_js_1.default.isType(mml.childNodes[0].childNodes[0], 'mspace')) ||
    	                    NodeUtil_js_1.default.isType(mml, 'mspace')) {
    	                    return [[top, item], true];
    	                }
    	                if (NodeUtil_js_1.default.isEmbellished(mml)) {
    	                    mml = NodeUtil_js_1.default.getCoreMO(mml);
    	                }
    	                var form = NodeUtil_js_1.default.getForm(mml);
    	                if (form != null && [0, 0, 1, 1, 0, 1, 1, 0, 0, 0][form[2]]) {
    	                    return [[top, item], true];
    	                }
    	            }
    	            var node = this.create('token', 'mo', { texClass: MmlNode_js_1.TEXCLASS.NONE }, Entities_js_1.entities.ApplyFunction);
    	            return [[top, node, item], true];
    	        }
    	        return _super.prototype.checkItem.apply(this, arguments);
    	    };
    	    return FnItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.FnItem = FnItem;
    	var NotItem = (function (_super) {
    	    __extends(NotItem, _super);
    	    function NotItem() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.remap = MapHandler_js_1.MapHandler.getMap('not_remap');
    	        return _this;
    	    }
    	    Object.defineProperty(NotItem.prototype, "kind", {
    	        get: function () {
    	            return 'not';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    NotItem.prototype.checkItem = function (item) {
    	        var mml;
    	        var c;
    	        var textNode;
    	        if (item.isKind('open') || item.isKind('left')) {
    	            return StackItem_js_1.BaseItem.success;
    	        }
    	        if (item.isKind('mml') &&
    	            (NodeUtil_js_1.default.isType(item.First, 'mo') || NodeUtil_js_1.default.isType(item.First, 'mi') ||
    	                NodeUtil_js_1.default.isType(item.First, 'mtext'))) {
    	            mml = item.First;
    	            c = NodeUtil_js_1.default.getText(mml);
    	            if (c.length === 1 && !NodeUtil_js_1.default.getProperty(mml, 'movesupsub') &&
    	                NodeUtil_js_1.default.getChildren(mml).length === 1) {
    	                if (this.remap.contains(c)) {
    	                    textNode = this.create('text', this.remap.lookup(c).char);
    	                    NodeUtil_js_1.default.setChild(mml, 0, textNode);
    	                }
    	                else {
    	                    textNode = this.create('text', '\u0338');
    	                    NodeUtil_js_1.default.appendChildren(mml, [textNode]);
    	                }
    	                return [[item], true];
    	            }
    	        }
    	        textNode = this.create('text', '\u29F8');
    	        var mtextNode = this.create('node', 'mtext', [], {}, textNode);
    	        var paddedNode = this.create('node', 'mpadded', [mtextNode], { width: 0 });
    	        mml = this.create('node', 'TeXAtom', [paddedNode], { texClass: MmlNode_js_1.TEXCLASS.REL });
    	        return [[mml, item], true];
    	    };
    	    return NotItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.NotItem = NotItem;
    	var NonscriptItem = (function (_super) {
    	    __extends(NonscriptItem, _super);
    	    function NonscriptItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(NonscriptItem.prototype, "kind", {
    	        get: function () {
    	            return 'nonscript';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    NonscriptItem.prototype.checkItem = function (item) {
    	        if (item.isKind('mml') && item.Size() === 1) {
    	            var mml = item.First;
    	            if (mml.isKind('mstyle') && mml.notParent) {
    	                mml = NodeUtil_js_1.default.getChildren(NodeUtil_js_1.default.getChildren(mml)[0])[0];
    	            }
    	            if (mml.isKind('mspace')) {
    	                if (mml !== item.First) {
    	                    var mrow = this.create('node', 'mrow', [item.Pop()]);
    	                    item.Push(mrow);
    	                }
    	                this.factory.configuration.addNode('nonscript', item.First);
    	            }
    	        }
    	        return [[item], true];
    	    };
    	    return NonscriptItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.NonscriptItem = NonscriptItem;
    	var DotsItem = (function (_super) {
    	    __extends(DotsItem, _super);
    	    function DotsItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(DotsItem.prototype, "kind", {
    	        get: function () {
    	            return 'dots';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    DotsItem.prototype.checkItem = function (item) {
    	        if (item.isKind('open') || item.isKind('left')) {
    	            return StackItem_js_1.BaseItem.success;
    	        }
    	        var dots = this.getProperty('ldots');
    	        var top = item.First;
    	        if (item.isKind('mml') && NodeUtil_js_1.default.isEmbellished(top)) {
    	            var tclass = NodeUtil_js_1.default.getTexClass(NodeUtil_js_1.default.getCoreMO(top));
    	            if (tclass === MmlNode_js_1.TEXCLASS.BIN || tclass === MmlNode_js_1.TEXCLASS.REL) {
    	                dots = this.getProperty('cdots');
    	            }
    	        }
    	        return [[dots, item], true];
    	    };
    	    return DotsItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.DotsItem = DotsItem;
    	var ArrayItem = (function (_super) {
    	    __extends(ArrayItem, _super);
    	    function ArrayItem() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.table = [];
    	        _this.row = [];
    	        _this.frame = [];
    	        _this.hfill = [];
    	        _this.arraydef = {};
    	        _this.dashed = false;
    	        return _this;
    	    }
    	    Object.defineProperty(ArrayItem.prototype, "kind", {
    	        get: function () {
    	            return 'array';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(ArrayItem.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(ArrayItem.prototype, "copyEnv", {
    	        get: function () {
    	            return false;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    ArrayItem.prototype.checkItem = function (item) {
    	        if (item.isClose && !item.isKind('over')) {
    	            if (item.getProperty('isEntry')) {
    	                this.EndEntry();
    	                this.clearEnv();
    	                return StackItem_js_1.BaseItem.fail;
    	            }
    	            if (item.getProperty('isCR')) {
    	                this.EndEntry();
    	                this.EndRow();
    	                this.clearEnv();
    	                return StackItem_js_1.BaseItem.fail;
    	            }
    	            this.EndTable();
    	            this.clearEnv();
    	            var newItem = this.factory.create('mml', this.createMml());
    	            if (this.getProperty('requireClose')) {
    	                if (item.isKind('close')) {
    	                    return [[newItem], true];
    	                }
    	                throw new TexError_js_1.default('MissingCloseBrace', 'Missing close brace');
    	            }
    	            return [[newItem, item], true];
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    ArrayItem.prototype.createMml = function () {
    	        var scriptlevel = this.arraydef['scriptlevel'];
    	        delete this.arraydef['scriptlevel'];
    	        var mml = this.create('node', 'mtable', this.table, this.arraydef);
    	        if (scriptlevel) {
    	            mml.setProperty('scriptlevel', scriptlevel);
    	        }
    	        if (this.frame.length === 4) {
    	            NodeUtil_js_1.default.setAttribute(mml, 'frame', this.dashed ? 'dashed' : 'solid');
    	        }
    	        else if (this.frame.length) {
    	            if (this.arraydef['rowlines']) {
    	                this.arraydef['rowlines'] =
    	                    this.arraydef['rowlines'].replace(/none( none)+$/, 'none');
    	            }
    	            NodeUtil_js_1.default.setAttribute(mml, 'frame', '');
    	            mml = this.create('node', 'menclose', [mml], { notation: this.frame.join(' ') });
    	            if ((this.arraydef['columnlines'] || 'none') !== 'none' ||
    	                (this.arraydef['rowlines'] || 'none') !== 'none') {
    	                NodeUtil_js_1.default.setAttribute(mml, 'data-padding', 0);
    	            }
    	        }
    	        if (this.getProperty('open') || this.getProperty('close')) {
    	            mml = ParseUtil_js_1.default.fenced(this.factory.configuration, this.getProperty('open'), mml, this.getProperty('close'));
    	        }
    	        return mml;
    	    };
    	    ArrayItem.prototype.EndEntry = function () {
    	        var mtd = this.create('node', 'mtd', this.nodes);
    	        if (this.hfill.length) {
    	            if (this.hfill[0] === 0) {
    	                NodeUtil_js_1.default.setAttribute(mtd, 'columnalign', 'right');
    	            }
    	            if (this.hfill[this.hfill.length - 1] === this.Size()) {
    	                NodeUtil_js_1.default.setAttribute(mtd, 'columnalign', NodeUtil_js_1.default.getAttribute(mtd, 'columnalign') ? 'center' : 'left');
    	            }
    	        }
    	        this.row.push(mtd);
    	        this.Clear();
    	        this.hfill = [];
    	    };
    	    ArrayItem.prototype.EndRow = function () {
    	        var node;
    	        if (this.getProperty('isNumbered') && this.row.length === 3) {
    	            this.row.unshift(this.row.pop());
    	            node = this.create('node', 'mlabeledtr', this.row);
    	        }
    	        else {
    	            node = this.create('node', 'mtr', this.row);
    	        }
    	        this.table.push(node);
    	        this.row = [];
    	    };
    	    ArrayItem.prototype.EndTable = function () {
    	        if (this.Size() || this.row.length) {
    	            this.EndEntry();
    	            this.EndRow();
    	        }
    	        this.checkLines();
    	    };
    	    ArrayItem.prototype.checkLines = function () {
    	        if (this.arraydef['rowlines']) {
    	            var lines = this.arraydef['rowlines'].split(/ /);
    	            if (lines.length === this.table.length) {
    	                this.frame.push('bottom');
    	                lines.pop();
    	                this.arraydef['rowlines'] = lines.join(' ');
    	            }
    	            else if (lines.length < this.table.length - 1) {
    	                this.arraydef['rowlines'] += ' none';
    	            }
    	        }
    	        if (this.getProperty('rowspacing')) {
    	            var rows = this.arraydef['rowspacing'].split(/ /);
    	            while (rows.length < this.table.length) {
    	                rows.push(this.getProperty('rowspacing') + 'em');
    	            }
    	            this.arraydef['rowspacing'] = rows.join(' ');
    	        }
    	    };
    	    ArrayItem.prototype.addRowSpacing = function (spacing) {
    	        if (this.arraydef['rowspacing']) {
    	            var rows = this.arraydef['rowspacing'].split(/ /);
    	            if (!this.getProperty('rowspacing')) {
    	                var dimem = ParseUtil_js_1.default.dimen2em(rows[0]);
    	                this.setProperty('rowspacing', dimem);
    	            }
    	            var rowspacing = this.getProperty('rowspacing');
    	            while (rows.length < this.table.length) {
    	                rows.push(ParseUtil_js_1.default.Em(rowspacing));
    	            }
    	            rows[this.table.length - 1] = ParseUtil_js_1.default.Em(Math.max(0, rowspacing + ParseUtil_js_1.default.dimen2em(spacing)));
    	            this.arraydef['rowspacing'] = rows.join(' ');
    	        }
    	    };
    	    return ArrayItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.ArrayItem = ArrayItem;
    	var EqnArrayItem = (function (_super) {
    	    __extends(EqnArrayItem, _super);
    	    function EqnArrayItem(factory) {
    	        var args = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            args[_i - 1] = arguments[_i];
    	        }
    	        var _this = _super.call(this, factory) || this;
    	        _this.maxrow = 0;
    	        _this.factory.configuration.tags.start(args[0], args[2], args[1]);
    	        return _this;
    	    }
    	    Object.defineProperty(EqnArrayItem.prototype, "kind", {
    	        get: function () {
    	            return 'eqnarray';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    EqnArrayItem.prototype.EndEntry = function () {
    	        if (this.row.length) {
    	            ParseUtil_js_1.default.fixInitialMO(this.factory.configuration, this.nodes);
    	        }
    	        var node = this.create('node', 'mtd', this.nodes);
    	        this.row.push(node);
    	        this.Clear();
    	    };
    	    EqnArrayItem.prototype.EndRow = function () {
    	        if (this.row.length > this.maxrow) {
    	            this.maxrow = this.row.length;
    	        }
    	        var mtr = 'mtr';
    	        var tag = this.factory.configuration.tags.getTag();
    	        if (tag) {
    	            this.row = [tag].concat(this.row);
    	            mtr = 'mlabeledtr';
    	        }
    	        this.factory.configuration.tags.clearTag();
    	        var node = this.create('node', mtr, this.row);
    	        this.table.push(node);
    	        this.row = [];
    	    };
    	    EqnArrayItem.prototype.EndTable = function () {
    	        _super.prototype.EndTable.call(this);
    	        this.factory.configuration.tags.end();
    	        this.extendArray('columnalign', this.maxrow);
    	        this.extendArray('columnwidth', this.maxrow);
    	        this.extendArray('columnspacing', this.maxrow - 1);
    	    };
    	    EqnArrayItem.prototype.extendArray = function (name, max) {
    	        if (!this.arraydef[name])
    	            return;
    	        var repeat = this.arraydef[name].split(/ /);
    	        var columns = __spreadArray([], __read(repeat), false);
    	        if (columns.length > 1) {
    	            while (columns.length < max) {
    	                columns.push.apply(columns, __spreadArray([], __read(repeat), false));
    	            }
    	            this.arraydef[name] = columns.slice(0, max).join(' ');
    	        }
    	    };
    	    return EqnArrayItem;
    	}(ArrayItem));
    	BaseItems.EqnArrayItem = EqnArrayItem;
    	var EquationItem = (function (_super) {
    	    __extends(EquationItem, _super);
    	    function EquationItem(factory) {
    	        var args = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            args[_i - 1] = arguments[_i];
    	        }
    	        var _this = _super.call(this, factory) || this;
    	        _this.factory.configuration.tags.start('equation', true, args[0]);
    	        return _this;
    	    }
    	    Object.defineProperty(EquationItem.prototype, "kind", {
    	        get: function () {
    	            return 'equation';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(EquationItem.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    EquationItem.prototype.checkItem = function (item) {
    	        if (item.isKind('end')) {
    	            var mml = this.toMml();
    	            var tag = this.factory.configuration.tags.getTag();
    	            this.factory.configuration.tags.end();
    	            return [[tag ? this.factory.configuration.tags.enTag(mml, tag) : mml, item], true];
    	        }
    	        if (item.isKind('stop')) {
    	            throw new TexError_js_1.default('EnvMissingEnd', 'Missing \\end{%1}', this.getName());
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    return EquationItem;
    	}(StackItem_js_1.BaseItem));
    	BaseItems.EquationItem = EquationItem;
    	
    	return BaseItems;
    }

    var BaseMappings = {};

    var TexConstants = {};

    var hasRequiredTexConstants;

    function requireTexConstants () {
    	if (hasRequiredTexConstants) return TexConstants;
    	hasRequiredTexConstants = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.TexConstant = undefined;
    		(function (TexConstant) {
    		    TexConstant.Variant = {
    		        NORMAL: 'normal',
    		        BOLD: 'bold',
    		        ITALIC: 'italic',
    		        BOLDITALIC: 'bold-italic',
    		        DOUBLESTRUCK: 'double-struck',
    		        FRAKTUR: 'fraktur',
    		        BOLDFRAKTUR: 'bold-fraktur',
    		        SCRIPT: 'script',
    		        BOLDSCRIPT: 'bold-script',
    		        SANSSERIF: 'sans-serif',
    		        BOLDSANSSERIF: 'bold-sans-serif',
    		        SANSSERIFITALIC: 'sans-serif-italic',
    		        SANSSERIFBOLDITALIC: 'sans-serif-bold-italic',
    		        MONOSPACE: 'monospace',
    		        INITIAL: 'inital',
    		        TAILED: 'tailed',
    		        LOOPED: 'looped',
    		        STRETCHED: 'stretched',
    		        CALLIGRAPHIC: '-tex-calligraphic',
    		        BOLDCALLIGRAPHIC: '-tex-bold-calligraphic',
    		        OLDSTYLE: '-tex-oldstyle',
    		        BOLDOLDSTYLE: '-tex-bold-oldstyle',
    		        MATHITALIC: '-tex-mathit'
    		    };
    		    TexConstant.Form = {
    		        PREFIX: 'prefix',
    		        INFIX: 'infix',
    		        POSTFIX: 'postfix'
    		    };
    		    TexConstant.LineBreak = {
    		        AUTO: 'auto',
    		        NEWLINE: 'newline',
    		        NOBREAK: 'nobreak',
    		        GOODBREAK: 'goodbreak',
    		        BADBREAK: 'badbreak'
    		    };
    		    TexConstant.LineBreakStyle = {
    		        BEFORE: 'before',
    		        AFTER: 'after',
    		        DUPLICATE: 'duplicate',
    		        INFIXLINBREAKSTYLE: 'infixlinebreakstyle'
    		    };
    		    TexConstant.IndentAlign = {
    		        LEFT: 'left',
    		        CENTER: 'center',
    		        RIGHT: 'right',
    		        AUTO: 'auto',
    		        ID: 'id',
    		        INDENTALIGN: 'indentalign'
    		    };
    		    TexConstant.IndentShift = {
    		        INDENTSHIFT: 'indentshift'
    		    };
    		    TexConstant.LineThickness = {
    		        THIN: 'thin',
    		        MEDIUM: 'medium',
    		        THICK: 'thick'
    		    };
    		    TexConstant.Notation = {
    		        LONGDIV: 'longdiv',
    		        ACTUARIAL: 'actuarial',
    		        PHASORANGLE: 'phasorangle',
    		        RADICAL: 'radical',
    		        BOX: 'box',
    		        ROUNDEDBOX: 'roundedbox',
    		        CIRCLE: 'circle',
    		        LEFT: 'left',
    		        RIGHT: 'right',
    		        TOP: 'top',
    		        BOTTOM: 'bottom',
    		        UPDIAGONALSTRIKE: 'updiagonalstrike',
    		        DOWNDIAGONALSTRIKE: 'downdiagonalstrike',
    		        VERTICALSTRIKE: 'verticalstrike',
    		        HORIZONTALSTRIKE: 'horizontalstrike',
    		        NORTHEASTARROW: 'northeastarrow',
    		        MADRUWB: 'madruwb',
    		        UPDIAGONALARROW: 'updiagonalarrow'
    		    };
    		    TexConstant.Align = {
    		        TOP: 'top',
    		        BOTTOM: 'bottom',
    		        CENTER: 'center',
    		        BASELINE: 'baseline',
    		        AXIS: 'axis',
    		        LEFT: 'left',
    		        RIGHT: 'right'
    		    };
    		    TexConstant.Lines = {
    		        NONE: 'none',
    		        SOLID: 'solid',
    		        DASHED: 'dashed'
    		    };
    		    TexConstant.Side = {
    		        LEFT: 'left',
    		        RIGHT: 'right',
    		        LEFTOVERLAP: 'leftoverlap',
    		        RIGHTOVERLAP: 'rightoverlap'
    		    };
    		    TexConstant.Width = {
    		        AUTO: 'auto',
    		        FIT: 'fit'
    		    };
    		    TexConstant.Actiontype = {
    		        TOGGLE: 'toggle',
    		        STATUSLINE: 'statusline',
    		        TOOLTIP: 'tooltip',
    		        INPUT: 'input'
    		    };
    		    TexConstant.Overflow = {
    		        LINBREAK: 'linebreak',
    		        SCROLL: 'scroll',
    		        ELIDE: 'elide',
    		        TRUNCATE: 'truncate',
    		        SCALE: 'scale'
    		    };
    		    TexConstant.Unit = {
    		        EM: 'em',
    		        EX: 'ex',
    		        PX: 'px',
    		        IN: 'in',
    		        CM: 'cm',
    		        MM: 'mm',
    		        PT: 'pt',
    		        PC: 'pc'
    		    };
    		})(exports.TexConstant || (exports.TexConstant = {}));
    		
    	} (TexConstants));
    	return TexConstants;
    }

    var BaseMethods = {};

    var lengths = {};

    var hasRequiredLengths;

    function requireLengths () {
    	if (hasRequiredLengths) return lengths;
    	hasRequiredLengths = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.px = exports.emRounded = exports.em = exports.percent = exports.length2em = exports.MATHSPACE = exports.RELUNITS = exports.UNITS = exports.BIGDIMEN = undefined;
    		exports.BIGDIMEN = 1000000;
    		exports.UNITS = {
    		    px: 1,
    		    'in': 96,
    		    cm: 96 / 2.54,
    		    mm: 96 / 25.4
    		};
    		exports.RELUNITS = {
    		    em: 1,
    		    ex: .431,
    		    pt: 1 / 10,
    		    pc: 12 / 10,
    		    mu: 1 / 18
    		};
    		exports.MATHSPACE = {
    		    veryverythinmathspace: 1 / 18,
    		    verythinmathspace: 2 / 18,
    		    thinmathspace: 3 / 18,
    		    mediummathspace: 4 / 18,
    		    thickmathspace: 5 / 18,
    		    verythickmathspace: 6 / 18,
    		    veryverythickmathspace: 7 / 18,
    		    negativeveryverythinmathspace: -1 / 18,
    		    negativeverythinmathspace: -2 / 18,
    		    negativethinmathspace: -3 / 18,
    		    negativemediummathspace: -4 / 18,
    		    negativethickmathspace: -5 / 18,
    		    negativeverythickmathspace: -6 / 18,
    		    negativeveryverythickmathspace: -7 / 18,
    		    thin: .04,
    		    medium: .06,
    		    thick: .1,
    		    normal: 1,
    		    big: 2,
    		    small: 1 / Math.sqrt(2),
    		    infinity: exports.BIGDIMEN
    		};
    		function length2em(length, size, scale, em) {
    		    if (size === undefined) { size = 0; }
    		    if (scale === undefined) { scale = 1; }
    		    if (em === undefined) { em = 16; }
    		    if (typeof length !== 'string') {
    		        length = String(length);
    		    }
    		    if (length === '' || length == null) {
    		        return size;
    		    }
    		    if (exports.MATHSPACE[length]) {
    		        return exports.MATHSPACE[length];
    		    }
    		    var match = length.match(/^\s*([-+]?(?:\.\d+|\d+(?:\.\d*)?))?(pt|em|ex|mu|px|pc|in|mm|cm|%)?/);
    		    if (!match) {
    		        return size;
    		    }
    		    var m = parseFloat(match[1] || '1'), unit = match[2];
    		    if (exports.UNITS.hasOwnProperty(unit)) {
    		        return m * exports.UNITS[unit] / em / scale;
    		    }
    		    if (exports.RELUNITS.hasOwnProperty(unit)) {
    		        return m * exports.RELUNITS[unit];
    		    }
    		    if (unit === '%') {
    		        return m / 100 * size;
    		    }
    		    return m * size;
    		}
    		exports.length2em = length2em;
    		function percent(m) {
    		    return (100 * m).toFixed(1).replace(/\.?0+$/, '') + '%';
    		}
    		exports.percent = percent;
    		function em(m) {
    		    if (Math.abs(m) < .001)
    		        return '0';
    		    return (m.toFixed(3).replace(/\.?0+$/, '')) + 'em';
    		}
    		exports.em = em;
    		function emRounded(m, em) {
    		    if (em === undefined) { em = 16; }
    		    m = (Math.round(m * em) + .05) / em;
    		    if (Math.abs(m) < .001)
    		        return '0em';
    		    return m.toFixed(3).replace(/\.?0+$/, '') + 'em';
    		}
    		exports.emRounded = emRounded;
    		function px(m, M, em) {
    		    if (M === undefined) { M = -exports.BIGDIMEN; }
    		    if (em === undefined) { em = 16; }
    		    m *= em;
    		    if (M && m < M)
    		        m = M;
    		    if (Math.abs(m) < .1)
    		        return '0';
    		    return m.toFixed(1).replace(/\.0$/, '') + 'px';
    		}
    		exports.px = px;
    		
    	} (lengths));
    	return lengths;
    }

    var hasRequiredBaseMethods;

    function requireBaseMethods () {
    	if (hasRequiredBaseMethods) return BaseMethods;
    	hasRequiredBaseMethods = 1;
    	var __assign = (BaseMethods.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __createBinding = (BaseMethods.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (BaseMethods.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (BaseMethods.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __read = (BaseMethods.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __importDefault = (BaseMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BaseMethods, "__esModule", { value: true });
    	var sitem = __importStar(requireBaseItems());
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var TexConstants_js_1 = requireTexConstants();
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var MmlNode_js_1 = requireMmlNode();
    	var Tags_js_1 = requireTags();
    	var lengths_js_1 = requireLengths();
    	var Entities_js_1 = requireEntities();
    	var Options_js_1 = requireOptions();
    	var BaseMethods$1 = {};
    	var P_HEIGHT = 1.2 / .85;
    	var MmlTokenAllow = {
    	    fontfamily: 1, fontsize: 1, fontweight: 1, fontstyle: 1,
    	    color: 1, background: 1,
    	    id: 1, 'class': 1, href: 1, style: 1
    	};
    	BaseMethods$1.Open = function (parser, _c) {
    	    parser.Push(parser.itemFactory.create('open'));
    	};
    	BaseMethods$1.Close = function (parser, _c) {
    	    parser.Push(parser.itemFactory.create('close'));
    	};
    	BaseMethods$1.Tilde = function (parser, _c) {
    	    parser.Push(parser.create('token', 'mtext', {}, Entities_js_1.entities.nbsp));
    	};
    	BaseMethods$1.Space = function (_parser, _c) { };
    	BaseMethods$1.Superscript = function (parser, _c) {
    	    var _a;
    	    if (parser.GetNext().match(/\d/)) {
    	        parser.string = parser.string.substr(0, parser.i + 1) +
    	            ' ' + parser.string.substr(parser.i + 1);
    	    }
    	    var primes;
    	    var base;
    	    var top = parser.stack.Top();
    	    if (top.isKind('prime')) {
    	        _a = __read(top.Peek(2), 2), base = _a[0], primes = _a[1];
    	        parser.stack.Pop();
    	    }
    	    else {
    	        base = parser.stack.Prev();
    	        if (!base) {
    	            base = parser.create('token', 'mi', {}, '');
    	        }
    	    }
    	    var movesupsub = NodeUtil_js_1.default.getProperty(base, 'movesupsub');
    	    var position = NodeUtil_js_1.default.isType(base, 'msubsup') ? base.sup :
    	        base.over;
    	    if ((NodeUtil_js_1.default.isType(base, 'msubsup') && !NodeUtil_js_1.default.isType(base, 'msup') &&
    	        NodeUtil_js_1.default.getChildAt(base, base.sup)) ||
    	        (NodeUtil_js_1.default.isType(base, 'munderover') && !NodeUtil_js_1.default.isType(base, 'mover') &&
    	            NodeUtil_js_1.default.getChildAt(base, base.over) &&
    	            !NodeUtil_js_1.default.getProperty(base, 'subsupOK'))) {
    	        throw new TexError_js_1.default('DoubleExponent', 'Double exponent: use braces to clarify');
    	    }
    	    if (!NodeUtil_js_1.default.isType(base, 'msubsup') || NodeUtil_js_1.default.isType(base, 'msup')) {
    	        if (movesupsub) {
    	            if (!NodeUtil_js_1.default.isType(base, 'munderover') || NodeUtil_js_1.default.isType(base, 'mover') ||
    	                NodeUtil_js_1.default.getChildAt(base, base.over)) {
    	                base = parser.create('node', 'munderover', [base], { movesupsub: true });
    	            }
    	            position = base.over;
    	        }
    	        else {
    	            base = parser.create('node', 'msubsup', [base]);
    	            position = base.sup;
    	        }
    	    }
    	    parser.Push(parser.itemFactory.create('subsup', base).setProperties({
    	        position: position, primes: primes, movesupsub: movesupsub
    	    }));
    	};
    	BaseMethods$1.Subscript = function (parser, _c) {
    	    var _a;
    	    if (parser.GetNext().match(/\d/)) {
    	        parser.string =
    	            parser.string.substr(0, parser.i + 1) + ' ' +
    	                parser.string.substr(parser.i + 1);
    	    }
    	    var primes, base;
    	    var top = parser.stack.Top();
    	    if (top.isKind('prime')) {
    	        _a = __read(top.Peek(2), 2), base = _a[0], primes = _a[1];
    	        parser.stack.Pop();
    	    }
    	    else {
    	        base = parser.stack.Prev();
    	        if (!base) {
    	            base = parser.create('token', 'mi', {}, '');
    	        }
    	    }
    	    var movesupsub = NodeUtil_js_1.default.getProperty(base, 'movesupsub');
    	    var position = NodeUtil_js_1.default.isType(base, 'msubsup') ?
    	        base.sub : base.under;
    	    if ((NodeUtil_js_1.default.isType(base, 'msubsup') && !NodeUtil_js_1.default.isType(base, 'msup') &&
    	        NodeUtil_js_1.default.getChildAt(base, base.sub)) ||
    	        (NodeUtil_js_1.default.isType(base, 'munderover') && !NodeUtil_js_1.default.isType(base, 'mover') &&
    	            NodeUtil_js_1.default.getChildAt(base, base.under) &&
    	            !NodeUtil_js_1.default.getProperty(base, 'subsupOK'))) {
    	        throw new TexError_js_1.default('DoubleSubscripts', 'Double subscripts: use braces to clarify');
    	    }
    	    if (!NodeUtil_js_1.default.isType(base, 'msubsup') || NodeUtil_js_1.default.isType(base, 'msup')) {
    	        if (movesupsub) {
    	            if (!NodeUtil_js_1.default.isType(base, 'munderover') || NodeUtil_js_1.default.isType(base, 'mover') ||
    	                NodeUtil_js_1.default.getChildAt(base, base.under)) {
    	                base = parser.create('node', 'munderover', [base], { movesupsub: true });
    	            }
    	            position = base.under;
    	        }
    	        else {
    	            base = parser.create('node', 'msubsup', [base]);
    	            position = base.sub;
    	        }
    	    }
    	    parser.Push(parser.itemFactory.create('subsup', base).setProperties({
    	        position: position, primes: primes, movesupsub: movesupsub
    	    }));
    	};
    	BaseMethods$1.Prime = function (parser, c) {
    	    var base = parser.stack.Prev();
    	    if (!base) {
    	        base = parser.create('node', 'mi');
    	    }
    	    if (NodeUtil_js_1.default.isType(base, 'msubsup') && !NodeUtil_js_1.default.isType(base, 'msup') &&
    	        NodeUtil_js_1.default.getChildAt(base, base.sup)) {
    	        throw new TexError_js_1.default('DoubleExponentPrime', 'Prime causes double exponent: use braces to clarify');
    	    }
    	    var sup = '';
    	    parser.i--;
    	    do {
    	        sup += Entities_js_1.entities.prime;
    	        parser.i++, c = parser.GetNext();
    	    } while (c === '\'' || c === Entities_js_1.entities.rsquo);
    	    sup = ['', '\u2032', '\u2033', '\u2034', '\u2057'][sup.length] || sup;
    	    var node = parser.create('token', 'mo', { variantForm: true }, sup);
    	    parser.Push(parser.itemFactory.create('prime', base, node));
    	};
    	BaseMethods$1.Comment = function (parser, _c) {
    	    while (parser.i < parser.string.length && parser.string.charAt(parser.i) !== '\n') {
    	        parser.i++;
    	    }
    	};
    	BaseMethods$1.Hash = function (_parser, _c) {
    	    throw new TexError_js_1.default('CantUseHash1', 'You can\'t use \'macro parameter character #\' in math mode');
    	};
    	BaseMethods$1.MathFont = function (parser, name, variant) {
    	    var text = parser.GetArgument(name);
    	    var mml = new TexParser_js_1.default(text, __assign(__assign({}, parser.stack.env), { font: variant, multiLetterIdentifiers: /^[a-zA-Z]+/, noAutoOP: true }), parser.configuration).mml();
    	    parser.Push(parser.create('node', 'TeXAtom', [mml]));
    	};
    	BaseMethods$1.SetFont = function (parser, _name, font) {
    	    parser.stack.env['font'] = font;
    	};
    	BaseMethods$1.SetStyle = function (parser, _name, texStyle, style, level) {
    	    parser.stack.env['style'] = texStyle;
    	    parser.stack.env['level'] = level;
    	    parser.Push(parser.itemFactory.create('style').setProperty('styles', { displaystyle: style, scriptlevel: level }));
    	};
    	BaseMethods$1.SetSize = function (parser, _name, size) {
    	    parser.stack.env['size'] = size;
    	    parser.Push(parser.itemFactory.create('style').setProperty('styles', { mathsize: (0, lengths_js_1.em)(size) }));
    	};
    	BaseMethods$1.Spacer = function (parser, _name, space) {
    	    var node = parser.create('node', 'mspace', [], { width: (0, lengths_js_1.em)(space) });
    	    var style = parser.create('node', 'mstyle', [node], { scriptlevel: 0 });
    	    parser.Push(style);
    	};
    	BaseMethods$1.LeftRight = function (parser, name) {
    	    var first = name.substr(1);
    	    parser.Push(parser.itemFactory.create(first, parser.GetDelimiter(name), parser.stack.env.color));
    	};
    	BaseMethods$1.NamedFn = function (parser, name, id) {
    	    if (!id) {
    	        id = name.substr(1);
    	    }
    	    var mml = parser.create('token', 'mi', { texClass: MmlNode_js_1.TEXCLASS.OP }, id);
    	    parser.Push(parser.itemFactory.create('fn', mml));
    	};
    	BaseMethods$1.NamedOp = function (parser, name, id) {
    	    if (!id) {
    	        id = name.substr(1);
    	    }
    	    id = id.replace(/&thinsp;/, '\u2006');
    	    var mml = parser.create('token', 'mo', {
    	        movablelimits: true,
    	        movesupsub: true,
    	        form: TexConstants_js_1.TexConstant.Form.PREFIX,
    	        texClass: MmlNode_js_1.TEXCLASS.OP
    	    }, id);
    	    parser.Push(mml);
    	};
    	BaseMethods$1.Limits = function (parser, _name, limits) {
    	    var op = parser.stack.Prev(true);
    	    if (!op || (NodeUtil_js_1.default.getTexClass(NodeUtil_js_1.default.getCoreMO(op)) !== MmlNode_js_1.TEXCLASS.OP &&
    	        NodeUtil_js_1.default.getProperty(op, 'movesupsub') == null)) {
    	        throw new TexError_js_1.default('MisplacedLimits', '%1 is allowed only on operators', parser.currentCS);
    	    }
    	    var top = parser.stack.Top();
    	    var node;
    	    if (NodeUtil_js_1.default.isType(op, 'munderover') && !limits) {
    	        node = parser.create('node', 'msubsup');
    	        NodeUtil_js_1.default.copyChildren(op, node);
    	        op = top.Last = node;
    	    }
    	    else if (NodeUtil_js_1.default.isType(op, 'msubsup') && limits) {
    	        node = parser.create('node', 'munderover');
    	        NodeUtil_js_1.default.copyChildren(op, node);
    	        op = top.Last = node;
    	    }
    	    NodeUtil_js_1.default.setProperty(op, 'movesupsub', limits ? true : false);
    	    NodeUtil_js_1.default.setProperties(NodeUtil_js_1.default.getCoreMO(op), { 'movablelimits': false });
    	    if (NodeUtil_js_1.default.getAttribute(op, 'movablelimits') ||
    	        NodeUtil_js_1.default.getProperty(op, 'movablelimits')) {
    	        NodeUtil_js_1.default.setProperties(op, { 'movablelimits': false });
    	    }
    	};
    	BaseMethods$1.Over = function (parser, name, open, close) {
    	    var mml = parser.itemFactory.create('over').setProperty('name', parser.currentCS);
    	    if (open || close) {
    	        mml.setProperty('open', open);
    	        mml.setProperty('close', close);
    	    }
    	    else if (name.match(/withdelims$/)) {
    	        mml.setProperty('open', parser.GetDelimiter(name));
    	        mml.setProperty('close', parser.GetDelimiter(name));
    	    }
    	    if (name.match(/^\\above/)) {
    	        mml.setProperty('thickness', parser.GetDimen(name));
    	    }
    	    else if (name.match(/^\\atop/) || open || close) {
    	        mml.setProperty('thickness', 0);
    	    }
    	    parser.Push(mml);
    	};
    	BaseMethods$1.Frac = function (parser, name) {
    	    var num = parser.ParseArg(name);
    	    var den = parser.ParseArg(name);
    	    var node = parser.create('node', 'mfrac', [num, den]);
    	    parser.Push(node);
    	};
    	BaseMethods$1.Sqrt = function (parser, name) {
    	    var n = parser.GetBrackets(name);
    	    var arg = parser.GetArgument(name);
    	    if (arg === '\\frac') {
    	        arg += '{' + parser.GetArgument(arg) + '}{' + parser.GetArgument(arg) + '}';
    	    }
    	    var mml = new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml();
    	    if (!n) {
    	        mml = parser.create('node', 'msqrt', [mml]);
    	    }
    	    else {
    	        mml = parser.create('node', 'mroot', [mml, parseRoot(parser, n)]);
    	    }
    	    parser.Push(mml);
    	};
    	function parseRoot(parser, n) {
    	    var env = parser.stack.env;
    	    var inRoot = env['inRoot'];
    	    env['inRoot'] = true;
    	    var newParser = new TexParser_js_1.default(n, env, parser.configuration);
    	    var node = newParser.mml();
    	    var global = newParser.stack.global;
    	    if (global['leftRoot'] || global['upRoot']) {
    	        var def = {};
    	        if (global['leftRoot']) {
    	            def['width'] = global['leftRoot'];
    	        }
    	        if (global['upRoot']) {
    	            def['voffset'] = global['upRoot'];
    	            def['height'] = global['upRoot'];
    	        }
    	        node = parser.create('node', 'mpadded', [node], def);
    	    }
    	    env['inRoot'] = inRoot;
    	    return node;
    	}
    	BaseMethods$1.Root = function (parser, name) {
    	    var n = parser.GetUpTo(name, '\\of');
    	    var arg = parser.ParseArg(name);
    	    var node = parser.create('node', 'mroot', [arg, parseRoot(parser, n)]);
    	    parser.Push(node);
    	};
    	BaseMethods$1.MoveRoot = function (parser, name, id) {
    	    if (!parser.stack.env['inRoot']) {
    	        throw new TexError_js_1.default('MisplacedMoveRoot', '%1 can appear only within a root', parser.currentCS);
    	    }
    	    if (parser.stack.global[id]) {
    	        throw new TexError_js_1.default('MultipleMoveRoot', 'Multiple use of %1', parser.currentCS);
    	    }
    	    var n = parser.GetArgument(name);
    	    if (!n.match(/-?[0-9]+/)) {
    	        throw new TexError_js_1.default('IntegerArg', 'The argument to %1 must be an integer', parser.currentCS);
    	    }
    	    n = (parseInt(n, 10) / 15) + 'em';
    	    if (n.substr(0, 1) !== '-') {
    	        n = '+' + n;
    	    }
    	    parser.stack.global[id] = n;
    	};
    	BaseMethods$1.Accent = function (parser, name, accent, stretchy) {
    	    var c = parser.ParseArg(name);
    	    var def = __assign(__assign({}, ParseUtil_js_1.default.getFontDef(parser)), { accent: true, mathaccent: true });
    	    var entity = NodeUtil_js_1.default.createEntity(accent);
    	    var moNode = parser.create('token', 'mo', def, entity);
    	    var mml = moNode;
    	    NodeUtil_js_1.default.setAttribute(mml, 'stretchy', stretchy ? true : false);
    	    var mo = (NodeUtil_js_1.default.isEmbellished(c) ? NodeUtil_js_1.default.getCoreMO(c) : c);
    	    if (NodeUtil_js_1.default.isType(mo, 'mo') || NodeUtil_js_1.default.getProperty(mo, 'movablelimits')) {
    	        NodeUtil_js_1.default.setProperties(mo, { 'movablelimits': false });
    	    }
    	    var muoNode = parser.create('node', 'munderover');
    	    NodeUtil_js_1.default.setChild(muoNode, 0, c);
    	    NodeUtil_js_1.default.setChild(muoNode, 1, null);
    	    NodeUtil_js_1.default.setChild(muoNode, 2, mml);
    	    var texAtom = parser.create('node', 'TeXAtom', [muoNode]);
    	    parser.Push(texAtom);
    	};
    	BaseMethods$1.UnderOver = function (parser, name, c, stack) {
    	    var entity = NodeUtil_js_1.default.createEntity(c);
    	    var mo = parser.create('token', 'mo', { stretchy: true, accent: true }, entity);
    	    var pos = (name.charAt(1) === 'o' ? 'over' : 'under');
    	    var base = parser.ParseArg(name);
    	    parser.Push(ParseUtil_js_1.default.underOver(parser, base, mo, pos, stack));
    	};
    	BaseMethods$1.Overset = function (parser, name) {
    	    var top = parser.ParseArg(name);
    	    var base = parser.ParseArg(name);
    	    ParseUtil_js_1.default.checkMovableLimits(base);
    	    if (top.isKind('mo')) {
    	        NodeUtil_js_1.default.setAttribute(top, 'accent', false);
    	    }
    	    var node = parser.create('node', 'mover', [base, top]);
    	    parser.Push(node);
    	};
    	BaseMethods$1.Underset = function (parser, name) {
    	    var bot = parser.ParseArg(name);
    	    var base = parser.ParseArg(name);
    	    ParseUtil_js_1.default.checkMovableLimits(base);
    	    if (bot.isKind('mo')) {
    	        NodeUtil_js_1.default.setAttribute(bot, 'accent', false);
    	    }
    	    var node = parser.create('node', 'munder', [base, bot], { accentunder: false });
    	    parser.Push(node);
    	};
    	BaseMethods$1.Overunderset = function (parser, name) {
    	    var top = parser.ParseArg(name);
    	    var bot = parser.ParseArg(name);
    	    var base = parser.ParseArg(name);
    	    ParseUtil_js_1.default.checkMovableLimits(base);
    	    if (top.isKind('mo')) {
    	        NodeUtil_js_1.default.setAttribute(top, 'accent', false);
    	    }
    	    if (bot.isKind('mo')) {
    	        NodeUtil_js_1.default.setAttribute(bot, 'accent', false);
    	    }
    	    var node = parser.create('node', 'munderover', [base, bot, top], { accent: false, accentunder: false });
    	    parser.Push(node);
    	};
    	BaseMethods$1.TeXAtom = function (parser, name, mclass) {
    	    var def = { texClass: mclass };
    	    var mml;
    	    var node;
    	    var parsed;
    	    if (mclass === MmlNode_js_1.TEXCLASS.OP) {
    	        def['movesupsub'] = def['movablelimits'] = true;
    	        var arg = parser.GetArgument(name);
    	        var match = arg.match(/^\s*\\rm\s+([a-zA-Z0-9 ]+)$/);
    	        if (match) {
    	            def['mathvariant'] = TexConstants_js_1.TexConstant.Variant.NORMAL;
    	            node = parser.create('token', 'mi', def, match[1]);
    	        }
    	        else {
    	            parsed = new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml();
    	            node = parser.create('node', 'TeXAtom', [parsed], def);
    	        }
    	        mml = parser.itemFactory.create('fn', node);
    	    }
    	    else {
    	        parsed = parser.ParseArg(name);
    	        mml = parser.create('node', 'TeXAtom', [parsed], def);
    	    }
    	    parser.Push(mml);
    	};
    	BaseMethods$1.MmlToken = function (parser, name) {
    	    var kind = parser.GetArgument(name);
    	    var attr = parser.GetBrackets(name, '').replace(/^\s+/, '');
    	    var text = parser.GetArgument(name);
    	    var def = {};
    	    var keep = [];
    	    var node;
    	    try {
    	        node = parser.create('node', kind);
    	    }
    	    catch (e) {
    	        node = null;
    	    }
    	    if (!node || !node.isToken) {
    	        throw new TexError_js_1.default('NotMathMLToken', '%1 is not a token element', kind);
    	    }
    	    while (attr !== '') {
    	        var match = attr.match(/^([a-z]+)\s*=\s*('[^']*'|"[^"]*"|[^ ,]*)\s*,?\s*/i);
    	        if (!match) {
    	            throw new TexError_js_1.default('InvalidMathMLAttr', 'Invalid MathML attribute: %1', attr);
    	        }
    	        if (!node.attributes.hasDefault(match[1]) && !MmlTokenAllow[match[1]]) {
    	            throw new TexError_js_1.default('UnknownAttrForElement', '%1 is not a recognized attribute for %2', match[1], kind);
    	        }
    	        var value = ParseUtil_js_1.default.MmlFilterAttribute(parser, match[1], match[2].replace(/^(['"])(.*)\1$/, '$2'));
    	        if (value) {
    	            if (value.toLowerCase() === 'true') {
    	                value = true;
    	            }
    	            else if (value.toLowerCase() === 'false') {
    	                value = false;
    	            }
    	            def[match[1]] = value;
    	            keep.push(match[1]);
    	        }
    	        attr = attr.substr(match[0].length);
    	    }
    	    if (keep.length) {
    	        def['mjx-keep-attrs'] = keep.join(' ');
    	    }
    	    var textNode = parser.create('text', text);
    	    node.appendChild(textNode);
    	    NodeUtil_js_1.default.setProperties(node, def);
    	    parser.Push(node);
    	};
    	BaseMethods$1.Strut = function (parser, _name) {
    	    var row = parser.create('node', 'mrow');
    	    var padded = parser.create('node', 'mpadded', [row], { height: '8.6pt', depth: '3pt', width: 0 });
    	    parser.Push(padded);
    	};
    	BaseMethods$1.Phantom = function (parser, name, v, h) {
    	    var box = parser.create('node', 'mphantom', [parser.ParseArg(name)]);
    	    if (v || h) {
    	        box = parser.create('node', 'mpadded', [box]);
    	        if (h) {
    	            NodeUtil_js_1.default.setAttribute(box, 'height', 0);
    	            NodeUtil_js_1.default.setAttribute(box, 'depth', 0);
    	        }
    	        if (v) {
    	            NodeUtil_js_1.default.setAttribute(box, 'width', 0);
    	        }
    	    }
    	    var atom = parser.create('node', 'TeXAtom', [box]);
    	    parser.Push(atom);
    	};
    	BaseMethods$1.Smash = function (parser, name) {
    	    var bt = ParseUtil_js_1.default.trimSpaces(parser.GetBrackets(name, ''));
    	    var smash = parser.create('node', 'mpadded', [parser.ParseArg(name)]);
    	    switch (bt) {
    	        case 'b':
    	            NodeUtil_js_1.default.setAttribute(smash, 'depth', 0);
    	            break;
    	        case 't':
    	            NodeUtil_js_1.default.setAttribute(smash, 'height', 0);
    	            break;
    	        default:
    	            NodeUtil_js_1.default.setAttribute(smash, 'height', 0);
    	            NodeUtil_js_1.default.setAttribute(smash, 'depth', 0);
    	    }
    	    var atom = parser.create('node', 'TeXAtom', [smash]);
    	    parser.Push(atom);
    	};
    	BaseMethods$1.Lap = function (parser, name) {
    	    var mml = parser.create('node', 'mpadded', [parser.ParseArg(name)], { width: 0 });
    	    if (name === '\\llap') {
    	        NodeUtil_js_1.default.setAttribute(mml, 'lspace', '-1width');
    	    }
    	    var atom = parser.create('node', 'TeXAtom', [mml]);
    	    parser.Push(atom);
    	};
    	BaseMethods$1.RaiseLower = function (parser, name) {
    	    var h = parser.GetDimen(name);
    	    var item = parser.itemFactory.create('position').setProperties({ name: parser.currentCS, move: 'vertical' });
    	    if (h.charAt(0) === '-') {
    	        h = h.slice(1);
    	        name = name.substr(1) === 'raise' ? '\\lower' : '\\raise';
    	    }
    	    if (name === '\\lower') {
    	        item.setProperty('dh', '-' + h);
    	        item.setProperty('dd', '+' + h);
    	    }
    	    else {
    	        item.setProperty('dh', '+' + h);
    	        item.setProperty('dd', '-' + h);
    	    }
    	    parser.Push(item);
    	};
    	BaseMethods$1.MoveLeftRight = function (parser, name) {
    	    var h = parser.GetDimen(name);
    	    var nh = (h.charAt(0) === '-' ? h.slice(1) : '-' + h);
    	    if (name === '\\moveleft') {
    	        var tmp = h;
    	        h = nh;
    	        nh = tmp;
    	    }
    	    parser.Push(parser.itemFactory.create('position').setProperties({
    	        name: parser.currentCS, move: 'horizontal',
    	        left: parser.create('node', 'mspace', [], { width: h }),
    	        right: parser.create('node', 'mspace', [], { width: nh })
    	    }));
    	};
    	BaseMethods$1.Hskip = function (parser, name) {
    	    var node = parser.create('node', 'mspace', [], { width: parser.GetDimen(name) });
    	    parser.Push(node);
    	};
    	BaseMethods$1.Nonscript = function (parser, _name) {
    	    parser.Push(parser.itemFactory.create('nonscript'));
    	};
    	BaseMethods$1.Rule = function (parser, name, style) {
    	    var w = parser.GetDimen(name), h = parser.GetDimen(name), d = parser.GetDimen(name);
    	    var def = { width: w, height: h, depth: d };
    	    if (style !== 'blank') {
    	        def['mathbackground'] = (parser.stack.env['color'] || 'black');
    	    }
    	    var node = parser.create('node', 'mspace', [], def);
    	    parser.Push(node);
    	};
    	BaseMethods$1.rule = function (parser, name) {
    	    var v = parser.GetBrackets(name), w = parser.GetDimen(name), h = parser.GetDimen(name);
    	    var mml = parser.create('node', 'mspace', [], {
    	        width: w, height: h,
    	        mathbackground: (parser.stack.env['color'] || 'black')
    	    });
    	    if (v) {
    	        mml = parser.create('node', 'mpadded', [mml], { voffset: v });
    	        if (v.match(/^\-/)) {
    	            NodeUtil_js_1.default.setAttribute(mml, 'height', v);
    	            NodeUtil_js_1.default.setAttribute(mml, 'depth', '+' + v.substr(1));
    	        }
    	        else {
    	            NodeUtil_js_1.default.setAttribute(mml, 'height', '+' + v);
    	        }
    	    }
    	    parser.Push(mml);
    	};
    	BaseMethods$1.MakeBig = function (parser, name, mclass, size) {
    	    size *= P_HEIGHT;
    	    var sizeStr = String(size).replace(/(\.\d\d\d).+/, '$1') + 'em';
    	    var delim = parser.GetDelimiter(name, true);
    	    var mo = parser.create('token', 'mo', {
    	        minsize: sizeStr, maxsize: sizeStr,
    	        fence: true, stretchy: true, symmetric: true
    	    }, delim);
    	    var node = parser.create('node', 'TeXAtom', [mo], { texClass: mclass });
    	    parser.Push(node);
    	};
    	BaseMethods$1.BuildRel = function (parser, name) {
    	    var top = parser.ParseUpTo(name, '\\over');
    	    var bot = parser.ParseArg(name);
    	    var node = parser.create('node', 'munderover');
    	    NodeUtil_js_1.default.setChild(node, 0, bot);
    	    NodeUtil_js_1.default.setChild(node, 1, null);
    	    NodeUtil_js_1.default.setChild(node, 2, top);
    	    var atom = parser.create('node', 'TeXAtom', [node], { texClass: MmlNode_js_1.TEXCLASS.REL });
    	    parser.Push(atom);
    	};
    	BaseMethods$1.HBox = function (parser, name, style, font) {
    	    parser.PushAll(ParseUtil_js_1.default.internalMath(parser, parser.GetArgument(name), style, font));
    	};
    	BaseMethods$1.FBox = function (parser, name) {
    	    var internal = ParseUtil_js_1.default.internalMath(parser, parser.GetArgument(name));
    	    var node = parser.create('node', 'menclose', internal, { notation: 'box' });
    	    parser.Push(node);
    	};
    	BaseMethods$1.FrameBox = function (parser, name) {
    	    var width = parser.GetBrackets(name);
    	    var pos = parser.GetBrackets(name) || 'c';
    	    var mml = ParseUtil_js_1.default.internalMath(parser, parser.GetArgument(name));
    	    if (width) {
    	        mml = [parser.create('node', 'mpadded', mml, {
    	                width: width,
    	                'data-align': (0, Options_js_1.lookup)(pos, { l: 'left', r: 'right' }, 'center')
    	            })];
    	    }
    	    var node = parser.create('node', 'TeXAtom', [parser.create('node', 'menclose', mml, { notation: 'box' })], { texClass: MmlNode_js_1.TEXCLASS.ORD });
    	    parser.Push(node);
    	};
    	BaseMethods$1.Not = function (parser, _name) {
    	    parser.Push(parser.itemFactory.create('not'));
    	};
    	BaseMethods$1.Dots = function (parser, _name) {
    	    var ldotsEntity = NodeUtil_js_1.default.createEntity('2026');
    	    var cdotsEntity = NodeUtil_js_1.default.createEntity('22EF');
    	    var ldots = parser.create('token', 'mo', { stretchy: false }, ldotsEntity);
    	    var cdots = parser.create('token', 'mo', { stretchy: false }, cdotsEntity);
    	    parser.Push(parser.itemFactory.create('dots').setProperties({
    	        ldots: ldots,
    	        cdots: cdots
    	    }));
    	};
    	BaseMethods$1.Matrix = function (parser, _name, open, close, align, spacing, vspacing, style, cases, numbered) {
    	    var c = parser.GetNext();
    	    if (c === '') {
    	        throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', parser.currentCS);
    	    }
    	    if (c === '{') {
    	        parser.i++;
    	    }
    	    else {
    	        parser.string = c + '}' + parser.string.slice(parser.i + 1);
    	        parser.i = 0;
    	    }
    	    var array = parser.itemFactory.create('array').setProperty('requireClose', true);
    	    array.arraydef = {
    	        rowspacing: (vspacing || '4pt'),
    	        columnspacing: (spacing || '1em')
    	    };
    	    if (cases) {
    	        array.setProperty('isCases', true);
    	    }
    	    if (numbered) {
    	        array.setProperty('isNumbered', true);
    	        array.arraydef.side = numbered;
    	    }
    	    if (open || close) {
    	        array.setProperty('open', open);
    	        array.setProperty('close', close);
    	    }
    	    if (style === 'D') {
    	        array.arraydef.displaystyle = true;
    	    }
    	    if (align != null) {
    	        array.arraydef.columnalign = align;
    	    }
    	    parser.Push(array);
    	};
    	BaseMethods$1.Entry = function (parser, name) {
    	    parser.Push(parser.itemFactory.create('cell').setProperties({ isEntry: true, name: name }));
    	    var top = parser.stack.Top();
    	    var env = top.getProperty('casesEnv');
    	    var cases = top.getProperty('isCases');
    	    if (!cases && !env)
    	        return;
    	    var str = parser.string;
    	    var braces = 0, close = -1, i = parser.i, m = str.length;
    	    var end = (env ? new RegExp("^\\\\end\\s*\\{".concat(env.replace(/\*/, '\\*'), "\\}")) : null);
    	    while (i < m) {
    	        var c = str.charAt(i);
    	        if (c === '{') {
    	            braces++;
    	            i++;
    	        }
    	        else if (c === '}') {
    	            if (braces === 0) {
    	                m = 0;
    	            }
    	            else {
    	                braces--;
    	                if (braces === 0 && close < 0) {
    	                    close = i - parser.i;
    	                }
    	                i++;
    	            }
    	        }
    	        else if (c === '&' && braces === 0) {
    	            throw new TexError_js_1.default('ExtraAlignTab', 'Extra alignment tab in \\cases text');
    	        }
    	        else if (c === '\\') {
    	            var rest = str.substr(i);
    	            if (rest.match(/^((\\cr)[^a-zA-Z]|\\\\)/) || (end && rest.match(end))) {
    	                m = 0;
    	            }
    	            else {
    	                i += 2;
    	            }
    	        }
    	        else {
    	            i++;
    	        }
    	    }
    	    var text = str.substr(parser.i, i - parser.i);
    	    if (!text.match(/^\s*\\text[^a-zA-Z]/) || close !== text.replace(/\s+$/, '').length - 1) {
    	        var internal = ParseUtil_js_1.default.internalMath(parser, ParseUtil_js_1.default.trimSpaces(text), 0);
    	        parser.PushAll(internal);
    	        parser.i = i;
    	    }
    	};
    	BaseMethods$1.Cr = function (parser, name) {
    	    parser.Push(parser.itemFactory.create('cell').setProperties({ isCR: true, name: name }));
    	};
    	BaseMethods$1.CrLaTeX = function (parser, name, nobrackets) {
    	    if (nobrackets === undefined) { nobrackets = false; }
    	    var n;
    	    if (!nobrackets) {
    	        if (parser.string.charAt(parser.i) === '*') {
    	            parser.i++;
    	        }
    	        if (parser.string.charAt(parser.i) === '[') {
    	            var dim = parser.GetBrackets(name, '');
    	            var _a = __read(ParseUtil_js_1.default.matchDimen(dim), 2), value = _a[0], unit = _a[1];
    	            if (dim && !value) {
    	                throw new TexError_js_1.default('BracketMustBeDimension', 'Bracket argument to %1 must be a dimension', parser.currentCS);
    	            }
    	            n = value + unit;
    	        }
    	    }
    	    parser.Push(parser.itemFactory.create('cell').setProperties({ isCR: true, name: name, linebreak: true }));
    	    var top = parser.stack.Top();
    	    var node;
    	    if (top instanceof sitem.ArrayItem) {
    	        if (n) {
    	            top.addRowSpacing(n);
    	        }
    	    }
    	    else {
    	        if (n) {
    	            node = parser.create('node', 'mspace', [], { depth: n });
    	            parser.Push(node);
    	        }
    	        node = parser.create('node', 'mspace', [], { linebreak: TexConstants_js_1.TexConstant.LineBreak.NEWLINE });
    	        parser.Push(node);
    	    }
    	};
    	BaseMethods$1.HLine = function (parser, _name, style) {
    	    if (style == null) {
    	        style = 'solid';
    	    }
    	    var top = parser.stack.Top();
    	    if (!(top instanceof sitem.ArrayItem) || top.Size()) {
    	        throw new TexError_js_1.default('Misplaced', 'Misplaced %1', parser.currentCS);
    	    }
    	    if (!top.table.length) {
    	        top.frame.push('top');
    	    }
    	    else {
    	        var lines = (top.arraydef['rowlines'] ? top.arraydef['rowlines'].split(/ /) : []);
    	        while (lines.length < top.table.length) {
    	            lines.push('none');
    	        }
    	        lines[top.table.length - 1] = style;
    	        top.arraydef['rowlines'] = lines.join(' ');
    	    }
    	};
    	BaseMethods$1.HFill = function (parser, _name) {
    	    var top = parser.stack.Top();
    	    if (top instanceof sitem.ArrayItem) {
    	        top.hfill.push(top.Size());
    	    }
    	    else {
    	        throw new TexError_js_1.default('UnsupportedHFill', 'Unsupported use of %1', parser.currentCS);
    	    }
    	};
    	BaseMethods$1.BeginEnd = function (parser, name) {
    	    var env = parser.GetArgument(name);
    	    if (env.match(/\\/i)) {
    	        throw new TexError_js_1.default('InvalidEnv', 'Invalid environment name \'%1\'', env);
    	    }
    	    var macro = parser.configuration.handlers.get('environment').lookup(env);
    	    if (macro && name === '\\end') {
    	        if (!macro.args[0]) {
    	            var mml = parser.itemFactory.create('end').setProperty('name', env);
    	            parser.Push(mml);
    	            return;
    	        }
    	        parser.stack.env['closing'] = env;
    	    }
    	    ParseUtil_js_1.default.checkMaxMacros(parser, false);
    	    parser.parse('environment', [parser, env]);
    	};
    	BaseMethods$1.Array = function (parser, begin, open, close, align, spacing, vspacing, style, raggedHeight) {
    	    if (!align) {
    	        align = parser.GetArgument('\\begin{' + begin.getName() + '}');
    	    }
    	    var lines = ('c' + align).replace(/[^clr|:]/g, '').replace(/[^|:]([|:])+/g, '$1');
    	    align = align.replace(/[^clr]/g, '').split('').join(' ');
    	    align = align.replace(/l/g, 'left').replace(/r/g, 'right').replace(/c/g, 'center');
    	    var array = parser.itemFactory.create('array');
    	    array.arraydef = {
    	        columnalign: align,
    	        columnspacing: (spacing || '1em'),
    	        rowspacing: (vspacing || '4pt')
    	    };
    	    if (lines.match(/[|:]/)) {
    	        if (lines.charAt(0).match(/[|:]/)) {
    	            array.frame.push('left');
    	            array.dashed = lines.charAt(0) === ':';
    	        }
    	        if (lines.charAt(lines.length - 1).match(/[|:]/)) {
    	            array.frame.push('right');
    	        }
    	        lines = lines.substr(1, lines.length - 2);
    	        array.arraydef.columnlines =
    	            lines.split('').join(' ').replace(/[^|: ]/g, 'none').replace(/\|/g, 'solid').replace(/:/g, 'dashed');
    	    }
    	    if (open) {
    	        array.setProperty('open', parser.convertDelimiter(open));
    	    }
    	    if (close) {
    	        array.setProperty('close', parser.convertDelimiter(close));
    	    }
    	    if ((style || '').charAt(1) === '\'') {
    	        array.arraydef['data-cramped'] = true;
    	        style = style.charAt(0);
    	    }
    	    if (style === 'D') {
    	        array.arraydef['displaystyle'] = true;
    	    }
    	    else if (style) {
    	        array.arraydef['displaystyle'] = false;
    	    }
    	    if (style === 'S') {
    	        array.arraydef['scriptlevel'] = 1;
    	    }
    	    if (raggedHeight) {
    	        array.arraydef['useHeight'] = false;
    	    }
    	    parser.Push(begin);
    	    return array;
    	};
    	BaseMethods$1.AlignedArray = function (parser, begin) {
    	    var align = parser.GetBrackets('\\begin{' + begin.getName() + '}');
    	    var item = BaseMethods$1.Array(parser, begin);
    	    return ParseUtil_js_1.default.setArrayAlign(item, align);
    	};
    	BaseMethods$1.Equation = function (parser, begin, numbered) {
    	    parser.Push(begin);
    	    ParseUtil_js_1.default.checkEqnEnv(parser);
    	    return parser.itemFactory.create('equation', numbered).
    	        setProperty('name', begin.getName());
    	};
    	BaseMethods$1.EqnArray = function (parser, begin, numbered, taggable, align, spacing) {
    	    parser.Push(begin);
    	    if (taggable) {
    	        ParseUtil_js_1.default.checkEqnEnv(parser);
    	    }
    	    align = align.replace(/[^clr]/g, '').split('').join(' ');
    	    align = align.replace(/l/g, 'left').replace(/r/g, 'right').replace(/c/g, 'center');
    	    var newItem = parser.itemFactory.create('eqnarray', begin.getName(), numbered, taggable, parser.stack.global);
    	    newItem.arraydef = {
    	        displaystyle: true,
    	        columnalign: align,
    	        columnspacing: (spacing || '1em'),
    	        rowspacing: '3pt',
    	        side: parser.options['tagSide'],
    	        minlabelspacing: parser.options['tagIndent']
    	    };
    	    return newItem;
    	};
    	BaseMethods$1.HandleNoTag = function (parser, _name) {
    	    parser.tags.notag();
    	};
    	BaseMethods$1.HandleLabel = function (parser, name) {
    	    var label = parser.GetArgument(name);
    	    if (label === '') {
    	        return;
    	    }
    	    if (!parser.tags.refUpdate) {
    	        if (parser.tags.label) {
    	            throw new TexError_js_1.default('MultipleCommand', 'Multiple %1', parser.currentCS);
    	        }
    	        parser.tags.label = label;
    	        if ((parser.tags.allLabels[label] || parser.tags.labels[label]) && !parser.options['ignoreDuplicateLabels']) {
    	            throw new TexError_js_1.default('MultipleLabel', 'Label \'%1\' multiply defined', label);
    	        }
    	        parser.tags.labels[label] = new Tags_js_1.Label();
    	    }
    	};
    	BaseMethods$1.HandleRef = function (parser, name, eqref) {
    	    var label = parser.GetArgument(name);
    	    var ref = parser.tags.allLabels[label] || parser.tags.labels[label];
    	    if (!ref) {
    	        if (!parser.tags.refUpdate) {
    	            parser.tags.redo = true;
    	        }
    	        ref = new Tags_js_1.Label();
    	    }
    	    var tag = ref.tag;
    	    if (eqref) {
    	        tag = parser.tags.formatTag(tag);
    	    }
    	    var node = parser.create('node', 'mrow', ParseUtil_js_1.default.internalMath(parser, tag), {
    	        href: parser.tags.formatUrl(ref.id, parser.options.baseURL), 'class': 'MathJax_ref'
    	    });
    	    parser.Push(node);
    	};
    	BaseMethods$1.Macro = function (parser, name, macro, argcount, def) {
    	    if (argcount) {
    	        var args = [];
    	        if (def != null) {
    	            var optional = parser.GetBrackets(name);
    	            args.push(optional == null ? def : optional);
    	        }
    	        for (var i = args.length; i < argcount; i++) {
    	            args.push(parser.GetArgument(name));
    	        }
    	        macro = ParseUtil_js_1.default.substituteArgs(parser, args, macro);
    	    }
    	    parser.string = ParseUtil_js_1.default.addArgs(parser, macro, parser.string.slice(parser.i));
    	    parser.i = 0;
    	    ParseUtil_js_1.default.checkMaxMacros(parser);
    	};
    	BaseMethods$1.MathChoice = function (parser, name) {
    	    var D = parser.ParseArg(name);
    	    var T = parser.ParseArg(name);
    	    var S = parser.ParseArg(name);
    	    var SS = parser.ParseArg(name);
    	    parser.Push(parser.create('node', 'MathChoice', [D, T, S, SS]));
    	};
    	BaseMethods.default = BaseMethods$1;
    	
    	return BaseMethods;
    }

    var ParseMethods = {};

    var hasRequiredParseMethods;

    function requireParseMethods () {
    	if (hasRequiredParseMethods) return ParseMethods;
    	hasRequiredParseMethods = 1;
    	var __read = (ParseMethods.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (ParseMethods.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __importDefault = (ParseMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(ParseMethods, "__esModule", { value: true });
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var TexConstants_js_1 = requireTexConstants();
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var ParseMethods$1;
    	(function (ParseMethods) {
    	    function variable(parser, c) {
    	        var def = ParseUtil_js_1.default.getFontDef(parser);
    	        var env = parser.stack.env;
    	        if (env.multiLetterIdentifiers && env.font !== '') {
    	            c = parser.string.substr(parser.i - 1).match(env.multiLetterIdentifiers)[0];
    	            parser.i += c.length - 1;
    	            if (def.mathvariant === TexConstants_js_1.TexConstant.Variant.NORMAL && env.noAutoOP && c.length > 1) {
    	                def.autoOP = false;
    	            }
    	        }
    	        var node = parser.create('token', 'mi', def, c);
    	        parser.Push(node);
    	    }
    	    ParseMethods.variable = variable;
    	    function digit(parser, c) {
    	        var mml;
    	        var pattern = parser.configuration.options['digits'];
    	        var n = parser.string.slice(parser.i - 1).match(pattern);
    	        var def = ParseUtil_js_1.default.getFontDef(parser);
    	        if (n) {
    	            mml = parser.create('token', 'mn', def, n[0].replace(/[{}]/g, ''));
    	            parser.i += n[0].length - 1;
    	        }
    	        else {
    	            mml = parser.create('token', 'mo', def, c);
    	        }
    	        parser.Push(mml);
    	    }
    	    ParseMethods.digit = digit;
    	    function controlSequence(parser, _c) {
    	        var name = parser.GetCS();
    	        parser.parse('macro', [parser, name]);
    	    }
    	    ParseMethods.controlSequence = controlSequence;
    	    function mathchar0mi(parser, mchar) {
    	        var def = mchar.attributes || { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC };
    	        var node = parser.create('token', 'mi', def, mchar.char);
    	        parser.Push(node);
    	    }
    	    ParseMethods.mathchar0mi = mathchar0mi;
    	    function mathchar0mo(parser, mchar) {
    	        var def = mchar.attributes || {};
    	        def['stretchy'] = false;
    	        var node = parser.create('token', 'mo', def, mchar.char);
    	        NodeUtil_js_1.default.setProperty(node, 'fixStretchy', true);
    	        parser.configuration.addNode('fixStretchy', node);
    	        parser.Push(node);
    	    }
    	    ParseMethods.mathchar0mo = mathchar0mo;
    	    function mathchar7(parser, mchar) {
    	        var def = mchar.attributes || { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL };
    	        if (parser.stack.env['font']) {
    	            def['mathvariant'] = parser.stack.env['font'];
    	        }
    	        var node = parser.create('token', 'mi', def, mchar.char);
    	        parser.Push(node);
    	    }
    	    ParseMethods.mathchar7 = mathchar7;
    	    function delimiter(parser, delim) {
    	        var def = delim.attributes || {};
    	        def = Object.assign({ fence: false, stretchy: false }, def);
    	        var node = parser.create('token', 'mo', def, delim.char);
    	        parser.Push(node);
    	    }
    	    ParseMethods.delimiter = delimiter;
    	    function environment(parser, env, func, args) {
    	        var end = args[0];
    	        var mml = parser.itemFactory.create('begin').setProperties({ name: env, end: end });
    	        mml = func.apply(undefined, __spreadArray([parser, mml], __read(args.slice(1)), false));
    	        parser.Push(mml);
    	    }
    	    ParseMethods.environment = environment;
    	})(ParseMethods$1 || (ParseMethods$1 = {}));
    	ParseMethods.default = ParseMethods$1;
    	
    	return ParseMethods;
    }

    var hasRequiredBaseMappings;

    function requireBaseMappings () {
    	if (hasRequiredBaseMappings) return BaseMappings;
    	hasRequiredBaseMappings = 1;
    	var __createBinding = (BaseMappings.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (BaseMappings.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (BaseMappings.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __importDefault = (BaseMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BaseMappings, "__esModule", { value: true });
    	var sm = __importStar(requireSymbolMap());
    	var TexConstants_js_1 = requireTexConstants();
    	var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    	var ParseMethods_js_1 = __importDefault(requireParseMethods());
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var MmlNode_js_1 = requireMmlNode();
    	var lengths_js_1 = requireLengths();
    	new sm.RegExpMap('letter', ParseMethods_js_1.default.variable, /[a-z]/i);
    	new sm.RegExpMap('digit', ParseMethods_js_1.default.digit, /[0-9.,]/);
    	new sm.RegExpMap('command', ParseMethods_js_1.default.controlSequence, /^\\/);
    	new sm.MacroMap('special', {
    	    '{': 'Open',
    	    '}': 'Close',
    	    '~': 'Tilde',
    	    '^': 'Superscript',
    	    '_': 'Subscript',
    	    ' ': 'Space',
    	    '\t': 'Space',
    	    '\r': 'Space',
    	    '\n': 'Space',
    	    '\'': 'Prime',
    	    '%': 'Comment',
    	    '&': 'Entry',
    	    '#': 'Hash',
    	    '\u00A0': 'Space',
    	    '\u2019': 'Prime'
    	}, BaseMethods_js_1.default);
    	new sm.CharacterMap('mathchar0mi', ParseMethods_js_1.default.mathchar0mi, {
    	    alpha: '\u03B1',
    	    beta: '\u03B2',
    	    gamma: '\u03B3',
    	    delta: '\u03B4',
    	    epsilon: '\u03F5',
    	    zeta: '\u03B6',
    	    eta: '\u03B7',
    	    theta: '\u03B8',
    	    iota: '\u03B9',
    	    kappa: '\u03BA',
    	    lambda: '\u03BB',
    	    mu: '\u03BC',
    	    nu: '\u03BD',
    	    xi: '\u03BE',
    	    omicron: '\u03BF',
    	    pi: '\u03C0',
    	    rho: '\u03C1',
    	    sigma: '\u03C3',
    	    tau: '\u03C4',
    	    upsilon: '\u03C5',
    	    phi: '\u03D5',
    	    chi: '\u03C7',
    	    psi: '\u03C8',
    	    omega: '\u03C9',
    	    varepsilon: '\u03B5',
    	    vartheta: '\u03D1',
    	    varpi: '\u03D6',
    	    varrho: '\u03F1',
    	    varsigma: '\u03C2',
    	    varphi: '\u03C6',
    	    S: ['\u00A7', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    aleph: ['\u2135', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    hbar: ['\u210F', { variantForm: true }],
    	    imath: '\u0131',
    	    jmath: '\u0237',
    	    ell: '\u2113',
    	    wp: ['\u2118', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    Re: ['\u211C', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    Im: ['\u2111', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    partial: ['\u2202', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    infty: ['\u221E', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    prime: ['\u2032', { variantForm: true }],
    	    emptyset: ['\u2205', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    nabla: ['\u2207', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    top: ['\u22A4', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    bot: ['\u22A5', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    angle: ['\u2220', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    triangle: ['\u25B3', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    backslash: ['\u2216', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    forall: ['\u2200', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    exists: ['\u2203', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    neg: ['\u00AC', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    lnot: ['\u00AC', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    flat: ['\u266D', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    natural: ['\u266E', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    sharp: ['\u266F', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    clubsuit: ['\u2663', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    diamondsuit: ['\u2662', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    heartsuit: ['\u2661', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    spadesuit: ['\u2660', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }]
    	});
    	new sm.CharacterMap('mathchar0mo', ParseMethods_js_1.default.mathchar0mo, {
    	    surd: '\u221A',
    	    coprod: ['\u2210', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    bigvee: ['\u22C1', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    bigwedge: ['\u22C0', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    biguplus: ['\u2A04', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    bigcap: ['\u22C2', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    bigcup: ['\u22C3', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    'int': ['\u222B', { texClass: MmlNode_js_1.TEXCLASS.OP }],
    	    intop: ['\u222B', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true, movablelimits: true }],
    	    iint: ['\u222C', { texClass: MmlNode_js_1.TEXCLASS.OP }],
    	    iiint: ['\u222D', { texClass: MmlNode_js_1.TEXCLASS.OP }],
    	    prod: ['\u220F', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    sum: ['\u2211', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    bigotimes: ['\u2A02', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    bigoplus: ['\u2A01', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    bigodot: ['\u2A00', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    oint: ['\u222E', { texClass: MmlNode_js_1.TEXCLASS.OP }],
    	    bigsqcup: ['\u2A06', { texClass: MmlNode_js_1.TEXCLASS.OP,
    	            movesupsub: true }],
    	    smallint: ['\u222B', { largeop: false }],
    	    triangleleft: '\u25C3',
    	    triangleright: '\u25B9',
    	    bigtriangleup: '\u25B3',
    	    bigtriangledown: '\u25BD',
    	    wedge: '\u2227',
    	    land: '\u2227',
    	    vee: '\u2228',
    	    lor: '\u2228',
    	    cap: '\u2229',
    	    cup: '\u222A',
    	    ddagger: '\u2021',
    	    dagger: '\u2020',
    	    sqcap: '\u2293',
    	    sqcup: '\u2294',
    	    uplus: '\u228E',
    	    amalg: '\u2A3F',
    	    diamond: '\u22C4',
    	    bullet: '\u2219',
    	    wr: '\u2240',
    	    div: '\u00F7',
    	    divsymbol: '\u00F7',
    	    odot: ['\u2299', { largeop: false }],
    	    oslash: ['\u2298', { largeop: false }],
    	    otimes: ['\u2297', { largeop: false }],
    	    ominus: ['\u2296', { largeop: false }],
    	    oplus: ['\u2295', { largeop: false }],
    	    mp: '\u2213',
    	    pm: '\u00B1',
    	    circ: '\u2218',
    	    bigcirc: '\u25EF',
    	    setminus: '\u2216',
    	    cdot: '\u22C5',
    	    ast: '\u2217',
    	    times: '\u00D7',
    	    star: '\u22C6',
    	    propto: '\u221D',
    	    sqsubseteq: '\u2291',
    	    sqsupseteq: '\u2292',
    	    parallel: '\u2225',
    	    mid: '\u2223',
    	    dashv: '\u22A3',
    	    vdash: '\u22A2',
    	    leq: '\u2264',
    	    le: '\u2264',
    	    geq: '\u2265',
    	    ge: '\u2265',
    	    lt: '\u003C',
    	    gt: '\u003E',
    	    succ: '\u227B',
    	    prec: '\u227A',
    	    approx: '\u2248',
    	    succeq: '\u2AB0',
    	    preceq: '\u2AAF',
    	    supset: '\u2283',
    	    subset: '\u2282',
    	    supseteq: '\u2287',
    	    subseteq: '\u2286',
    	    'in': '\u2208',
    	    ni: '\u220B',
    	    notin: '\u2209',
    	    owns: '\u220B',
    	    gg: '\u226B',
    	    ll: '\u226A',
    	    sim: '\u223C',
    	    simeq: '\u2243',
    	    perp: '\u22A5',
    	    equiv: '\u2261',
    	    asymp: '\u224D',
    	    smile: '\u2323',
    	    frown: '\u2322',
    	    ne: '\u2260',
    	    neq: '\u2260',
    	    cong: '\u2245',
    	    doteq: '\u2250',
    	    bowtie: '\u22C8',
    	    models: '\u22A8',
    	    notChar: '\u29F8',
    	    Leftrightarrow: '\u21D4',
    	    Leftarrow: '\u21D0',
    	    Rightarrow: '\u21D2',
    	    leftrightarrow: '\u2194',
    	    leftarrow: '\u2190',
    	    gets: '\u2190',
    	    rightarrow: '\u2192',
    	    to: ['\u2192', { accent: false }],
    	    mapsto: '\u21A6',
    	    leftharpoonup: '\u21BC',
    	    leftharpoondown: '\u21BD',
    	    rightharpoonup: '\u21C0',
    	    rightharpoondown: '\u21C1',
    	    nearrow: '\u2197',
    	    searrow: '\u2198',
    	    nwarrow: '\u2196',
    	    swarrow: '\u2199',
    	    rightleftharpoons: '\u21CC',
    	    hookrightarrow: '\u21AA',
    	    hookleftarrow: '\u21A9',
    	    longleftarrow: '\u27F5',
    	    Longleftarrow: '\u27F8',
    	    longrightarrow: '\u27F6',
    	    Longrightarrow: '\u27F9',
    	    Longleftrightarrow: '\u27FA',
    	    longleftrightarrow: '\u27F7',
    	    longmapsto: '\u27FC',
    	    ldots: '\u2026',
    	    cdots: '\u22EF',
    	    vdots: '\u22EE',
    	    ddots: '\u22F1',
    	    dotsc: '\u2026',
    	    dotsb: '\u22EF',
    	    dotsm: '\u22EF',
    	    dotsi: '\u22EF',
    	    dotso: '\u2026',
    	    ldotp: ['\u002E', { texClass: MmlNode_js_1.TEXCLASS.PUNCT }],
    	    cdotp: ['\u22C5', { texClass: MmlNode_js_1.TEXCLASS.PUNCT }],
    	    colon: ['\u003A', { texClass: MmlNode_js_1.TEXCLASS.PUNCT }]
    	});
    	new sm.CharacterMap('mathchar7', ParseMethods_js_1.default.mathchar7, {
    	    Gamma: '\u0393',
    	    Delta: '\u0394',
    	    Theta: '\u0398',
    	    Lambda: '\u039B',
    	    Xi: '\u039E',
    	    Pi: '\u03A0',
    	    Sigma: '\u03A3',
    	    Upsilon: '\u03A5',
    	    Phi: '\u03A6',
    	    Psi: '\u03A8',
    	    Omega: '\u03A9',
    	    '_': '\u005F',
    	    '#': '\u0023',
    	    '$': '\u0024',
    	    '%': '\u0025',
    	    '&': '\u0026',
    	    And: '\u0026'
    	});
    	new sm.DelimiterMap('delimiter', ParseMethods_js_1.default.delimiter, {
    	    '(': '(',
    	    ')': ')',
    	    '[': '[',
    	    ']': ']',
    	    '<': '\u27E8',
    	    '>': '\u27E9',
    	    '\\lt': '\u27E8',
    	    '\\gt': '\u27E9',
    	    '/': '/',
    	    '|': ['|', { texClass: MmlNode_js_1.TEXCLASS.ORD }],
    	    '.': '',
    	    '\\\\': '\\',
    	    '\\lmoustache': '\u23B0',
    	    '\\rmoustache': '\u23B1',
    	    '\\lgroup': '\u27EE',
    	    '\\rgroup': '\u27EF',
    	    '\\arrowvert': '\u23D0',
    	    '\\Arrowvert': '\u2016',
    	    '\\bracevert': '\u23AA',
    	    '\\Vert': ['\u2016', { texClass: MmlNode_js_1.TEXCLASS.ORD }],
    	    '\\|': ['\u2016', { texClass: MmlNode_js_1.TEXCLASS.ORD }],
    	    '\\vert': ['|', { texClass: MmlNode_js_1.TEXCLASS.ORD }],
    	    '\\uparrow': '\u2191',
    	    '\\downarrow': '\u2193',
    	    '\\updownarrow': '\u2195',
    	    '\\Uparrow': '\u21D1',
    	    '\\Downarrow': '\u21D3',
    	    '\\Updownarrow': '\u21D5',
    	    '\\backslash': '\\',
    	    '\\rangle': '\u27E9',
    	    '\\langle': '\u27E8',
    	    '\\rbrace': '}',
    	    '\\lbrace': '{',
    	    '\\}': '}',
    	    '\\{': '{',
    	    '\\rceil': '\u2309',
    	    '\\lceil': '\u2308',
    	    '\\rfloor': '\u230B',
    	    '\\lfloor': '\u230A',
    	    '\\lbrack': '[',
    	    '\\rbrack': ']'
    	});
    	new sm.CommandMap('macros', {
    	    displaystyle: ['SetStyle', 'D', true, 0],
    	    textstyle: ['SetStyle', 'T', false, 0],
    	    scriptstyle: ['SetStyle', 'S', false, 1],
    	    scriptscriptstyle: ['SetStyle', 'SS', false, 2],
    	    rm: ['SetFont', TexConstants_js_1.TexConstant.Variant.NORMAL],
    	    mit: ['SetFont', TexConstants_js_1.TexConstant.Variant.ITALIC],
    	    oldstyle: ['SetFont', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    cal: ['SetFont', TexConstants_js_1.TexConstant.Variant.CALLIGRAPHIC],
    	    it: ['SetFont', TexConstants_js_1.TexConstant.Variant.MATHITALIC],
    	    bf: ['SetFont', TexConstants_js_1.TexConstant.Variant.BOLD],
    	    bbFont: ['SetFont', TexConstants_js_1.TexConstant.Variant.DOUBLESTRUCK],
    	    scr: ['SetFont', TexConstants_js_1.TexConstant.Variant.SCRIPT],
    	    frak: ['SetFont', TexConstants_js_1.TexConstant.Variant.FRAKTUR],
    	    sf: ['SetFont', TexConstants_js_1.TexConstant.Variant.SANSSERIF],
    	    tt: ['SetFont', TexConstants_js_1.TexConstant.Variant.MONOSPACE],
    	    mathrm: ['MathFont', TexConstants_js_1.TexConstant.Variant.NORMAL],
    	    mathup: ['MathFont', TexConstants_js_1.TexConstant.Variant.NORMAL],
    	    mathnormal: ['MathFont', ''],
    	    mathbf: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLD],
    	    mathbfup: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLD],
    	    mathit: ['MathFont', TexConstants_js_1.TexConstant.Variant.MATHITALIC],
    	    mathbfit: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDITALIC],
    	    mathbb: ['MathFont', TexConstants_js_1.TexConstant.Variant.DOUBLESTRUCK],
    	    Bbb: ['MathFont', TexConstants_js_1.TexConstant.Variant.DOUBLESTRUCK],
    	    mathfrak: ['MathFont', TexConstants_js_1.TexConstant.Variant.FRAKTUR],
    	    mathbffrak: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDFRAKTUR],
    	    mathscr: ['MathFont', TexConstants_js_1.TexConstant.Variant.SCRIPT],
    	    mathbfscr: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDSCRIPT],
    	    mathsf: ['MathFont', TexConstants_js_1.TexConstant.Variant.SANSSERIF],
    	    mathsfup: ['MathFont', TexConstants_js_1.TexConstant.Variant.SANSSERIF],
    	    mathbfsf: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDSANSSERIF],
    	    mathbfsfup: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDSANSSERIF],
    	    mathsfit: ['MathFont', TexConstants_js_1.TexConstant.Variant.SANSSERIFITALIC],
    	    mathbfsfit: ['MathFont', TexConstants_js_1.TexConstant.Variant.SANSSERIFBOLDITALIC],
    	    mathtt: ['MathFont', TexConstants_js_1.TexConstant.Variant.MONOSPACE],
    	    mathcal: ['MathFont', TexConstants_js_1.TexConstant.Variant.CALLIGRAPHIC],
    	    mathbfcal: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDCALLIGRAPHIC],
    	    symrm: ['MathFont', TexConstants_js_1.TexConstant.Variant.NORMAL],
    	    symup: ['MathFont', TexConstants_js_1.TexConstant.Variant.NORMAL],
    	    symnormal: ['MathFont', ''],
    	    symbf: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLD],
    	    symbfup: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLD],
    	    symit: ['MathFont', TexConstants_js_1.TexConstant.Variant.ITALIC],
    	    symbfit: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDITALIC],
    	    symbb: ['MathFont', TexConstants_js_1.TexConstant.Variant.DOUBLESTRUCK],
    	    symfrak: ['MathFont', TexConstants_js_1.TexConstant.Variant.FRAKTUR],
    	    symbffrak: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDFRAKTUR],
    	    symscr: ['MathFont', TexConstants_js_1.TexConstant.Variant.SCRIPT],
    	    symbfscr: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDSCRIPT],
    	    symsf: ['MathFont', TexConstants_js_1.TexConstant.Variant.SANSSERIF],
    	    symsfup: ['MathFont', TexConstants_js_1.TexConstant.Variant.SANSSERIF],
    	    symbfsf: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDSANSSERIF],
    	    symbfsfup: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDSANSSERIF],
    	    symsfit: ['MathFont', TexConstants_js_1.TexConstant.Variant.SANSSERIFITALIC],
    	    symbfsfit: ['MathFont', TexConstants_js_1.TexConstant.Variant.SANSSERIFBOLDITALIC],
    	    symtt: ['MathFont', TexConstants_js_1.TexConstant.Variant.MONOSPACE],
    	    symcal: ['MathFont', TexConstants_js_1.TexConstant.Variant.CALLIGRAPHIC],
    	    symbfcal: ['MathFont', TexConstants_js_1.TexConstant.Variant.BOLDCALLIGRAPHIC],
    	    textrm: ['HBox', null, TexConstants_js_1.TexConstant.Variant.NORMAL],
    	    textup: ['HBox', null, TexConstants_js_1.TexConstant.Variant.NORMAL],
    	    textnormal: ['HBox'],
    	    textit: ['HBox', null, TexConstants_js_1.TexConstant.Variant.ITALIC],
    	    textbf: ['HBox', null, TexConstants_js_1.TexConstant.Variant.BOLD],
    	    textsf: ['HBox', null, TexConstants_js_1.TexConstant.Variant.SANSSERIF],
    	    texttt: ['HBox', null, TexConstants_js_1.TexConstant.Variant.MONOSPACE],
    	    tiny: ['SetSize', 0.5],
    	    Tiny: ['SetSize', 0.6],
    	    scriptsize: ['SetSize', 0.7],
    	    small: ['SetSize', 0.85],
    	    normalsize: ['SetSize', 1.0],
    	    large: ['SetSize', 1.2],
    	    Large: ['SetSize', 1.44],
    	    LARGE: ['SetSize', 1.73],
    	    huge: ['SetSize', 2.07],
    	    Huge: ['SetSize', 2.49],
    	    arcsin: 'NamedFn',
    	    arccos: 'NamedFn',
    	    arctan: 'NamedFn',
    	    arg: 'NamedFn',
    	    cos: 'NamedFn',
    	    cosh: 'NamedFn',
    	    cot: 'NamedFn',
    	    coth: 'NamedFn',
    	    csc: 'NamedFn',
    	    deg: 'NamedFn',
    	    det: 'NamedOp',
    	    dim: 'NamedFn',
    	    exp: 'NamedFn',
    	    gcd: 'NamedOp',
    	    hom: 'NamedFn',
    	    inf: 'NamedOp',
    	    ker: 'NamedFn',
    	    lg: 'NamedFn',
    	    lim: 'NamedOp',
    	    liminf: ['NamedOp', 'lim&thinsp;inf'],
    	    limsup: ['NamedOp', 'lim&thinsp;sup'],
    	    ln: 'NamedFn',
    	    log: 'NamedFn',
    	    max: 'NamedOp',
    	    min: 'NamedOp',
    	    Pr: 'NamedOp',
    	    sec: 'NamedFn',
    	    sin: 'NamedFn',
    	    sinh: 'NamedFn',
    	    sup: 'NamedOp',
    	    tan: 'NamedFn',
    	    tanh: 'NamedFn',
    	    limits: ['Limits', 1],
    	    nolimits: ['Limits', 0],
    	    overline: ['UnderOver', '2015'],
    	    underline: ['UnderOver', '2015'],
    	    overbrace: ['UnderOver', '23DE', 1],
    	    underbrace: ['UnderOver', '23DF', 1],
    	    overparen: ['UnderOver', '23DC'],
    	    underparen: ['UnderOver', '23DD'],
    	    overrightarrow: ['UnderOver', '2192'],
    	    underrightarrow: ['UnderOver', '2192'],
    	    overleftarrow: ['UnderOver', '2190'],
    	    underleftarrow: ['UnderOver', '2190'],
    	    overleftrightarrow: ['UnderOver', '2194'],
    	    underleftrightarrow: ['UnderOver', '2194'],
    	    overset: 'Overset',
    	    underset: 'Underset',
    	    overunderset: 'Overunderset',
    	    stackrel: ['Macro', '\\mathrel{\\mathop{#2}\\limits^{#1}}', 2],
    	    stackbin: ['Macro', '\\mathbin{\\mathop{#2}\\limits^{#1}}', 2],
    	    over: 'Over',
    	    overwithdelims: 'Over',
    	    atop: 'Over',
    	    atopwithdelims: 'Over',
    	    above: 'Over',
    	    abovewithdelims: 'Over',
    	    brace: ['Over', '{', '}'],
    	    brack: ['Over', '[', ']'],
    	    choose: ['Over', '(', ')'],
    	    frac: 'Frac',
    	    sqrt: 'Sqrt',
    	    root: 'Root',
    	    uproot: ['MoveRoot', 'upRoot'],
    	    leftroot: ['MoveRoot', 'leftRoot'],
    	    left: 'LeftRight',
    	    right: 'LeftRight',
    	    middle: 'LeftRight',
    	    llap: 'Lap',
    	    rlap: 'Lap',
    	    raise: 'RaiseLower',
    	    lower: 'RaiseLower',
    	    moveleft: 'MoveLeftRight',
    	    moveright: 'MoveLeftRight',
    	    ',': ['Spacer', lengths_js_1.MATHSPACE.thinmathspace],
    	    ':': ['Spacer', lengths_js_1.MATHSPACE.mediummathspace],
    	    '>': ['Spacer', lengths_js_1.MATHSPACE.mediummathspace],
    	    ';': ['Spacer', lengths_js_1.MATHSPACE.thickmathspace],
    	    '!': ['Spacer', lengths_js_1.MATHSPACE.negativethinmathspace],
    	    enspace: ['Spacer', .5],
    	    quad: ['Spacer', 1],
    	    qquad: ['Spacer', 2],
    	    thinspace: ['Spacer', lengths_js_1.MATHSPACE.thinmathspace],
    	    negthinspace: ['Spacer', lengths_js_1.MATHSPACE.negativethinmathspace],
    	    hskip: 'Hskip',
    	    hspace: 'Hskip',
    	    kern: 'Hskip',
    	    mskip: 'Hskip',
    	    mspace: 'Hskip',
    	    mkern: 'Hskip',
    	    rule: 'rule',
    	    Rule: ['Rule'],
    	    Space: ['Rule', 'blank'],
    	    nonscript: 'Nonscript',
    	    big: ['MakeBig', MmlNode_js_1.TEXCLASS.ORD, 0.85],
    	    Big: ['MakeBig', MmlNode_js_1.TEXCLASS.ORD, 1.15],
    	    bigg: ['MakeBig', MmlNode_js_1.TEXCLASS.ORD, 1.45],
    	    Bigg: ['MakeBig', MmlNode_js_1.TEXCLASS.ORD, 1.75],
    	    bigl: ['MakeBig', MmlNode_js_1.TEXCLASS.OPEN, 0.85],
    	    Bigl: ['MakeBig', MmlNode_js_1.TEXCLASS.OPEN, 1.15],
    	    biggl: ['MakeBig', MmlNode_js_1.TEXCLASS.OPEN, 1.45],
    	    Biggl: ['MakeBig', MmlNode_js_1.TEXCLASS.OPEN, 1.75],
    	    bigr: ['MakeBig', MmlNode_js_1.TEXCLASS.CLOSE, 0.85],
    	    Bigr: ['MakeBig', MmlNode_js_1.TEXCLASS.CLOSE, 1.15],
    	    biggr: ['MakeBig', MmlNode_js_1.TEXCLASS.CLOSE, 1.45],
    	    Biggr: ['MakeBig', MmlNode_js_1.TEXCLASS.CLOSE, 1.75],
    	    bigm: ['MakeBig', MmlNode_js_1.TEXCLASS.REL, 0.85],
    	    Bigm: ['MakeBig', MmlNode_js_1.TEXCLASS.REL, 1.15],
    	    biggm: ['MakeBig', MmlNode_js_1.TEXCLASS.REL, 1.45],
    	    Biggm: ['MakeBig', MmlNode_js_1.TEXCLASS.REL, 1.75],
    	    mathord: ['TeXAtom', MmlNode_js_1.TEXCLASS.ORD],
    	    mathop: ['TeXAtom', MmlNode_js_1.TEXCLASS.OP],
    	    mathopen: ['TeXAtom', MmlNode_js_1.TEXCLASS.OPEN],
    	    mathclose: ['TeXAtom', MmlNode_js_1.TEXCLASS.CLOSE],
    	    mathbin: ['TeXAtom', MmlNode_js_1.TEXCLASS.BIN],
    	    mathrel: ['TeXAtom', MmlNode_js_1.TEXCLASS.REL],
    	    mathpunct: ['TeXAtom', MmlNode_js_1.TEXCLASS.PUNCT],
    	    mathinner: ['TeXAtom', MmlNode_js_1.TEXCLASS.INNER],
    	    vcenter: ['TeXAtom', MmlNode_js_1.TEXCLASS.VCENTER],
    	    buildrel: 'BuildRel',
    	    hbox: ['HBox', 0],
    	    text: 'HBox',
    	    mbox: ['HBox', 0],
    	    fbox: 'FBox',
    	    boxed: ['Macro', '\\fbox{$\\displaystyle{#1}$}', 1],
    	    framebox: 'FrameBox',
    	    strut: 'Strut',
    	    mathstrut: ['Macro', '\\vphantom{(}'],
    	    phantom: 'Phantom',
    	    vphantom: ['Phantom', 1, 0],
    	    hphantom: ['Phantom', 0, 1],
    	    smash: 'Smash',
    	    acute: ['Accent', '00B4'],
    	    grave: ['Accent', '0060'],
    	    ddot: ['Accent', '00A8'],
    	    tilde: ['Accent', '007E'],
    	    bar: ['Accent', '00AF'],
    	    breve: ['Accent', '02D8'],
    	    check: ['Accent', '02C7'],
    	    hat: ['Accent', '005E'],
    	    vec: ['Accent', '2192'],
    	    dot: ['Accent', '02D9'],
    	    widetilde: ['Accent', '007E', 1],
    	    widehat: ['Accent', '005E', 1],
    	    matrix: 'Matrix',
    	    array: 'Matrix',
    	    pmatrix: ['Matrix', '(', ')'],
    	    cases: ['Matrix', '{', '', 'left left', null, '.1em', null,
    	        true],
    	    eqalign: ['Matrix', null, null, 'right left',
    	        (0, lengths_js_1.em)(lengths_js_1.MATHSPACE.thickmathspace), '.5em', 'D'],
    	    displaylines: ['Matrix', null, null, 'center', null, '.5em', 'D'],
    	    cr: 'Cr',
    	    '\\': 'CrLaTeX',
    	    newline: ['CrLaTeX', true],
    	    hline: ['HLine', 'solid'],
    	    hdashline: ['HLine', 'dashed'],
    	    eqalignno: ['Matrix', null, null, 'right left',
    	        (0, lengths_js_1.em)(lengths_js_1.MATHSPACE.thickmathspace), '.5em', 'D', null,
    	        'right'],
    	    leqalignno: ['Matrix', null, null, 'right left',
    	        (0, lengths_js_1.em)(lengths_js_1.MATHSPACE.thickmathspace), '.5em', 'D', null,
    	        'left'],
    	    hfill: 'HFill',
    	    hfil: 'HFill',
    	    hfilll: 'HFill',
    	    bmod: ['Macro', '\\mmlToken{mo}[lspace="thickmathspace"' +
    	            ' rspace="thickmathspace"]{mod}'],
    	    pmod: ['Macro', '\\pod{\\mmlToken{mi}{mod}\\kern 6mu #1}', 1],
    	    mod: ['Macro', '\\mathchoice{\\kern18mu}{\\kern12mu}' +
    	            '{\\kern12mu}{\\kern12mu}\\mmlToken{mi}{mod}\\,\\,#1',
    	        1],
    	    pod: ['Macro', '\\mathchoice{\\kern18mu}{\\kern8mu}' +
    	            '{\\kern8mu}{\\kern8mu}(#1)', 1],
    	    iff: ['Macro', '\\;\\Longleftrightarrow\\;'],
    	    skew: ['Macro', '{{#2{#3\\mkern#1mu}\\mkern-#1mu}{}}', 3],
    	    pmb: ['Macro', '\\rlap{#1}\\kern1px{#1}', 1],
    	    TeX: ['Macro', 'T\\kern-.14em\\lower.5ex{E}\\kern-.115em X'],
    	    LaTeX: ['Macro', 'L\\kern-.325em\\raise.21em' +
    	            '{\\scriptstyle{A}}\\kern-.17em\\TeX'],
    	    ' ': ['Macro', '\\text{ }'],
    	    not: 'Not',
    	    dots: 'Dots',
    	    space: 'Tilde',
    	    '\u00A0': 'Tilde',
    	    begin: 'BeginEnd',
    	    end: 'BeginEnd',
    	    label: 'HandleLabel',
    	    ref: 'HandleRef',
    	    nonumber: 'HandleNoTag',
    	    mathchoice: 'MathChoice',
    	    mmlToken: 'MmlToken'
    	}, BaseMethods_js_1.default);
    	new sm.EnvironmentMap('environment', ParseMethods_js_1.default.environment, {
    	    array: ['AlignedArray'],
    	    equation: ['Equation', null, true],
    	    eqnarray: ['EqnArray', null, true, true, 'rcl',
    	        ParseUtil_js_1.default.cols(0, lengths_js_1.MATHSPACE.thickmathspace), '.5em']
    	}, BaseMethods_js_1.default);
    	new sm.CharacterMap('not_remap', null, {
    	    '\u2190': '\u219A',
    	    '\u2192': '\u219B',
    	    '\u2194': '\u21AE',
    	    '\u21D0': '\u21CD',
    	    '\u21D2': '\u21CF',
    	    '\u21D4': '\u21CE',
    	    '\u2208': '\u2209',
    	    '\u220B': '\u220C',
    	    '\u2223': '\u2224',
    	    '\u2225': '\u2226',
    	    '\u223C': '\u2241',
    	    '\u007E': '\u2241',
    	    '\u2243': '\u2244',
    	    '\u2245': '\u2247',
    	    '\u2248': '\u2249',
    	    '\u224D': '\u226D',
    	    '\u003D': '\u2260',
    	    '\u2261': '\u2262',
    	    '\u003C': '\u226E',
    	    '\u003E': '\u226F',
    	    '\u2264': '\u2270',
    	    '\u2265': '\u2271',
    	    '\u2272': '\u2274',
    	    '\u2273': '\u2275',
    	    '\u2276': '\u2278',
    	    '\u2277': '\u2279',
    	    '\u227A': '\u2280',
    	    '\u227B': '\u2281',
    	    '\u2282': '\u2284',
    	    '\u2283': '\u2285',
    	    '\u2286': '\u2288',
    	    '\u2287': '\u2289',
    	    '\u22A2': '\u22AC',
    	    '\u22A8': '\u22AD',
    	    '\u22A9': '\u22AE',
    	    '\u22AB': '\u22AF',
    	    '\u227C': '\u22E0',
    	    '\u227D': '\u22E1',
    	    '\u2291': '\u22E2',
    	    '\u2292': '\u22E3',
    	    '\u22B2': '\u22EA',
    	    '\u22B3': '\u22EB',
    	    '\u22B4': '\u22EC',
    	    '\u22B5': '\u22ED',
    	    '\u2203': '\u2204'
    	});
    	
    	return BaseMappings;
    }

    var hasRequiredBaseConfiguration;

    function requireBaseConfiguration () {
    	if (hasRequiredBaseConfiguration) return BaseConfiguration;
    	hasRequiredBaseConfiguration = 1;
    	var __extends = (BaseConfiguration.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __createBinding = (BaseConfiguration.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (BaseConfiguration.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (BaseConfiguration.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __values = (BaseConfiguration.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __importDefault = (BaseConfiguration.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	var _a;
    	Object.defineProperty(BaseConfiguration, "__esModule", { value: true });
    	BaseConfiguration.BaseConfiguration = BaseConfiguration.BaseTags = BaseConfiguration.Other = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var MapHandler_js_1 = requireMapHandler();
    	var TexError_js_1 = __importDefault(requireTexError());
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var SymbolMap_js_1 = requireSymbolMap();
    	var bitem = __importStar(requireBaseItems());
    	var Tags_js_1 = requireTags();
    	requireBaseMappings();
    	var OperatorDictionary_js_1 = requireOperatorDictionary();
    	new SymbolMap_js_1.CharacterMap('remap', null, {
    	    '-': '\u2212',
    	    '*': '\u2217',
    	    '`': '\u2018'
    	});
    	function Other(parser, char) {
    	    var font = parser.stack.env['font'];
    	    var def = font ?
    	        { mathvariant: parser.stack.env['font'] } : {};
    	    var remap = MapHandler_js_1.MapHandler.getMap('remap').lookup(char);
    	    var range = (0, OperatorDictionary_js_1.getRange)(char);
    	    var type = (range ? range[3] : 'mo');
    	    var mo = parser.create('token', type, def, (remap ? remap.char : char));
    	    range[4] && mo.attributes.set('mathvariant', range[4]);
    	    if (type === 'mo') {
    	        NodeUtil_js_1.default.setProperty(mo, 'fixStretchy', true);
    	        parser.configuration.addNode('fixStretchy', mo);
    	    }
    	    parser.Push(mo);
    	}
    	BaseConfiguration.Other = Other;
    	function csUndefined(_parser, name) {
    	    throw new TexError_js_1.default('UndefinedControlSequence', 'Undefined control sequence %1', '\\' + name);
    	}
    	function envUndefined(_parser, env) {
    	    throw new TexError_js_1.default('UnknownEnv', 'Unknown environment \'%1\'', env);
    	}
    	function filterNonscript(_a) {
    	    var e_1, _b;
    	    var data = _a.data;
    	    try {
    	        for (var _c = __values(data.getList('nonscript')), _d = _c.next(); !_d.done; _d = _c.next()) {
    	            var mml = _d.value;
    	            if (mml.attributes.get('scriptlevel') > 0) {
    	                var parent_1 = mml.parent;
    	                parent_1.childNodes.splice(parent_1.childIndex(mml), 1);
    	                data.removeFromList(mml.kind, [mml]);
    	                if (mml.isKind('mrow')) {
    	                    var mstyle = mml.childNodes[0];
    	                    data.removeFromList('mstyle', [mstyle]);
    	                    data.removeFromList('mspace', mstyle.childNodes[0].childNodes);
    	                }
    	            }
    	            else if (mml.isKind('mrow')) {
    	                mml.parent.replaceChild(mml.childNodes[0], mml);
    	                data.removeFromList('mrow', [mml]);
    	            }
    	        }
    	    }
    	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	    finally {
    	        try {
    	            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
    	        }
    	        finally { if (e_1) throw e_1.error; }
    	    }
    	}
    	var BaseTags = (function (_super) {
    	    __extends(BaseTags, _super);
    	    function BaseTags() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return BaseTags;
    	}(Tags_js_1.AbstractTags));
    	BaseConfiguration.BaseTags = BaseTags;
    	BaseConfiguration.BaseConfiguration = Configuration_js_1.Configuration.create('base', {
    	    handler: {
    	        character: ['command', 'special', 'letter', 'digit'],
    	        delimiter: ['delimiter'],
    	        macro: ['delimiter', 'macros', 'mathchar0mi', 'mathchar0mo', 'mathchar7'],
    	        environment: ['environment']
    	    },
    	    fallback: {
    	        character: Other,
    	        macro: csUndefined,
    	        environment: envUndefined
    	    },
    	    items: (_a = {},
    	        _a[bitem.StartItem.prototype.kind] = bitem.StartItem,
    	        _a[bitem.StopItem.prototype.kind] = bitem.StopItem,
    	        _a[bitem.OpenItem.prototype.kind] = bitem.OpenItem,
    	        _a[bitem.CloseItem.prototype.kind] = bitem.CloseItem,
    	        _a[bitem.PrimeItem.prototype.kind] = bitem.PrimeItem,
    	        _a[bitem.SubsupItem.prototype.kind] = bitem.SubsupItem,
    	        _a[bitem.OverItem.prototype.kind] = bitem.OverItem,
    	        _a[bitem.LeftItem.prototype.kind] = bitem.LeftItem,
    	        _a[bitem.Middle.prototype.kind] = bitem.Middle,
    	        _a[bitem.RightItem.prototype.kind] = bitem.RightItem,
    	        _a[bitem.BeginItem.prototype.kind] = bitem.BeginItem,
    	        _a[bitem.EndItem.prototype.kind] = bitem.EndItem,
    	        _a[bitem.StyleItem.prototype.kind] = bitem.StyleItem,
    	        _a[bitem.PositionItem.prototype.kind] = bitem.PositionItem,
    	        _a[bitem.CellItem.prototype.kind] = bitem.CellItem,
    	        _a[bitem.MmlItem.prototype.kind] = bitem.MmlItem,
    	        _a[bitem.FnItem.prototype.kind] = bitem.FnItem,
    	        _a[bitem.NotItem.prototype.kind] = bitem.NotItem,
    	        _a[bitem.NonscriptItem.prototype.kind] = bitem.NonscriptItem,
    	        _a[bitem.DotsItem.prototype.kind] = bitem.DotsItem,
    	        _a[bitem.ArrayItem.prototype.kind] = bitem.ArrayItem,
    	        _a[bitem.EqnArrayItem.prototype.kind] = bitem.EqnArrayItem,
    	        _a[bitem.EquationItem.prototype.kind] = bitem.EquationItem,
    	        _a),
    	    options: {
    	        maxMacros: 1000,
    	        baseURL: (typeof (document) === 'undefined' ||
    	            document.getElementsByTagName('base').length === 0) ?
    	            '' : String(document.location).replace(/#.*$/, '')
    	    },
    	    tags: {
    	        base: BaseTags
    	    },
    	    postprocessors: [[filterNonscript, -4]]
    	});
    	
    	return BaseConfiguration;
    }

    var hasRequiredTex;

    function requireTex () {
    	if (hasRequiredTex) return tex;
    	hasRequiredTex = 1;
    	var __extends = (tex.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (tex.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __read = (tex.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __importDefault = (tex.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(tex, "__esModule", { value: true });
    	tex.TeX = undefined;
    	var InputJax_js_1 = requireInputJax();
    	var Options_js_1 = requireOptions();
    	var FindTeX_js_1 = requireFindTeX();
    	var FilterUtil_js_1 = __importDefault(requireFilterUtil());
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var ParseOptions_js_1 = __importDefault(requireParseOptions());
    	var Tags_js_1 = requireTags();
    	var Configuration_js_1 = requireConfiguration();
    	requireBaseConfiguration();
    	var TeX = (function (_super) {
    	    __extends(TeX, _super);
    	    function TeX(options) {
    	        if (options === undefined) { options = {}; }
    	        var _this = this;
    	        var _a = __read((0, Options_js_1.separateOptions)(options, TeX.OPTIONS, FindTeX_js_1.FindTeX.OPTIONS), 3), rest = _a[0], tex = _a[1], find = _a[2];
    	        _this = _super.call(this, tex) || this;
    	        _this.findTeX = _this.options['FindTeX'] || new FindTeX_js_1.FindTeX(find);
    	        var packages = _this.options.packages;
    	        var configuration = _this.configuration = TeX.configure(packages);
    	        var parseOptions = _this._parseOptions =
    	            new ParseOptions_js_1.default(configuration, [_this.options, Tags_js_1.TagsFactory.OPTIONS]);
    	        (0, Options_js_1.userOptions)(parseOptions.options, rest);
    	        configuration.config(_this);
    	        TeX.tags(parseOptions, configuration);
    	        _this.postFilters.add(FilterUtil_js_1.default.cleanSubSup, -6);
    	        _this.postFilters.add(FilterUtil_js_1.default.setInherited, -5);
    	        _this.postFilters.add(FilterUtil_js_1.default.moveLimits, -4);
    	        _this.postFilters.add(FilterUtil_js_1.default.cleanStretchy, -3);
    	        _this.postFilters.add(FilterUtil_js_1.default.cleanAttributes, -2);
    	        _this.postFilters.add(FilterUtil_js_1.default.combineRelations, -1);
    	        return _this;
    	    }
    	    TeX.configure = function (packages) {
    	        var configuration = new Configuration_js_1.ParserConfiguration(packages, ['tex']);
    	        configuration.init();
    	        return configuration;
    	    };
    	    TeX.tags = function (options, configuration) {
    	        Tags_js_1.TagsFactory.addTags(configuration.tags);
    	        Tags_js_1.TagsFactory.setDefault(options.options.tags);
    	        options.tags = Tags_js_1.TagsFactory.getDefault();
    	        options.tags.configuration = options;
    	    };
    	    TeX.prototype.setMmlFactory = function (mmlFactory) {
    	        _super.prototype.setMmlFactory.call(this, mmlFactory);
    	        this._parseOptions.nodeFactory.setMmlFactory(mmlFactory);
    	    };
    	    Object.defineProperty(TeX.prototype, "parseOptions", {
    	        get: function () {
    	            return this._parseOptions;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    TeX.prototype.reset = function (tag) {
    	        if (tag === undefined) { tag = 0; }
    	        this.parseOptions.tags.reset(tag);
    	    };
    	    TeX.prototype.compile = function (math, document) {
    	        this.parseOptions.clear();
    	        this.executeFilters(this.preFilters, math, document, this.parseOptions);
    	        var display = math.display;
    	        this.latex = math.math;
    	        var node;
    	        this.parseOptions.tags.startEquation(math);
    	        var globalEnv;
    	        try {
    	            var parser = new TexParser_js_1.default(this.latex, { display: display, isInner: false }, this.parseOptions);
    	            node = parser.mml();
    	            globalEnv = parser.stack.global;
    	        }
    	        catch (err) {
    	            if (!(err instanceof TexError_js_1.default)) {
    	                throw err;
    	            }
    	            this.parseOptions.error = true;
    	            node = this.options.formatError(this, err);
    	        }
    	        node = this.parseOptions.nodeFactory.create('node', 'math', [node]);
    	        if (globalEnv === null || globalEnv === undefined ? undefined : globalEnv.indentalign) {
    	            NodeUtil_js_1.default.setAttribute(node, 'indentalign', globalEnv.indentalign);
    	        }
    	        if (display) {
    	            NodeUtil_js_1.default.setAttribute(node, 'display', 'block');
    	        }
    	        this.parseOptions.tags.finishEquation(math);
    	        this.parseOptions.root = node;
    	        this.executeFilters(this.postFilters, math, document, this.parseOptions);
    	        this.mathNode = this.parseOptions.root;
    	        return this.mathNode;
    	    };
    	    TeX.prototype.findMath = function (strings) {
    	        return this.findTeX.findMath(strings);
    	    };
    	    TeX.prototype.formatError = function (err) {
    	        var message = err.message.replace(/\n.*/, '');
    	        return this.parseOptions.nodeFactory.create('error', message, err.id, this.latex);
    	    };
    	    TeX.NAME = 'TeX';
    	    TeX.OPTIONS = __assign(__assign({}, InputJax_js_1.AbstractInputJax.OPTIONS), { FindTeX: null, packages: ['base'], digits: /^(?:[0-9]+(?:\{,\}[0-9]{3})*(?:\.[0-9]*)?|\.[0-9]+)/, maxBuffer: 5 * 1024, formatError: function (jax, err) { return jax.formatError(err); } });
    	    return TeX;
    	}(InputJax_js_1.AbstractInputJax));
    	tex.TeX = TeX;
    	
    	return tex;
    }

    requireTex();

    var liteAdaptor = {};

    var DOMAdaptor = {};

    var hasRequiredDOMAdaptor;

    function requireDOMAdaptor () {
    	if (hasRequiredDOMAdaptor) return DOMAdaptor;
    	hasRequiredDOMAdaptor = 1;
    	var __values = (DOMAdaptor.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(DOMAdaptor, "__esModule", { value: true });
    	DOMAdaptor.AbstractDOMAdaptor = undefined;
    	var AbstractDOMAdaptor = (function () {
    	    function AbstractDOMAdaptor(document) {
    	        if (document === undefined) { document = null; }
    	        this.document = document;
    	    }
    	    AbstractDOMAdaptor.prototype.node = function (kind, def, children, ns) {
    	        var e_1, _a;
    	        if (def === undefined) { def = {}; }
    	        if (children === undefined) { children = []; }
    	        var node = this.create(kind, ns);
    	        this.setAttributes(node, def);
    	        try {
    	            for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
    	                var child = children_1_1.value;
    	                this.append(node, child);
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        return node;
    	    };
    	    AbstractDOMAdaptor.prototype.setAttributes = function (node, def) {
    	        var e_2, _a, e_3, _b, e_4, _c;
    	        if (def.style && typeof (def.style) !== 'string') {
    	            try {
    	                for (var _d = __values(Object.keys(def.style)), _e = _d.next(); !_e.done; _e = _d.next()) {
    	                    var key = _e.value;
    	                    this.setStyle(node, key.replace(/-([a-z])/g, function (_m, c) { return c.toUpperCase(); }), def.style[key]);
    	                }
    	            }
    	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	            finally {
    	                try {
    	                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
    	                }
    	                finally { if (e_2) throw e_2.error; }
    	            }
    	        }
    	        if (def.properties) {
    	            try {
    	                for (var _f = __values(Object.keys(def.properties)), _g = _f.next(); !_g.done; _g = _f.next()) {
    	                    var key = _g.value;
    	                    node[key] = def.properties[key];
    	                }
    	            }
    	            catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	            finally {
    	                try {
    	                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
    	                }
    	                finally { if (e_3) throw e_3.error; }
    	            }
    	        }
    	        try {
    	            for (var _h = __values(Object.keys(def)), _j = _h.next(); !_j.done; _j = _h.next()) {
    	                var key = _j.value;
    	                if ((key !== 'style' || typeof (def.style) === 'string') && key !== 'properties') {
    	                    this.setAttribute(node, key, def[key]);
    	                }
    	            }
    	        }
    	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    	        finally {
    	            try {
    	                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
    	            }
    	            finally { if (e_4) throw e_4.error; }
    	        }
    	    };
    	    AbstractDOMAdaptor.prototype.replace = function (nnode, onode) {
    	        this.insert(nnode, onode);
    	        this.remove(onode);
    	        return onode;
    	    };
    	    AbstractDOMAdaptor.prototype.childNode = function (node, i) {
    	        return this.childNodes(node)[i];
    	    };
    	    AbstractDOMAdaptor.prototype.allClasses = function (node) {
    	        var classes = this.getAttribute(node, 'class');
    	        return (!classes ? [] :
    	            classes.replace(/  +/g, ' ').replace(/^ /, '').replace(/ $/, '').split(/ /));
    	    };
    	    return AbstractDOMAdaptor;
    	}());
    	DOMAdaptor.AbstractDOMAdaptor = AbstractDOMAdaptor;
    	
    	return DOMAdaptor;
    }

    var NodeMixin = {};

    var hasRequiredNodeMixin;

    function requireNodeMixin () {
    	if (hasRequiredNodeMixin) return NodeMixin;
    	hasRequiredNodeMixin = 1;
    	(function (exports) {
    		var __extends = (NodeMixin.__extends) || (function () {
    		    var extendStatics = function (d, b) {
    		        extendStatics = Object.setPrototypeOf ||
    		            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    		            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    		        return extendStatics(d, b);
    		    };
    		    return function (d, b) {
    		        if (typeof b !== "function" && b !== null)
    		            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    		        extendStatics(d, b);
    		        function __() { this.constructor = d; }
    		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    		    };
    		})();
    		var __assign = (NodeMixin.__assign) || function () {
    		    __assign = Object.assign || function(t) {
    		        for (var s, i = 1, n = arguments.length; i < n; i++) {
    		            s = arguments[i];
    		            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    		                t[p] = s[p];
    		        }
    		        return t;
    		    };
    		    return __assign.apply(this, arguments);
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.NodeMixin = exports.NodeMixinOptions = undefined;
    		var Options_js_1 = requireOptions();
    		exports.NodeMixinOptions = {
    		    badCSS: true,
    		    badSizes: true,
    		};
    		function NodeMixin$1(Base, options) {
    		    var _a;
    		    if (options === undefined) { options = {}; }
    		    options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, exports.NodeMixinOptions), options);
    		    return _a = (function (_super) {
    		            __extends(NodeAdaptor, _super);
    		            function NodeAdaptor() {
    		                var args = [];
    		                for (var _i = 0; _i < arguments.length; _i++) {
    		                    args[_i] = arguments[_i];
    		                }
    		                var _this = _super.call(this, args[0]) || this;
    		                var CLASS = _this.constructor;
    		                _this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), args[1]);
    		                return _this;
    		            }
    		            NodeAdaptor.prototype.fontSize = function (node) {
    		                return (options.badCSS ? this.options.fontSize : _super.prototype.fontSize.call(this, node));
    		            };
    		            NodeAdaptor.prototype.fontFamily = function (node) {
    		                return (options.badCSS ? this.options.fontFamily : _super.prototype.fontFamily.call(this, node));
    		            };
    		            NodeAdaptor.prototype.nodeSize = function (node, em, local) {
    		                if (em === undefined) { em = 1; }
    		                if (local === undefined) { local = null; }
    		                if (!options.badSizes) {
    		                    return _super.prototype.nodeSize.call(this, node, em, local);
    		                }
    		                var text = this.textContent(node);
    		                var non = Array.from(text.replace(NodeAdaptor.cjkPattern, '')).length;
    		                var CJK = Array.from(text).length - non;
    		                return [
    		                    CJK * this.options.cjkCharWidth + non * this.options.unknownCharWidth,
    		                    this.options.unknownCharHeight
    		                ];
    		            };
    		            NodeAdaptor.prototype.nodeBBox = function (node) {
    		                return (options.badSizes ? { left: 0, right: 0, top: 0, bottom: 0 } : _super.prototype.nodeBBox.call(this, node));
    		            };
    		            return NodeAdaptor;
    		        }(Base)),
    		        _a.OPTIONS = __assign(__assign({}, (options.badCSS ? {
    		            fontSize: 16,
    		            fontFamily: 'Times',
    		        } : {})), (options.badSizes ? {
    		            cjkCharWidth: 1,
    		            unknownCharWidth: .6,
    		            unknownCharHeight: .8,
    		        } : {})),
    		        _a.cjkPattern = new RegExp([
    		            '[',
    		            '\u1100-\u115F',
    		            '\u2329\u232A',
    		            '\u2E80-\u303E',
    		            '\u3040-\u3247',
    		            '\u3250-\u4DBF',
    		            '\u4E00-\uA4C6',
    		            '\uA960-\uA97C',
    		            '\uAC00-\uD7A3',
    		            '\uF900-\uFAFF',
    		            '\uFE10-\uFE19',
    		            '\uFE30-\uFE6B',
    		            '\uFF01-\uFF60\uFFE0-\uFFE6',
    		            "\uD82C\uDC00-\uD82C\uDC01",
    		            "\uD83C\uDE00-\uD83C\uDE51",
    		            "\uD840\uDC00-\uD8BF\uDFFD",
    		            ']'
    		        ].join(''), 'gu'),
    		        _a;
    		}
    		exports.NodeMixin = NodeMixin$1;
    		
    	} (NodeMixin));
    	return NodeMixin;
    }

    var Document = {};

    var Element = {};

    var hasRequiredElement;

    function requireElement () {
    	if (hasRequiredElement) return Element;
    	hasRequiredElement = 1;
    	var __assign = (Element.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __read = (Element.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (Element.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __values = (Element.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(Element, "__esModule", { value: true });
    	Element.LiteElement = undefined;
    	var LiteElement = (function () {
    	    function LiteElement(kind, attributes, children) {
    	        var e_1, _a;
    	        if (attributes === undefined) { attributes = {}; }
    	        if (children === undefined) { children = []; }
    	        this.kind = kind;
    	        this.attributes = __assign({}, attributes);
    	        this.children = __spreadArray([], __read(children), false);
    	        try {
    	            for (var _b = __values(this.children), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                child.parent = this;
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        this.styles = null;
    	    }
    	    return LiteElement;
    	}());
    	Element.LiteElement = LiteElement;
    	
    	return Element;
    }

    var hasRequiredDocument;

    function requireDocument () {
    	if (hasRequiredDocument) return Document;
    	hasRequiredDocument = 1;
    	Object.defineProperty(Document, "__esModule", { value: true });
    	Document.LiteDocument = undefined;
    	var Element_js_1 = requireElement();
    	var LiteDocument = (function () {
    	    function LiteDocument() {
    	        this.root = new Element_js_1.LiteElement('html', {}, [
    	            this.head = new Element_js_1.LiteElement('head'),
    	            this.body = new Element_js_1.LiteElement('body')
    	        ]);
    	        this.type = '';
    	    }
    	    Object.defineProperty(LiteDocument.prototype, "kind", {
    	        get: function () {
    	            return '#document';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return LiteDocument;
    	}());
    	Document.LiteDocument = LiteDocument;
    	
    	return Document;
    }

    var Text = {};

    var hasRequiredText;

    function requireText () {
    	if (hasRequiredText) return Text;
    	hasRequiredText = 1;
    	var __extends = (Text.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(Text, "__esModule", { value: true });
    	Text.LiteComment = Text.LiteText = undefined;
    	var LiteText = (function () {
    	    function LiteText(text) {
    	        if (text === undefined) { text = ''; }
    	        this.value = text;
    	    }
    	    Object.defineProperty(LiteText.prototype, "kind", {
    	        get: function () {
    	            return '#text';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return LiteText;
    	}());
    	Text.LiteText = LiteText;
    	var LiteComment = (function (_super) {
    	    __extends(LiteComment, _super);
    	    function LiteComment() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(LiteComment.prototype, "kind", {
    	        get: function () {
    	            return '#comment';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return LiteComment;
    	}(LiteText));
    	Text.LiteComment = LiteComment;
    	
    	return Text;
    }

    var Window = {};

    var List = {};

    var hasRequiredList;

    function requireList () {
    	if (hasRequiredList) return List;
    	hasRequiredList = 1;
    	var __read = (List.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (List.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(List, "__esModule", { value: true });
    	List.LiteList = undefined;
    	var LiteList = (function () {
    	    function LiteList(children) {
    	        this.nodes = [];
    	        this.nodes = __spreadArray([], __read(children), false);
    	    }
    	    LiteList.prototype.append = function (node) {
    	        this.nodes.push(node);
    	    };
    	    LiteList.prototype[Symbol.iterator] = function () {
    	        var i = 0;
    	        return {
    	            next: function () {
    	                return (i === this.nodes.length ?
    	                    { value: null, done: true } :
    	                    { value: this.nodes[i++], done: false });
    	            }
    	        };
    	    };
    	    return LiteList;
    	}());
    	List.LiteList = LiteList;
    	
    	return List;
    }

    var Parser = {};

    var hasRequiredParser;

    function requireParser () {
    	if (hasRequiredParser) return Parser;
    	hasRequiredParser = 1;
    	(function (exports) {
    		var __createBinding = (Parser.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    		    if (k2 === undefined) k2 = k;
    		    var desc = Object.getOwnPropertyDescriptor(m, k);
    		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    		      desc = { enumerable: true, get: function() { return m[k]; } };
    		    }
    		    Object.defineProperty(o, k2, desc);
    		}) : (function(o, m, k, k2) {
    		    if (k2 === undefined) k2 = k;
    		    o[k2] = m[k];
    		}));
    		var __setModuleDefault = (Parser.__setModuleDefault) || (Object.create ? (function(o, v) {
    		    Object.defineProperty(o, "default", { enumerable: true, value: v });
    		}) : function(o, v) {
    		    o["default"] = v;
    		});
    		var __importStar = (Parser.__importStar) || function (mod) {
    		    if (mod && mod.__esModule) return mod;
    		    var result = {};
    		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    		    __setModuleDefault(result, mod);
    		    return result;
    		};
    		var __read = (Parser.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __values = (Parser.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.LiteParser = exports.PATTERNS = undefined;
    		var Entities = __importStar(requireEntities());
    		var Element_js_1 = requireElement();
    		var Text_js_1 = requireText();
    		var PATTERNS;
    		(function (PATTERNS) {
    		    PATTERNS.TAGNAME = '[a-z][^\\s\\n>]*';
    		    PATTERNS.ATTNAME = '[a-z][^\\s\\n>=]*';
    		    PATTERNS.VALUE = "(?:'[^']*'|\"[^\"]*\"|[^\\s\\n]+)";
    		    PATTERNS.VALUESPLIT = "(?:'([^']*)'|\"([^\"]*)\"|([^\\s\\n]+))";
    		    PATTERNS.SPACE = '(?:\\s|\\n)+';
    		    PATTERNS.OPTIONALSPACE = '(?:\\s|\\n)*';
    		    PATTERNS.ATTRIBUTE = PATTERNS.ATTNAME + '(?:' + PATTERNS.OPTIONALSPACE + '=' + PATTERNS.OPTIONALSPACE + PATTERNS.VALUE + ')?';
    		    PATTERNS.ATTRIBUTESPLIT = '(' + PATTERNS.ATTNAME + ')(?:' + PATTERNS.OPTIONALSPACE + '=' + PATTERNS.OPTIONALSPACE + PATTERNS.VALUESPLIT + ')?';
    		    PATTERNS.TAG = '(<(?:' + PATTERNS.TAGNAME + '(?:' + PATTERNS.SPACE + PATTERNS.ATTRIBUTE + ')*'
    		        + PATTERNS.OPTIONALSPACE + '/?|/' + PATTERNS.TAGNAME + '|!--[^]*?--|![^]*?)(?:>|$))';
    		    PATTERNS.tag = new RegExp(PATTERNS.TAG, 'i');
    		    PATTERNS.attr = new RegExp(PATTERNS.ATTRIBUTE, 'i');
    		    PATTERNS.attrsplit = new RegExp(PATTERNS.ATTRIBUTESPLIT, 'i');
    		})(PATTERNS = exports.PATTERNS || (exports.PATTERNS = {}));
    		var LiteParser = (function () {
    		    function LiteParser() {
    		    }
    		    LiteParser.prototype.parseFromString = function (text, _format, adaptor) {
    		        if (adaptor === undefined) { adaptor = null; }
    		        var root = adaptor.createDocument();
    		        var node = adaptor.body(root);
    		        var parts = text.replace(/<\?.*?\?>/g, '').split(PATTERNS.tag);
    		        while (parts.length) {
    		            var text_1 = parts.shift();
    		            var tag = parts.shift();
    		            if (text_1) {
    		                this.addText(adaptor, node, text_1);
    		            }
    		            if (tag && tag.charAt(tag.length - 1) === '>') {
    		                if (tag.charAt(1) === '!') {
    		                    this.addComment(adaptor, node, tag);
    		                }
    		                else if (tag.charAt(1) === '/') {
    		                    node = this.closeTag(adaptor, node, tag);
    		                }
    		                else {
    		                    node = this.openTag(adaptor, node, tag, parts);
    		                }
    		            }
    		        }
    		        this.checkDocument(adaptor, root);
    		        return root;
    		    };
    		    LiteParser.prototype.addText = function (adaptor, node, text) {
    		        text = Entities.translate(text);
    		        return adaptor.append(node, adaptor.text(text));
    		    };
    		    LiteParser.prototype.addComment = function (adaptor, node, comment) {
    		        return adaptor.append(node, new Text_js_1.LiteComment(comment));
    		    };
    		    LiteParser.prototype.closeTag = function (adaptor, node, tag) {
    		        var kind = tag.slice(2, tag.length - 1).toLowerCase();
    		        while (adaptor.parent(node) && adaptor.kind(node) !== kind) {
    		            node = adaptor.parent(node);
    		        }
    		        return adaptor.parent(node);
    		    };
    		    LiteParser.prototype.openTag = function (adaptor, node, tag, parts) {
    		        var PCDATA = this.constructor.PCDATA;
    		        var SELF_CLOSING = this.constructor.SELF_CLOSING;
    		        var kind = tag.match(/<(.*?)[\s\n>\/]/)[1].toLowerCase();
    		        var child = adaptor.node(kind);
    		        var attributes = tag.replace(/^<.*?[\s\n>]/, '').split(PATTERNS.attrsplit);
    		        if (attributes.pop().match(/>$/) || attributes.length < 5) {
    		            this.addAttributes(adaptor, child, attributes);
    		            adaptor.append(node, child);
    		            if (!SELF_CLOSING[kind] && !tag.match(/\/>$/)) {
    		                if (PCDATA[kind]) {
    		                    this.handlePCDATA(adaptor, child, kind, parts);
    		                }
    		                else {
    		                    node = child;
    		                }
    		            }
    		        }
    		        return node;
    		    };
    		    LiteParser.prototype.addAttributes = function (adaptor, node, attributes) {
    		        var CDATA_ATTR = this.constructor.CDATA_ATTR;
    		        while (attributes.length) {
    		            var _a = __read(attributes.splice(0, 5), 5), name_1 = _a[1], v1 = _a[2], v2 = _a[3], v3 = _a[4];
    		            var value = v1 || v2 || v3 || '';
    		            if (!CDATA_ATTR[name_1]) {
    		                value = Entities.translate(value);
    		            }
    		            adaptor.setAttribute(node, name_1, value);
    		        }
    		    };
    		    LiteParser.prototype.handlePCDATA = function (adaptor, node, kind, parts) {
    		        var pcdata = [];
    		        var etag = '</' + kind + '>';
    		        var ptag = '';
    		        while (parts.length && ptag !== etag) {
    		            pcdata.push(ptag);
    		            pcdata.push(parts.shift());
    		            ptag = parts.shift();
    		        }
    		        adaptor.append(node, adaptor.text(pcdata.join('')));
    		    };
    		    LiteParser.prototype.checkDocument = function (adaptor, root) {
    		        var e_1, _a, e_2, _b;
    		        var node = this.getOnlyChild(adaptor, adaptor.body(root));
    		        if (!node)
    		            return;
    		        try {
    		            for (var _c = __values(adaptor.childNodes(adaptor.body(root))), _d = _c.next(); !_d.done; _d = _c.next()) {
    		                var child = _d.value;
    		                if (child === node) {
    		                    break;
    		                }
    		                if (child instanceof Text_js_1.LiteComment && child.value.match(/^<!DOCTYPE/)) {
    		                    root.type = child.value;
    		                }
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		        switch (adaptor.kind(node)) {
    		            case 'html':
    		                try {
    		                    for (var _e = __values(node.children), _f = _e.next(); !_f.done; _f = _e.next()) {
    		                        var child = _f.value;
    		                        switch (adaptor.kind(child)) {
    		                            case 'head':
    		                                root.head = child;
    		                                break;
    		                            case 'body':
    		                                root.body = child;
    		                                break;
    		                        }
    		                    }
    		                }
    		                catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		                finally {
    		                    try {
    		                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
    		                    }
    		                    finally { if (e_2) throw e_2.error; }
    		                }
    		                root.root = node;
    		                adaptor.remove(node);
    		                if (adaptor.parent(root.body) !== node) {
    		                    adaptor.append(node, root.body);
    		                }
    		                if (adaptor.parent(root.head) !== node) {
    		                    adaptor.insert(root.head, root.body);
    		                }
    		                break;
    		            case 'head':
    		                root.head = adaptor.replace(node, root.head);
    		                break;
    		            case 'body':
    		                root.body = adaptor.replace(node, root.body);
    		                break;
    		        }
    		    };
    		    LiteParser.prototype.getOnlyChild = function (adaptor, body) {
    		        var e_3, _a;
    		        var node = null;
    		        try {
    		            for (var _b = __values(adaptor.childNodes(body)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var child = _c.value;
    		                if (child instanceof Element_js_1.LiteElement) {
    		                    if (node)
    		                        return null;
    		                    node = child;
    		                }
    		            }
    		        }
    		        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_3) throw e_3.error; }
    		        }
    		        return node;
    		    };
    		    LiteParser.prototype.serialize = function (adaptor, node, xml) {
    		        var _this = this;
    		        if (xml === undefined) { xml = false; }
    		        var SELF_CLOSING = this.constructor.SELF_CLOSING;
    		        var CDATA = this.constructor.CDATA_ATTR;
    		        var tag = adaptor.kind(node);
    		        var attributes = adaptor.allAttributes(node).map(function (x) { return x.name + '="' + (CDATA[x.name] ? x.value : _this.protectAttribute(x.value)) + '"'; }).join(' ');
    		        var content = this.serializeInner(adaptor, node, xml);
    		        var html = '<' + tag + (attributes ? ' ' + attributes : '')
    		            + ((!xml || content) && !SELF_CLOSING[tag] ? ">".concat(content, "</").concat(tag, ">") : xml ? '/>' : '>');
    		        return html;
    		    };
    		    LiteParser.prototype.serializeInner = function (adaptor, node, xml) {
    		        var _this = this;
    		        if (xml === undefined) { xml = false; }
    		        var PCDATA = this.constructor.PCDATA;
    		        if (PCDATA.hasOwnProperty(node.kind)) {
    		            return adaptor.childNodes(node).map(function (x) { return adaptor.value(x); }).join('');
    		        }
    		        return adaptor.childNodes(node).map(function (x) {
    		            var kind = adaptor.kind(x);
    		            return (kind === '#text' ? _this.protectHTML(adaptor.value(x)) :
    		                kind === '#comment' ? x.value :
    		                    _this.serialize(adaptor, x, xml));
    		        }).join('');
    		    };
    		    LiteParser.prototype.protectAttribute = function (text) {
    		        if (typeof text !== 'string') {
    		            text = String(text);
    		        }
    		        return text.replace(/"/g, '&quot;');
    		    };
    		    LiteParser.prototype.protectHTML = function (text) {
    		        return text.replace(/&/g, '&amp;')
    		            .replace(/</g, '&lt;')
    		            .replace(/>/g, '&gt;');
    		    };
    		    LiteParser.SELF_CLOSING = {
    		        area: true,
    		        base: true,
    		        br: true,
    		        col: true,
    		        command: true,
    		        embed: true,
    		        hr: true,
    		        img: true,
    		        input: true,
    		        keygen: true,
    		        link: true,
    		        menuitem: true,
    		        meta: true,
    		        param: true,
    		        source: true,
    		        track: true,
    		        wbr: true
    		    };
    		    LiteParser.PCDATA = {
    		        option: true,
    		        textarea: true,
    		        fieldset: true,
    		        title: true,
    		        style: true,
    		        script: true
    		    };
    		    LiteParser.CDATA_ATTR = {
    		        style: true,
    		        datafld: true,
    		        datasrc: true,
    		        href: true,
    		        src: true,
    		        longdesc: true,
    		        usemap: true,
    		        cite: true,
    		        datetime: true,
    		        action: true,
    		        axis: true,
    		        profile: true,
    		        content: true,
    		        scheme: true
    		    };
    		    return LiteParser;
    		}());
    		exports.LiteParser = LiteParser;
    		
    	} (Parser));
    	return Parser;
    }

    var hasRequiredWindow;

    function requireWindow () {
    	if (hasRequiredWindow) return Window;
    	hasRequiredWindow = 1;
    	Object.defineProperty(Window, "__esModule", { value: true });
    	Window.LiteWindow = undefined;
    	var Element_js_1 = requireElement();
    	var Document_js_1 = requireDocument();
    	var List_js_1 = requireList();
    	var Parser_js_1 = requireParser();
    	var LiteWindow = (function () {
    	    function LiteWindow() {
    	        this.DOMParser = Parser_js_1.LiteParser;
    	        this.NodeList = List_js_1.LiteList;
    	        this.HTMLCollection = List_js_1.LiteList;
    	        this.HTMLElement = Element_js_1.LiteElement;
    	        this.DocumentFragment = List_js_1.LiteList;
    	        this.Document = Document_js_1.LiteDocument;
    	        this.document = new Document_js_1.LiteDocument();
    	    }
    	    return LiteWindow;
    	}());
    	Window.LiteWindow = LiteWindow;
    	
    	return Window;
    }

    var Styles = {};

    var hasRequiredStyles;

    function requireStyles () {
    	if (hasRequiredStyles) return Styles;
    	hasRequiredStyles = 1;
    	var __values = (Styles.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (Styles.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (Styles.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(Styles, "__esModule", { value: true });
    	Styles.Styles = undefined;
    	var TRBL = ['top', 'right', 'bottom', 'left'];
    	var WSC = ['width', 'style', 'color'];
    	function splitSpaces(text) {
    	    var parts = text.split(/((?:'[^']*'|"[^"]*"|,[\s\n]|[^\s\n])*)/g);
    	    var split = [];
    	    while (parts.length > 1) {
    	        parts.shift();
    	        split.push(parts.shift());
    	    }
    	    return split;
    	}
    	function splitTRBL(name) {
    	    var e_1, _a;
    	    var parts = splitSpaces(this.styles[name]);
    	    if (parts.length === 0) {
    	        parts.push('');
    	    }
    	    if (parts.length === 1) {
    	        parts.push(parts[0]);
    	    }
    	    if (parts.length === 2) {
    	        parts.push(parts[0]);
    	    }
    	    if (parts.length === 3) {
    	        parts.push(parts[1]);
    	    }
    	    try {
    	        for (var _b = __values(Styles$1.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {
    	            var child = _c.value;
    	            this.setStyle(this.childName(name, child), parts.shift());
    	        }
    	    }
    	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	    finally {
    	        try {
    	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	        }
    	        finally { if (e_1) throw e_1.error; }
    	    }
    	}
    	function combineTRBL(name) {
    	    var e_2, _a;
    	    var children = Styles$1.connect[name].children;
    	    var parts = [];
    	    try {
    	        for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
    	            var child = children_1_1.value;
    	            var part = this.styles[name + '-' + child];
    	            if (!part) {
    	                delete this.styles[name];
    	                return;
    	            }
    	            parts.push(part);
    	        }
    	    }
    	    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	    finally {
    	        try {
    	            if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
    	        }
    	        finally { if (e_2) throw e_2.error; }
    	    }
    	    if (parts[3] === parts[1]) {
    	        parts.pop();
    	        if (parts[2] === parts[0]) {
    	            parts.pop();
    	            if (parts[1] === parts[0]) {
    	                parts.pop();
    	            }
    	        }
    	    }
    	    this.styles[name] = parts.join(' ');
    	}
    	function splitSame(name) {
    	    var e_3, _a;
    	    try {
    	        for (var _b = __values(Styles$1.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {
    	            var child = _c.value;
    	            this.setStyle(this.childName(name, child), this.styles[name]);
    	        }
    	    }
    	    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	    finally {
    	        try {
    	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	        }
    	        finally { if (e_3) throw e_3.error; }
    	    }
    	}
    	function combineSame(name) {
    	    var e_4, _a;
    	    var children = __spreadArray([], __read(Styles$1.connect[name].children), false);
    	    var value = this.styles[this.childName(name, children.shift())];
    	    try {
    	        for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {
    	            var child = children_2_1.value;
    	            if (this.styles[this.childName(name, child)] !== value) {
    	                delete this.styles[name];
    	                return;
    	            }
    	        }
    	    }
    	    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    	    finally {
    	        try {
    	            if (children_2_1 && !children_2_1.done && (_a = children_2.return)) _a.call(children_2);
    	        }
    	        finally { if (e_4) throw e_4.error; }
    	    }
    	    this.styles[name] = value;
    	}
    	var BORDER = {
    	    width: /^(?:[\d.]+(?:[a-z]+)|thin|medium|thick|inherit|initial|unset)$/,
    	    style: /^(?:none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|inherit|initial|unset)$/
    	};
    	function splitWSC(name) {
    	    var e_5, _a, e_6, _b;
    	    var parts = { width: '', style: '', color: '' };
    	    try {
    	        for (var _c = __values(splitSpaces(this.styles[name])), _d = _c.next(); !_d.done; _d = _c.next()) {
    	            var part = _d.value;
    	            if (part.match(BORDER.width) && parts.width === '') {
    	                parts.width = part;
    	            }
    	            else if (part.match(BORDER.style) && parts.style === '') {
    	                parts.style = part;
    	            }
    	            else {
    	                parts.color = part;
    	            }
    	        }
    	    }
    	    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    	    finally {
    	        try {
    	            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    	        }
    	        finally { if (e_5) throw e_5.error; }
    	    }
    	    try {
    	        for (var _e = __values(Styles$1.connect[name].children), _f = _e.next(); !_f.done; _f = _e.next()) {
    	            var child = _f.value;
    	            this.setStyle(this.childName(name, child), parts[child]);
    	        }
    	    }
    	    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    	    finally {
    	        try {
    	            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
    	        }
    	        finally { if (e_6) throw e_6.error; }
    	    }
    	}
    	function combineWSC(name) {
    	    var e_7, _a;
    	    var parts = [];
    	    try {
    	        for (var _b = __values(Styles$1.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {
    	            var child = _c.value;
    	            var value = this.styles[this.childName(name, child)];
    	            if (value) {
    	                parts.push(value);
    	            }
    	        }
    	    }
    	    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    	    finally {
    	        try {
    	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	        }
    	        finally { if (e_7) throw e_7.error; }
    	    }
    	    if (parts.length) {
    	        this.styles[name] = parts.join(' ');
    	    }
    	    else {
    	        delete this.styles[name];
    	    }
    	}
    	var FONT = {
    	    style: /^(?:normal|italic|oblique|inherit|initial|unset)$/,
    	    variant: new RegExp('^(?:' +
    	        ['normal|none',
    	            'inherit|initial|unset',
    	            'common-ligatures|no-common-ligatures',
    	            'discretionary-ligatures|no-discretionary-ligatures',
    	            'historical-ligatures|no-historical-ligatures',
    	            'contextual|no-contextual',
    	            '(?:stylistic|character-variant|swash|ornaments|annotation)\\([^)]*\\)',
    	            'small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps',
    	            'lining-nums|oldstyle-nums|proportional-nums|tabular-nums',
    	            'diagonal-fractions|stacked-fractions',
    	            'ordinal|slashed-zero',
    	            'jis78|jis83|jis90|jis04|simplified|traditional',
    	            'full-width|proportional-width',
    	            'ruby'].join('|') + ')$'),
    	    weight: /^(?:normal|bold|bolder|lighter|[1-9]00|inherit|initial|unset)$/,
    	    stretch: new RegExp('^(?:' +
    	        ['normal',
    	            '(?:(?:ultra|extra|semi)-)?condensed',
    	            '(?:(?:semi|extra|ulta)-)?expanded',
    	            'inherit|initial|unset'].join('|') + ')$'),
    	    size: new RegExp('^(?:' +
    	        ['xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller',
    	            '[\d.]+%|[\d.]+[a-z]+',
    	            'inherit|initial|unset'].join('|') + ')' +
    	        '(?:\/(?:normal|[\d.\+](?:%|[a-z]+)?))?$')
    	};
    	function splitFont(name) {
    	    var e_8, _a, e_9, _b;
    	    var parts = splitSpaces(this.styles[name]);
    	    var value = {
    	        style: '', variant: [], weight: '', stretch: '',
    	        size: '', family: '', 'line-height': ''
    	    };
    	    try {
    	        for (var parts_1 = __values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {
    	            var part = parts_1_1.value;
    	            value.family = part;
    	            try {
    	                for (var _c = (e_9 = void 0, __values(Object.keys(FONT))), _d = _c.next(); !_d.done; _d = _c.next()) {
    	                    var name_1 = _d.value;
    	                    if ((Array.isArray(value[name_1]) || value[name_1] === '') && part.match(FONT[name_1])) {
    	                        if (name_1 === 'size') {
    	                            var _e = __read(part.split(/\//), 2), size = _e[0], height = _e[1];
    	                            value[name_1] = size;
    	                            if (height) {
    	                                value['line-height'] = height;
    	                            }
    	                        }
    	                        else if (value.size === '') {
    	                            if (Array.isArray(value[name_1])) {
    	                                value[name_1].push(part);
    	                            }
    	                            else {
    	                                value[name_1] = part;
    	                            }
    	                        }
    	                    }
    	                }
    	            }
    	            catch (e_9_1) { e_9 = { error: e_9_1 }; }
    	            finally {
    	                try {
    	                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
    	                }
    	                finally { if (e_9) throw e_9.error; }
    	            }
    	        }
    	    }
    	    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    	    finally {
    	        try {
    	            if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);
    	        }
    	        finally { if (e_8) throw e_8.error; }
    	    }
    	    saveFontParts(name, value);
    	    delete this.styles[name];
    	}
    	function saveFontParts(name, value) {
    	    var e_10, _a;
    	    try {
    	        for (var _b = __values(Styles$1.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {
    	            var child = _c.value;
    	            var cname = this.childName(name, child);
    	            if (Array.isArray(value[child])) {
    	                var values = value[child];
    	                if (values.length) {
    	                    this.styles[cname] = values.join(' ');
    	                }
    	            }
    	            else if (value[child] !== '') {
    	                this.styles[cname] = value[child];
    	            }
    	        }
    	    }
    	    catch (e_10_1) { e_10 = { error: e_10_1 }; }
    	    finally {
    	        try {
    	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	        }
    	        finally { if (e_10) throw e_10.error; }
    	    }
    	}
    	function combineFont(_name) { }
    	var Styles$1 = (function () {
    	    function Styles(cssText) {
    	        if (cssText === undefined) { cssText = ''; }
    	        this.parse(cssText);
    	    }
    	    Object.defineProperty(Styles.prototype, "cssText", {
    	        get: function () {
    	            var e_11, _a;
    	            var styles = [];
    	            try {
    	                for (var _b = __values(Object.keys(this.styles)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var name_2 = _c.value;
    	                    var parent_1 = this.parentName(name_2);
    	                    if (!this.styles[parent_1]) {
    	                        styles.push(name_2 + ': ' + this.styles[name_2] + ';');
    	                    }
    	                }
    	            }
    	            catch (e_11_1) { e_11 = { error: e_11_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_11) throw e_11.error; }
    	            }
    	            return styles.join(' ');
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Styles.prototype.set = function (name, value) {
    	        name = this.normalizeName(name);
    	        this.setStyle(name, value);
    	        if (Styles.connect[name] && !Styles.connect[name].combine) {
    	            this.combineChildren(name);
    	            delete this.styles[name];
    	        }
    	        while (name.match(/-/)) {
    	            name = this.parentName(name);
    	            if (!Styles.connect[name])
    	                break;
    	            Styles.connect[name].combine.call(this, name);
    	        }
    	    };
    	    Styles.prototype.get = function (name) {
    	        name = this.normalizeName(name);
    	        return (this.styles.hasOwnProperty(name) ? this.styles[name] : '');
    	    };
    	    Styles.prototype.setStyle = function (name, value) {
    	        this.styles[name] = value;
    	        if (Styles.connect[name] && Styles.connect[name].children) {
    	            Styles.connect[name].split.call(this, name);
    	        }
    	        if (value === '') {
    	            delete this.styles[name];
    	        }
    	    };
    	    Styles.prototype.combineChildren = function (name) {
    	        var e_12, _a;
    	        var parent = this.parentName(name);
    	        try {
    	            for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                var cname = this.childName(parent, child);
    	                Styles.connect[cname].combine.call(this, cname);
    	            }
    	        }
    	        catch (e_12_1) { e_12 = { error: e_12_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_12) throw e_12.error; }
    	        }
    	    };
    	    Styles.prototype.parentName = function (name) {
    	        var parent = name.replace(/-[^-]*$/, '');
    	        return (name === parent ? '' : parent);
    	    };
    	    Styles.prototype.childName = function (name, child) {
    	        if (child.match(/-/)) {
    	            return child;
    	        }
    	        if (Styles.connect[name] && !Styles.connect[name].combine) {
    	            child += name.replace(/.*-/, '-');
    	            name = this.parentName(name);
    	        }
    	        return name + '-' + child;
    	    };
    	    Styles.prototype.normalizeName = function (name) {
    	        return name.replace(/[A-Z]/g, function (c) { return '-' + c.toLowerCase(); });
    	    };
    	    Styles.prototype.parse = function (cssText) {
    	        if (cssText === undefined) { cssText = ''; }
    	        var PATTERN = this.constructor.pattern;
    	        this.styles = {};
    	        var parts = cssText.replace(PATTERN.comment, '').split(PATTERN.style);
    	        while (parts.length > 1) {
    	            var _a = __read(parts.splice(0, 3), 3), space = _a[0], name_3 = _a[1], value = _a[2];
    	            if (space.match(/[^\s\n]/))
    	                return;
    	            this.set(name_3, value);
    	        }
    	    };
    	    Styles.pattern = {
    	        style: /([-a-z]+)[\s\n]*:[\s\n]*((?:'[^']*'|"[^"]*"|\n|.)*?)[\s\n]*(?:;|$)/g,
    	        comment: /\/\*[^]*?\*\//g
    	    };
    	    Styles.connect = {
    	        padding: {
    	            children: TRBL,
    	            split: splitTRBL,
    	            combine: combineTRBL
    	        },
    	        border: {
    	            children: TRBL,
    	            split: splitSame,
    	            combine: combineSame
    	        },
    	        'border-top': {
    	            children: WSC,
    	            split: splitWSC,
    	            combine: combineWSC
    	        },
    	        'border-right': {
    	            children: WSC,
    	            split: splitWSC,
    	            combine: combineWSC
    	        },
    	        'border-bottom': {
    	            children: WSC,
    	            split: splitWSC,
    	            combine: combineWSC
    	        },
    	        'border-left': {
    	            children: WSC,
    	            split: splitWSC,
    	            combine: combineWSC
    	        },
    	        'border-width': {
    	            children: TRBL,
    	            split: splitTRBL,
    	            combine: null
    	        },
    	        'border-style': {
    	            children: TRBL,
    	            split: splitTRBL,
    	            combine: null
    	        },
    	        'border-color': {
    	            children: TRBL,
    	            split: splitTRBL,
    	            combine: null
    	        },
    	        font: {
    	            children: ['style', 'variant', 'weight', 'stretch', 'line-height', 'size', 'family'],
    	            split: splitFont,
    	            combine: combineFont
    	        }
    	    };
    	    return Styles;
    	}());
    	Styles.Styles = Styles$1;
    	
    	return Styles;
    }

    var hasRequiredLiteAdaptor;

    function requireLiteAdaptor () {
    	if (hasRequiredLiteAdaptor) return liteAdaptor;
    	hasRequiredLiteAdaptor = 1;
    	var __extends = (liteAdaptor.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (liteAdaptor.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __values = (liteAdaptor.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (liteAdaptor.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (liteAdaptor.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(liteAdaptor, "__esModule", { value: true });
    	liteAdaptor.liteAdaptor = liteAdaptor.LiteAdaptor = liteAdaptor.LiteBase = undefined;
    	var DOMAdaptor_js_1 = requireDOMAdaptor();
    	var NodeMixin_js_1 = requireNodeMixin();
    	var Document_js_1 = requireDocument();
    	var Element_js_1 = requireElement();
    	var Text_js_1 = requireText();
    	var Window_js_1 = requireWindow();
    	var Parser_js_1 = requireParser();
    	var Styles_js_1 = requireStyles();
    	var LiteBase = (function (_super) {
    	    __extends(LiteBase, _super);
    	    function LiteBase() {
    	        var _this = _super.call(this) || this;
    	        _this.parser = new Parser_js_1.LiteParser();
    	        _this.window = new Window_js_1.LiteWindow();
    	        return _this;
    	    }
    	    LiteBase.prototype.parse = function (text, format) {
    	        return this.parser.parseFromString(text, format, this);
    	    };
    	    LiteBase.prototype.create = function (kind, _ns) {
    	        return new Element_js_1.LiteElement(kind);
    	    };
    	    LiteBase.prototype.text = function (text) {
    	        return new Text_js_1.LiteText(text);
    	    };
    	    LiteBase.prototype.comment = function (text) {
    	        return new Text_js_1.LiteComment(text);
    	    };
    	    LiteBase.prototype.createDocument = function () {
    	        return new Document_js_1.LiteDocument();
    	    };
    	    LiteBase.prototype.head = function (doc) {
    	        return doc.head;
    	    };
    	    LiteBase.prototype.body = function (doc) {
    	        return doc.body;
    	    };
    	    LiteBase.prototype.root = function (doc) {
    	        return doc.root;
    	    };
    	    LiteBase.prototype.doctype = function (doc) {
    	        return doc.type;
    	    };
    	    LiteBase.prototype.tags = function (node, name, ns) {
    	        if (ns === undefined) { ns = null; }
    	        var stack = [];
    	        var tags = [];
    	        if (ns) {
    	            return tags;
    	        }
    	        var n = node;
    	        while (n) {
    	            var kind = n.kind;
    	            if (kind !== '#text' && kind !== '#comment') {
    	                n = n;
    	                if (kind === name) {
    	                    tags.push(n);
    	                }
    	                if (n.children.length) {
    	                    stack = n.children.concat(stack);
    	                }
    	            }
    	            n = stack.shift();
    	        }
    	        return tags;
    	    };
    	    LiteBase.prototype.elementById = function (node, id) {
    	        var stack = [];
    	        var n = node;
    	        while (n) {
    	            if (n.kind !== '#text' && n.kind !== '#comment') {
    	                n = n;
    	                if (n.attributes['id'] === id) {
    	                    return n;
    	                }
    	                if (n.children.length) {
    	                    stack = n.children.concat(stack);
    	                }
    	            }
    	            n = stack.shift();
    	        }
    	        return null;
    	    };
    	    LiteBase.prototype.elementsByClass = function (node, name) {
    	        var stack = [];
    	        var tags = [];
    	        var n = node;
    	        while (n) {
    	            if (n.kind !== '#text' && n.kind !== '#comment') {
    	                n = n;
    	                var classes = (n.attributes['class'] || '').trim().split(/ +/);
    	                if (classes.includes(name)) {
    	                    tags.push(n);
    	                }
    	                if (n.children.length) {
    	                    stack = n.children.concat(stack);
    	                }
    	            }
    	            n = stack.shift();
    	        }
    	        return tags;
    	    };
    	    LiteBase.prototype.getElements = function (nodes, document) {
    	        var e_1, _a;
    	        var containers = [];
    	        var body = this.body(document);
    	        try {
    	            for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
    	                var node = nodes_1_1.value;
    	                if (typeof (node) === 'string') {
    	                    if (node.charAt(0) === '#') {
    	                        var n = this.elementById(body, node.slice(1));
    	                        if (n) {
    	                            containers.push(n);
    	                        }
    	                    }
    	                    else if (node.charAt(0) === '.') {
    	                        containers = containers.concat(this.elementsByClass(body, node.slice(1)));
    	                    }
    	                    else if (node.match(/^[-a-z][-a-z0-9]*$/i)) {
    	                        containers = containers.concat(this.tags(body, node));
    	                    }
    	                }
    	                else if (Array.isArray(node)) {
    	                    containers = containers.concat(node);
    	                }
    	                else if (node instanceof this.window.NodeList || node instanceof this.window.HTMLCollection) {
    	                    containers = containers.concat(node.nodes);
    	                }
    	                else {
    	                    containers.push(node);
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        return containers;
    	    };
    	    LiteBase.prototype.contains = function (container, node) {
    	        while (node && node !== container) {
    	            node = this.parent(node);
    	        }
    	        return !!node;
    	    };
    	    LiteBase.prototype.parent = function (node) {
    	        return node.parent;
    	    };
    	    LiteBase.prototype.childIndex = function (node) {
    	        return (node.parent ? node.parent.children.findIndex(function (n) { return n === node; }) : -1);
    	    };
    	    LiteBase.prototype.append = function (node, child) {
    	        if (child.parent) {
    	            this.remove(child);
    	        }
    	        node.children.push(child);
    	        child.parent = node;
    	        return child;
    	    };
    	    LiteBase.prototype.insert = function (nchild, ochild) {
    	        if (nchild.parent) {
    	            this.remove(nchild);
    	        }
    	        if (ochild && ochild.parent) {
    	            var i = this.childIndex(ochild);
    	            ochild.parent.children.splice(i, 0, nchild);
    	            nchild.parent = ochild.parent;
    	        }
    	    };
    	    LiteBase.prototype.remove = function (child) {
    	        var i = this.childIndex(child);
    	        if (i >= 0) {
    	            child.parent.children.splice(i, 1);
    	        }
    	        child.parent = null;
    	        return child;
    	    };
    	    LiteBase.prototype.replace = function (nnode, onode) {
    	        var i = this.childIndex(onode);
    	        if (i >= 0) {
    	            onode.parent.children[i] = nnode;
    	            nnode.parent = onode.parent;
    	            onode.parent = null;
    	        }
    	        return onode;
    	    };
    	    LiteBase.prototype.clone = function (node) {
    	        var _this = this;
    	        var nnode = new Element_js_1.LiteElement(node.kind);
    	        nnode.attributes = __assign({}, node.attributes);
    	        nnode.children = node.children.map(function (n) {
    	            if (n.kind === '#text') {
    	                return new Text_js_1.LiteText(n.value);
    	            }
    	            else if (n.kind === '#comment') {
    	                return new Text_js_1.LiteComment(n.value);
    	            }
    	            else {
    	                var m = _this.clone(n);
    	                m.parent = nnode;
    	                return m;
    	            }
    	        });
    	        return nnode;
    	    };
    	    LiteBase.prototype.split = function (node, n) {
    	        var text = new Text_js_1.LiteText(node.value.slice(n));
    	        node.value = node.value.slice(0, n);
    	        node.parent.children.splice(this.childIndex(node) + 1, 0, text);
    	        text.parent = node.parent;
    	        return text;
    	    };
    	    LiteBase.prototype.next = function (node) {
    	        var parent = node.parent;
    	        if (!parent)
    	            return null;
    	        var i = this.childIndex(node) + 1;
    	        return (i >= 0 && i < parent.children.length ? parent.children[i] : null);
    	    };
    	    LiteBase.prototype.previous = function (node) {
    	        var parent = node.parent;
    	        if (!parent)
    	            return null;
    	        var i = this.childIndex(node) - 1;
    	        return (i >= 0 ? parent.children[i] : null);
    	    };
    	    LiteBase.prototype.firstChild = function (node) {
    	        return node.children[0];
    	    };
    	    LiteBase.prototype.lastChild = function (node) {
    	        return node.children[node.children.length - 1];
    	    };
    	    LiteBase.prototype.childNodes = function (node) {
    	        return __spreadArray([], __read(node.children), false);
    	    };
    	    LiteBase.prototype.childNode = function (node, i) {
    	        return node.children[i];
    	    };
    	    LiteBase.prototype.kind = function (node) {
    	        return node.kind;
    	    };
    	    LiteBase.prototype.value = function (node) {
    	        return (node.kind === '#text' ? node.value :
    	            node.kind === '#comment' ? node.value.replace(/^<!(--)?((?:.|\n)*)\1>$/, '$2') : '');
    	    };
    	    LiteBase.prototype.textContent = function (node) {
    	        var _this = this;
    	        return node.children.reduce(function (s, n) {
    	            return s + (n.kind === '#text' ? n.value :
    	                n.kind === '#comment' ? '' : _this.textContent(n));
    	        }, '');
    	    };
    	    LiteBase.prototype.innerHTML = function (node) {
    	        return this.parser.serializeInner(this, node);
    	    };
    	    LiteBase.prototype.outerHTML = function (node) {
    	        return this.parser.serialize(this, node);
    	    };
    	    LiteBase.prototype.serializeXML = function (node) {
    	        return this.parser.serialize(this, node, true);
    	    };
    	    LiteBase.prototype.setAttribute = function (node, name, value, ns) {
    	        if (ns === undefined) { ns = null; }
    	        if (typeof value !== 'string') {
    	            value = String(value);
    	        }
    	        if (ns) {
    	            name = ns.replace(/.*\//, '') + ':' + name.replace(/^.*:/, '');
    	        }
    	        node.attributes[name] = value;
    	        if (name === 'style') {
    	            node.styles = null;
    	        }
    	    };
    	    LiteBase.prototype.getAttribute = function (node, name) {
    	        return node.attributes[name];
    	    };
    	    LiteBase.prototype.removeAttribute = function (node, name) {
    	        delete node.attributes[name];
    	    };
    	    LiteBase.prototype.hasAttribute = function (node, name) {
    	        return node.attributes.hasOwnProperty(name);
    	    };
    	    LiteBase.prototype.allAttributes = function (node) {
    	        var e_2, _a;
    	        var attributes = node.attributes;
    	        var list = [];
    	        try {
    	            for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var name_1 = _c.value;
    	                list.push({ name: name_1, value: attributes[name_1] });
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	        return list;
    	    };
    	    LiteBase.prototype.addClass = function (node, name) {
    	        var classes = (node.attributes['class'] || '').split(/ /);
    	        if (!classes.find(function (n) { return n === name; })) {
    	            classes.push(name);
    	            node.attributes['class'] = classes.join(' ');
    	        }
    	    };
    	    LiteBase.prototype.removeClass = function (node, name) {
    	        var classes = (node.attributes['class'] || '').split(/ /);
    	        var i = classes.findIndex(function (n) { return n === name; });
    	        if (i >= 0) {
    	            classes.splice(i, 1);
    	            node.attributes['class'] = classes.join(' ');
    	        }
    	    };
    	    LiteBase.prototype.hasClass = function (node, name) {
    	        var classes = (node.attributes['class'] || '').split(/ /);
    	        return !!classes.find(function (n) { return n === name; });
    	    };
    	    LiteBase.prototype.setStyle = function (node, name, value) {
    	        if (!node.styles) {
    	            node.styles = new Styles_js_1.Styles(this.getAttribute(node, 'style'));
    	        }
    	        node.styles.set(name, value);
    	        node.attributes['style'] = node.styles.cssText;
    	    };
    	    LiteBase.prototype.getStyle = function (node, name) {
    	        if (!node.styles) {
    	            var style = this.getAttribute(node, 'style');
    	            if (!style) {
    	                return '';
    	            }
    	            node.styles = new Styles_js_1.Styles(style);
    	        }
    	        return node.styles.get(name);
    	    };
    	    LiteBase.prototype.allStyles = function (node) {
    	        return this.getAttribute(node, 'style');
    	    };
    	    LiteBase.prototype.insertRules = function (node, rules) {
    	        node.children = [this.text(rules.join('\n\n') + '\n\n' + this.textContent(node))];
    	    };
    	    LiteBase.prototype.fontSize = function (_node) {
    	        return 0;
    	    };
    	    LiteBase.prototype.fontFamily = function (_node) {
    	        return '';
    	    };
    	    LiteBase.prototype.nodeSize = function (_node, _em, _local) {
    	        return [0, 0];
    	    };
    	    LiteBase.prototype.nodeBBox = function (_node) {
    	        return { left: 0, right: 0, top: 0, bottom: 0 };
    	    };
    	    return LiteBase;
    	}(DOMAdaptor_js_1.AbstractDOMAdaptor));
    	liteAdaptor.LiteBase = LiteBase;
    	var LiteAdaptor = (function (_super) {
    	    __extends(LiteAdaptor, _super);
    	    function LiteAdaptor() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return LiteAdaptor;
    	}((0, NodeMixin_js_1.NodeMixin)(LiteBase)));
    	liteAdaptor.LiteAdaptor = LiteAdaptor;
    	function liteAdaptor$1(options) {
    	    if (options === undefined) { options = null; }
    	    return new LiteAdaptor(null, options);
    	}
    	liteAdaptor.liteAdaptor = liteAdaptor$1;
    	
    	return liteAdaptor;
    }

    requireLiteAdaptor();

    var html = {};

    var HTMLHandler = {};

    var Handler = {};

    var MathDocument = {};

    var OutputJax = {};

    var hasRequiredOutputJax;

    function requireOutputJax () {
    	if (hasRequiredOutputJax) return OutputJax;
    	hasRequiredOutputJax = 1;
    	Object.defineProperty(OutputJax, "__esModule", { value: true });
    	OutputJax.AbstractOutputJax = undefined;
    	var Options_js_1 = requireOptions();
    	var FunctionList_js_1 = requireFunctionList();
    	var AbstractOutputJax = (function () {
    	    function AbstractOutputJax(options) {
    	        if (options === undefined) { options = {}; }
    	        this.adaptor = null;
    	        var CLASS = this.constructor;
    	        this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), options);
    	        this.postFilters = new FunctionList_js_1.FunctionList();
    	    }
    	    Object.defineProperty(AbstractOutputJax.prototype, "name", {
    	        get: function () {
    	            return this.constructor.NAME;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    AbstractOutputJax.prototype.setAdaptor = function (adaptor) {
    	        this.adaptor = adaptor;
    	    };
    	    AbstractOutputJax.prototype.initialize = function () {
    	    };
    	    AbstractOutputJax.prototype.reset = function () {
    	    };
    	    AbstractOutputJax.prototype.getMetrics = function (_document) {
    	    };
    	    AbstractOutputJax.prototype.styleSheet = function (_document) {
    	        return null;
    	    };
    	    AbstractOutputJax.prototype.pageElements = function (_document) {
    	        return null;
    	    };
    	    AbstractOutputJax.prototype.executeFilters = function (filters, math, document, data) {
    	        var args = { math: math, document: document, data: data };
    	        filters.execute(args);
    	        return args.data;
    	    };
    	    AbstractOutputJax.NAME = 'generic';
    	    AbstractOutputJax.OPTIONS = {};
    	    return AbstractOutputJax;
    	}());
    	OutputJax.AbstractOutputJax = AbstractOutputJax;
    	
    	return OutputJax;
    }

    var MathList = {};

    var LinkedList = {};

    var hasRequiredLinkedList;

    function requireLinkedList () {
    	if (hasRequiredLinkedList) return LinkedList;
    	hasRequiredLinkedList = 1;
    	(function (exports) {
    		var __generator = (LinkedList.__generator) || function (thisArg, body) {
    		    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    		    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    		    function verb(n) { return function (v) { return step([n, v]); }; }
    		    function step(op) {
    		        if (f) throw new TypeError("Generator is already executing.");
    		        while (_) try {
    		            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
    		            if (y = 0, t) op = [op[0] & 2, t.value];
    		            switch (op[0]) {
    		                case 0: case 1: t = op; break;
    		                case 4: _.label++; return { value: op[1], done: false };
    		                case 5: _.label++; y = op[1]; op = [0]; continue;
    		                case 7: op = _.ops.pop(); _.trys.pop(); continue;
    		                default:
    		                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
    		                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
    		                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
    		                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
    		                    if (t[2]) _.ops.pop();
    		                    _.trys.pop(); continue;
    		            }
    		            op = body.call(thisArg, _);
    		        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
    		        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : undefined, done: true };
    		    }
    		};
    		var __read = (LinkedList.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __spreadArray = (LinkedList.__spreadArray) || function (to, from, pack) {
    		    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    		        if (ar || !(i in from)) {
    		            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    		            ar[i] = from[i];
    		        }
    		    }
    		    return to.concat(ar || Array.prototype.slice.call(from));
    		};
    		var __values = (LinkedList.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.LinkedList = exports.ListItem = exports.END = undefined;
    		exports.END = Symbol();
    		var ListItem = (function () {
    		    function ListItem(data) {
    		        if (data === undefined) { data = null; }
    		        this.next = null;
    		        this.prev = null;
    		        this.data = data;
    		    }
    		    return ListItem;
    		}());
    		exports.ListItem = ListItem;
    		var LinkedList$1 = (function () {
    		    function LinkedList() {
    		        var args = [];
    		        for (var _i = 0; _i < arguments.length; _i++) {
    		            args[_i] = arguments[_i];
    		        }
    		        this.list = new ListItem(exports.END);
    		        this.list.next = this.list.prev = this.list;
    		        this.push.apply(this, __spreadArray([], __read(args), false));
    		    }
    		    LinkedList.prototype.isBefore = function (a, b) {
    		        return a < b;
    		    };
    		    LinkedList.prototype.push = function () {
    		        var e_1, _a;
    		        var args = [];
    		        for (var _i = 0; _i < arguments.length; _i++) {
    		            args[_i] = arguments[_i];
    		        }
    		        try {
    		            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
    		                var data = args_1_1.value;
    		                var item = new ListItem(data);
    		                item.next = this.list;
    		                item.prev = this.list.prev;
    		                this.list.prev = item;
    		                item.prev.next = item;
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		        return this;
    		    };
    		    LinkedList.prototype.pop = function () {
    		        var item = this.list.prev;
    		        if (item.data === exports.END) {
    		            return null;
    		        }
    		        this.list.prev = item.prev;
    		        item.prev.next = this.list;
    		        item.next = item.prev = null;
    		        return item.data;
    		    };
    		    LinkedList.prototype.unshift = function () {
    		        var e_2, _a;
    		        var args = [];
    		        for (var _i = 0; _i < arguments.length; _i++) {
    		            args[_i] = arguments[_i];
    		        }
    		        try {
    		            for (var _b = __values(args.slice(0).reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var data = _c.value;
    		                var item = new ListItem(data);
    		                item.next = this.list.next;
    		                item.prev = this.list;
    		                this.list.next = item;
    		                item.next.prev = item;
    		            }
    		        }
    		        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_2) throw e_2.error; }
    		        }
    		        return this;
    		    };
    		    LinkedList.prototype.shift = function () {
    		        var item = this.list.next;
    		        if (item.data === exports.END) {
    		            return null;
    		        }
    		        this.list.next = item.next;
    		        item.next.prev = this.list;
    		        item.next = item.prev = null;
    		        return item.data;
    		    };
    		    LinkedList.prototype.remove = function () {
    		        var e_3, _a;
    		        var items = [];
    		        for (var _i = 0; _i < arguments.length; _i++) {
    		            items[_i] = arguments[_i];
    		        }
    		        var map = new Map();
    		        try {
    		            for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
    		                var item_1 = items_1_1.value;
    		                map.set(item_1, true);
    		            }
    		        }
    		        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		        finally {
    		            try {
    		                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
    		            }
    		            finally { if (e_3) throw e_3.error; }
    		        }
    		        var item = this.list.next;
    		        while (item.data !== exports.END) {
    		            var next = item.next;
    		            if (map.has(item.data)) {
    		                item.prev.next = item.next;
    		                item.next.prev = item.prev;
    		                item.next = item.prev = null;
    		            }
    		            item = next;
    		        }
    		    };
    		    LinkedList.prototype.clear = function () {
    		        this.list.next.prev = this.list.prev.next = null;
    		        this.list.next = this.list.prev = this.list;
    		        return this;
    		    };
    		    LinkedList.prototype[Symbol.iterator] = function () {
    		        var current;
    		        return __generator(this, function (_a) {
    		            switch (_a.label) {
    		                case 0:
    		                    current = this.list.next;
    		                    _a.label = 1;
    		                case 1:
    		                    if (!(current.data !== exports.END)) return [3, 3];
    		                    return [4, current.data];
    		                case 2:
    		                    _a.sent();
    		                    current = current.next;
    		                    return [3, 1];
    		                case 3: return [2];
    		            }
    		        });
    		    };
    		    LinkedList.prototype.reversed = function () {
    		        var current;
    		        return __generator(this, function (_a) {
    		            switch (_a.label) {
    		                case 0:
    		                    current = this.list.prev;
    		                    _a.label = 1;
    		                case 1:
    		                    if (!(current.data !== exports.END)) return [3, 3];
    		                    return [4, current.data];
    		                case 2:
    		                    _a.sent();
    		                    current = current.prev;
    		                    return [3, 1];
    		                case 3: return [2];
    		            }
    		        });
    		    };
    		    LinkedList.prototype.insert = function (data, isBefore) {
    		        if (isBefore === undefined) { isBefore = null; }
    		        if (isBefore === null) {
    		            isBefore = this.isBefore.bind(this);
    		        }
    		        var item = new ListItem(data);
    		        var cur = this.list.next;
    		        while (cur.data !== exports.END && isBefore(cur.data, item.data)) {
    		            cur = cur.next;
    		        }
    		        item.prev = cur.prev;
    		        item.next = cur;
    		        cur.prev.next = cur.prev = item;
    		        return this;
    		    };
    		    LinkedList.prototype.sort = function (isBefore) {
    		        var e_4, _a;
    		        if (isBefore === undefined) { isBefore = null; }
    		        if (isBefore === null) {
    		            isBefore = this.isBefore.bind(this);
    		        }
    		        var lists = [];
    		        try {
    		            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var item = _c.value;
    		                lists.push(new LinkedList(item));
    		            }
    		        }
    		        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_4) throw e_4.error; }
    		        }
    		        this.list.next = this.list.prev = this.list;
    		        while (lists.length > 1) {
    		            var l1 = lists.shift();
    		            var l2 = lists.shift();
    		            l1.merge(l2, isBefore);
    		            lists.push(l1);
    		        }
    		        if (lists.length) {
    		            this.list = lists[0].list;
    		        }
    		        return this;
    		    };
    		    LinkedList.prototype.merge = function (list, isBefore) {
    		        var _a, _b, _c, _d, _e;
    		        if (isBefore === undefined) { isBefore = null; }
    		        if (isBefore === null) {
    		            isBefore = this.isBefore.bind(this);
    		        }
    		        var lcur = this.list.next;
    		        var mcur = list.list.next;
    		        while (lcur.data !== exports.END && mcur.data !== exports.END) {
    		            if (isBefore(mcur.data, lcur.data)) {
    		                _a = __read([lcur, mcur], 2), mcur.prev.next = _a[0], lcur.prev.next = _a[1];
    		                _b = __read([lcur.prev, mcur.prev], 2), mcur.prev = _b[0], lcur.prev = _b[1];
    		                _c = __read([list.list, this.list], 2), this.list.prev.next = _c[0], list.list.prev.next = _c[1];
    		                _d = __read([list.list.prev, this.list.prev], 2), this.list.prev = _d[0], list.list.prev = _d[1];
    		                _e = __read([mcur.next, lcur], 2), lcur = _e[0], mcur = _e[1];
    		            }
    		            else {
    		                lcur = lcur.next;
    		            }
    		        }
    		        if (mcur.data !== exports.END) {
    		            this.list.prev.next = list.list.next;
    		            list.list.next.prev = this.list.prev;
    		            list.list.prev.next = this.list;
    		            this.list.prev = list.list.prev;
    		            list.list.next = list.list.prev = list.list;
    		        }
    		        return this;
    		    };
    		    return LinkedList;
    		}());
    		exports.LinkedList = LinkedList$1;
    		
    	} (LinkedList));
    	return LinkedList;
    }

    var hasRequiredMathList;

    function requireMathList () {
    	if (hasRequiredMathList) return MathList;
    	hasRequiredMathList = 1;
    	var __extends = (MathList.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(MathList, "__esModule", { value: true });
    	MathList.AbstractMathList = undefined;
    	var LinkedList_js_1 = requireLinkedList();
    	var AbstractMathList = (function (_super) {
    	    __extends(AbstractMathList, _super);
    	    function AbstractMathList() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    AbstractMathList.prototype.isBefore = function (a, b) {
    	        return (a.start.i < b.start.i || (a.start.i === b.start.i && a.start.n < b.start.n));
    	    };
    	    return AbstractMathList;
    	}(LinkedList_js_1.LinkedList));
    	MathList.AbstractMathList = AbstractMathList;
    	
    	return MathList;
    }

    var MmlFactory = {};

    var NodeFactory = {};

    var hasRequiredNodeFactory;

    function requireNodeFactory () {
    	if (hasRequiredNodeFactory) return NodeFactory;
    	hasRequiredNodeFactory = 1;
    	var __extends = (NodeFactory.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(NodeFactory, "__esModule", { value: true });
    	NodeFactory.AbstractNodeFactory = undefined;
    	var Factory_js_1 = requireFactory();
    	var AbstractNodeFactory = (function (_super) {
    	    __extends(AbstractNodeFactory, _super);
    	    function AbstractNodeFactory() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    AbstractNodeFactory.prototype.create = function (kind, properties, children) {
    	        if (properties === undefined) { properties = {}; }
    	        if (children === undefined) { children = []; }
    	        return this.node[kind](properties, children);
    	    };
    	    return AbstractNodeFactory;
    	}(Factory_js_1.AbstractFactory));
    	NodeFactory.AbstractNodeFactory = AbstractNodeFactory;
    	
    	return NodeFactory;
    }

    var MML = {};

    var math = {};

    var hasRequiredMath;

    function requireMath () {
    	if (hasRequiredMath) return math;
    	hasRequiredMath = 1;
    	var __extends = (math.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (math.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(math, "__esModule", { value: true });
    	math.MmlMath = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMath = (function (_super) {
    	    __extends(MmlMath, _super);
    	    function MmlMath() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMath.prototype, "kind", {
    	        get: function () {
    	            return 'math';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMath.prototype, "linebreakContainer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMath.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        if (this.attributes.get('mode') === 'display') {
    	            this.attributes.setInherited('display', 'block');
    	        }
    	        attributes = this.addInheritedAttributes(attributes, this.attributes.getAllAttributes());
    	        display = (!!this.attributes.get('displaystyle') ||
    	            (!this.attributes.get('displaystyle') && this.attributes.get('display') === 'block'));
    	        this.attributes.setInherited('displaystyle', display);
    	        level = (this.attributes.get('scriptlevel') ||
    	            this.constructor.defaults['scriptlevel']);
    	        _super.prototype.setChildInheritedAttributes.call(this, attributes, display, level, prime);
    	    };
    	    MmlMath.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlLayoutNode.defaults), { mathvariant: 'normal', mathsize: 'normal', mathcolor: '', mathbackground: 'transparent', dir: 'ltr', scriptlevel: 0, displaystyle: false, display: 'inline', maxwidth: '', overflow: 'linebreak', altimg: '', 'altimg-width': '', 'altimg-height': '', 'altimg-valign': '', alttext: '', cdgroup: '', scriptsizemultiplier: 1 / Math.sqrt(2), scriptminsize: '8px', infixlinebreakstyle: 'before', lineleading: '1ex', linebreakmultchar: '\u2062', indentshift: 'auto', indentalign: 'auto', indenttarget: '', indentalignfirst: 'indentalign', indentshiftfirst: 'indentshift', indentalignlast: 'indentalign', indentshiftlast: 'indentshift' });
    	    return MmlMath;
    	}(MmlNode_js_1.AbstractMmlLayoutNode));
    	math.MmlMath = MmlMath;
    	
    	return math;
    }

    var mi = {};

    var hasRequiredMi;

    function requireMi () {
    	if (hasRequiredMi) return mi;
    	hasRequiredMi = 1;
    	var __extends = (mi.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mi.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mi, "__esModule", { value: true });
    	mi.MmlMi = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMi = (function (_super) {
    	    __extends(MmlMi, _super);
    	    function MmlMi() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMi.prototype, "kind", {
    	        get: function () {
    	            return 'mi';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMi.prototype.setInheritedAttributes = function (attributes, display, level, prime) {
    	        if (attributes === undefined) { attributes = {}; }
    	        if (display === undefined) { display = false; }
    	        if (level === undefined) { level = 0; }
    	        if (prime === undefined) { prime = false; }
    	        _super.prototype.setInheritedAttributes.call(this, attributes, display, level, prime);
    	        var text = this.getText();
    	        if (text.match(MmlMi.singleCharacter) && !attributes.mathvariant) {
    	            this.attributes.setInherited('mathvariant', 'italic');
    	        }
    	    };
    	    MmlMi.prototype.setTeXclass = function (prev) {
    	        this.getPrevClass(prev);
    	        var name = this.getText();
    	        if (name.length > 1 && name.match(MmlMi.operatorName) &&
    	            this.attributes.get('mathvariant') === 'normal' &&
    	            this.getProperty('autoOP') === undefined &&
    	            this.getProperty('texClass') === undefined) {
    	            this.texClass = MmlNode_js_1.TEXCLASS.OP;
    	            this.setProperty('autoOP', true);
    	        }
    	        return this;
    	    };
    	    MmlMi.defaults = __assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults);
    	    MmlMi.operatorName = /^[a-z][a-z0-9]*$/i;
    	    MmlMi.singleCharacter = /^[\uD800-\uDBFF]?.[\u0300-\u036F\u1AB0-\u1ABE\u1DC0-\u1DFF\u20D0-\u20EF]*$/;
    	    return MmlMi;
    	}(MmlNode_js_1.AbstractMmlTokenNode));
    	mi.MmlMi = MmlMi;
    	
    	return mi;
    }

    var mn = {};

    var hasRequiredMn;

    function requireMn () {
    	if (hasRequiredMn) return mn;
    	hasRequiredMn = 1;
    	var __extends = (mn.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mn.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mn, "__esModule", { value: true });
    	mn.MmlMn = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMn = (function (_super) {
    	    __extends(MmlMn, _super);
    	    function MmlMn() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMn.prototype, "kind", {
    	        get: function () {
    	            return 'mn';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMn.defaults = __assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults);
    	    return MmlMn;
    	}(MmlNode_js_1.AbstractMmlTokenNode));
    	mn.MmlMn = MmlMn;
    	
    	return mn;
    }

    var mtext = {};

    var hasRequiredMtext;

    function requireMtext () {
    	if (hasRequiredMtext) return mtext;
    	hasRequiredMtext = 1;
    	var __extends = (mtext.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mtext.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mtext, "__esModule", { value: true });
    	mtext.MmlMtext = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMtext = (function (_super) {
    	    __extends(MmlMtext, _super);
    	    function MmlMtext() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMtext.prototype, "kind", {
    	        get: function () {
    	            return 'mtext';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMtext.prototype, "isSpacelike", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMtext.defaults = __assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults);
    	    return MmlMtext;
    	}(MmlNode_js_1.AbstractMmlTokenNode));
    	mtext.MmlMtext = MmlMtext;
    	
    	return mtext;
    }

    var mspace = {};

    var hasRequiredMspace;

    function requireMspace () {
    	if (hasRequiredMspace) return mspace;
    	hasRequiredMspace = 1;
    	var __extends = (mspace.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mspace.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mspace, "__esModule", { value: true });
    	mspace.MmlMspace = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMspace = (function (_super) {
    	    __extends(MmlMspace, _super);
    	    function MmlMspace() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.NONE;
    	        return _this;
    	    }
    	    MmlMspace.prototype.setTeXclass = function (prev) {
    	        return prev;
    	    };
    	    Object.defineProperty(MmlMspace.prototype, "kind", {
    	        get: function () {
    	            return 'mspace';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMspace.prototype, "arity", {
    	        get: function () {
    	            return 0;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMspace.prototype, "isSpacelike", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMspace.prototype, "hasNewline", {
    	        get: function () {
    	            var attributes = this.attributes;
    	            return (attributes.getExplicit('width') == null && attributes.getExplicit('height') == null &&
    	                attributes.getExplicit('depth') == null && attributes.get('linebreak') === 'newline');
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMspace.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults), { width: '0em', height: '0ex', depth: '0ex', linebreak: 'auto' });
    	    return MmlMspace;
    	}(MmlNode_js_1.AbstractMmlTokenNode));
    	mspace.MmlMspace = MmlMspace;
    	
    	return mspace;
    }

    var ms = {};

    var hasRequiredMs;

    function requireMs () {
    	if (hasRequiredMs) return ms;
    	hasRequiredMs = 1;
    	var __extends = (ms.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (ms.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(ms, "__esModule", { value: true });
    	ms.MmlMs = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMs = (function (_super) {
    	    __extends(MmlMs, _super);
    	    function MmlMs() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMs.prototype, "kind", {
    	        get: function () {
    	            return 'ms';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMs.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults), { lquote: '"', rquote: '"' });
    	    return MmlMs;
    	}(MmlNode_js_1.AbstractMmlTokenNode));
    	ms.MmlMs = MmlMs;
    	
    	return ms;
    }

    var mrow = {};

    var hasRequiredMrow;

    function requireMrow () {
    	if (hasRequiredMrow) return mrow;
    	hasRequiredMrow = 1;
    	var __extends = (mrow.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mrow.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __values = (mrow.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(mrow, "__esModule", { value: true });
    	mrow.MmlInferredMrow = mrow.MmlMrow = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMrow = (function (_super) {
    	    __extends(MmlMrow, _super);
    	    function MmlMrow() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this._core = null;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMrow.prototype, "kind", {
    	        get: function () {
    	            return 'mrow';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMrow.prototype, "isSpacelike", {
    	        get: function () {
    	            var e_1, _a;
    	            try {
    	                for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var child = _c.value;
    	                    if (!child.isSpacelike) {
    	                        return false;
    	                    }
    	                }
    	            }
    	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_1) throw e_1.error; }
    	            }
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMrow.prototype, "isEmbellished", {
    	        get: function () {
    	            var e_2, _a;
    	            var embellished = false;
    	            var i = 0;
    	            try {
    	                for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var child = _c.value;
    	                    if (child) {
    	                        if (child.isEmbellished) {
    	                            if (embellished) {
    	                                return false;
    	                            }
    	                            embellished = true;
    	                            this._core = i;
    	                        }
    	                        else if (!child.isSpacelike) {
    	                            return false;
    	                        }
    	                    }
    	                    i++;
    	                }
    	            }
    	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_2) throw e_2.error; }
    	            }
    	            return embellished;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMrow.prototype.core = function () {
    	        if (!this.isEmbellished || this._core == null) {
    	            return this;
    	        }
    	        return this.childNodes[this._core];
    	    };
    	    MmlMrow.prototype.coreMO = function () {
    	        if (!this.isEmbellished || this._core == null) {
    	            return this;
    	        }
    	        return this.childNodes[this._core].coreMO();
    	    };
    	    MmlMrow.prototype.nonSpaceLength = function () {
    	        var e_3, _a;
    	        var n = 0;
    	        try {
    	            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                if (child && !child.isSpacelike) {
    	                    n++;
    	                }
    	            }
    	        }
    	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_3) throw e_3.error; }
    	        }
    	        return n;
    	    };
    	    MmlMrow.prototype.firstNonSpace = function () {
    	        var e_4, _a;
    	        try {
    	            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                if (child && !child.isSpacelike) {
    	                    return child;
    	                }
    	            }
    	        }
    	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_4) throw e_4.error; }
    	        }
    	        return null;
    	    };
    	    MmlMrow.prototype.lastNonSpace = function () {
    	        var i = this.childNodes.length;
    	        while (--i >= 0) {
    	            var child = this.childNodes[i];
    	            if (child && !child.isSpacelike) {
    	                return child;
    	            }
    	        }
    	        return null;
    	    };
    	    MmlMrow.prototype.setTeXclass = function (prev) {
    	        var e_5, _a, e_6, _b;
    	        if (this.getProperty('open') != null || this.getProperty('close') != null) {
    	            this.getPrevClass(prev);
    	            prev = null;
    	            try {
    	                for (var _c = __values(this.childNodes), _d = _c.next(); !_d.done; _d = _c.next()) {
    	                    var child = _d.value;
    	                    prev = child.setTeXclass(prev);
    	                }
    	            }
    	            catch (e_5_1) { e_5 = { error: e_5_1 }; }
    	            finally {
    	                try {
    	                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    	                }
    	                finally { if (e_5) throw e_5.error; }
    	            }
    	            if (this.texClass == null) {
    	                this.texClass = MmlNode_js_1.TEXCLASS.INNER;
    	            }
    	        }
    	        else {
    	            try {
    	                for (var _e = __values(this.childNodes), _f = _e.next(); !_f.done; _f = _e.next()) {
    	                    var child = _f.value;
    	                    prev = child.setTeXclass(prev);
    	                }
    	            }
    	            catch (e_6_1) { e_6 = { error: e_6_1 }; }
    	            finally {
    	                try {
    	                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
    	                }
    	                finally { if (e_6) throw e_6.error; }
    	            }
    	            if (this.childNodes[0]) {
    	                this.updateTeXclass(this.childNodes[0]);
    	            }
    	        }
    	        return prev;
    	    };
    	    MmlMrow.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);
    	    return MmlMrow;
    	}(MmlNode_js_1.AbstractMmlNode));
    	mrow.MmlMrow = MmlMrow;
    	var MmlInferredMrow = (function (_super) {
    	    __extends(MmlInferredMrow, _super);
    	    function MmlInferredMrow() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlInferredMrow.prototype, "kind", {
    	        get: function () {
    	            return 'inferredMrow';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlInferredMrow.prototype, "isInferred", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlInferredMrow.prototype, "notParent", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlInferredMrow.prototype.toString = function () {
    	        return '[' + this.childNodes.join(',') + ']';
    	    };
    	    MmlInferredMrow.defaults = MmlMrow.defaults;
    	    return MmlInferredMrow;
    	}(MmlMrow));
    	mrow.MmlInferredMrow = MmlInferredMrow;
    	
    	return mrow;
    }

    var mfrac = {};

    var hasRequiredMfrac;

    function requireMfrac () {
    	if (hasRequiredMfrac) return mfrac;
    	hasRequiredMfrac = 1;
    	var __extends = (mfrac.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mfrac.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __values = (mfrac.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(mfrac, "__esModule", { value: true });
    	mfrac.MmlMfrac = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMfrac = (function (_super) {
    	    __extends(MmlMfrac, _super);
    	    function MmlMfrac() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMfrac.prototype, "kind", {
    	        get: function () {
    	            return 'mfrac';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMfrac.prototype, "arity", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMfrac.prototype, "linebreakContainer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMfrac.prototype.setTeXclass = function (prev) {
    	        var e_1, _a;
    	        this.getPrevClass(prev);
    	        try {
    	            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                child.setTeXclass(null);
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        return this;
    	    };
    	    MmlMfrac.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        if (!display || level > 0) {
    	            level++;
    	        }
    	        this.childNodes[0].setInheritedAttributes(attributes, false, level, prime);
    	        this.childNodes[1].setInheritedAttributes(attributes, false, level, true);
    	    };
    	    MmlMfrac.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults), { linethickness: 'medium', numalign: 'center', denomalign: 'center', bevelled: false });
    	    return MmlMfrac;
    	}(MmlNode_js_1.AbstractMmlBaseNode));
    	mfrac.MmlMfrac = MmlMfrac;
    	
    	return mfrac;
    }

    var msqrt = {};

    var hasRequiredMsqrt;

    function requireMsqrt () {
    	if (hasRequiredMsqrt) return msqrt;
    	hasRequiredMsqrt = 1;
    	var __extends = (msqrt.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (msqrt.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(msqrt, "__esModule", { value: true });
    	msqrt.MmlMsqrt = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMsqrt = (function (_super) {
    	    __extends(MmlMsqrt, _super);
    	    function MmlMsqrt() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMsqrt.prototype, "kind", {
    	        get: function () {
    	            return 'msqrt';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsqrt.prototype, "arity", {
    	        get: function () {
    	            return -1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsqrt.prototype, "linebreakContainer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMsqrt.prototype.setTeXclass = function (prev) {
    	        this.getPrevClass(prev);
    	        this.childNodes[0].setTeXclass(null);
    	        return this;
    	    };
    	    MmlMsqrt.prototype.setChildInheritedAttributes = function (attributes, display, level, _prime) {
    	        this.childNodes[0].setInheritedAttributes(attributes, display, level, true);
    	    };
    	    MmlMsqrt.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);
    	    return MmlMsqrt;
    	}(MmlNode_js_1.AbstractMmlNode));
    	msqrt.MmlMsqrt = MmlMsqrt;
    	
    	return msqrt;
    }

    var mroot = {};

    var hasRequiredMroot;

    function requireMroot () {
    	if (hasRequiredMroot) return mroot;
    	hasRequiredMroot = 1;
    	var __extends = (mroot.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mroot.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mroot, "__esModule", { value: true });
    	mroot.MmlMroot = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMroot = (function (_super) {
    	    __extends(MmlMroot, _super);
    	    function MmlMroot() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMroot.prototype, "kind", {
    	        get: function () {
    	            return 'mroot';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMroot.prototype, "arity", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMroot.prototype.setTeXclass = function (prev) {
    	        this.getPrevClass(prev);
    	        this.childNodes[0].setTeXclass(null);
    	        this.childNodes[1].setTeXclass(null);
    	        return this;
    	    };
    	    MmlMroot.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        this.childNodes[0].setInheritedAttributes(attributes, display, level, true);
    	        this.childNodes[1].setInheritedAttributes(attributes, false, level + 2, prime);
    	    };
    	    MmlMroot.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);
    	    return MmlMroot;
    	}(MmlNode_js_1.AbstractMmlNode));
    	mroot.MmlMroot = MmlMroot;
    	
    	return mroot;
    }

    var mstyle = {};

    var hasRequiredMstyle;

    function requireMstyle () {
    	if (hasRequiredMstyle) return mstyle;
    	hasRequiredMstyle = 1;
    	var __extends = (mstyle.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mstyle.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mstyle, "__esModule", { value: true });
    	mstyle.MmlMstyle = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var Attributes_js_1 = requireAttributes();
    	var MmlMstyle = (function (_super) {
    	    __extends(MmlMstyle, _super);
    	    function MmlMstyle() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMstyle.prototype, "kind", {
    	        get: function () {
    	            return 'mstyle';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMstyle.prototype, "notParent", {
    	        get: function () {
    	            return this.childNodes[0] && this.childNodes[0].childNodes.length === 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMstyle.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        var scriptlevel = this.attributes.getExplicit('scriptlevel');
    	        if (scriptlevel != null) {
    	            scriptlevel = scriptlevel.toString();
    	            if (scriptlevel.match(/^\s*[-+]/)) {
    	                level += parseInt(scriptlevel);
    	            }
    	            else {
    	                level = parseInt(scriptlevel);
    	            }
    	            prime = false;
    	        }
    	        var displaystyle = this.attributes.getExplicit('displaystyle');
    	        if (displaystyle != null) {
    	            display = (displaystyle === true);
    	            prime = false;
    	        }
    	        var cramped = this.attributes.getExplicit('data-cramped');
    	        if (cramped != null) {
    	            prime = cramped;
    	        }
    	        attributes = this.addInheritedAttributes(attributes, this.attributes.getAllAttributes());
    	        this.childNodes[0].setInheritedAttributes(attributes, display, level, prime);
    	    };
    	    MmlMstyle.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlLayoutNode.defaults), { scriptlevel: Attributes_js_1.INHERIT, displaystyle: Attributes_js_1.INHERIT, scriptsizemultiplier: 1 / Math.sqrt(2), scriptminsize: '8px', mathbackground: Attributes_js_1.INHERIT, mathcolor: Attributes_js_1.INHERIT, dir: Attributes_js_1.INHERIT, infixlinebreakstyle: 'before' });
    	    return MmlMstyle;
    	}(MmlNode_js_1.AbstractMmlLayoutNode));
    	mstyle.MmlMstyle = MmlMstyle;
    	
    	return mstyle;
    }

    var merror = {};

    var hasRequiredMerror;

    function requireMerror () {
    	if (hasRequiredMerror) return merror;
    	hasRequiredMerror = 1;
    	var __extends = (merror.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (merror.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(merror, "__esModule", { value: true });
    	merror.MmlMerror = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMerror = (function (_super) {
    	    __extends(MmlMerror, _super);
    	    function MmlMerror() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMerror.prototype, "kind", {
    	        get: function () {
    	            return 'merror';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMerror.prototype, "arity", {
    	        get: function () {
    	            return -1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMerror.prototype, "linebreakContainer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMerror.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);
    	    return MmlMerror;
    	}(MmlNode_js_1.AbstractMmlNode));
    	merror.MmlMerror = MmlMerror;
    	
    	return merror;
    }

    var mpadded = {};

    var hasRequiredMpadded;

    function requireMpadded () {
    	if (hasRequiredMpadded) return mpadded;
    	hasRequiredMpadded = 1;
    	var __extends = (mpadded.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mpadded.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mpadded, "__esModule", { value: true });
    	mpadded.MmlMpadded = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMpadded = (function (_super) {
    	    __extends(MmlMpadded, _super);
    	    function MmlMpadded() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMpadded.prototype, "kind", {
    	        get: function () {
    	            return 'mpadded';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMpadded.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlLayoutNode.defaults), { width: '', height: '', depth: '', lspace: 0, voffset: 0 });
    	    return MmlMpadded;
    	}(MmlNode_js_1.AbstractMmlLayoutNode));
    	mpadded.MmlMpadded = MmlMpadded;
    	
    	return mpadded;
    }

    var mphantom = {};

    var hasRequiredMphantom;

    function requireMphantom () {
    	if (hasRequiredMphantom) return mphantom;
    	hasRequiredMphantom = 1;
    	var __extends = (mphantom.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mphantom.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mphantom, "__esModule", { value: true });
    	mphantom.MmlMphantom = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMphantom = (function (_super) {
    	    __extends(MmlMphantom, _super);
    	    function MmlMphantom() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMphantom.prototype, "kind", {
    	        get: function () {
    	            return 'mphantom';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMphantom.defaults = __assign({}, MmlNode_js_1.AbstractMmlLayoutNode.defaults);
    	    return MmlMphantom;
    	}(MmlNode_js_1.AbstractMmlLayoutNode));
    	mphantom.MmlMphantom = MmlMphantom;
    	
    	return mphantom;
    }

    var mfenced = {};

    var hasRequiredMfenced;

    function requireMfenced () {
    	if (hasRequiredMfenced) return mfenced;
    	hasRequiredMfenced = 1;
    	var __extends = (mfenced.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mfenced.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __values = (mfenced.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(mfenced, "__esModule", { value: true });
    	mfenced.MmlMfenced = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMfenced = (function (_super) {
    	    __extends(MmlMfenced, _super);
    	    function MmlMfenced() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.INNER;
    	        _this.separators = [];
    	        _this.open = null;
    	        _this.close = null;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMfenced.prototype, "kind", {
    	        get: function () {
    	            return 'mfenced';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMfenced.prototype.setTeXclass = function (prev) {
    	        this.getPrevClass(prev);
    	        if (this.open) {
    	            prev = this.open.setTeXclass(prev);
    	        }
    	        if (this.childNodes[0]) {
    	            prev = this.childNodes[0].setTeXclass(prev);
    	        }
    	        for (var i = 1, m = this.childNodes.length; i < m; i++) {
    	            if (this.separators[i - 1]) {
    	                prev = this.separators[i - 1].setTeXclass(prev);
    	            }
    	            if (this.childNodes[i]) {
    	                prev = this.childNodes[i].setTeXclass(prev);
    	            }
    	        }
    	        if (this.close) {
    	            prev = this.close.setTeXclass(prev);
    	        }
    	        this.updateTeXclass(this.open);
    	        return prev;
    	    };
    	    MmlMfenced.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        var e_1, _a;
    	        this.addFakeNodes();
    	        try {
    	            for (var _b = __values([this.open, this.close].concat(this.separators)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                if (child) {
    	                    child.setInheritedAttributes(attributes, display, level, prime);
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        _super.prototype.setChildInheritedAttributes.call(this, attributes, display, level, prime);
    	    };
    	    MmlMfenced.prototype.addFakeNodes = function () {
    	        var e_2, _a;
    	        var _b = this.attributes.getList('open', 'close', 'separators'), open = _b.open, close = _b.close, separators = _b.separators;
    	        open = open.replace(/[ \t\n\r]/g, '');
    	        close = close.replace(/[ \t\n\r]/g, '');
    	        separators = separators.replace(/[ \t\n\r]/g, '');
    	        if (open) {
    	            this.open = this.fakeNode(open, { fence: true, form: 'prefix' }, MmlNode_js_1.TEXCLASS.OPEN);
    	        }
    	        if (separators) {
    	            while (separators.length < this.childNodes.length - 1) {
    	                separators += separators.charAt(separators.length - 1);
    	            }
    	            var i = 0;
    	            try {
    	                for (var _c = __values(this.childNodes.slice(1)), _d = _c.next(); !_d.done; _d = _c.next()) {
    	                    var child = _d.value;
    	                    if (child) {
    	                        this.separators.push(this.fakeNode(separators.charAt(i++)));
    	                    }
    	                }
    	            }
    	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	            finally {
    	                try {
    	                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    	                }
    	                finally { if (e_2) throw e_2.error; }
    	            }
    	        }
    	        if (close) {
    	            this.close = this.fakeNode(close, { fence: true, form: 'postfix' }, MmlNode_js_1.TEXCLASS.CLOSE);
    	        }
    	    };
    	    MmlMfenced.prototype.fakeNode = function (c, properties, texClass) {
    	        if (properties === undefined) { properties = {}; }
    	        if (texClass === undefined) { texClass = null; }
    	        var text = this.factory.create('text').setText(c);
    	        var node = this.factory.create('mo', properties, [text]);
    	        node.texClass = texClass;
    	        node.parent = this;
    	        return node;
    	    };
    	    MmlMfenced.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), { open: '(', close: ')', separators: ',' });
    	    return MmlMfenced;
    	}(MmlNode_js_1.AbstractMmlNode));
    	mfenced.MmlMfenced = MmlMfenced;
    	
    	return mfenced;
    }

    var menclose = {};

    var hasRequiredMenclose;

    function requireMenclose () {
    	if (hasRequiredMenclose) return menclose;
    	hasRequiredMenclose = 1;
    	var __extends = (menclose.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (menclose.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(menclose, "__esModule", { value: true });
    	menclose.MmlMenclose = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMenclose = (function (_super) {
    	    __extends(MmlMenclose, _super);
    	    function MmlMenclose() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMenclose.prototype, "kind", {
    	        get: function () {
    	            return 'menclose';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMenclose.prototype, "arity", {
    	        get: function () {
    	            return -1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMenclose.prototype, "linebreakContininer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMenclose.prototype.setTeXclass = function (prev) {
    	        prev = this.childNodes[0].setTeXclass(prev);
    	        this.updateTeXclass(this.childNodes[0]);
    	        return prev;
    	    };
    	    MmlMenclose.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), { notation: 'longdiv' });
    	    return MmlMenclose;
    	}(MmlNode_js_1.AbstractMmlNode));
    	menclose.MmlMenclose = MmlMenclose;
    	
    	return menclose;
    }

    var maction = {};

    var hasRequiredMaction;

    function requireMaction () {
    	if (hasRequiredMaction) return maction;
    	hasRequiredMaction = 1;
    	var __extends = (maction.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (maction.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(maction, "__esModule", { value: true });
    	maction.MmlMaction = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMaction = (function (_super) {
    	    __extends(MmlMaction, _super);
    	    function MmlMaction() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMaction.prototype, "kind", {
    	        get: function () {
    	            return 'maction';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMaction.prototype, "arity", {
    	        get: function () {
    	            return 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMaction.prototype, "selected", {
    	        get: function () {
    	            var selection = this.attributes.get('selection');
    	            var i = Math.max(1, Math.min(this.childNodes.length, selection)) - 1;
    	            return this.childNodes[i] || this.factory.create('mrow');
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMaction.prototype, "isEmbellished", {
    	        get: function () {
    	            return this.selected.isEmbellished;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMaction.prototype, "isSpacelike", {
    	        get: function () {
    	            return this.selected.isSpacelike;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMaction.prototype.core = function () {
    	        return this.selected.core();
    	    };
    	    MmlMaction.prototype.coreMO = function () {
    	        return this.selected.coreMO();
    	    };
    	    MmlMaction.prototype.verifyAttributes = function (options) {
    	        _super.prototype.verifyAttributes.call(this, options);
    	        if (this.attributes.get('actiontype') !== 'toggle' &&
    	            this.attributes.getExplicit('selection') !== undefined) {
    	            var attributes = this.attributes.getAllAttributes();
    	            delete attributes.selection;
    	        }
    	    };
    	    MmlMaction.prototype.setTeXclass = function (prev) {
    	        if (this.attributes.get('actiontype') === 'tooltip' && this.childNodes[1]) {
    	            this.childNodes[1].setTeXclass(null);
    	        }
    	        var selected = this.selected;
    	        prev = selected.setTeXclass(prev);
    	        this.updateTeXclass(selected);
    	        return prev;
    	    };
    	    MmlMaction.prototype.nextToggleSelection = function () {
    	        var selection = Math.max(1, this.attributes.get('selection') + 1);
    	        if (selection > this.childNodes.length) {
    	            selection = 1;
    	        }
    	        this.attributes.set('selection', selection);
    	    };
    	    MmlMaction.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), { actiontype: 'toggle', selection: 1 });
    	    return MmlMaction;
    	}(MmlNode_js_1.AbstractMmlNode));
    	maction.MmlMaction = MmlMaction;
    	
    	return maction;
    }

    var msubsup = {};

    var hasRequiredMsubsup;

    function requireMsubsup () {
    	if (hasRequiredMsubsup) return msubsup;
    	hasRequiredMsubsup = 1;
    	var __extends = (msubsup.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (msubsup.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(msubsup, "__esModule", { value: true });
    	msubsup.MmlMsup = msubsup.MmlMsub = msubsup.MmlMsubsup = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMsubsup = (function (_super) {
    	    __extends(MmlMsubsup, _super);
    	    function MmlMsubsup() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMsubsup.prototype, "kind", {
    	        get: function () {
    	            return 'msubsup';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsubsup.prototype, "arity", {
    	        get: function () {
    	            return 3;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsubsup.prototype, "base", {
    	        get: function () {
    	            return 0;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsubsup.prototype, "sub", {
    	        get: function () {
    	            return 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsubsup.prototype, "sup", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMsubsup.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        var nodes = this.childNodes;
    	        nodes[0].setInheritedAttributes(attributes, display, level, prime);
    	        nodes[1].setInheritedAttributes(attributes, false, level + 1, prime || this.sub === 1);
    	        if (!nodes[2]) {
    	            return;
    	        }
    	        nodes[2].setInheritedAttributes(attributes, false, level + 1, prime || this.sub === 2);
    	    };
    	    MmlMsubsup.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults), { subscriptshift: '', superscriptshift: '' });
    	    return MmlMsubsup;
    	}(MmlNode_js_1.AbstractMmlBaseNode));
    	msubsup.MmlMsubsup = MmlMsubsup;
    	var MmlMsub = (function (_super) {
    	    __extends(MmlMsub, _super);
    	    function MmlMsub() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMsub.prototype, "kind", {
    	        get: function () {
    	            return 'msub';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsub.prototype, "arity", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMsub.defaults = __assign({}, MmlMsubsup.defaults);
    	    return MmlMsub;
    	}(MmlMsubsup));
    	msubsup.MmlMsub = MmlMsub;
    	var MmlMsup = (function (_super) {
    	    __extends(MmlMsup, _super);
    	    function MmlMsup() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMsup.prototype, "kind", {
    	        get: function () {
    	            return 'msup';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsup.prototype, "arity", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsup.prototype, "sup", {
    	        get: function () {
    	            return 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMsup.prototype, "sub", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMsup.defaults = __assign({}, MmlMsubsup.defaults);
    	    return MmlMsup;
    	}(MmlMsubsup));
    	msubsup.MmlMsup = MmlMsup;
    	
    	return msubsup;
    }

    var munderover = {};

    var hasRequiredMunderover;

    function requireMunderover () {
    	if (hasRequiredMunderover) return munderover;
    	hasRequiredMunderover = 1;
    	var __extends = (munderover.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (munderover.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(munderover, "__esModule", { value: true });
    	munderover.MmlMover = munderover.MmlMunder = munderover.MmlMunderover = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMunderover = (function (_super) {
    	    __extends(MmlMunderover, _super);
    	    function MmlMunderover() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMunderover.prototype, "kind", {
    	        get: function () {
    	            return 'munderover';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMunderover.prototype, "arity", {
    	        get: function () {
    	            return 3;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMunderover.prototype, "base", {
    	        get: function () {
    	            return 0;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMunderover.prototype, "under", {
    	        get: function () {
    	            return 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMunderover.prototype, "over", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMunderover.prototype, "linebreakContainer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMunderover.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        var nodes = this.childNodes;
    	        nodes[0].setInheritedAttributes(attributes, display, level, prime || !!nodes[this.over]);
    	        var force = !!(!display && nodes[0].coreMO().attributes.get('movablelimits'));
    	        var ACCENTS = this.constructor.ACCENTS;
    	        nodes[1].setInheritedAttributes(attributes, false, this.getScriptlevel(ACCENTS[1], force, level), prime || this.under === 1);
    	        this.setInheritedAccent(1, ACCENTS[1], display, level, prime, force);
    	        if (!nodes[2]) {
    	            return;
    	        }
    	        nodes[2].setInheritedAttributes(attributes, false, this.getScriptlevel(ACCENTS[2], force, level), prime || this.under === 2);
    	        this.setInheritedAccent(2, ACCENTS[2], display, level, prime, force);
    	    };
    	    MmlMunderover.prototype.getScriptlevel = function (accent, force, level) {
    	        if (force || !this.attributes.get(accent)) {
    	            level++;
    	        }
    	        return level;
    	    };
    	    MmlMunderover.prototype.setInheritedAccent = function (n, accent, display, level, prime, force) {
    	        var node = this.childNodes[n];
    	        if (this.attributes.getExplicit(accent) == null && node.isEmbellished) {
    	            var value = node.coreMO().attributes.get('accent');
    	            this.attributes.setInherited(accent, value);
    	            if (value !== this.attributes.getDefault(accent)) {
    	                node.setInheritedAttributes({}, display, this.getScriptlevel(accent, force, level), prime);
    	            }
    	        }
    	    };
    	    MmlMunderover.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults), { accent: false, accentunder: false, align: 'center' });
    	    MmlMunderover.ACCENTS = ['', 'accentunder', 'accent'];
    	    return MmlMunderover;
    	}(MmlNode_js_1.AbstractMmlBaseNode));
    	munderover.MmlMunderover = MmlMunderover;
    	var MmlMunder = (function (_super) {
    	    __extends(MmlMunder, _super);
    	    function MmlMunder() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMunder.prototype, "kind", {
    	        get: function () {
    	            return 'munder';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMunder.prototype, "arity", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMunder.defaults = __assign({}, MmlMunderover.defaults);
    	    return MmlMunder;
    	}(MmlMunderover));
    	munderover.MmlMunder = MmlMunder;
    	var MmlMover = (function (_super) {
    	    __extends(MmlMover, _super);
    	    function MmlMover() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMover.prototype, "kind", {
    	        get: function () {
    	            return 'mover';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMover.prototype, "arity", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMover.prototype, "over", {
    	        get: function () {
    	            return 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMover.prototype, "under", {
    	        get: function () {
    	            return 2;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMover.defaults = __assign({}, MmlMunderover.defaults);
    	    MmlMover.ACCENTS = ['', 'accent', 'accentunder'];
    	    return MmlMover;
    	}(MmlMunderover));
    	munderover.MmlMover = MmlMover;
    	
    	return munderover;
    }

    var mmultiscripts = {};

    var hasRequiredMmultiscripts;

    function requireMmultiscripts () {
    	if (hasRequiredMmultiscripts) return mmultiscripts;
    	hasRequiredMmultiscripts = 1;
    	var __extends = (mmultiscripts.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mmultiscripts.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mmultiscripts, "__esModule", { value: true });
    	mmultiscripts.MmlNone = mmultiscripts.MmlMprescripts = mmultiscripts.MmlMmultiscripts = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var msubsup_js_1 = requireMsubsup();
    	var MmlMmultiscripts = (function (_super) {
    	    __extends(MmlMmultiscripts, _super);
    	    function MmlMmultiscripts() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMmultiscripts.prototype, "kind", {
    	        get: function () {
    	            return 'mmultiscripts';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMmultiscripts.prototype, "arity", {
    	        get: function () {
    	            return 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMmultiscripts.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        this.childNodes[0].setInheritedAttributes(attributes, display, level, prime);
    	        var prescripts = false;
    	        for (var i = 1, n = 0; i < this.childNodes.length; i++) {
    	            var child = this.childNodes[i];
    	            if (child.isKind('mprescripts')) {
    	                if (!prescripts) {
    	                    prescripts = true;
    	                    if (i % 2 === 0) {
    	                        var mrow = this.factory.create('mrow');
    	                        this.childNodes.splice(i, 0, mrow);
    	                        mrow.parent = this;
    	                        i++;
    	                    }
    	                }
    	            }
    	            else {
    	                var primestyle = prime || (n % 2 === 0);
    	                child.setInheritedAttributes(attributes, false, level + 1, primestyle);
    	                n++;
    	            }
    	        }
    	        if (this.childNodes.length % 2 === (prescripts ? 1 : 0)) {
    	            this.appendChild(this.factory.create('mrow'));
    	            this.childNodes[this.childNodes.length - 1].setInheritedAttributes(attributes, false, level + 1, prime);
    	        }
    	    };
    	    MmlMmultiscripts.prototype.verifyChildren = function (options) {
    	        var prescripts = false;
    	        var fix = options['fixMmultiscripts'];
    	        for (var i = 0; i < this.childNodes.length; i++) {
    	            var child = this.childNodes[i];
    	            if (child.isKind('mprescripts')) {
    	                if (prescripts) {
    	                    child.mError(child.kind + ' can only appear once in ' + this.kind, options, true);
    	                }
    	                else {
    	                    prescripts = true;
    	                    if (i % 2 === 0 && !fix) {
    	                        this.mError('There must be an equal number of prescripts of each type', options);
    	                    }
    	                }
    	            }
    	        }
    	        if (this.childNodes.length % 2 === (prescripts ? 1 : 0) && !fix) {
    	            this.mError('There must be an equal number of scripts of each type', options);
    	        }
    	        _super.prototype.verifyChildren.call(this, options);
    	    };
    	    MmlMmultiscripts.defaults = __assign({}, msubsup_js_1.MmlMsubsup.defaults);
    	    return MmlMmultiscripts;
    	}(msubsup_js_1.MmlMsubsup));
    	mmultiscripts.MmlMmultiscripts = MmlMmultiscripts;
    	var MmlMprescripts = (function (_super) {
    	    __extends(MmlMprescripts, _super);
    	    function MmlMprescripts() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMprescripts.prototype, "kind", {
    	        get: function () {
    	            return 'mprescripts';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMprescripts.prototype, "arity", {
    	        get: function () {
    	            return 0;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMprescripts.prototype.verifyTree = function (options) {
    	        _super.prototype.verifyTree.call(this, options);
    	        if (this.parent && !this.parent.isKind('mmultiscripts')) {
    	            this.mError(this.kind + ' must be a child of mmultiscripts', options, true);
    	        }
    	    };
    	    MmlMprescripts.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);
    	    return MmlMprescripts;
    	}(MmlNode_js_1.AbstractMmlNode));
    	mmultiscripts.MmlMprescripts = MmlMprescripts;
    	var MmlNone = (function (_super) {
    	    __extends(MmlNone, _super);
    	    function MmlNone() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlNone.prototype, "kind", {
    	        get: function () {
    	            return 'none';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlNone.prototype, "arity", {
    	        get: function () {
    	            return 0;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlNone.prototype.verifyTree = function (options) {
    	        _super.prototype.verifyTree.call(this, options);
    	        if (this.parent && !this.parent.isKind('mmultiscripts')) {
    	            this.mError(this.kind + ' must be a child of mmultiscripts', options, true);
    	        }
    	    };
    	    MmlNone.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);
    	    return MmlNone;
    	}(MmlNode_js_1.AbstractMmlNode));
    	mmultiscripts.MmlNone = MmlNone;
    	
    	return mmultiscripts;
    }

    var mtable = {};

    var hasRequiredMtable;

    function requireMtable () {
    	if (hasRequiredMtable) return mtable;
    	hasRequiredMtable = 1;
    	var __extends = (mtable.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mtable.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __values = (mtable.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(mtable, "__esModule", { value: true });
    	mtable.MmlMtable = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var string_js_1 = requireString();
    	var MmlMtable = (function (_super) {
    	    __extends(MmlMtable, _super);
    	    function MmlMtable() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.properties = {
    	            useHeight: true
    	        };
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMtable.prototype, "kind", {
    	        get: function () {
    	            return 'mtable';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMtable.prototype, "linebreakContainer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMtable.prototype.setInheritedAttributes = function (attributes, display, level, prime) {
    	        var e_1, _a;
    	        try {
    	            for (var indentAttributes_1 = __values(MmlNode_js_1.indentAttributes), indentAttributes_1_1 = indentAttributes_1.next(); !indentAttributes_1_1.done; indentAttributes_1_1 = indentAttributes_1.next()) {
    	                var name_1 = indentAttributes_1_1.value;
    	                if (attributes[name_1]) {
    	                    this.attributes.setInherited(name_1, attributes[name_1][1]);
    	                }
    	                if (this.attributes.getExplicit(name_1) !== undefined) {
    	                    delete (this.attributes.getAllAttributes())[name_1];
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (indentAttributes_1_1 && !indentAttributes_1_1.done && (_a = indentAttributes_1.return)) _a.call(indentAttributes_1);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        _super.prototype.setInheritedAttributes.call(this, attributes, display, level, prime);
    	    };
    	    MmlMtable.prototype.setChildInheritedAttributes = function (attributes, display, level, _prime) {
    	        var e_2, _a, e_3, _b;
    	        try {
    	            for (var _c = __values(this.childNodes), _d = _c.next(); !_d.done; _d = _c.next()) {
    	                var child = _d.value;
    	                if (!child.isKind('mtr')) {
    	                    this.replaceChild(this.factory.create('mtr'), child)
    	                        .appendChild(child);
    	                }
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	        level = this.getProperty('scriptlevel') || level;
    	        display = !!(this.attributes.getExplicit('displaystyle') || this.attributes.getDefault('displaystyle'));
    	        attributes = this.addInheritedAttributes(attributes, {
    	            columnalign: this.attributes.get('columnalign'),
    	            rowalign: 'center'
    	        });
    	        var cramped = this.attributes.getExplicit('data-cramped');
    	        var ralign = (0, string_js_1.split)(this.attributes.get('rowalign'));
    	        try {
    	            for (var _e = __values(this.childNodes), _f = _e.next(); !_f.done; _f = _e.next()) {
    	                var child = _f.value;
    	                attributes.rowalign[1] = ralign.shift() || attributes.rowalign[1];
    	                child.setInheritedAttributes(attributes, display, level, !!cramped);
    	            }
    	        }
    	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	        finally {
    	            try {
    	                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
    	            }
    	            finally { if (e_3) throw e_3.error; }
    	        }
    	    };
    	    MmlMtable.prototype.verifyChildren = function (options) {
    	        var mtr = null;
    	        var factory = this.factory;
    	        for (var i = 0; i < this.childNodes.length; i++) {
    	            var child = this.childNodes[i];
    	            if (child.isKind('mtr')) {
    	                mtr = null;
    	            }
    	            else {
    	                var isMtd = child.isKind('mtd');
    	                if (mtr) {
    	                    this.removeChild(child);
    	                    i--;
    	                }
    	                else {
    	                    mtr = this.replaceChild(factory.create('mtr'), child);
    	                }
    	                mtr.appendChild(isMtd ? child : factory.create('mtd', {}, [child]));
    	                if (!options['fixMtables']) {
    	                    child.parent.removeChild(child);
    	                    child.parent = this;
    	                    isMtd && mtr.appendChild(factory.create('mtd'));
    	                    var merror = child.mError('Children of ' + this.kind + ' must be mtr or mlabeledtr', options, isMtd);
    	                    mtr.childNodes[mtr.childNodes.length - 1].appendChild(merror);
    	                }
    	            }
    	        }
    	        _super.prototype.verifyChildren.call(this, options);
    	    };
    	    MmlMtable.prototype.setTeXclass = function (prev) {
    	        var e_4, _a;
    	        this.getPrevClass(prev);
    	        try {
    	            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                child.setTeXclass(null);
    	            }
    	        }
    	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_4) throw e_4.error; }
    	        }
    	        return this;
    	    };
    	    MmlMtable.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), { align: 'axis', rowalign: 'baseline', columnalign: 'center', groupalign: '{left}', alignmentscope: true, columnwidth: 'auto', width: 'auto', rowspacing: '1ex', columnspacing: '.8em', rowlines: 'none', columnlines: 'none', frame: 'none', framespacing: '0.4em 0.5ex', equalrows: false, equalcolumns: false, displaystyle: false, side: 'right', minlabelspacing: '0.8em' });
    	    return MmlMtable;
    	}(MmlNode_js_1.AbstractMmlNode));
    	mtable.MmlMtable = MmlMtable;
    	
    	return mtable;
    }

    var mtr = {};

    var hasRequiredMtr;

    function requireMtr () {
    	if (hasRequiredMtr) return mtr;
    	hasRequiredMtr = 1;
    	var __extends = (mtr.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mtr.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __values = (mtr.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(mtr, "__esModule", { value: true });
    	mtr.MmlMlabeledtr = mtr.MmlMtr = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var Attributes_js_1 = requireAttributes();
    	var string_js_1 = requireString();
    	var MmlMtr = (function (_super) {
    	    __extends(MmlMtr, _super);
    	    function MmlMtr() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMtr.prototype, "kind", {
    	        get: function () {
    	            return 'mtr';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMtr.prototype, "linebreakContainer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMtr.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        var e_1, _a, e_2, _b;
    	        try {
    	            for (var _c = __values(this.childNodes), _d = _c.next(); !_d.done; _d = _c.next()) {
    	                var child = _d.value;
    	                if (!child.isKind('mtd')) {
    	                    this.replaceChild(this.factory.create('mtd'), child)
    	                        .appendChild(child);
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        var calign = (0, string_js_1.split)(this.attributes.get('columnalign'));
    	        if (this.arity === 1) {
    	            calign.unshift(this.parent.attributes.get('side'));
    	        }
    	        attributes = this.addInheritedAttributes(attributes, {
    	            rowalign: this.attributes.get('rowalign'),
    	            columnalign: 'center'
    	        });
    	        try {
    	            for (var _e = __values(this.childNodes), _f = _e.next(); !_f.done; _f = _e.next()) {
    	                var child = _f.value;
    	                attributes.columnalign[1] = calign.shift() || attributes.columnalign[1];
    	                child.setInheritedAttributes(attributes, display, level, prime);
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	    };
    	    MmlMtr.prototype.verifyChildren = function (options) {
    	        var e_3, _a;
    	        if (this.parent && !this.parent.isKind('mtable')) {
    	            this.mError(this.kind + ' can only be a child of an mtable', options, true);
    	            return;
    	        }
    	        try {
    	            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                if (!child.isKind('mtd')) {
    	                    var mtd = this.replaceChild(this.factory.create('mtd'), child);
    	                    mtd.appendChild(child);
    	                    if (!options['fixMtables']) {
    	                        child.mError('Children of ' + this.kind + ' must be mtd', options);
    	                    }
    	                }
    	            }
    	        }
    	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_3) throw e_3.error; }
    	        }
    	        _super.prototype.verifyChildren.call(this, options);
    	    };
    	    MmlMtr.prototype.setTeXclass = function (prev) {
    	        var e_4, _a;
    	        this.getPrevClass(prev);
    	        try {
    	            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var child = _c.value;
    	                child.setTeXclass(null);
    	            }
    	        }
    	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_4) throw e_4.error; }
    	        }
    	        return this;
    	    };
    	    MmlMtr.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), { rowalign: Attributes_js_1.INHERIT, columnalign: Attributes_js_1.INHERIT, groupalign: Attributes_js_1.INHERIT });
    	    return MmlMtr;
    	}(MmlNode_js_1.AbstractMmlNode));
    	mtr.MmlMtr = MmlMtr;
    	var MmlMlabeledtr = (function (_super) {
    	    __extends(MmlMlabeledtr, _super);
    	    function MmlMlabeledtr() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMlabeledtr.prototype, "kind", {
    	        get: function () {
    	            return 'mlabeledtr';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMlabeledtr.prototype, "arity", {
    	        get: function () {
    	            return 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    return MmlMlabeledtr;
    	}(MmlMtr));
    	mtr.MmlMlabeledtr = MmlMlabeledtr;
    	
    	return mtr;
    }

    var mtd = {};

    var hasRequiredMtd;

    function requireMtd () {
    	if (hasRequiredMtd) return mtd;
    	hasRequiredMtd = 1;
    	var __extends = (mtd.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mtd.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mtd, "__esModule", { value: true });
    	mtd.MmlMtd = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var Attributes_js_1 = requireAttributes();
    	var MmlMtd = (function (_super) {
    	    __extends(MmlMtd, _super);
    	    function MmlMtd() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMtd.prototype, "kind", {
    	        get: function () {
    	            return 'mtd';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMtd.prototype, "arity", {
    	        get: function () {
    	            return -1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMtd.prototype, "linebreakContainer", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMtd.prototype.verifyChildren = function (options) {
    	        if (this.parent && !this.parent.isKind('mtr')) {
    	            this.mError(this.kind + ' can only be a child of an mtr or mlabeledtr', options, true);
    	            return;
    	        }
    	        _super.prototype.verifyChildren.call(this, options);
    	    };
    	    MmlMtd.prototype.setTeXclass = function (prev) {
    	        this.getPrevClass(prev);
    	        this.childNodes[0].setTeXclass(null);
    	        return this;
    	    };
    	    MmlMtd.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults), { rowspan: 1, columnspan: 1, rowalign: Attributes_js_1.INHERIT, columnalign: Attributes_js_1.INHERIT, groupalign: Attributes_js_1.INHERIT });
    	    return MmlMtd;
    	}(MmlNode_js_1.AbstractMmlBaseNode));
    	mtd.MmlMtd = MmlMtd;
    	
    	return mtd;
    }

    var maligngroup = {};

    var hasRequiredMaligngroup;

    function requireMaligngroup () {
    	if (hasRequiredMaligngroup) return maligngroup;
    	hasRequiredMaligngroup = 1;
    	var __extends = (maligngroup.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (maligngroup.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(maligngroup, "__esModule", { value: true });
    	maligngroup.MmlMaligngroup = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var Attributes_js_1 = requireAttributes();
    	var MmlMaligngroup = (function (_super) {
    	    __extends(MmlMaligngroup, _super);
    	    function MmlMaligngroup() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMaligngroup.prototype, "kind", {
    	        get: function () {
    	            return 'maligngroup';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMaligngroup.prototype, "isSpacelike", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMaligngroup.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {
    	        attributes = this.addInheritedAttributes(attributes, this.attributes.getAllAttributes());
    	        _super.prototype.setChildInheritedAttributes.call(this, attributes, display, level, prime);
    	    };
    	    MmlMaligngroup.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlLayoutNode.defaults), { groupalign: Attributes_js_1.INHERIT });
    	    return MmlMaligngroup;
    	}(MmlNode_js_1.AbstractMmlLayoutNode));
    	maligngroup.MmlMaligngroup = MmlMaligngroup;
    	
    	return maligngroup;
    }

    var malignmark = {};

    var hasRequiredMalignmark;

    function requireMalignmark () {
    	if (hasRequiredMalignmark) return malignmark;
    	hasRequiredMalignmark = 1;
    	var __extends = (malignmark.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (malignmark.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(malignmark, "__esModule", { value: true });
    	malignmark.MmlMalignmark = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMalignmark = (function (_super) {
    	    __extends(MmlMalignmark, _super);
    	    function MmlMalignmark() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlMalignmark.prototype, "kind", {
    	        get: function () {
    	            return 'malignmark';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMalignmark.prototype, "arity", {
    	        get: function () {
    	            return 0;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlMalignmark.prototype, "isSpacelike", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMalignmark.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), { edge: 'left' });
    	    return MmlMalignmark;
    	}(MmlNode_js_1.AbstractMmlNode));
    	malignmark.MmlMalignmark = MmlMalignmark;
    	
    	return malignmark;
    }

    var mglyph = {};

    var hasRequiredMglyph;

    function requireMglyph () {
    	if (hasRequiredMglyph) return mglyph;
    	hasRequiredMglyph = 1;
    	var __extends = (mglyph.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mglyph.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mglyph, "__esModule", { value: true });
    	mglyph.MmlMglyph = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlMglyph = (function (_super) {
    	    __extends(MmlMglyph, _super);
    	    function MmlMglyph() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        return _this;
    	    }
    	    Object.defineProperty(MmlMglyph.prototype, "kind", {
    	        get: function () {
    	            return 'mglyph';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlMglyph.prototype.verifyAttributes = function (options) {
    	        var _a = this.attributes.getList('src', 'fontfamily', 'index'), src = _a.src, fontfamily = _a.fontfamily, index = _a.index;
    	        if (src === '' && (fontfamily === '' || index === '')) {
    	            this.mError('mglyph must have either src or fontfamily and index attributes', options, true);
    	        }
    	        else {
    	            _super.prototype.verifyAttributes.call(this, options);
    	        }
    	    };
    	    MmlMglyph.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults), { alt: '', src: '', index: '', width: 'auto', height: 'auto', valign: '0em' });
    	    return MmlMglyph;
    	}(MmlNode_js_1.AbstractMmlTokenNode));
    	mglyph.MmlMglyph = MmlMglyph;
    	
    	return mglyph;
    }

    var semantics = {};

    var hasRequiredSemantics;

    function requireSemantics () {
    	if (hasRequiredSemantics) return semantics;
    	hasRequiredSemantics = 1;
    	var __extends = (semantics.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (semantics.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(semantics, "__esModule", { value: true });
    	semantics.MmlAnnotation = semantics.MmlAnnotationXML = semantics.MmlSemantics = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MmlSemantics = (function (_super) {
    	    __extends(MmlSemantics, _super);
    	    function MmlSemantics() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlSemantics.prototype, "kind", {
    	        get: function () {
    	            return 'semantics';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlSemantics.prototype, "arity", {
    	        get: function () {
    	            return 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MmlSemantics.prototype, "notParent", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlSemantics.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults), { definitionUrl: null, encoding: null });
    	    return MmlSemantics;
    	}(MmlNode_js_1.AbstractMmlBaseNode));
    	semantics.MmlSemantics = MmlSemantics;
    	var MmlAnnotationXML = (function (_super) {
    	    __extends(MmlAnnotationXML, _super);
    	    function MmlAnnotationXML() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlAnnotationXML.prototype, "kind", {
    	        get: function () {
    	            return 'annotation-xml';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlAnnotationXML.prototype.setChildInheritedAttributes = function () { };
    	    MmlAnnotationXML.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), { definitionUrl: null, encoding: null, cd: 'mathmlkeys', name: '', src: null });
    	    return MmlAnnotationXML;
    	}(MmlNode_js_1.AbstractMmlNode));
    	semantics.MmlAnnotationXML = MmlAnnotationXML;
    	var MmlAnnotation = (function (_super) {
    	    __extends(MmlAnnotation, _super);
    	    function MmlAnnotation() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.properties = {
    	            isChars: true
    	        };
    	        return _this;
    	    }
    	    Object.defineProperty(MmlAnnotation.prototype, "kind", {
    	        get: function () {
    	            return 'annotation';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlAnnotation.defaults = __assign({}, MmlAnnotationXML.defaults);
    	    return MmlAnnotation;
    	}(MmlAnnotationXML));
    	semantics.MmlAnnotation = MmlAnnotation;
    	
    	return semantics;
    }

    var TeXAtom = {};

    var hasRequiredTeXAtom;

    function requireTeXAtom () {
    	if (hasRequiredTeXAtom) return TeXAtom;
    	hasRequiredTeXAtom = 1;
    	var __extends = (TeXAtom.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (TeXAtom.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(TeXAtom, "__esModule", { value: true });
    	TeXAtom.TeXAtom = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var mo_js_1 = requireMo();
    	var TeXAtom$1 = (function (_super) {
    	    __extends(TeXAtom, _super);
    	    function TeXAtom(factory, attributes, children) {
    	        var _this = _super.call(this, factory, attributes, children) || this;
    	        _this.texclass = MmlNode_js_1.TEXCLASS.ORD;
    	        _this.setProperty('texClass', _this.texClass);
    	        return _this;
    	    }
    	    Object.defineProperty(TeXAtom.prototype, "kind", {
    	        get: function () {
    	            return 'TeXAtom';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(TeXAtom.prototype, "arity", {
    	        get: function () {
    	            return -1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(TeXAtom.prototype, "notParent", {
    	        get: function () {
    	            return this.childNodes[0] && this.childNodes[0].childNodes.length === 1;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    TeXAtom.prototype.setTeXclass = function (prev) {
    	        this.childNodes[0].setTeXclass(null);
    	        return this.adjustTeXclass(prev);
    	    };
    	    TeXAtom.prototype.adjustTeXclass = function (prev) {
    	        return prev;
    	    };
    	    TeXAtom.defaults = __assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults);
    	    return TeXAtom;
    	}(MmlNode_js_1.AbstractMmlBaseNode));
    	TeXAtom.TeXAtom = TeXAtom$1;
    	TeXAtom$1.prototype.adjustTeXclass = mo_js_1.MmlMo.prototype.adjustTeXclass;
    	
    	return TeXAtom;
    }

    var mathchoice = {};

    var hasRequiredMathchoice;

    function requireMathchoice () {
    	if (hasRequiredMathchoice) return mathchoice;
    	hasRequiredMathchoice = 1;
    	var __extends = (mathchoice.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (mathchoice.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	Object.defineProperty(mathchoice, "__esModule", { value: true });
    	mathchoice.MathChoice = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var MathChoice = (function (_super) {
    	    __extends(MathChoice, _super);
    	    function MathChoice() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MathChoice.prototype, "kind", {
    	        get: function () {
    	            return 'MathChoice';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MathChoice.prototype, "arity", {
    	        get: function () {
    	            return 4;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(MathChoice.prototype, "notParent", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MathChoice.prototype.setInheritedAttributes = function (attributes, display, level, prime) {
    	        var selection = (display ? 0 : Math.max(0, Math.min(level, 2)) + 1);
    	        var child = this.childNodes[selection] || this.factory.create('mrow');
    	        this.parent.replaceChild(child, this);
    	        child.setInheritedAttributes(attributes, display, level, prime);
    	    };
    	    MathChoice.defaults = __assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults);
    	    return MathChoice;
    	}(MmlNode_js_1.AbstractMmlBaseNode));
    	mathchoice.MathChoice = MathChoice;
    	
    	return mathchoice;
    }

    var hasRequiredMML;

    function requireMML () {
    	if (hasRequiredMML) return MML;
    	hasRequiredMML = 1;
    	var _a;
    	Object.defineProperty(MML, "__esModule", { value: true });
    	MML.MML = undefined;
    	var MmlNode_js_1 = requireMmlNode();
    	var math_js_1 = requireMath();
    	var mi_js_1 = requireMi();
    	var mn_js_1 = requireMn();
    	var mo_js_1 = requireMo();
    	var mtext_js_1 = requireMtext();
    	var mspace_js_1 = requireMspace();
    	var ms_js_1 = requireMs();
    	var mrow_js_1 = requireMrow();
    	var mfrac_js_1 = requireMfrac();
    	var msqrt_js_1 = requireMsqrt();
    	var mroot_js_1 = requireMroot();
    	var mstyle_js_1 = requireMstyle();
    	var merror_js_1 = requireMerror();
    	var mpadded_js_1 = requireMpadded();
    	var mphantom_js_1 = requireMphantom();
    	var mfenced_js_1 = requireMfenced();
    	var menclose_js_1 = requireMenclose();
    	var maction_js_1 = requireMaction();
    	var msubsup_js_1 = requireMsubsup();
    	var munderover_js_1 = requireMunderover();
    	var mmultiscripts_js_1 = requireMmultiscripts();
    	var mtable_js_1 = requireMtable();
    	var mtr_js_1 = requireMtr();
    	var mtd_js_1 = requireMtd();
    	var maligngroup_js_1 = requireMaligngroup();
    	var malignmark_js_1 = requireMalignmark();
    	var mglyph_js_1 = requireMglyph();
    	var semantics_js_1 = requireSemantics();
    	var TeXAtom_js_1 = requireTeXAtom();
    	var mathchoice_js_1 = requireMathchoice();
    	MML.MML = (_a = {},
    	    _a[math_js_1.MmlMath.prototype.kind] = math_js_1.MmlMath,
    	    _a[mi_js_1.MmlMi.prototype.kind] = mi_js_1.MmlMi,
    	    _a[mn_js_1.MmlMn.prototype.kind] = mn_js_1.MmlMn,
    	    _a[mo_js_1.MmlMo.prototype.kind] = mo_js_1.MmlMo,
    	    _a[mtext_js_1.MmlMtext.prototype.kind] = mtext_js_1.MmlMtext,
    	    _a[mspace_js_1.MmlMspace.prototype.kind] = mspace_js_1.MmlMspace,
    	    _a[ms_js_1.MmlMs.prototype.kind] = ms_js_1.MmlMs,
    	    _a[mrow_js_1.MmlMrow.prototype.kind] = mrow_js_1.MmlMrow,
    	    _a[mrow_js_1.MmlInferredMrow.prototype.kind] = mrow_js_1.MmlInferredMrow,
    	    _a[mfrac_js_1.MmlMfrac.prototype.kind] = mfrac_js_1.MmlMfrac,
    	    _a[msqrt_js_1.MmlMsqrt.prototype.kind] = msqrt_js_1.MmlMsqrt,
    	    _a[mroot_js_1.MmlMroot.prototype.kind] = mroot_js_1.MmlMroot,
    	    _a[mstyle_js_1.MmlMstyle.prototype.kind] = mstyle_js_1.MmlMstyle,
    	    _a[merror_js_1.MmlMerror.prototype.kind] = merror_js_1.MmlMerror,
    	    _a[mpadded_js_1.MmlMpadded.prototype.kind] = mpadded_js_1.MmlMpadded,
    	    _a[mphantom_js_1.MmlMphantom.prototype.kind] = mphantom_js_1.MmlMphantom,
    	    _a[mfenced_js_1.MmlMfenced.prototype.kind] = mfenced_js_1.MmlMfenced,
    	    _a[menclose_js_1.MmlMenclose.prototype.kind] = menclose_js_1.MmlMenclose,
    	    _a[maction_js_1.MmlMaction.prototype.kind] = maction_js_1.MmlMaction,
    	    _a[msubsup_js_1.MmlMsub.prototype.kind] = msubsup_js_1.MmlMsub,
    	    _a[msubsup_js_1.MmlMsup.prototype.kind] = msubsup_js_1.MmlMsup,
    	    _a[msubsup_js_1.MmlMsubsup.prototype.kind] = msubsup_js_1.MmlMsubsup,
    	    _a[munderover_js_1.MmlMunder.prototype.kind] = munderover_js_1.MmlMunder,
    	    _a[munderover_js_1.MmlMover.prototype.kind] = munderover_js_1.MmlMover,
    	    _a[munderover_js_1.MmlMunderover.prototype.kind] = munderover_js_1.MmlMunderover,
    	    _a[mmultiscripts_js_1.MmlMmultiscripts.prototype.kind] = mmultiscripts_js_1.MmlMmultiscripts,
    	    _a[mmultiscripts_js_1.MmlMprescripts.prototype.kind] = mmultiscripts_js_1.MmlMprescripts,
    	    _a[mmultiscripts_js_1.MmlNone.prototype.kind] = mmultiscripts_js_1.MmlNone,
    	    _a[mtable_js_1.MmlMtable.prototype.kind] = mtable_js_1.MmlMtable,
    	    _a[mtr_js_1.MmlMlabeledtr.prototype.kind] = mtr_js_1.MmlMlabeledtr,
    	    _a[mtr_js_1.MmlMtr.prototype.kind] = mtr_js_1.MmlMtr,
    	    _a[mtd_js_1.MmlMtd.prototype.kind] = mtd_js_1.MmlMtd,
    	    _a[maligngroup_js_1.MmlMaligngroup.prototype.kind] = maligngroup_js_1.MmlMaligngroup,
    	    _a[malignmark_js_1.MmlMalignmark.prototype.kind] = malignmark_js_1.MmlMalignmark,
    	    _a[mglyph_js_1.MmlMglyph.prototype.kind] = mglyph_js_1.MmlMglyph,
    	    _a[semantics_js_1.MmlSemantics.prototype.kind] = semantics_js_1.MmlSemantics,
    	    _a[semantics_js_1.MmlAnnotation.prototype.kind] = semantics_js_1.MmlAnnotation,
    	    _a[semantics_js_1.MmlAnnotationXML.prototype.kind] = semantics_js_1.MmlAnnotationXML,
    	    _a[TeXAtom_js_1.TeXAtom.prototype.kind] = TeXAtom_js_1.TeXAtom,
    	    _a[mathchoice_js_1.MathChoice.prototype.kind] = mathchoice_js_1.MathChoice,
    	    _a[MmlNode_js_1.TextNode.prototype.kind] = MmlNode_js_1.TextNode,
    	    _a[MmlNode_js_1.XMLNode.prototype.kind] = MmlNode_js_1.XMLNode,
    	    _a);
    	
    	return MML;
    }

    var hasRequiredMmlFactory;

    function requireMmlFactory () {
    	if (hasRequiredMmlFactory) return MmlFactory;
    	hasRequiredMmlFactory = 1;
    	var __extends = (MmlFactory.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(MmlFactory, "__esModule", { value: true });
    	MmlFactory.MmlFactory = undefined;
    	var NodeFactory_js_1 = requireNodeFactory();
    	var MML_js_1 = requireMML();
    	var MmlFactory$1 = (function (_super) {
    	    __extends(MmlFactory, _super);
    	    function MmlFactory() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MmlFactory.prototype, "MML", {
    	        get: function () {
    	            return this.node;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MmlFactory.defaultNodes = MML_js_1.MML;
    	    return MmlFactory;
    	}(NodeFactory_js_1.AbstractNodeFactory));
    	MmlFactory.MmlFactory = MmlFactory$1;
    	
    	return MmlFactory;
    }

    var BitField = {};

    var hasRequiredBitField;

    function requireBitField () {
    	if (hasRequiredBitField) return BitField;
    	hasRequiredBitField = 1;
    	var __extends = (BitField.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __values = (BitField.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (BitField.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (BitField.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	Object.defineProperty(BitField, "__esModule", { value: true });
    	BitField.BitFieldClass = BitField.BitField = undefined;
    	var BitField$1 = (function () {
    	    function BitField() {
    	        this.bits = 0;
    	    }
    	    BitField.allocate = function () {
    	        var e_1, _a;
    	        var names = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            names[_i] = arguments[_i];
    	        }
    	        try {
    	            for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {
    	                var name_1 = names_1_1.value;
    	                if (this.has(name_1)) {
    	                    throw new Error('Bit already allocated for ' + name_1);
    	                }
    	                if (this.next === BitField.MAXBIT) {
    	                    throw new Error('Maximum number of bits already allocated');
    	                }
    	                this.names.set(name_1, this.next);
    	                this.next <<= 1;
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	    };
    	    BitField.has = function (name) {
    	        return this.names.has(name);
    	    };
    	    BitField.prototype.set = function (name) {
    	        this.bits |= this.getBit(name);
    	    };
    	    BitField.prototype.clear = function (name) {
    	        this.bits &= ~this.getBit(name);
    	    };
    	    BitField.prototype.isSet = function (name) {
    	        return !!(this.bits & this.getBit(name));
    	    };
    	    BitField.prototype.reset = function () {
    	        this.bits = 0;
    	    };
    	    BitField.prototype.getBit = function (name) {
    	        var bit = this.constructor.names.get(name);
    	        if (!bit) {
    	            throw new Error('Unknown bit-field name: ' + name);
    	        }
    	        return bit;
    	    };
    	    BitField.MAXBIT = 1 << 31;
    	    BitField.next = 1;
    	    BitField.names = new Map();
    	    return BitField;
    	}());
    	BitField.BitField = BitField$1;
    	function BitFieldClass() {
    	    var names = [];
    	    for (var _i = 0; _i < arguments.length; _i++) {
    	        names[_i] = arguments[_i];
    	    }
    	    var Bits = (function (_super) {
    	        __extends(Bits, _super);
    	        function Bits() {
    	            return _super !== null && _super.apply(this, arguments) || this;
    	        }
    	        return Bits;
    	    }(BitField$1));
    	    Bits.allocate.apply(Bits, __spreadArray([], __read(names), false));
    	    return Bits;
    	}
    	BitField.BitFieldClass = BitFieldClass;
    	
    	return BitField;
    }

    var hasRequiredMathDocument;

    function requireMathDocument () {
    	if (hasRequiredMathDocument) return MathDocument;
    	hasRequiredMathDocument = 1;
    	(function (exports) {
    		var __extends = (MathDocument.__extends) || (function () {
    		    var extendStatics = function (d, b) {
    		        extendStatics = Object.setPrototypeOf ||
    		            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    		            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    		        return extendStatics(d, b);
    		    };
    		    return function (d, b) {
    		        if (typeof b !== "function" && b !== null)
    		            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    		        extendStatics(d, b);
    		        function __() { this.constructor = d; }
    		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    		    };
    		})();
    		var __values = (MathDocument.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __read = (MathDocument.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __spreadArray = (MathDocument.__spreadArray) || function (to, from, pack) {
    		    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    		        if (ar || !(i in from)) {
    		            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    		            ar[i] = from[i];
    		        }
    		    }
    		    return to.concat(ar || Array.prototype.slice.call(from));
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.AbstractMathDocument = exports.resetAllOptions = exports.resetOptions = exports.RenderList = undefined;
    		var Options_js_1 = requireOptions();
    		var InputJax_js_1 = requireInputJax();
    		var OutputJax_js_1 = requireOutputJax();
    		var MathList_js_1 = requireMathList();
    		var MathItem_js_1 = requireMathItem();
    		var MmlFactory_js_1 = requireMmlFactory();
    		var BitField_js_1 = requireBitField();
    		var PrioritizedList_js_1 = requirePrioritizedList();
    		var RenderList = (function (_super) {
    		    __extends(RenderList, _super);
    		    function RenderList() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    RenderList.create = function (actions) {
    		        var e_1, _a;
    		        var list = new this();
    		        try {
    		            for (var _b = __values(Object.keys(actions)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var id = _c.value;
    		                var _d = __read(this.action(id, actions[id]), 2), action = _d[0], priority = _d[1];
    		                if (priority) {
    		                    list.add(action, priority);
    		                }
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		        return list;
    		    };
    		    RenderList.action = function (id, action) {
    		        var _a, _b, _c, _d;
    		        var renderDoc, renderMath;
    		        var convert = true;
    		        var priority = action[0];
    		        if (action.length === 1 || typeof action[1] === 'boolean') {
    		            action.length === 2 && (convert = action[1]);
    		            _a = __read(this.methodActions(id), 2), renderDoc = _a[0], renderMath = _a[1];
    		        }
    		        else if (typeof action[1] === 'string') {
    		            if (typeof action[2] === 'string') {
    		                action.length === 4 && (convert = action[3]);
    		                var _e = __read(action.slice(1), 2), method1 = _e[0], method2 = _e[1];
    		                _b = __read(this.methodActions(method1, method2), 2), renderDoc = _b[0], renderMath = _b[1];
    		            }
    		            else {
    		                action.length === 3 && (convert = action[2]);
    		                _c = __read(this.methodActions(action[1]), 2), renderDoc = _c[0], renderMath = _c[1];
    		            }
    		        }
    		        else {
    		            action.length === 4 && (convert = action[3]);
    		            _d = __read(action.slice(1), 2), renderDoc = _d[0], renderMath = _d[1];
    		        }
    		        return [{ id: id, renderDoc: renderDoc, renderMath: renderMath, convert: convert }, priority];
    		    };
    		    RenderList.methodActions = function (method1, method2) {
    		        if (method2 === undefined) { method2 = method1; }
    		        return [
    		            function (document) { method1 && document[method1](); return false; },
    		            function (math, document) { method2 && math[method2](document); return false; }
    		        ];
    		    };
    		    RenderList.prototype.renderDoc = function (document, start) {
    		        var e_2, _a;
    		        if (start === undefined) { start = MathItem_js_1.STATE.UNPROCESSED; }
    		        try {
    		            for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var item = _c.value;
    		                if (item.priority >= start) {
    		                    if (item.item.renderDoc(document))
    		                        return;
    		                }
    		            }
    		        }
    		        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_2) throw e_2.error; }
    		        }
    		    };
    		    RenderList.prototype.renderMath = function (math, document, start) {
    		        var e_3, _a;
    		        if (start === undefined) { start = MathItem_js_1.STATE.UNPROCESSED; }
    		        try {
    		            for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var item = _c.value;
    		                if (item.priority >= start) {
    		                    if (item.item.renderMath(math, document))
    		                        return;
    		                }
    		            }
    		        }
    		        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_3) throw e_3.error; }
    		        }
    		    };
    		    RenderList.prototype.renderConvert = function (math, document, end) {
    		        var e_4, _a;
    		        if (end === undefined) { end = MathItem_js_1.STATE.LAST; }
    		        try {
    		            for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var item = _c.value;
    		                if (item.priority > end)
    		                    return;
    		                if (item.item.convert) {
    		                    if (item.item.renderMath(math, document))
    		                        return;
    		                }
    		            }
    		        }
    		        catch (e_4_1) { e_4 = { error: e_4_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_4) throw e_4.error; }
    		        }
    		    };
    		    RenderList.prototype.findID = function (id) {
    		        var e_5, _a;
    		        try {
    		            for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var item = _c.value;
    		                if (item.item.id === id) {
    		                    return item.item;
    		                }
    		            }
    		        }
    		        catch (e_5_1) { e_5 = { error: e_5_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_5) throw e_5.error; }
    		        }
    		        return null;
    		    };
    		    return RenderList;
    		}(PrioritizedList_js_1.PrioritizedList));
    		exports.RenderList = RenderList;
    		exports.resetOptions = {
    		    all: false,
    		    processed: false,
    		    inputJax: null,
    		    outputJax: null
    		};
    		exports.resetAllOptions = {
    		    all: true,
    		    processed: true,
    		    inputJax: [],
    		    outputJax: []
    		};
    		var DefaultInputJax = (function (_super) {
    		    __extends(DefaultInputJax, _super);
    		    function DefaultInputJax() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    DefaultInputJax.prototype.compile = function (_math) {
    		        return null;
    		    };
    		    return DefaultInputJax;
    		}(InputJax_js_1.AbstractInputJax));
    		var DefaultOutputJax = (function (_super) {
    		    __extends(DefaultOutputJax, _super);
    		    function DefaultOutputJax() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    DefaultOutputJax.prototype.typeset = function (_math, _document) {
    		        return null;
    		    };
    		    DefaultOutputJax.prototype.escaped = function (_math, _document) {
    		        return null;
    		    };
    		    return DefaultOutputJax;
    		}(OutputJax_js_1.AbstractOutputJax));
    		var DefaultMathList = (function (_super) {
    		    __extends(DefaultMathList, _super);
    		    function DefaultMathList() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    return DefaultMathList;
    		}(MathList_js_1.AbstractMathList));
    		var DefaultMathItem = (function (_super) {
    		    __extends(DefaultMathItem, _super);
    		    function DefaultMathItem() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    return DefaultMathItem;
    		}(MathItem_js_1.AbstractMathItem));
    		var AbstractMathDocument = (function () {
    		    function AbstractMathDocument(document, adaptor, options) {
    		        var _this = this;
    		        var CLASS = this.constructor;
    		        this.document = document;
    		        this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), options);
    		        this.math = new (this.options['MathList'] || DefaultMathList)();
    		        this.renderActions = RenderList.create(this.options['renderActions']);
    		        this.processed = new AbstractMathDocument.ProcessBits();
    		        this.outputJax = this.options['OutputJax'] || new DefaultOutputJax();
    		        var inputJax = this.options['InputJax'] || [new DefaultInputJax()];
    		        if (!Array.isArray(inputJax)) {
    		            inputJax = [inputJax];
    		        }
    		        this.inputJax = inputJax;
    		        this.adaptor = adaptor;
    		        this.outputJax.setAdaptor(adaptor);
    		        this.inputJax.map(function (jax) { return jax.setAdaptor(adaptor); });
    		        this.mmlFactory = this.options['MmlFactory'] || new MmlFactory_js_1.MmlFactory();
    		        this.inputJax.map(function (jax) { return jax.setMmlFactory(_this.mmlFactory); });
    		        this.outputJax.initialize();
    		        this.inputJax.map(function (jax) { return jax.initialize(); });
    		    }
    		    Object.defineProperty(AbstractMathDocument.prototype, "kind", {
    		        get: function () {
    		            return this.constructor.KIND;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    AbstractMathDocument.prototype.addRenderAction = function (id) {
    		        var action = [];
    		        for (var _i = 1; _i < arguments.length; _i++) {
    		            action[_i - 1] = arguments[_i];
    		        }
    		        var _a = __read(RenderList.action(id, action), 2), fn = _a[0], p = _a[1];
    		        this.renderActions.add(fn, p);
    		    };
    		    AbstractMathDocument.prototype.removeRenderAction = function (id) {
    		        var action = this.renderActions.findID(id);
    		        if (action) {
    		            this.renderActions.remove(action);
    		        }
    		    };
    		    AbstractMathDocument.prototype.render = function () {
    		        this.renderActions.renderDoc(this);
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.rerender = function (start) {
    		        if (start === undefined) { start = MathItem_js_1.STATE.RERENDER; }
    		        this.state(start - 1);
    		        this.render();
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.convert = function (math, options) {
    		        if (options === undefined) { options = {}; }
    		        var _a = (0, Options_js_1.userOptions)({
    		            format: this.inputJax[0].name, display: true, end: MathItem_js_1.STATE.LAST,
    		            em: 16, ex: 8, containerWidth: null, lineWidth: 1000000, scale: 1, family: ''
    		        }, options), format = _a.format, display = _a.display, end = _a.end, ex = _a.ex, em = _a.em, containerWidth = _a.containerWidth, lineWidth = _a.lineWidth, scale = _a.scale, family = _a.family;
    		        if (containerWidth === null) {
    		            containerWidth = 80 * ex;
    		        }
    		        var jax = this.inputJax.reduce(function (jax, ijax) { return (ijax.name === format ? ijax : jax); }, null);
    		        var mitem = new this.options.MathItem(math, jax, display);
    		        mitem.start.node = this.adaptor.body(this.document);
    		        mitem.setMetrics(em, ex, containerWidth, lineWidth, scale);
    		        if (this.outputJax.options.mtextInheritFont) {
    		            mitem.outputData.mtextFamily = family;
    		        }
    		        if (this.outputJax.options.merrorInheritFont) {
    		            mitem.outputData.merrorFamily = family;
    		        }
    		        mitem.convert(this, end);
    		        return (mitem.typesetRoot || mitem.root);
    		    };
    		    AbstractMathDocument.prototype.findMath = function (_options) {
    		        this.processed.set('findMath');
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.compile = function () {
    		        var e_6, _a, e_7, _b;
    		        if (!this.processed.isSet('compile')) {
    		            var recompile = [];
    		            try {
    		                for (var _c = __values(this.math), _d = _c.next(); !_d.done; _d = _c.next()) {
    		                    var math = _d.value;
    		                    this.compileMath(math);
    		                    if (math.inputData.recompile !== undefined) {
    		                        recompile.push(math);
    		                    }
    		                }
    		            }
    		            catch (e_6_1) { e_6 = { error: e_6_1 }; }
    		            finally {
    		                try {
    		                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    		                }
    		                finally { if (e_6) throw e_6.error; }
    		            }
    		            try {
    		                for (var recompile_1 = __values(recompile), recompile_1_1 = recompile_1.next(); !recompile_1_1.done; recompile_1_1 = recompile_1.next()) {
    		                    var math = recompile_1_1.value;
    		                    var data = math.inputData.recompile;
    		                    math.state(data.state);
    		                    math.inputData.recompile = data;
    		                    this.compileMath(math);
    		                }
    		            }
    		            catch (e_7_1) { e_7 = { error: e_7_1 }; }
    		            finally {
    		                try {
    		                    if (recompile_1_1 && !recompile_1_1.done && (_b = recompile_1.return)) _b.call(recompile_1);
    		                }
    		                finally { if (e_7) throw e_7.error; }
    		            }
    		            this.processed.set('compile');
    		        }
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.compileMath = function (math) {
    		        try {
    		            math.compile(this);
    		        }
    		        catch (err) {
    		            if (err.retry || err.restart) {
    		                throw err;
    		            }
    		            this.options['compileError'](this, math, err);
    		            math.inputData['error'] = err;
    		        }
    		    };
    		    AbstractMathDocument.prototype.compileError = function (math, err) {
    		        math.root = this.mmlFactory.create('math', null, [
    		            this.mmlFactory.create('merror', { 'data-mjx-error': err.message, title: err.message }, [
    		                this.mmlFactory.create('mtext', null, [
    		                    this.mmlFactory.create('text').setText('Math input error')
    		                ])
    		            ])
    		        ]);
    		        if (math.display) {
    		            math.root.attributes.set('display', 'block');
    		        }
    		        math.inputData.error = err.message;
    		    };
    		    AbstractMathDocument.prototype.typeset = function () {
    		        var e_8, _a;
    		        if (!this.processed.isSet('typeset')) {
    		            try {
    		                for (var _b = __values(this.math), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                    var math = _c.value;
    		                    try {
    		                        math.typeset(this);
    		                    }
    		                    catch (err) {
    		                        if (err.retry || err.restart) {
    		                            throw err;
    		                        }
    		                        this.options['typesetError'](this, math, err);
    		                        math.outputData['error'] = err;
    		                    }
    		                }
    		            }
    		            catch (e_8_1) { e_8 = { error: e_8_1 }; }
    		            finally {
    		                try {
    		                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		                }
    		                finally { if (e_8) throw e_8.error; }
    		            }
    		            this.processed.set('typeset');
    		        }
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.typesetError = function (math, err) {
    		        math.typesetRoot = this.adaptor.node('mjx-container', {
    		            class: 'MathJax mjx-output-error',
    		            jax: this.outputJax.name,
    		        }, [
    		            this.adaptor.node('span', {
    		                'data-mjx-error': err.message,
    		                title: err.message,
    		                style: {
    		                    color: 'red',
    		                    'background-color': 'yellow',
    		                    'line-height': 'normal'
    		                }
    		            }, [
    		                this.adaptor.text('Math output error')
    		            ])
    		        ]);
    		        if (math.display) {
    		            this.adaptor.setAttributes(math.typesetRoot, {
    		                style: {
    		                    display: 'block',
    		                    margin: '1em 0',
    		                    'text-align': 'center'
    		                }
    		            });
    		        }
    		        math.outputData.error = err.message;
    		    };
    		    AbstractMathDocument.prototype.getMetrics = function () {
    		        if (!this.processed.isSet('getMetrics')) {
    		            this.outputJax.getMetrics(this);
    		            this.processed.set('getMetrics');
    		        }
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.updateDocument = function () {
    		        var e_9, _a;
    		        if (!this.processed.isSet('updateDocument')) {
    		            try {
    		                for (var _b = __values(this.math.reversed()), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                    var math = _c.value;
    		                    math.updateDocument(this);
    		                }
    		            }
    		            catch (e_9_1) { e_9 = { error: e_9_1 }; }
    		            finally {
    		                try {
    		                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		                }
    		                finally { if (e_9) throw e_9.error; }
    		            }
    		            this.processed.set('updateDocument');
    		        }
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.removeFromDocument = function (_restore) {
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.state = function (state, restore) {
    		        var e_10, _a;
    		        if (restore === undefined) { restore = false; }
    		        try {
    		            for (var _b = __values(this.math), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var math = _c.value;
    		                math.state(state, restore);
    		            }
    		        }
    		        catch (e_10_1) { e_10 = { error: e_10_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_10) throw e_10.error; }
    		        }
    		        if (state < MathItem_js_1.STATE.INSERTED) {
    		            this.processed.clear('updateDocument');
    		        }
    		        if (state < MathItem_js_1.STATE.TYPESET) {
    		            this.processed.clear('typeset');
    		            this.processed.clear('getMetrics');
    		        }
    		        if (state < MathItem_js_1.STATE.COMPILED) {
    		            this.processed.clear('compile');
    		        }
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.reset = function (options) {
    		        var _a;
    		        if (options === undefined) { options = { processed: true }; }
    		        options = (0, Options_js_1.userOptions)(Object.assign({}, exports.resetOptions), options);
    		        options.all && Object.assign(options, exports.resetAllOptions);
    		        options.processed && this.processed.reset();
    		        options.inputJax && this.inputJax.forEach(function (jax) { return jax.reset.apply(jax, __spreadArray([], __read(options.inputJax), false)); });
    		        options.outputJax && (_a = this.outputJax).reset.apply(_a, __spreadArray([], __read(options.outputJax), false));
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.clear = function () {
    		        this.reset();
    		        this.math.clear();
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.concat = function (list) {
    		        this.math.merge(list);
    		        return this;
    		    };
    		    AbstractMathDocument.prototype.clearMathItemsWithin = function (containers) {
    		        var _a;
    		        var items = this.getMathItemsWithin(containers);
    		        (_a = this.math).remove.apply(_a, __spreadArray([], __read(items), false));
    		        return items;
    		    };
    		    AbstractMathDocument.prototype.getMathItemsWithin = function (elements) {
    		        var e_11, _a, e_12, _b;
    		        if (!Array.isArray(elements)) {
    		            elements = [elements];
    		        }
    		        var adaptor = this.adaptor;
    		        var items = [];
    		        var containers = adaptor.getElements(elements, this.document);
    		        try {
    		            ITEMS: for (var _c = __values(this.math), _d = _c.next(); !_d.done; _d = _c.next()) {
    		                var item = _d.value;
    		                try {
    		                    for (var containers_1 = (e_12 = void 0, __values(containers)), containers_1_1 = containers_1.next(); !containers_1_1.done; containers_1_1 = containers_1.next()) {
    		                        var container = containers_1_1.value;
    		                        if (item.start.node && adaptor.contains(container, item.start.node)) {
    		                            items.push(item);
    		                            continue ITEMS;
    		                        }
    		                    }
    		                }
    		                catch (e_12_1) { e_12 = { error: e_12_1 }; }
    		                finally {
    		                    try {
    		                        if (containers_1_1 && !containers_1_1.done && (_b = containers_1.return)) _b.call(containers_1);
    		                    }
    		                    finally { if (e_12) throw e_12.error; }
    		                }
    		            }
    		        }
    		        catch (e_11_1) { e_11 = { error: e_11_1 }; }
    		        finally {
    		            try {
    		                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    		            }
    		            finally { if (e_11) throw e_11.error; }
    		        }
    		        return items;
    		    };
    		    AbstractMathDocument.KIND = 'MathDocument';
    		    AbstractMathDocument.OPTIONS = {
    		        OutputJax: null,
    		        InputJax: null,
    		        MmlFactory: null,
    		        MathList: DefaultMathList,
    		        MathItem: DefaultMathItem,
    		        compileError: function (doc, math, err) {
    		            doc.compileError(math, err);
    		        },
    		        typesetError: function (doc, math, err) {
    		            doc.typesetError(math, err);
    		        },
    		        renderActions: (0, Options_js_1.expandable)({
    		            find: [MathItem_js_1.STATE.FINDMATH, 'findMath', '', false],
    		            compile: [MathItem_js_1.STATE.COMPILED],
    		            metrics: [MathItem_js_1.STATE.METRICS, 'getMetrics', '', false],
    		            typeset: [MathItem_js_1.STATE.TYPESET],
    		            update: [MathItem_js_1.STATE.INSERTED, 'updateDocument', false]
    		        })
    		    };
    		    AbstractMathDocument.ProcessBits = (0, BitField_js_1.BitFieldClass)('findMath', 'compile', 'getMetrics', 'typeset', 'updateDocument');
    		    return AbstractMathDocument;
    		}());
    		exports.AbstractMathDocument = AbstractMathDocument;
    		
    	} (MathDocument));
    	return MathDocument;
    }

    var hasRequiredHandler;

    function requireHandler () {
    	if (hasRequiredHandler) return Handler;
    	hasRequiredHandler = 1;
    	var __extends = (Handler.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(Handler, "__esModule", { value: true });
    	Handler.AbstractHandler = undefined;
    	var MathDocument_js_1 = requireMathDocument();
    	var DefaultMathDocument = (function (_super) {
    	    __extends(DefaultMathDocument, _super);
    	    function DefaultMathDocument() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return DefaultMathDocument;
    	}(MathDocument_js_1.AbstractMathDocument));
    	var AbstractHandler = (function () {
    	    function AbstractHandler(adaptor, priority) {
    	        if (priority === undefined) { priority = 5; }
    	        this.documentClass = DefaultMathDocument;
    	        this.adaptor = adaptor;
    	        this.priority = priority;
    	    }
    	    Object.defineProperty(AbstractHandler.prototype, "name", {
    	        get: function () {
    	            return this.constructor.NAME;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    AbstractHandler.prototype.handlesDocument = function (_document) {
    	        return false;
    	    };
    	    AbstractHandler.prototype.create = function (document, options) {
    	        return new this.documentClass(document, this.adaptor, options);
    	    };
    	    AbstractHandler.NAME = 'generic';
    	    return AbstractHandler;
    	}());
    	Handler.AbstractHandler = AbstractHandler;
    	
    	return Handler;
    }

    var HTMLDocument = {};

    var HTMLMathItem = {};

    var hasRequiredHTMLMathItem;

    function requireHTMLMathItem () {
    	if (hasRequiredHTMLMathItem) return HTMLMathItem;
    	hasRequiredHTMLMathItem = 1;
    	var __extends = (HTMLMathItem.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(HTMLMathItem, "__esModule", { value: true });
    	HTMLMathItem.HTMLMathItem = undefined;
    	var MathItem_js_1 = requireMathItem();
    	var HTMLMathItem$1 = (function (_super) {
    	    __extends(HTMLMathItem, _super);
    	    function HTMLMathItem(math, jax, display, start, end) {
    	        if (display === undefined) { display = true; }
    	        if (start === undefined) { start = { node: null, n: 0, delim: '' }; }
    	        if (end === undefined) { end = { node: null, n: 0, delim: '' }; }
    	        return _super.call(this, math, jax, display, start, end) || this;
    	    }
    	    Object.defineProperty(HTMLMathItem.prototype, "adaptor", {
    	        get: function () {
    	            return this.inputJax.adaptor;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    HTMLMathItem.prototype.updateDocument = function (_html) {
    	        if (this.state() < MathItem_js_1.STATE.INSERTED) {
    	            if (this.inputJax.processStrings) {
    	                var node = this.start.node;
    	                if (node === this.end.node) {
    	                    if (this.end.n && this.end.n < this.adaptor.value(this.end.node).length) {
    	                        this.adaptor.split(this.end.node, this.end.n);
    	                    }
    	                    if (this.start.n) {
    	                        node = this.adaptor.split(this.start.node, this.start.n);
    	                    }
    	                    this.adaptor.replace(this.typesetRoot, node);
    	                }
    	                else {
    	                    if (this.start.n) {
    	                        node = this.adaptor.split(node, this.start.n);
    	                    }
    	                    while (node !== this.end.node) {
    	                        var next = this.adaptor.next(node);
    	                        this.adaptor.remove(node);
    	                        node = next;
    	                    }
    	                    this.adaptor.insert(this.typesetRoot, node);
    	                    if (this.end.n < this.adaptor.value(node).length) {
    	                        this.adaptor.split(node, this.end.n);
    	                    }
    	                    this.adaptor.remove(node);
    	                }
    	            }
    	            else {
    	                this.adaptor.replace(this.typesetRoot, this.start.node);
    	            }
    	            this.start.node = this.end.node = this.typesetRoot;
    	            this.start.n = this.end.n = 0;
    	            this.state(MathItem_js_1.STATE.INSERTED);
    	        }
    	    };
    	    HTMLMathItem.prototype.updateStyleSheet = function (document) {
    	        document.addStyleSheet();
    	    };
    	    HTMLMathItem.prototype.removeFromDocument = function (restore) {
    	        if (restore === undefined) { restore = false; }
    	        if (this.state() >= MathItem_js_1.STATE.TYPESET) {
    	            var adaptor = this.adaptor;
    	            var node = this.start.node;
    	            var math = adaptor.text('');
    	            if (restore) {
    	                var text = this.start.delim + this.math + this.end.delim;
    	                if (this.inputJax.processStrings) {
    	                    math = adaptor.text(text);
    	                }
    	                else {
    	                    var doc = adaptor.parse(text, 'text/html');
    	                    math = adaptor.firstChild(adaptor.body(doc));
    	                }
    	            }
    	            if (adaptor.parent(node)) {
    	                adaptor.replace(math, node);
    	            }
    	            this.start.node = this.end.node = math;
    	            this.start.n = this.end.n = 0;
    	        }
    	    };
    	    return HTMLMathItem;
    	}(MathItem_js_1.AbstractMathItem));
    	HTMLMathItem.HTMLMathItem = HTMLMathItem$1;
    	
    	return HTMLMathItem;
    }

    var HTMLMathList = {};

    var hasRequiredHTMLMathList;

    function requireHTMLMathList () {
    	if (hasRequiredHTMLMathList) return HTMLMathList;
    	hasRequiredHTMLMathList = 1;
    	var __extends = (HTMLMathList.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(HTMLMathList, "__esModule", { value: true });
    	HTMLMathList.HTMLMathList = undefined;
    	var MathList_js_1 = requireMathList();
    	var HTMLMathList$1 = (function (_super) {
    	    __extends(HTMLMathList, _super);
    	    function HTMLMathList() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return HTMLMathList;
    	}(MathList_js_1.AbstractMathList));
    	HTMLMathList.HTMLMathList = HTMLMathList$1;
    	
    	return HTMLMathList;
    }

    var HTMLDomStrings = {};

    var hasRequiredHTMLDomStrings;

    function requireHTMLDomStrings () {
    	if (hasRequiredHTMLDomStrings) return HTMLDomStrings;
    	hasRequiredHTMLDomStrings = 1;
    	var __read = (HTMLDomStrings.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	Object.defineProperty(HTMLDomStrings, "__esModule", { value: true });
    	HTMLDomStrings.HTMLDomStrings = undefined;
    	var Options_js_1 = requireOptions();
    	var HTMLDomStrings$1 = (function () {
    	    function HTMLDomStrings(options) {
    	        if (options === undefined) { options = null; }
    	        var CLASS = this.constructor;
    	        this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), options);
    	        this.init();
    	        this.getPatterns();
    	    }
    	    HTMLDomStrings.prototype.init = function () {
    	        this.strings = [];
    	        this.string = '';
    	        this.snodes = [];
    	        this.nodes = [];
    	        this.stack = [];
    	    };
    	    HTMLDomStrings.prototype.getPatterns = function () {
    	        var skip = (0, Options_js_1.makeArray)(this.options['skipHtmlTags']);
    	        var ignore = (0, Options_js_1.makeArray)(this.options['ignoreHtmlClass']);
    	        var process = (0, Options_js_1.makeArray)(this.options['processHtmlClass']);
    	        this.skipHtmlTags = new RegExp('^(?:' + skip.join('|') + ')$', 'i');
    	        this.ignoreHtmlClass = new RegExp('(?:^| )(?:' + ignore.join('|') + ')(?: |$)');
    	        this.processHtmlClass = new RegExp('(?:^| )(?:' + process + ')(?: |$)');
    	    };
    	    HTMLDomStrings.prototype.pushString = function () {
    	        if (this.string.match(/\S/)) {
    	            this.strings.push(this.string);
    	            this.nodes.push(this.snodes);
    	        }
    	        this.string = '';
    	        this.snodes = [];
    	    };
    	    HTMLDomStrings.prototype.extendString = function (node, text) {
    	        this.snodes.push([node, text.length]);
    	        this.string += text;
    	    };
    	    HTMLDomStrings.prototype.handleText = function (node, ignore) {
    	        if (!ignore) {
    	            this.extendString(node, this.adaptor.value(node));
    	        }
    	        return this.adaptor.next(node);
    	    };
    	    HTMLDomStrings.prototype.handleTag = function (node, ignore) {
    	        if (!ignore) {
    	            var text = this.options['includeHtmlTags'][this.adaptor.kind(node)];
    	            this.extendString(node, text);
    	        }
    	        return this.adaptor.next(node);
    	    };
    	    HTMLDomStrings.prototype.handleContainer = function (node, ignore) {
    	        this.pushString();
    	        var cname = this.adaptor.getAttribute(node, 'class') || '';
    	        var tname = this.adaptor.kind(node) || '';
    	        var process = this.processHtmlClass.exec(cname);
    	        var next = node;
    	        if (this.adaptor.firstChild(node) && !this.adaptor.getAttribute(node, 'data-MJX') &&
    	            (process || !this.skipHtmlTags.exec(tname))) {
    	            if (this.adaptor.next(node)) {
    	                this.stack.push([this.adaptor.next(node), ignore]);
    	            }
    	            next = this.adaptor.firstChild(node);
    	            ignore = (ignore || this.ignoreHtmlClass.exec(cname)) && !process;
    	        }
    	        else {
    	            next = this.adaptor.next(node);
    	        }
    	        return [next, ignore];
    	    };
    	    HTMLDomStrings.prototype.handleOther = function (node, _ignore) {
    	        this.pushString();
    	        return this.adaptor.next(node);
    	    };
    	    HTMLDomStrings.prototype.find = function (node) {
    	        var _a, _b;
    	        this.init();
    	        var stop = this.adaptor.next(node);
    	        var ignore = false;
    	        var include = this.options['includeHtmlTags'];
    	        while (node && node !== stop) {
    	            var kind = this.adaptor.kind(node);
    	            if (kind === '#text') {
    	                node = this.handleText(node, ignore);
    	            }
    	            else if (include.hasOwnProperty(kind)) {
    	                node = this.handleTag(node, ignore);
    	            }
    	            else if (kind) {
    	                _a = __read(this.handleContainer(node, ignore), 2), node = _a[0], ignore = _a[1];
    	            }
    	            else {
    	                node = this.handleOther(node, ignore);
    	            }
    	            if (!node && this.stack.length) {
    	                this.pushString();
    	                _b = __read(this.stack.pop(), 2), node = _b[0], ignore = _b[1];
    	            }
    	        }
    	        this.pushString();
    	        var result = [this.strings, this.nodes];
    	        this.init();
    	        return result;
    	    };
    	    HTMLDomStrings.OPTIONS = {
    	        skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code', 'annotation', 'annotation-xml'],
    	        includeHtmlTags: { br: '\n', wbr: '', '#comment': '' },
    	        ignoreHtmlClass: 'mathjax_ignore',
    	        processHtmlClass: 'mathjax_process'
    	    };
    	    return HTMLDomStrings;
    	}());
    	HTMLDomStrings.HTMLDomStrings = HTMLDomStrings$1;
    	
    	return HTMLDomStrings;
    }

    var hasRequiredHTMLDocument;

    function requireHTMLDocument () {
    	if (hasRequiredHTMLDocument) return HTMLDocument;
    	hasRequiredHTMLDocument = 1;
    	var __extends = (HTMLDocument.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (HTMLDocument.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __read = (HTMLDocument.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __values = (HTMLDocument.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(HTMLDocument, "__esModule", { value: true });
    	HTMLDocument.HTMLDocument = undefined;
    	var MathDocument_js_1 = requireMathDocument();
    	var Options_js_1 = requireOptions();
    	var HTMLMathItem_js_1 = requireHTMLMathItem();
    	var HTMLMathList_js_1 = requireHTMLMathList();
    	var HTMLDomStrings_js_1 = requireHTMLDomStrings();
    	var MathItem_js_1 = requireMathItem();
    	var HTMLDocument$1 = (function (_super) {
    	    __extends(HTMLDocument, _super);
    	    function HTMLDocument(document, adaptor, options) {
    	        var _this = this;
    	        var _a = __read((0, Options_js_1.separateOptions)(options, HTMLDomStrings_js_1.HTMLDomStrings.OPTIONS), 2), html = _a[0], dom = _a[1];
    	        _this = _super.call(this, document, adaptor, html) || this;
    	        _this.domStrings = _this.options['DomStrings'] || new HTMLDomStrings_js_1.HTMLDomStrings(dom);
    	        _this.domStrings.adaptor = adaptor;
    	        _this.styles = [];
    	        return _this;
    	    }
    	    HTMLDocument.prototype.findPosition = function (N, index, delim, nodes) {
    	        var e_1, _a;
    	        var adaptor = this.adaptor;
    	        try {
    	            for (var _b = __values(nodes[N]), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var list = _c.value;
    	                var _d = __read(list, 2), node = _d[0], n = _d[1];
    	                if (index <= n && adaptor.kind(node) === '#text') {
    	                    return { node: node, n: Math.max(index, 0), delim: delim };
    	                }
    	                index -= n;
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        return { node: null, n: 0, delim: delim };
    	    };
    	    HTMLDocument.prototype.mathItem = function (item, jax, nodes) {
    	        var math = item.math;
    	        var start = this.findPosition(item.n, item.start.n, item.open, nodes);
    	        var end = this.findPosition(item.n, item.end.n, item.close, nodes);
    	        return new this.options.MathItem(math, jax, item.display, start, end);
    	    };
    	    HTMLDocument.prototype.findMath = function (options) {
    	        var e_2, _a, e_3, _b, _c, e_4, _d, e_5, _e;
    	        if (!this.processed.isSet('findMath')) {
    	            this.adaptor.document = this.document;
    	            options = (0, Options_js_1.userOptions)({ elements: this.options.elements || [this.adaptor.body(this.document)] }, options);
    	            try {
    	                for (var _f = __values(this.adaptor.getElements(options['elements'], this.document)), _g = _f.next(); !_g.done; _g = _f.next()) {
    	                    var container = _g.value;
    	                    var _h = __read([null, null], 2), strings = _h[0], nodes = _h[1];
    	                    try {
    	                        for (var _j = (e_3 = void 0, __values(this.inputJax)), _k = _j.next(); !_k.done; _k = _j.next()) {
    	                            var jax = _k.value;
    	                            var list = new (this.options['MathList'])();
    	                            if (jax.processStrings) {
    	                                if (strings === null) {
    	                                    _c = __read(this.domStrings.find(container), 2), strings = _c[0], nodes = _c[1];
    	                                }
    	                                try {
    	                                    for (var _l = (e_4 = void 0, __values(jax.findMath(strings))), _m = _l.next(); !_m.done; _m = _l.next()) {
    	                                        var math = _m.value;
    	                                        list.push(this.mathItem(math, jax, nodes));
    	                                    }
    	                                }
    	                                catch (e_4_1) { e_4 = { error: e_4_1 }; }
    	                                finally {
    	                                    try {
    	                                        if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
    	                                    }
    	                                    finally { if (e_4) throw e_4.error; }
    	                                }
    	                            }
    	                            else {
    	                                try {
    	                                    for (var _o = (e_5 = void 0, __values(jax.findMath(container))), _p = _o.next(); !_p.done; _p = _o.next()) {
    	                                        var math = _p.value;
    	                                        var item = new this.options.MathItem(math.math, jax, math.display, math.start, math.end);
    	                                        list.push(item);
    	                                    }
    	                                }
    	                                catch (e_5_1) { e_5 = { error: e_5_1 }; }
    	                                finally {
    	                                    try {
    	                                        if (_p && !_p.done && (_e = _o.return)) _e.call(_o);
    	                                    }
    	                                    finally { if (e_5) throw e_5.error; }
    	                                }
    	                            }
    	                            this.math.merge(list);
    	                        }
    	                    }
    	                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    	                    finally {
    	                        try {
    	                            if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
    	                        }
    	                        finally { if (e_3) throw e_3.error; }
    	                    }
    	                }
    	            }
    	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	            finally {
    	                try {
    	                    if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
    	                }
    	                finally { if (e_2) throw e_2.error; }
    	            }
    	            this.processed.set('findMath');
    	        }
    	        return this;
    	    };
    	    HTMLDocument.prototype.updateDocument = function () {
    	        if (!this.processed.isSet('updateDocument')) {
    	            this.addPageElements();
    	            this.addStyleSheet();
    	            _super.prototype.updateDocument.call(this);
    	            this.processed.set('updateDocument');
    	        }
    	        return this;
    	    };
    	    HTMLDocument.prototype.addPageElements = function () {
    	        var body = this.adaptor.body(this.document);
    	        var node = this.documentPageElements();
    	        if (node) {
    	            this.adaptor.append(body, node);
    	        }
    	    };
    	    HTMLDocument.prototype.addStyleSheet = function () {
    	        var sheet = this.documentStyleSheet();
    	        var adaptor = this.adaptor;
    	        if (sheet && !adaptor.parent(sheet)) {
    	            var head = adaptor.head(this.document);
    	            var styles = this.findSheet(head, adaptor.getAttribute(sheet, 'id'));
    	            if (styles) {
    	                adaptor.replace(sheet, styles);
    	            }
    	            else {
    	                adaptor.append(head, sheet);
    	            }
    	        }
    	    };
    	    HTMLDocument.prototype.findSheet = function (head, id) {
    	        var e_6, _a;
    	        if (id) {
    	            try {
    	                for (var _b = __values(this.adaptor.tags(head, 'style')), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var sheet = _c.value;
    	                    if (this.adaptor.getAttribute(sheet, 'id') === id) {
    	                        return sheet;
    	                    }
    	                }
    	            }
    	            catch (e_6_1) { e_6 = { error: e_6_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_6) throw e_6.error; }
    	            }
    	        }
    	        return null;
    	    };
    	    HTMLDocument.prototype.removeFromDocument = function (restore) {
    	        var e_7, _a;
    	        if (restore === undefined) { restore = false; }
    	        if (this.processed.isSet('updateDocument')) {
    	            try {
    	                for (var _b = __values(this.math), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var math = _c.value;
    	                    if (math.state() >= MathItem_js_1.STATE.INSERTED) {
    	                        math.state(MathItem_js_1.STATE.TYPESET, restore);
    	                    }
    	                }
    	            }
    	            catch (e_7_1) { e_7 = { error: e_7_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_7) throw e_7.error; }
    	            }
    	        }
    	        this.processed.clear('updateDocument');
    	        return this;
    	    };
    	    HTMLDocument.prototype.documentStyleSheet = function () {
    	        return this.outputJax.styleSheet(this);
    	    };
    	    HTMLDocument.prototype.documentPageElements = function () {
    	        return this.outputJax.pageElements(this);
    	    };
    	    HTMLDocument.prototype.addStyles = function (styles) {
    	        this.styles.push(styles);
    	    };
    	    HTMLDocument.prototype.getStyles = function () {
    	        return this.styles;
    	    };
    	    HTMLDocument.KIND = 'HTML';
    	    HTMLDocument.OPTIONS = __assign(__assign({}, MathDocument_js_1.AbstractMathDocument.OPTIONS), { renderActions: (0, Options_js_1.expandable)(__assign(__assign({}, MathDocument_js_1.AbstractMathDocument.OPTIONS.renderActions), { styles: [MathItem_js_1.STATE.INSERTED + 1, '', 'updateStyleSheet', false] })), MathList: HTMLMathList_js_1.HTMLMathList, MathItem: HTMLMathItem_js_1.HTMLMathItem, DomStrings: null });
    	    return HTMLDocument;
    	}(MathDocument_js_1.AbstractMathDocument));
    	HTMLDocument.HTMLDocument = HTMLDocument$1;
    	
    	return HTMLDocument;
    }

    var hasRequiredHTMLHandler;

    function requireHTMLHandler () {
    	if (hasRequiredHTMLHandler) return HTMLHandler;
    	hasRequiredHTMLHandler = 1;
    	var __extends = (HTMLHandler.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(HTMLHandler, "__esModule", { value: true });
    	HTMLHandler.HTMLHandler = undefined;
    	var Handler_js_1 = requireHandler();
    	var HTMLDocument_js_1 = requireHTMLDocument();
    	var HTMLHandler$1 = (function (_super) {
    	    __extends(HTMLHandler, _super);
    	    function HTMLHandler() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.documentClass = HTMLDocument_js_1.HTMLDocument;
    	        return _this;
    	    }
    	    HTMLHandler.prototype.handlesDocument = function (document) {
    	        var adaptor = this.adaptor;
    	        if (typeof (document) === 'string') {
    	            try {
    	                document = adaptor.parse(document, 'text/html');
    	            }
    	            catch (err) { }
    	        }
    	        if (document instanceof adaptor.window.Document ||
    	            document instanceof adaptor.window.HTMLElement ||
    	            document instanceof adaptor.window.DocumentFragment) {
    	            return true;
    	        }
    	        return false;
    	    };
    	    HTMLHandler.prototype.create = function (document, options) {
    	        var adaptor = this.adaptor;
    	        if (typeof (document) === 'string') {
    	            document = adaptor.parse(document, 'text/html');
    	        }
    	        else if (document instanceof adaptor.window.HTMLElement ||
    	            document instanceof adaptor.window.DocumentFragment) {
    	            var child = document;
    	            document = adaptor.parse('', 'text/html');
    	            adaptor.append(adaptor.body(document), child);
    	        }
    	        return _super.prototype.create.call(this, document, options);
    	    };
    	    return HTMLHandler;
    	}(Handler_js_1.AbstractHandler));
    	HTMLHandler.HTMLHandler = HTMLHandler$1;
    	
    	return HTMLHandler;
    }

    var hasRequiredHtml;

    function requireHtml () {
    	if (hasRequiredHtml) return html;
    	hasRequiredHtml = 1;
    	Object.defineProperty(html, "__esModule", { value: true });
    	html.RegisterHTMLHandler = undefined;
    	var mathjax_js_1 = requireMathjax();
    	var HTMLHandler_js_1 = requireHTMLHandler();
    	function RegisterHTMLHandler(adaptor) {
    	    var handler = new HTMLHandler_js_1.HTMLHandler(adaptor);
    	    mathjax_js_1.mathjax.handlers.register(handler);
    	    return handler;
    	}
    	html.RegisterHTMLHandler = RegisterHTMLHandler;
    	
    	return html;
    }

    requireHtml();

    var AllPackages = {};

    var ActionConfiguration = {};

    var hasRequiredActionConfiguration;

    function requireActionConfiguration () {
    	if (hasRequiredActionConfiguration) return ActionConfiguration;
    	hasRequiredActionConfiguration = 1;
    	(function (exports) {
    		var __importDefault = (ActionConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.ActionConfiguration = exports.ActionMethods = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var TexParser_js_1 = __importDefault(requireTexParser());
    		var SymbolMap_js_1 = requireSymbolMap();
    		var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    		exports.ActionMethods = {};
    		exports.ActionMethods.Macro = BaseMethods_js_1.default.Macro;
    		exports.ActionMethods.Toggle = function (parser, name) {
    		    var children = [];
    		    var arg;
    		    while ((arg = parser.GetArgument(name)) !== '\\endtoggle') {
    		        children.push(new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml());
    		    }
    		    parser.Push(parser.create('node', 'maction', children, { actiontype: 'toggle' }));
    		};
    		exports.ActionMethods.Mathtip = function (parser, name) {
    		    var arg = parser.ParseArg(name);
    		    var tip = parser.ParseArg(name);
    		    parser.Push(parser.create('node', 'maction', [arg, tip], { actiontype: 'tooltip' }));
    		};
    		new SymbolMap_js_1.CommandMap('action-macros', {
    		    toggle: 'Toggle',
    		    mathtip: 'Mathtip',
    		    texttip: ['Macro', '\\mathtip{#1}{\\text{#2}}', 2]
    		}, exports.ActionMethods);
    		exports.ActionConfiguration = Configuration_js_1.Configuration.create('action', { handler: { macro: ['action-macros'] } });
    		
    	} (ActionConfiguration));
    	return ActionConfiguration;
    }

    var AmsConfiguration = {};

    var AmsItems = {};

    var hasRequiredAmsItems;

    function requireAmsItems () {
    	if (hasRequiredAmsItems) return AmsItems;
    	hasRequiredAmsItems = 1;
    	var __extends = (AmsItems.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __assign = (AmsItems.__assign) || function () {
    	    __assign = Object.assign || function(t) {
    	        for (var s, i = 1, n = arguments.length; i < n; i++) {
    	            s = arguments[i];
    	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    	                t[p] = s[p];
    	        }
    	        return t;
    	    };
    	    return __assign.apply(this, arguments);
    	};
    	var __importDefault = (AmsItems.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(AmsItems, "__esModule", { value: true });
    	AmsItems.FlalignItem = AmsItems.MultlineItem = undefined;
    	var BaseItems_js_1 = requireBaseItems();
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var TexConstants_js_1 = requireTexConstants();
    	var MultlineItem = (function (_super) {
    	    __extends(MultlineItem, _super);
    	    function MultlineItem(factory) {
    	        var args = [];
    	        for (var _i = 1; _i < arguments.length; _i++) {
    	            args[_i - 1] = arguments[_i];
    	        }
    	        var _this = _super.call(this, factory) || this;
    	        _this.factory.configuration.tags.start('multline', true, args[0]);
    	        return _this;
    	    }
    	    Object.defineProperty(MultlineItem.prototype, "kind", {
    	        get: function () {
    	            return 'multline';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MultlineItem.prototype.EndEntry = function () {
    	        if (this.table.length) {
    	            ParseUtil_js_1.default.fixInitialMO(this.factory.configuration, this.nodes);
    	        }
    	        var shove = this.getProperty('shove');
    	        var mtd = this.create('node', 'mtd', this.nodes, shove ? { columnalign: shove } : {});
    	        this.setProperty('shove', null);
    	        this.row.push(mtd);
    	        this.Clear();
    	    };
    	    MultlineItem.prototype.EndRow = function () {
    	        if (this.row.length !== 1) {
    	            throw new TexError_js_1.default('MultlineRowsOneCol', 'The rows within the %1 environment must have exactly one column', 'multline');
    	        }
    	        var row = this.create('node', 'mtr', this.row);
    	        this.table.push(row);
    	        this.row = [];
    	    };
    	    MultlineItem.prototype.EndTable = function () {
    	        _super.prototype.EndTable.call(this);
    	        if (this.table.length) {
    	            var m = this.table.length - 1, label = -1;
    	            if (!NodeUtil_js_1.default.getAttribute(NodeUtil_js_1.default.getChildren(this.table[0])[0], 'columnalign')) {
    	                NodeUtil_js_1.default.setAttribute(NodeUtil_js_1.default.getChildren(this.table[0])[0], 'columnalign', TexConstants_js_1.TexConstant.Align.LEFT);
    	            }
    	            if (!NodeUtil_js_1.default.getAttribute(NodeUtil_js_1.default.getChildren(this.table[m])[0], 'columnalign')) {
    	                NodeUtil_js_1.default.setAttribute(NodeUtil_js_1.default.getChildren(this.table[m])[0], 'columnalign', TexConstants_js_1.TexConstant.Align.RIGHT);
    	            }
    	            var tag = this.factory.configuration.tags.getTag();
    	            if (tag) {
    	                label = (this.arraydef.side === TexConstants_js_1.TexConstant.Align.LEFT ? 0 : this.table.length - 1);
    	                var mtr = this.table[label];
    	                var mlabel = this.create('node', 'mlabeledtr', [tag].concat(NodeUtil_js_1.default.getChildren(mtr)));
    	                NodeUtil_js_1.default.copyAttributes(mtr, mlabel);
    	                this.table[label] = mlabel;
    	            }
    	        }
    	        this.factory.configuration.tags.end();
    	    };
    	    return MultlineItem;
    	}(BaseItems_js_1.ArrayItem));
    	AmsItems.MultlineItem = MultlineItem;
    	var FlalignItem = (function (_super) {
    	    __extends(FlalignItem, _super);
    	    function FlalignItem(factory, name, numbered, padded, center) {
    	        var _this = _super.call(this, factory) || this;
    	        _this.name = name;
    	        _this.numbered = numbered;
    	        _this.padded = padded;
    	        _this.center = center;
    	        _this.factory.configuration.tags.start(name, numbered, numbered);
    	        return _this;
    	    }
    	    Object.defineProperty(FlalignItem.prototype, "kind", {
    	        get: function () {
    	            return 'flalign';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    FlalignItem.prototype.EndEntry = function () {
    	        _super.prototype.EndEntry.call(this);
    	        var n = this.getProperty('xalignat');
    	        if (!n)
    	            return;
    	        if (this.row.length > n) {
    	            throw new TexError_js_1.default('XalignOverflow', 'Extra %1 in row of %2', '&', this.name);
    	        }
    	    };
    	    FlalignItem.prototype.EndRow = function () {
    	        var cell;
    	        var row = this.row;
    	        var n = this.getProperty('xalignat');
    	        while (row.length < n) {
    	            row.push(this.create('node', 'mtd'));
    	        }
    	        this.row = [];
    	        if (this.padded) {
    	            this.row.push(this.create('node', 'mtd'));
    	        }
    	        while ((cell = row.shift())) {
    	            this.row.push(cell);
    	            cell = row.shift();
    	            if (cell)
    	                this.row.push(cell);
    	            if (row.length || this.padded) {
    	                this.row.push(this.create('node', 'mtd'));
    	            }
    	        }
    	        if (this.row.length > this.maxrow) {
    	            this.maxrow = this.row.length;
    	        }
    	        _super.prototype.EndRow.call(this);
    	        var mtr = this.table[this.table.length - 1];
    	        if (this.getProperty('zeroWidthLabel') && mtr.isKind('mlabeledtr')) {
    	            var mtd = NodeUtil_js_1.default.getChildren(mtr)[0];
    	            var side = this.factory.configuration.options['tagSide'];
    	            var def = __assign({ width: 0 }, (side === 'right' ? { lspace: '-1width' } : {}));
    	            var mpadded = this.create('node', 'mpadded', NodeUtil_js_1.default.getChildren(mtd), def);
    	            mtd.setChildren([mpadded]);
    	        }
    	    };
    	    FlalignItem.prototype.EndTable = function () {
    	        _super.prototype.EndTable.call(this);
    	        if (this.center) {
    	            if (this.maxrow <= 2) {
    	                var def = this.arraydef;
    	                delete def.width;
    	                delete this.global.indentalign;
    	            }
    	        }
    	    };
    	    return FlalignItem;
    	}(BaseItems_js_1.EqnArrayItem));
    	AmsItems.FlalignItem = FlalignItem;
    	
    	return AmsItems;
    }

    var AmsMethods = {};

    var hasRequiredAmsMethods;

    function requireAmsMethods () {
    	if (hasRequiredAmsMethods) return AmsMethods;
    	hasRequiredAmsMethods = 1;
    	(function (exports) {
    		var __assign = (AmsMethods.__assign) || function () {
    		    __assign = Object.assign || function(t) {
    		        for (var s, i = 1, n = arguments.length; i < n; i++) {
    		            s = arguments[i];
    		            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    		                t[p] = s[p];
    		        }
    		        return t;
    		    };
    		    return __assign.apply(this, arguments);
    		};
    		var __read = (AmsMethods.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __importDefault = (AmsMethods.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.NEW_OPS = exports.AmsMethods = undefined;
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var ParseMethods_js_1 = __importDefault(requireParseMethods());
    		var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    		var TexConstants_js_1 = requireTexConstants();
    		var TexParser_js_1 = __importDefault(requireTexParser());
    		var TexError_js_1 = __importDefault(requireTexError());
    		var Symbol_js_1 = require_Symbol();
    		var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    		var MmlNode_js_1 = requireMmlNode();
    		exports.AmsMethods = {};
    		exports.AmsMethods.AmsEqnArray = function (parser, begin, numbered, taggable, align, spacing, style) {
    		    var args = parser.GetBrackets('\\begin{' + begin.getName() + '}');
    		    var array = BaseMethods_js_1.default.EqnArray(parser, begin, numbered, taggable, align, spacing, style);
    		    return ParseUtil_js_1.default.setArrayAlign(array, args);
    		};
    		exports.AmsMethods.AlignAt = function (parser, begin, numbered, taggable) {
    		    var name = begin.getName();
    		    var n, valign, align = '', spacing = [];
    		    if (!taggable) {
    		        valign = parser.GetBrackets('\\begin{' + name + '}');
    		    }
    		    n = parser.GetArgument('\\begin{' + name + '}');
    		    if (n.match(/[^0-9]/)) {
    		        throw new TexError_js_1.default('PositiveIntegerArg', 'Argument to %1 must me a positive integer', '\\begin{' + name + '}');
    		    }
    		    var count = parseInt(n, 10);
    		    while (count > 0) {
    		        align += 'rl';
    		        spacing.push('0em 0em');
    		        count--;
    		    }
    		    var spaceStr = spacing.join(' ');
    		    if (taggable) {
    		        return exports.AmsMethods.EqnArray(parser, begin, numbered, taggable, align, spaceStr);
    		    }
    		    var array = exports.AmsMethods.EqnArray(parser, begin, numbered, taggable, align, spaceStr);
    		    return ParseUtil_js_1.default.setArrayAlign(array, valign);
    		};
    		exports.AmsMethods.Multline = function (parser, begin, numbered) {
    		    parser.Push(begin);
    		    ParseUtil_js_1.default.checkEqnEnv(parser);
    		    var item = parser.itemFactory.create('multline', numbered, parser.stack);
    		    item.arraydef = {
    		        displaystyle: true,
    		        rowspacing: '.5em',
    		        columnspacing: '100%',
    		        width: parser.options.ams['multlineWidth'],
    		        side: parser.options['tagSide'],
    		        minlabelspacing: parser.options['tagIndent'],
    		        framespacing: parser.options.ams['multlineIndent'] + ' 0',
    		        frame: '',
    		        'data-width-includes-label': true
    		    };
    		    return item;
    		};
    		exports.AmsMethods.XalignAt = function (parser, begin, numbered, padded) {
    		    var n = parser.GetArgument('\\begin{' + begin.getName() + '}');
    		    if (n.match(/[^0-9]/)) {
    		        throw new TexError_js_1.default('PositiveIntegerArg', 'Argument to %1 must me a positive integer', '\\begin{' + begin.getName() + '}');
    		    }
    		    var align = (padded ? 'crl' : 'rlc');
    		    var width = (padded ? 'fit auto auto' : 'auto auto fit');
    		    var item = exports.AmsMethods.FlalignArray(parser, begin, numbered, padded, false, align, width, true);
    		    item.setProperty('xalignat', 2 * parseInt(n));
    		    return item;
    		};
    		exports.AmsMethods.FlalignArray = function (parser, begin, numbered, padded, center, align, width, zeroWidthLabel) {
    		    if (zeroWidthLabel === undefined) { zeroWidthLabel = false; }
    		    parser.Push(begin);
    		    ParseUtil_js_1.default.checkEqnEnv(parser);
    		    align = align
    		        .split('')
    		        .join(' ')
    		        .replace(/r/g, 'right')
    		        .replace(/l/g, 'left')
    		        .replace(/c/g, 'center');
    		    var item = parser.itemFactory.create('flalign', begin.getName(), numbered, padded, center, parser.stack);
    		    item.arraydef = {
    		        width: '100%',
    		        displaystyle: true,
    		        columnalign: align,
    		        columnspacing: '0em',
    		        columnwidth: width,
    		        rowspacing: '3pt',
    		        side: parser.options['tagSide'],
    		        minlabelspacing: (zeroWidthLabel ? '0' : parser.options['tagIndent']),
    		        'data-width-includes-label': true,
    		    };
    		    item.setProperty('zeroWidthLabel', zeroWidthLabel);
    		    return item;
    		};
    		exports.NEW_OPS = 'ams-declare-ops';
    		exports.AmsMethods.HandleDeclareOp = function (parser, name) {
    		    var star = (parser.GetStar() ? '*' : '');
    		    var cs = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(name));
    		    if (cs.charAt(0) === '\\') {
    		        cs = cs.substr(1);
    		    }
    		    var op = parser.GetArgument(name);
    		    parser.configuration.handlers.retrieve(exports.NEW_OPS).
    		        add(cs, new Symbol_js_1.Macro(cs, exports.AmsMethods.Macro, ["\\operatorname".concat(star, "{").concat(op, "}")]));
    		};
    		exports.AmsMethods.HandleOperatorName = function (parser, name) {
    		    var star = parser.GetStar();
    		    var op = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(name));
    		    var mml = new TexParser_js_1.default(op, __assign(__assign({}, parser.stack.env), { font: TexConstants_js_1.TexConstant.Variant.NORMAL, multiLetterIdentifiers: /^[-*a-z]+/i, operatorLetters: true }), parser.configuration).mml();
    		    if (!mml.isKind('mi')) {
    		        mml = parser.create('node', 'TeXAtom', [mml]);
    		    }
    		    NodeUtil_js_1.default.setProperties(mml, { movesupsub: star, movablelimits: true, texClass: MmlNode_js_1.TEXCLASS.OP });
    		    if (!star) {
    		        var c = parser.GetNext(), i = parser.i;
    		        if (c === '\\' && ++parser.i && parser.GetCS() !== 'limits') {
    		            parser.i = i;
    		        }
    		    }
    		    parser.Push(mml);
    		};
    		exports.AmsMethods.SideSet = function (parser, name) {
    		    var _a = __read(splitSideSet(parser.ParseArg(name)), 2), preScripts = _a[0], preRest = _a[1];
    		    var _b = __read(splitSideSet(parser.ParseArg(name)), 2), postScripts = _b[0], postRest = _b[1];
    		    var base = parser.ParseArg(name);
    		    var mml = base;
    		    if (preScripts) {
    		        if (preRest) {
    		            preScripts.replaceChild(parser.create('node', 'mphantom', [
    		                parser.create('node', 'mpadded', [ParseUtil_js_1.default.copyNode(base, parser)], { width: 0 })
    		            ]), NodeUtil_js_1.default.getChildAt(preScripts, 0));
    		        }
    		        else {
    		            mml = parser.create('node', 'mmultiscripts', [base]);
    		            if (postScripts) {
    		                NodeUtil_js_1.default.appendChildren(mml, [
    		                    NodeUtil_js_1.default.getChildAt(postScripts, 1) || parser.create('node', 'none'),
    		                    NodeUtil_js_1.default.getChildAt(postScripts, 2) || parser.create('node', 'none')
    		                ]);
    		            }
    		            NodeUtil_js_1.default.setProperty(mml, 'scriptalign', 'left');
    		            NodeUtil_js_1.default.appendChildren(mml, [
    		                parser.create('node', 'mprescripts'),
    		                NodeUtil_js_1.default.getChildAt(preScripts, 1) || parser.create('node', 'none'),
    		                NodeUtil_js_1.default.getChildAt(preScripts, 2) || parser.create('node', 'none')
    		            ]);
    		        }
    		    }
    		    if (postScripts && mml === base) {
    		        postScripts.replaceChild(base, NodeUtil_js_1.default.getChildAt(postScripts, 0));
    		        mml = postScripts;
    		    }
    		    var mrow = parser.create('node', 'TeXAtom', [], { texClass: MmlNode_js_1.TEXCLASS.OP, movesupsub: true, movablelimits: true });
    		    if (preRest) {
    		        preScripts && mrow.appendChild(preScripts);
    		        mrow.appendChild(preRest);
    		    }
    		    mrow.appendChild(mml);
    		    postRest && mrow.appendChild(postRest);
    		    parser.Push(mrow);
    		};
    		function splitSideSet(mml) {
    		    if (!mml || (mml.isInferred && mml.childNodes.length === 0))
    		        return [null, null];
    		    if (mml.isKind('msubsup') && checkSideSetBase(mml))
    		        return [mml, null];
    		    var child = NodeUtil_js_1.default.getChildAt(mml, 0);
    		    if (!(mml.isInferred && child && checkSideSetBase(child)))
    		        return [null, mml];
    		    mml.childNodes.splice(0, 1);
    		    return [child, mml];
    		}
    		function checkSideSetBase(mml) {
    		    var base = mml.childNodes[0];
    		    return base && base.isKind('mi') && base.getText() === '';
    		}
    		exports.AmsMethods.operatorLetter = function (parser, c) {
    		    return parser.stack.env.operatorLetters ? ParseMethods_js_1.default.variable(parser, c) : false;
    		};
    		exports.AmsMethods.MultiIntegral = function (parser, name, integral) {
    		    var next = parser.GetNext();
    		    if (next === '\\') {
    		        var i = parser.i;
    		        next = parser.GetArgument(name);
    		        parser.i = i;
    		        if (next === '\\limits') {
    		            if (name === '\\idotsint') {
    		                integral = '\\!\\!\\mathop{\\,\\,' + integral + '}';
    		            }
    		            else {
    		                integral = '\\!\\!\\!\\mathop{\\,\\,\\,' + integral + '}';
    		            }
    		        }
    		    }
    		    parser.string = integral + ' ' + parser.string.slice(parser.i);
    		    parser.i = 0;
    		};
    		exports.AmsMethods.xArrow = function (parser, name, chr, l, r) {
    		    var def = { width: '+' + ParseUtil_js_1.default.Em((l + r) / 18), lspace: ParseUtil_js_1.default.Em(l / 18) };
    		    var bot = parser.GetBrackets(name);
    		    var first = parser.ParseArg(name);
    		    var dstrut = parser.create('node', 'mspace', [], { depth: '.25em' });
    		    var arrow = parser.create('token', 'mo', { stretchy: true, texClass: MmlNode_js_1.TEXCLASS.REL }, String.fromCodePoint(chr));
    		    arrow = parser.create('node', 'mstyle', [arrow], { scriptlevel: 0 });
    		    var mml = parser.create('node', 'munderover', [arrow]);
    		    var mpadded = parser.create('node', 'mpadded', [first, dstrut], def);
    		    NodeUtil_js_1.default.setAttribute(mpadded, 'voffset', '-.2em');
    		    NodeUtil_js_1.default.setAttribute(mpadded, 'height', '-.2em');
    		    NodeUtil_js_1.default.setChild(mml, mml.over, mpadded);
    		    if (bot) {
    		        var bottom = new TexParser_js_1.default(bot, parser.stack.env, parser.configuration).mml();
    		        var bstrut = parser.create('node', 'mspace', [], { height: '.75em' });
    		        mpadded = parser.create('node', 'mpadded', [bottom, bstrut], def);
    		        NodeUtil_js_1.default.setAttribute(mpadded, 'voffset', '.15em');
    		        NodeUtil_js_1.default.setAttribute(mpadded, 'depth', '-.15em');
    		        NodeUtil_js_1.default.setChild(mml, mml.under, mpadded);
    		    }
    		    NodeUtil_js_1.default.setProperty(mml, 'subsupOK', true);
    		    parser.Push(mml);
    		};
    		exports.AmsMethods.HandleShove = function (parser, _name, shove) {
    		    var top = parser.stack.Top();
    		    if (top.kind !== 'multline') {
    		        throw new TexError_js_1.default('CommandOnlyAllowedInEnv', '%1 only allowed in %2 environment', parser.currentCS, 'multline');
    		    }
    		    if (top.Size()) {
    		        throw new TexError_js_1.default('CommandAtTheBeginingOfLine', '%1 must come at the beginning of the line', parser.currentCS);
    		    }
    		    top.setProperty('shove', shove);
    		};
    		exports.AmsMethods.CFrac = function (parser, name) {
    		    var lr = ParseUtil_js_1.default.trimSpaces(parser.GetBrackets(name, ''));
    		    var num = parser.GetArgument(name);
    		    var den = parser.GetArgument(name);
    		    var lrMap = {
    		        l: TexConstants_js_1.TexConstant.Align.LEFT, r: TexConstants_js_1.TexConstant.Align.RIGHT, '': ''
    		    };
    		    var numNode = new TexParser_js_1.default('\\strut\\textstyle{' + num + '}', parser.stack.env, parser.configuration).mml();
    		    var denNode = new TexParser_js_1.default('\\strut\\textstyle{' + den + '}', parser.stack.env, parser.configuration).mml();
    		    var frac = parser.create('node', 'mfrac', [numNode, denNode]);
    		    lr = lrMap[lr];
    		    if (lr == null) {
    		        throw new TexError_js_1.default('IllegalAlign', 'Illegal alignment specified in %1', parser.currentCS);
    		    }
    		    if (lr) {
    		        NodeUtil_js_1.default.setProperties(frac, { numalign: lr, denomalign: lr });
    		    }
    		    parser.Push(frac);
    		};
    		exports.AmsMethods.Genfrac = function (parser, name, left, right, thick, style) {
    		    if (left == null) {
    		        left = parser.GetDelimiterArg(name);
    		    }
    		    if (right == null) {
    		        right = parser.GetDelimiterArg(name);
    		    }
    		    if (thick == null) {
    		        thick = parser.GetArgument(name);
    		    }
    		    if (style == null) {
    		        style = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(name));
    		    }
    		    var num = parser.ParseArg(name);
    		    var den = parser.ParseArg(name);
    		    var frac = parser.create('node', 'mfrac', [num, den]);
    		    if (thick !== '') {
    		        NodeUtil_js_1.default.setAttribute(frac, 'linethickness', thick);
    		    }
    		    if (left || right) {
    		        NodeUtil_js_1.default.setProperty(frac, 'withDelims', true);
    		        frac = ParseUtil_js_1.default.fixedFence(parser.configuration, left, frac, right);
    		    }
    		    if (style !== '') {
    		        var styleDigit = parseInt(style, 10);
    		        var styleAlpha = ['D', 'T', 'S', 'SS'][styleDigit];
    		        if (styleAlpha == null) {
    		            throw new TexError_js_1.default('BadMathStyleFor', 'Bad math style for %1', parser.currentCS);
    		        }
    		        frac = parser.create('node', 'mstyle', [frac]);
    		        if (styleAlpha === 'D') {
    		            NodeUtil_js_1.default.setProperties(frac, { displaystyle: true, scriptlevel: 0 });
    		        }
    		        else {
    		            NodeUtil_js_1.default.setProperties(frac, { displaystyle: false,
    		                scriptlevel: styleDigit - 1 });
    		        }
    		    }
    		    parser.Push(frac);
    		};
    		exports.AmsMethods.HandleTag = function (parser, name) {
    		    if (!parser.tags.currentTag.taggable && parser.tags.env) {
    		        throw new TexError_js_1.default('CommandNotAllowedInEnv', '%1 not allowed in %2 environment', parser.currentCS, parser.tags.env);
    		    }
    		    if (parser.tags.currentTag.tag) {
    		        throw new TexError_js_1.default('MultipleCommand', 'Multiple %1', parser.currentCS);
    		    }
    		    var star = parser.GetStar();
    		    var tagId = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(name));
    		    parser.tags.tag(tagId, star);
    		};
    		exports.AmsMethods.HandleNoTag = BaseMethods_js_1.default.HandleNoTag;
    		exports.AmsMethods.HandleRef = BaseMethods_js_1.default.HandleRef;
    		exports.AmsMethods.Macro = BaseMethods_js_1.default.Macro;
    		exports.AmsMethods.Accent = BaseMethods_js_1.default.Accent;
    		exports.AmsMethods.Tilde = BaseMethods_js_1.default.Tilde;
    		exports.AmsMethods.Array = BaseMethods_js_1.default.Array;
    		exports.AmsMethods.Spacer = BaseMethods_js_1.default.Spacer;
    		exports.AmsMethods.NamedOp = BaseMethods_js_1.default.NamedOp;
    		exports.AmsMethods.EqnArray = BaseMethods_js_1.default.EqnArray;
    		exports.AmsMethods.Equation = BaseMethods_js_1.default.Equation;
    		
    	} (AmsMethods));
    	return AmsMethods;
    }

    var AmsMappings = {};

    var hasRequiredAmsMappings;

    function requireAmsMappings () {
    	if (hasRequiredAmsMappings) return AmsMappings;
    	hasRequiredAmsMappings = 1;
    	var __createBinding = (AmsMappings.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (AmsMappings.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (AmsMappings.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __importDefault = (AmsMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(AmsMappings, "__esModule", { value: true });
    	var AmsMethods_js_1 = requireAmsMethods();
    	var sm = __importStar(requireSymbolMap());
    	var TexConstants_js_1 = requireTexConstants();
    	var ParseMethods_js_1 = __importDefault(requireParseMethods());
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var MmlNode_js_1 = requireMmlNode();
    	var lengths_js_1 = requireLengths();
    	new sm.CharacterMap('AMSmath-mathchar0mo', ParseMethods_js_1.default.mathchar0mo, {
    	    iiiint: ['\u2A0C', { texClass: MmlNode_js_1.TEXCLASS.OP }]
    	});
    	new sm.RegExpMap('AMSmath-operatorLetter', AmsMethods_js_1.AmsMethods.operatorLetter, /[-*]/i);
    	new sm.CommandMap('AMSmath-macros', {
    	    mathring: ['Accent', '02DA'],
    	    nobreakspace: 'Tilde',
    	    negmedspace: ['Spacer', lengths_js_1.MATHSPACE.negativemediummathspace],
    	    negthickspace: ['Spacer', lengths_js_1.MATHSPACE.negativethickmathspace],
    	    idotsint: ['MultiIntegral', '\\int\\cdots\\int'],
    	    dddot: ['Accent', '20DB'],
    	    ddddot: ['Accent', '20DC'],
    	    sideset: 'SideSet',
    	    boxed: ['Macro', '\\fbox{$\\displaystyle{#1}$}', 1],
    	    tag: 'HandleTag',
    	    notag: 'HandleNoTag',
    	    eqref: ['HandleRef', true],
    	    substack: ['Macro', '\\begin{subarray}{c}#1\\end{subarray}', 1],
    	    injlim: ['NamedOp', 'inj&thinsp;lim'],
    	    projlim: ['NamedOp', 'proj&thinsp;lim'],
    	    varliminf: ['Macro', '\\mathop{\\underline{\\mmlToken{mi}{lim}}}'],
    	    varlimsup: ['Macro', '\\mathop{\\overline{\\mmlToken{mi}{lim}}}'],
    	    varinjlim: ['Macro', '\\mathop{\\underrightarrow{\\mmlToken{mi}{lim}}}'],
    	    varprojlim: ['Macro', '\\mathop{\\underleftarrow{\\mmlToken{mi}{lim}}}'],
    	    DeclareMathOperator: 'HandleDeclareOp',
    	    operatorname: 'HandleOperatorName',
    	    genfrac: 'Genfrac',
    	    frac: ['Genfrac', '', '', '', ''],
    	    tfrac: ['Genfrac', '', '', '', '1'],
    	    dfrac: ['Genfrac', '', '', '', '0'],
    	    binom: ['Genfrac', '(', ')', '0', ''],
    	    tbinom: ['Genfrac', '(', ')', '0', '1'],
    	    dbinom: ['Genfrac', '(', ')', '0', '0'],
    	    cfrac: 'CFrac',
    	    shoveleft: ['HandleShove', TexConstants_js_1.TexConstant.Align.LEFT],
    	    shoveright: ['HandleShove', TexConstants_js_1.TexConstant.Align.RIGHT],
    	    xrightarrow: ['xArrow', 0x2192, 5, 10],
    	    xleftarrow: ['xArrow', 0x2190, 10, 5]
    	}, AmsMethods_js_1.AmsMethods);
    	new sm.EnvironmentMap('AMSmath-environment', ParseMethods_js_1.default.environment, {
    	    'equation*': ['Equation', null, false],
    	    'eqnarray*': ['EqnArray', null, false, true, 'rcl',
    	        ParseUtil_js_1.default.cols(0, lengths_js_1.MATHSPACE.thickmathspace), '.5em'],
    	    align: ['EqnArray', null, true, true, 'rl', ParseUtil_js_1.default.cols(0, 2)],
    	    'align*': ['EqnArray', null, false, true, 'rl', ParseUtil_js_1.default.cols(0, 2)],
    	    multline: ['Multline', null, true],
    	    'multline*': ['Multline', null, false],
    	    split: ['EqnArray', null, false, false, 'rl', ParseUtil_js_1.default.cols(0)],
    	    gather: ['EqnArray', null, true, true, 'c'],
    	    'gather*': ['EqnArray', null, false, true, 'c'],
    	    alignat: ['AlignAt', null, true, true],
    	    'alignat*': ['AlignAt', null, false, true],
    	    alignedat: ['AlignAt', null, false, false],
    	    aligned: ['AmsEqnArray', null, null, null, 'rl', ParseUtil_js_1.default.cols(0, 2), '.5em', 'D'],
    	    gathered: ['AmsEqnArray', null, null, null, 'c', null, '.5em', 'D'],
    	    xalignat: ['XalignAt', null, true, true],
    	    'xalignat*': ['XalignAt', null, false, true],
    	    xxalignat: ['XalignAt', null, false, false],
    	    flalign: ['FlalignArray', null, true, false, true, 'rlc', 'auto auto fit'],
    	    'flalign*': ['FlalignArray', null, false, false, true, 'rlc', 'auto auto fit'],
    	    subarray: ['Array', null, null, null, null, ParseUtil_js_1.default.cols(0), '0.1em', 'S', 1],
    	    smallmatrix: ['Array', null, null, null, 'c', ParseUtil_js_1.default.cols(1 / 3),
    	        '.2em', 'S', 1],
    	    matrix: ['Array', null, null, null, 'c'],
    	    pmatrix: ['Array', null, '(', ')', 'c'],
    	    bmatrix: ['Array', null, '[', ']', 'c'],
    	    Bmatrix: ['Array', null, '\\{', '\\}', 'c'],
    	    vmatrix: ['Array', null, '\\vert', '\\vert', 'c'],
    	    Vmatrix: ['Array', null, '\\Vert', '\\Vert', 'c'],
    	    cases: ['Array', null, '\\{', '.', 'll', null, '.2em', 'T']
    	}, AmsMethods_js_1.AmsMethods);
    	new sm.DelimiterMap('AMSmath-delimiter', ParseMethods_js_1.default.delimiter, {
    	    '\\lvert': ['\u007C', { texClass: MmlNode_js_1.TEXCLASS.OPEN }],
    	    '\\rvert': ['\u007C', { texClass: MmlNode_js_1.TEXCLASS.CLOSE }],
    	    '\\lVert': ['\u2016', { texClass: MmlNode_js_1.TEXCLASS.OPEN }],
    	    '\\rVert': ['\u2016', { texClass: MmlNode_js_1.TEXCLASS.CLOSE }]
    	});
    	new sm.CharacterMap('AMSsymbols-mathchar0mi', ParseMethods_js_1.default.mathchar0mi, {
    	    digamma: '\u03DD',
    	    varkappa: '\u03F0',
    	    varGamma: ['\u0393', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varDelta: ['\u0394', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varTheta: ['\u0398', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varLambda: ['\u039B', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varXi: ['\u039E', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varPi: ['\u03A0', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varSigma: ['\u03A3', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varUpsilon: ['\u03A5', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varPhi: ['\u03A6', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varPsi: ['\u03A8', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    varOmega: ['\u03A9', { mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC }],
    	    beth: '\u2136',
    	    gimel: '\u2137',
    	    daleth: '\u2138',
    	    backprime: ['\u2035', { variantForm: true }],
    	    hslash: '\u210F',
    	    varnothing: ['\u2205', { variantForm: true }],
    	    blacktriangle: '\u25B4',
    	    triangledown: ['\u25BD', { variantForm: true }],
    	    blacktriangledown: '\u25BE',
    	    square: '\u25FB',
    	    Box: '\u25FB',
    	    blacksquare: '\u25FC',
    	    lozenge: '\u25CA',
    	    Diamond: '\u25CA',
    	    blacklozenge: '\u29EB',
    	    circledS: ['\u24C8', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    bigstar: '\u2605',
    	    sphericalangle: '\u2222',
    	    measuredangle: '\u2221',
    	    nexists: '\u2204',
    	    complement: '\u2201',
    	    mho: '\u2127',
    	    eth: ['\u00F0', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    Finv: '\u2132',
    	    diagup: '\u2571',
    	    Game: '\u2141',
    	    diagdown: '\u2572',
    	    Bbbk: ['\u006B',
    	        { mathvariant: TexConstants_js_1.TexConstant.Variant.DOUBLESTRUCK }],
    	    yen: '\u00A5',
    	    circledR: '\u00AE',
    	    checkmark: '\u2713',
    	    maltese: '\u2720'
    	});
    	new sm.CharacterMap('AMSsymbols-mathchar0mo', ParseMethods_js_1.default.mathchar0mo, {
    	    dotplus: '\u2214',
    	    ltimes: '\u22C9',
    	    smallsetminus: ['\u2216', { variantForm: true }],
    	    rtimes: '\u22CA',
    	    Cap: '\u22D2',
    	    doublecap: '\u22D2',
    	    leftthreetimes: '\u22CB',
    	    Cup: '\u22D3',
    	    doublecup: '\u22D3',
    	    rightthreetimes: '\u22CC',
    	    barwedge: '\u22BC',
    	    curlywedge: '\u22CF',
    	    veebar: '\u22BB',
    	    curlyvee: '\u22CE',
    	    doublebarwedge: '\u2A5E',
    	    boxminus: '\u229F',
    	    circleddash: '\u229D',
    	    boxtimes: '\u22A0',
    	    circledast: '\u229B',
    	    boxdot: '\u22A1',
    	    circledcirc: '\u229A',
    	    boxplus: '\u229E',
    	    centerdot: ['\u22C5', { variantForm: true }],
    	    divideontimes: '\u22C7',
    	    intercal: '\u22BA',
    	    leqq: '\u2266',
    	    geqq: '\u2267',
    	    leqslant: '\u2A7D',
    	    geqslant: '\u2A7E',
    	    eqslantless: '\u2A95',
    	    eqslantgtr: '\u2A96',
    	    lesssim: '\u2272',
    	    gtrsim: '\u2273',
    	    lessapprox: '\u2A85',
    	    gtrapprox: '\u2A86',
    	    approxeq: '\u224A',
    	    lessdot: '\u22D6',
    	    gtrdot: '\u22D7',
    	    lll: '\u22D8',
    	    llless: '\u22D8',
    	    ggg: '\u22D9',
    	    gggtr: '\u22D9',
    	    lessgtr: '\u2276',
    	    gtrless: '\u2277',
    	    lesseqgtr: '\u22DA',
    	    gtreqless: '\u22DB',
    	    lesseqqgtr: '\u2A8B',
    	    gtreqqless: '\u2A8C',
    	    doteqdot: '\u2251',
    	    Doteq: '\u2251',
    	    eqcirc: '\u2256',
    	    risingdotseq: '\u2253',
    	    circeq: '\u2257',
    	    fallingdotseq: '\u2252',
    	    triangleq: '\u225C',
    	    backsim: '\u223D',
    	    thicksim: ['\u223C', { variantForm: true }],
    	    backsimeq: '\u22CD',
    	    thickapprox: ['\u2248', { variantForm: true }],
    	    subseteqq: '\u2AC5',
    	    supseteqq: '\u2AC6',
    	    Subset: '\u22D0',
    	    Supset: '\u22D1',
    	    sqsubset: '\u228F',
    	    sqsupset: '\u2290',
    	    preccurlyeq: '\u227C',
    	    succcurlyeq: '\u227D',
    	    curlyeqprec: '\u22DE',
    	    curlyeqsucc: '\u22DF',
    	    precsim: '\u227E',
    	    succsim: '\u227F',
    	    precapprox: '\u2AB7',
    	    succapprox: '\u2AB8',
    	    vartriangleleft: '\u22B2',
    	    lhd: '\u22B2',
    	    vartriangleright: '\u22B3',
    	    rhd: '\u22B3',
    	    trianglelefteq: '\u22B4',
    	    unlhd: '\u22B4',
    	    trianglerighteq: '\u22B5',
    	    unrhd: '\u22B5',
    	    vDash: ['\u22A8', { variantForm: true }],
    	    Vdash: '\u22A9',
    	    Vvdash: '\u22AA',
    	    smallsmile: ['\u2323', { variantForm: true }],
    	    shortmid: ['\u2223', { variantForm: true }],
    	    smallfrown: ['\u2322', { variantForm: true }],
    	    shortparallel: ['\u2225', { variantForm: true }],
    	    bumpeq: '\u224F',
    	    between: '\u226C',
    	    Bumpeq: '\u224E',
    	    pitchfork: '\u22D4',
    	    varpropto: ['\u221D', { variantForm: true }],
    	    backepsilon: '\u220D',
    	    blacktriangleleft: '\u25C2',
    	    blacktriangleright: '\u25B8',
    	    therefore: '\u2234',
    	    because: '\u2235',
    	    eqsim: '\u2242',
    	    vartriangle: ['\u25B3', { variantForm: true }],
    	    Join: '\u22C8',
    	    nless: '\u226E',
    	    ngtr: '\u226F',
    	    nleq: '\u2270',
    	    ngeq: '\u2271',
    	    nleqslant: ['\u2A87', { variantForm: true }],
    	    ngeqslant: ['\u2A88', { variantForm: true }],
    	    nleqq: ['\u2270', { variantForm: true }],
    	    ngeqq: ['\u2271', { variantForm: true }],
    	    lneq: '\u2A87',
    	    gneq: '\u2A88',
    	    lneqq: '\u2268',
    	    gneqq: '\u2269',
    	    lvertneqq: ['\u2268', { variantForm: true }],
    	    gvertneqq: ['\u2269', { variantForm: true }],
    	    lnsim: '\u22E6',
    	    gnsim: '\u22E7',
    	    lnapprox: '\u2A89',
    	    gnapprox: '\u2A8A',
    	    nprec: '\u2280',
    	    nsucc: '\u2281',
    	    npreceq: ['\u22E0', { variantForm: true }],
    	    nsucceq: ['\u22E1', { variantForm: true }],
    	    precneqq: '\u2AB5',
    	    succneqq: '\u2AB6',
    	    precnsim: '\u22E8',
    	    succnsim: '\u22E9',
    	    precnapprox: '\u2AB9',
    	    succnapprox: '\u2ABA',
    	    nsim: '\u2241',
    	    ncong: '\u2247',
    	    nshortmid: ['\u2224', { variantForm: true }],
    	    nshortparallel: ['\u2226', { variantForm: true }],
    	    nmid: '\u2224',
    	    nparallel: '\u2226',
    	    nvdash: '\u22AC',
    	    nvDash: '\u22AD',
    	    nVdash: '\u22AE',
    	    nVDash: '\u22AF',
    	    ntriangleleft: '\u22EA',
    	    ntriangleright: '\u22EB',
    	    ntrianglelefteq: '\u22EC',
    	    ntrianglerighteq: '\u22ED',
    	    nsubseteq: '\u2288',
    	    nsupseteq: '\u2289',
    	    nsubseteqq: ['\u2288', { variantForm: true }],
    	    nsupseteqq: ['\u2289', { variantForm: true }],
    	    subsetneq: '\u228A',
    	    supsetneq: '\u228B',
    	    varsubsetneq: ['\u228A', { variantForm: true }],
    	    varsupsetneq: ['\u228B', { variantForm: true }],
    	    subsetneqq: '\u2ACB',
    	    supsetneqq: '\u2ACC',
    	    varsubsetneqq: ['\u2ACB', { variantForm: true }],
    	    varsupsetneqq: ['\u2ACC', { variantForm: true }],
    	    leftleftarrows: '\u21C7',
    	    rightrightarrows: '\u21C9',
    	    leftrightarrows: '\u21C6',
    	    rightleftarrows: '\u21C4',
    	    Lleftarrow: '\u21DA',
    	    Rrightarrow: '\u21DB',
    	    twoheadleftarrow: '\u219E',
    	    twoheadrightarrow: '\u21A0',
    	    leftarrowtail: '\u21A2',
    	    rightarrowtail: '\u21A3',
    	    looparrowleft: '\u21AB',
    	    looparrowright: '\u21AC',
    	    leftrightharpoons: '\u21CB',
    	    rightleftharpoons: ['\u21CC', { variantForm: true }],
    	    curvearrowleft: '\u21B6',
    	    curvearrowright: '\u21B7',
    	    circlearrowleft: '\u21BA',
    	    circlearrowright: '\u21BB',
    	    Lsh: '\u21B0',
    	    Rsh: '\u21B1',
    	    upuparrows: '\u21C8',
    	    downdownarrows: '\u21CA',
    	    upharpoonleft: '\u21BF',
    	    upharpoonright: '\u21BE',
    	    downharpoonleft: '\u21C3',
    	    restriction: '\u21BE',
    	    multimap: '\u22B8',
    	    downharpoonright: '\u21C2',
    	    leftrightsquigarrow: '\u21AD',
    	    rightsquigarrow: '\u21DD',
    	    leadsto: '\u21DD',
    	    dashrightarrow: '\u21E2',
    	    dashleftarrow: '\u21E0',
    	    nleftarrow: '\u219A',
    	    nrightarrow: '\u219B',
    	    nLeftarrow: '\u21CD',
    	    nRightarrow: '\u21CF',
    	    nleftrightarrow: '\u21AE',
    	    nLeftrightarrow: '\u21CE'
    	});
    	new sm.DelimiterMap('AMSsymbols-delimiter', ParseMethods_js_1.default.delimiter, {
    	    '\\ulcorner': '\u231C',
    	    '\\urcorner': '\u231D',
    	    '\\llcorner': '\u231E',
    	    '\\lrcorner': '\u231F'
    	});
    	new sm.CommandMap('AMSsymbols-macros', {
    	    implies: ['Macro', '\\;\\Longrightarrow\\;'],
    	    impliedby: ['Macro', '\\;\\Longleftarrow\\;']
    	}, AmsMethods_js_1.AmsMethods);
    	
    	return AmsMappings;
    }

    var hasRequiredAmsConfiguration;

    function requireAmsConfiguration () {
    	if (hasRequiredAmsConfiguration) return AmsConfiguration;
    	hasRequiredAmsConfiguration = 1;
    	var __extends = (AmsConfiguration.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var _a;
    	Object.defineProperty(AmsConfiguration, "__esModule", { value: true });
    	AmsConfiguration.AmsConfiguration = AmsConfiguration.AmsTags = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var AmsItems_js_1 = requireAmsItems();
    	var Tags_js_1 = requireTags();
    	var AmsMethods_js_1 = requireAmsMethods();
    	requireAmsMappings();
    	var SymbolMap_js_1 = requireSymbolMap();
    	var AmsTags = (function (_super) {
    	    __extends(AmsTags, _super);
    	    function AmsTags() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return AmsTags;
    	}(Tags_js_1.AbstractTags));
    	AmsConfiguration.AmsTags = AmsTags;
    	var init = function (config) {
    	    new SymbolMap_js_1.CommandMap(AmsMethods_js_1.NEW_OPS, {}, {});
    	    config.append(Configuration_js_1.Configuration.local({ handler: { macro: [AmsMethods_js_1.NEW_OPS] },
    	        priority: -1 }));
    	};
    	AmsConfiguration.AmsConfiguration = Configuration_js_1.Configuration.create('ams', {
    	    handler: {
    	        character: ['AMSmath-operatorLetter'],
    	        delimiter: ['AMSsymbols-delimiter', 'AMSmath-delimiter'],
    	        macro: ['AMSsymbols-mathchar0mi', 'AMSsymbols-mathchar0mo',
    	            'AMSsymbols-delimiter', 'AMSsymbols-macros',
    	            'AMSmath-mathchar0mo', 'AMSmath-macros', 'AMSmath-delimiter'],
    	        environment: ['AMSmath-environment']
    	    },
    	    items: (_a = {},
    	        _a[AmsItems_js_1.MultlineItem.prototype.kind] = AmsItems_js_1.MultlineItem,
    	        _a[AmsItems_js_1.FlalignItem.prototype.kind] = AmsItems_js_1.FlalignItem,
    	        _a),
    	    tags: { 'ams': AmsTags },
    	    init: init,
    	    config: function (_config, jax) {
    	        if (jax.parseOptions.options.multlineWidth) {
    	            jax.parseOptions.options.ams.multlineWidth = jax.parseOptions.options.multlineWidth;
    	        }
    	        delete jax.parseOptions.options.multlineWidth;
    	    },
    	    options: {
    	        multlineWidth: '',
    	        ams: {
    	            multlineWidth: '100%',
    	            multlineIndent: '1em',
    	        }
    	    }
    	});
    	
    	return AmsConfiguration;
    }

    var AmsCdConfiguration = {};

    var AmsCdMappings = {};

    var AmsCdMethods = {};

    var hasRequiredAmsCdMethods;

    function requireAmsCdMethods () {
    	if (hasRequiredAmsCdMethods) return AmsCdMethods;
    	hasRequiredAmsCdMethods = 1;
    	var __importDefault = (AmsCdMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(AmsCdMethods, "__esModule", { value: true });
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var BaseConfiguration_js_1 = requireBaseConfiguration();
    	var MmlNode_js_1 = requireMmlNode();
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var AmsCdMethods$1 = {};
    	AmsCdMethods$1.CD = function (parser, begin) {
    	    parser.Push(begin);
    	    var item = parser.itemFactory.create('array');
    	    var options = parser.configuration.options.amscd;
    	    item.setProperties({
    	        minw: parser.stack.env.CD_minw || options.harrowsize,
    	        minh: parser.stack.env.CD_minh || options.varrowsize
    	    });
    	    item.arraydef = {
    	        columnalign: 'center',
    	        columnspacing: options.colspace,
    	        rowspacing: options.rowspace,
    	        displaystyle: true
    	    };
    	    return item;
    	};
    	AmsCdMethods$1.arrow = function (parser, name) {
    	    var c = parser.string.charAt(parser.i);
    	    if (!c.match(/[><VA.|=]/)) {
    	        return (0, BaseConfiguration_js_1.Other)(parser, name);
    	    }
    	    else {
    	        parser.i++;
    	    }
    	    var first = parser.stack.Top();
    	    if (!first.isKind('array') || first.Size()) {
    	        AmsCdMethods$1.cell(parser, name);
    	        first = parser.stack.Top();
    	    }
    	    var top = first;
    	    var arrowRow = ((top.table.length % 2) === 1);
    	    var n = (top.row.length + (arrowRow ? 0 : 1)) % 2;
    	    while (n) {
    	        AmsCdMethods$1.cell(parser, name);
    	        n--;
    	    }
    	    var mml;
    	    var hdef = { minsize: top.getProperty('minw'), stretchy: true }, vdef = { minsize: top.getProperty('minh'),
    	        stretchy: true, symmetric: true, lspace: 0, rspace: 0 };
    	    if (c === '.') ;
    	    else if (c === '|') {
    	        mml = parser.create('token', 'mo', vdef, '\u2225');
    	    }
    	    else if (c === '=') {
    	        mml = parser.create('token', 'mo', hdef, '=');
    	    }
    	    else {
    	        var arrow = {
    	            '>': '\u2192', '<': '\u2190', 'V': '\u2193', 'A': '\u2191'
    	        }[c];
    	        var a = parser.GetUpTo(name + c, c);
    	        var b = parser.GetUpTo(name + c, c);
    	        if (c === '>' || c === '<') {
    	            mml = parser.create('token', 'mo', hdef, arrow);
    	            if (!a) {
    	                a = '\\kern ' + top.getProperty('minw');
    	            }
    	            if (a || b) {
    	                var pad = { width: '+.67em', lspace: '.33em' };
    	                mml = parser.create('node', 'munderover', [mml]);
    	                if (a) {
    	                    var nodeA = new TexParser_js_1.default(a, parser.stack.env, parser.configuration).mml();
    	                    var mpadded = parser.create('node', 'mpadded', [nodeA], pad);
    	                    NodeUtil_js_1.default.setAttribute(mpadded, 'voffset', '.1em');
    	                    NodeUtil_js_1.default.setChild(mml, mml.over, mpadded);
    	                }
    	                if (b) {
    	                    var nodeB = new TexParser_js_1.default(b, parser.stack.env, parser.configuration).mml();
    	                    NodeUtil_js_1.default.setChild(mml, mml.under, parser.create('node', 'mpadded', [nodeB], pad));
    	                }
    	                if (parser.configuration.options.amscd.hideHorizontalLabels) {
    	                    mml = parser.create('node', 'mpadded', mml, { depth: 0, height: '.67em' });
    	                }
    	            }
    	        }
    	        else {
    	            var arrowNode = parser.create('token', 'mo', vdef, arrow);
    	            mml = arrowNode;
    	            if (a || b) {
    	                mml = parser.create('node', 'mrow');
    	                if (a) {
    	                    NodeUtil_js_1.default.appendChildren(mml, [new TexParser_js_1.default('\\scriptstyle\\llap{' + a + '}', parser.stack.env, parser.configuration).mml()]);
    	                }
    	                arrowNode.texClass = MmlNode_js_1.TEXCLASS.ORD;
    	                NodeUtil_js_1.default.appendChildren(mml, [arrowNode]);
    	                if (b) {
    	                    NodeUtil_js_1.default.appendChildren(mml, [new TexParser_js_1.default('\\scriptstyle\\rlap{' + b + '}', parser.stack.env, parser.configuration).mml()]);
    	                }
    	            }
    	        }
    	    }
    	    if (mml) {
    	        parser.Push(mml);
    	    }
    	    AmsCdMethods$1.cell(parser, name);
    	};
    	AmsCdMethods$1.cell = function (parser, name) {
    	    var top = parser.stack.Top();
    	    if ((top.table || []).length % 2 === 0 && (top.row || []).length === 0) {
    	        parser.Push(parser.create('node', 'mpadded', [], { height: '8.5pt', depth: '2pt' }));
    	    }
    	    parser.Push(parser.itemFactory.create('cell').setProperties({ isEntry: true, name: name }));
    	};
    	AmsCdMethods$1.minCDarrowwidth = function (parser, name) {
    	    parser.stack.env.CD_minw = parser.GetDimen(name);
    	};
    	AmsCdMethods$1.minCDarrowheight = function (parser, name) {
    	    parser.stack.env.CD_minh = parser.GetDimen(name);
    	};
    	AmsCdMethods.default = AmsCdMethods$1;
    	
    	return AmsCdMethods;
    }

    var hasRequiredAmsCdMappings;

    function requireAmsCdMappings () {
    	if (hasRequiredAmsCdMappings) return AmsCdMappings;
    	hasRequiredAmsCdMappings = 1;
    	var __createBinding = (AmsCdMappings.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (AmsCdMappings.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (AmsCdMappings.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __importDefault = (AmsCdMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(AmsCdMappings, "__esModule", { value: true });
    	var sm = __importStar(requireSymbolMap());
    	var ParseMethods_js_1 = __importDefault(requireParseMethods());
    	var AmsCdMethods_js_1 = __importDefault(requireAmsCdMethods());
    	new sm.EnvironmentMap('amscd_environment', ParseMethods_js_1.default.environment, { CD: 'CD' }, AmsCdMethods_js_1.default);
    	new sm.CommandMap('amscd_macros', {
    	    minCDarrowwidth: 'minCDarrowwidth',
    	    minCDarrowheight: 'minCDarrowheight',
    	}, AmsCdMethods_js_1.default);
    	new sm.MacroMap('amscd_special', { '@': 'arrow' }, AmsCdMethods_js_1.default);
    	
    	return AmsCdMappings;
    }

    var hasRequiredAmsCdConfiguration;

    function requireAmsCdConfiguration () {
    	if (hasRequiredAmsCdConfiguration) return AmsCdConfiguration;
    	hasRequiredAmsCdConfiguration = 1;
    	Object.defineProperty(AmsCdConfiguration, "__esModule", { value: true });
    	AmsCdConfiguration.AmsCdConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	requireAmsCdMappings();
    	AmsCdConfiguration.AmsCdConfiguration = Configuration_js_1.Configuration.create('amscd', {
    	    handler: {
    	        character: ['amscd_special'],
    	        macro: ['amscd_macros'],
    	        environment: ['amscd_environment']
    	    },
    	    options: {
    	        amscd: {
    	            colspace: '5pt',
    	            rowspace: '5pt',
    	            harrowsize: '2.75em',
    	            varrowsize: '1.75em',
    	            hideHorizontalLabels: false
    	        }
    	    }
    	});
    	
    	return AmsCdConfiguration;
    }

    var BboxConfiguration = {};

    var hasRequiredBboxConfiguration;

    function requireBboxConfiguration () {
    	if (hasRequiredBboxConfiguration) return BboxConfiguration;
    	hasRequiredBboxConfiguration = 1;
    	(function (exports) {
    		var __importDefault = (BboxConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.BboxConfiguration = exports.BboxMethods = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var TexError_js_1 = __importDefault(requireTexError());
    		exports.BboxMethods = {};
    		exports.BboxMethods.BBox = function (parser, name) {
    		    var bbox = parser.GetBrackets(name, '');
    		    var math = parser.ParseArg(name);
    		    var parts = bbox.split(/,/);
    		    var def, background, style;
    		    for (var i = 0, m = parts.length; i < m; i++) {
    		        var part = parts[i].trim();
    		        var match = part.match(/^(\.\d+|\d+(\.\d*)?)(pt|em|ex|mu|px|in|cm|mm)$/);
    		        if (match) {
    		            if (def) {
    		                throw new TexError_js_1.default('MultipleBBoxProperty', '%1 specified twice in %2', 'Padding', name);
    		            }
    		            var pad = BBoxPadding(match[1] + match[3]);
    		            if (pad) {
    		                def = {
    		                    height: '+' + pad,
    		                    depth: '+' + pad,
    		                    lspace: pad,
    		                    width: '+' + (2 * parseInt(match[1], 10)) + match[3]
    		                };
    		            }
    		        }
    		        else if (part.match(/^([a-z0-9]+|\#[0-9a-f]{6}|\#[0-9a-f]{3})$/i)) {
    		            if (background) {
    		                throw new TexError_js_1.default('MultipleBBoxProperty', '%1 specified twice in %2', 'Background', name);
    		            }
    		            background = part;
    		        }
    		        else if (part.match(/^[-a-z]+:/i)) {
    		            if (style) {
    		                throw new TexError_js_1.default('MultipleBBoxProperty', '%1 specified twice in %2', 'Style', name);
    		            }
    		            style = BBoxStyle(part);
    		        }
    		        else if (part !== '') {
    		            throw new TexError_js_1.default('InvalidBBoxProperty', '"%1" doesn\'t look like a color, a padding dimension, or a style', part);
    		        }
    		    }
    		    if (def) {
    		        math = parser.create('node', 'mpadded', [math], def);
    		    }
    		    if (background || style) {
    		        def = {};
    		        if (background) {
    		            Object.assign(def, { mathbackground: background });
    		        }
    		        if (style) {
    		            Object.assign(def, { style: style });
    		        }
    		        math = parser.create('node', 'mstyle', [math], def);
    		    }
    		    parser.Push(math);
    		};
    		var BBoxStyle = function (styles) {
    		    return styles;
    		};
    		var BBoxPadding = function (pad) {
    		    return pad;
    		};
    		new SymbolMap_js_1.CommandMap('bbox', { bbox: 'BBox' }, exports.BboxMethods);
    		exports.BboxConfiguration = Configuration_js_1.Configuration.create('bbox', { handler: { macro: ['bbox'] } });
    		
    	} (BboxConfiguration));
    	return BboxConfiguration;
    }

    var BoldsymbolConfiguration = {};

    var hasRequiredBoldsymbolConfiguration;

    function requireBoldsymbolConfiguration () {
    	if (hasRequiredBoldsymbolConfiguration) return BoldsymbolConfiguration;
    	hasRequiredBoldsymbolConfiguration = 1;
    	(function (exports) {
    		var __values = (BoldsymbolConfiguration.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __importDefault = (BoldsymbolConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.BoldsymbolConfiguration = exports.rewriteBoldTokens = exports.createBoldToken = exports.BoldsymbolMethods = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    		var TexConstants_js_1 = requireTexConstants();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var NodeFactory_js_1 = requireNodeFactory$1();
    		var BOLDVARIANT = {};
    		BOLDVARIANT[TexConstants_js_1.TexConstant.Variant.NORMAL] = TexConstants_js_1.TexConstant.Variant.BOLD;
    		BOLDVARIANT[TexConstants_js_1.TexConstant.Variant.ITALIC] = TexConstants_js_1.TexConstant.Variant.BOLDITALIC;
    		BOLDVARIANT[TexConstants_js_1.TexConstant.Variant.FRAKTUR] = TexConstants_js_1.TexConstant.Variant.BOLDFRAKTUR;
    		BOLDVARIANT[TexConstants_js_1.TexConstant.Variant.SCRIPT] = TexConstants_js_1.TexConstant.Variant.BOLDSCRIPT;
    		BOLDVARIANT[TexConstants_js_1.TexConstant.Variant.SANSSERIF] = TexConstants_js_1.TexConstant.Variant.BOLDSANSSERIF;
    		BOLDVARIANT['-tex-calligraphic'] = '-tex-bold-calligraphic';
    		BOLDVARIANT['-tex-oldstyle'] = '-tex-bold-oldstyle';
    		BOLDVARIANT['-tex-mathit'] = TexConstants_js_1.TexConstant.Variant.BOLDITALIC;
    		exports.BoldsymbolMethods = {};
    		exports.BoldsymbolMethods.Boldsymbol = function (parser, name) {
    		    var boldsymbol = parser.stack.env['boldsymbol'];
    		    parser.stack.env['boldsymbol'] = true;
    		    var mml = parser.ParseArg(name);
    		    parser.stack.env['boldsymbol'] = boldsymbol;
    		    parser.Push(mml);
    		};
    		new SymbolMap_js_1.CommandMap('boldsymbol', { boldsymbol: 'Boldsymbol' }, exports.BoldsymbolMethods);
    		function createBoldToken(factory, kind, def, text) {
    		    var token = NodeFactory_js_1.NodeFactory.createToken(factory, kind, def, text);
    		    if (kind !== 'mtext' &&
    		        factory.configuration.parser.stack.env['boldsymbol']) {
    		        NodeUtil_js_1.default.setProperty(token, 'fixBold', true);
    		        factory.configuration.addNode('fixBold', token);
    		    }
    		    return token;
    		}
    		exports.createBoldToken = createBoldToken;
    		function rewriteBoldTokens(arg) {
    		    var e_1, _a;
    		    try {
    		        for (var _b = __values(arg.data.getList('fixBold')), _c = _b.next(); !_c.done; _c = _b.next()) {
    		            var node = _c.value;
    		            if (NodeUtil_js_1.default.getProperty(node, 'fixBold')) {
    		                var variant = NodeUtil_js_1.default.getAttribute(node, 'mathvariant');
    		                if (variant == null) {
    		                    NodeUtil_js_1.default.setAttribute(node, 'mathvariant', TexConstants_js_1.TexConstant.Variant.BOLD);
    		                }
    		                else {
    		                    NodeUtil_js_1.default.setAttribute(node, 'mathvariant', BOLDVARIANT[variant] || variant);
    		                }
    		                NodeUtil_js_1.default.removeProperties(node, 'fixBold');
    		            }
    		        }
    		    }
    		    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		    finally {
    		        try {
    		            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		        }
    		        finally { if (e_1) throw e_1.error; }
    		    }
    		}
    		exports.rewriteBoldTokens = rewriteBoldTokens;
    		exports.BoldsymbolConfiguration = Configuration_js_1.Configuration.create('boldsymbol', {
    		    handler: { macro: ['boldsymbol'] },
    		    nodes: { 'token': createBoldToken },
    		    postprocessors: [rewriteBoldTokens]
    		});
    		
    	} (BoldsymbolConfiguration));
    	return BoldsymbolConfiguration;
    }

    var BraketConfiguration = {};

    var BraketItems = {};

    var hasRequiredBraketItems;

    function requireBraketItems () {
    	if (hasRequiredBraketItems) return BraketItems;
    	hasRequiredBraketItems = 1;
    	var __extends = (BraketItems.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __importDefault = (BraketItems.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BraketItems, "__esModule", { value: true });
    	BraketItems.BraketItem = undefined;
    	var StackItem_js_1 = requireStackItem();
    	var MmlNode_js_1 = requireMmlNode();
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var BraketItem = (function (_super) {
    	    __extends(BraketItem, _super);
    	    function BraketItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(BraketItem.prototype, "kind", {
    	        get: function () {
    	            return 'braket';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(BraketItem.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    BraketItem.prototype.checkItem = function (item) {
    	        if (item.isKind('close')) {
    	            return [[this.factory.create('mml', this.toMml())], true];
    	        }
    	        if (item.isKind('mml')) {
    	            this.Push(item.toMml());
    	            if (this.getProperty('single')) {
    	                return [[this.toMml()], true];
    	            }
    	            return StackItem_js_1.BaseItem.fail;
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    BraketItem.prototype.toMml = function () {
    	        var inner = _super.prototype.toMml.call(this);
    	        var open = this.getProperty('open');
    	        var close = this.getProperty('close');
    	        if (this.getProperty('stretchy')) {
    	            return ParseUtil_js_1.default.fenced(this.factory.configuration, open, inner, close);
    	        }
    	        var attrs = { fence: true, stretchy: false, symmetric: true, texClass: MmlNode_js_1.TEXCLASS.OPEN };
    	        var openNode = this.create('token', 'mo', attrs, open);
    	        attrs.texClass = MmlNode_js_1.TEXCLASS.CLOSE;
    	        var closeNode = this.create('token', 'mo', attrs, close);
    	        var mrow = this.create('node', 'mrow', [openNode, inner, closeNode], { open: open, close: close, texClass: MmlNode_js_1.TEXCLASS.INNER });
    	        return mrow;
    	    };
    	    return BraketItem;
    	}(StackItem_js_1.BaseItem));
    	BraketItems.BraketItem = BraketItem;
    	
    	return BraketItems;
    }

    var BraketMappings = {};

    var BraketMethods = {};

    var hasRequiredBraketMethods;

    function requireBraketMethods () {
    	if (hasRequiredBraketMethods) return BraketMethods;
    	hasRequiredBraketMethods = 1;
    	var __importDefault = (BraketMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BraketMethods, "__esModule", { value: true });
    	var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    	var MmlNode_js_1 = requireMmlNode();
    	var TexError_js_1 = __importDefault(requireTexError());
    	var BraketMethods$1 = {};
    	BraketMethods$1.Macro = BaseMethods_js_1.default.Macro;
    	BraketMethods$1.Braket = function (parser, _name, open, close, stretchy, barmax) {
    	    var next = parser.GetNext();
    	    if (next === '') {
    	        throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', parser.currentCS);
    	    }
    	    var single = true;
    	    if (next === '{') {
    	        parser.i++;
    	        single = false;
    	    }
    	    parser.Push(parser.itemFactory.create('braket')
    	        .setProperties({ barmax: barmax, barcount: 0, open: open,
    	        close: close, stretchy: stretchy, single: single }));
    	};
    	BraketMethods$1.Bar = function (parser, name) {
    	    var c = name === '|' ? '|' : '\u2225';
    	    var top = parser.stack.Top();
    	    if (top.kind !== 'braket' ||
    	        top.getProperty('barcount') >= top.getProperty('barmax')) {
    	        var mml = parser.create('token', 'mo', { texClass: MmlNode_js_1.TEXCLASS.ORD, stretchy: false }, c);
    	        parser.Push(mml);
    	        return;
    	    }
    	    if (c === '|' && parser.GetNext() === '|') {
    	        parser.i++;
    	        c = '\u2225';
    	    }
    	    var stretchy = top.getProperty('stretchy');
    	    if (!stretchy) {
    	        var node_1 = parser.create('token', 'mo', { stretchy: false, braketbar: true }, c);
    	        parser.Push(node_1);
    	        return;
    	    }
    	    var node = parser.create('node', 'TeXAtom', [], { texClass: MmlNode_js_1.TEXCLASS.CLOSE });
    	    parser.Push(node);
    	    top.setProperty('barcount', top.getProperty('barcount') + 1);
    	    node = parser.create('token', 'mo', { stretchy: true, braketbar: true }, c);
    	    parser.Push(node);
    	    node = parser.create('node', 'TeXAtom', [], { texClass: MmlNode_js_1.TEXCLASS.OPEN });
    	    parser.Push(node);
    	};
    	BraketMethods.default = BraketMethods$1;
    	
    	return BraketMethods;
    }

    var hasRequiredBraketMappings;

    function requireBraketMappings () {
    	if (hasRequiredBraketMappings) return BraketMappings;
    	hasRequiredBraketMappings = 1;
    	var __importDefault = (BraketMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BraketMappings, "__esModule", { value: true });
    	var SymbolMap_js_1 = requireSymbolMap();
    	var BraketMethods_js_1 = __importDefault(requireBraketMethods());
    	new SymbolMap_js_1.CommandMap('Braket-macros', {
    	    bra: ['Macro', '{\\langle {#1} \\vert}', 1],
    	    ket: ['Macro', '{\\vert {#1} \\rangle}', 1],
    	    braket: ['Braket', '\u27E8', '\u27E9', false, Infinity],
    	    'set': ['Braket', '{', '}', false, 1],
    	    Bra: ['Macro', '{\\left\\langle {#1} \\right\\vert}', 1],
    	    Ket: ['Macro', '{\\left\\vert {#1} \\right\\rangle}', 1],
    	    Braket: ['Braket', '\u27E8', '\u27E9', true, Infinity],
    	    Set: ['Braket', '{', '}', true, 1],
    	    ketbra: ['Macro', '{\\vert {#1} \\rangle\\langle {#2} \\vert}', 2],
    	    Ketbra: ['Macro', '{\\left\\vert {#1} \\right\\rangle\\left\\langle {#2} \\right\\vert}', 2],
    	    '|': 'Bar'
    	}, BraketMethods_js_1.default);
    	new SymbolMap_js_1.MacroMap('Braket-characters', {
    	    '|': 'Bar'
    	}, BraketMethods_js_1.default);
    	
    	return BraketMappings;
    }

    var hasRequiredBraketConfiguration;

    function requireBraketConfiguration () {
    	if (hasRequiredBraketConfiguration) return BraketConfiguration;
    	hasRequiredBraketConfiguration = 1;
    	var _a;
    	Object.defineProperty(BraketConfiguration, "__esModule", { value: true });
    	BraketConfiguration.BraketConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var BraketItems_js_1 = requireBraketItems();
    	requireBraketMappings();
    	BraketConfiguration.BraketConfiguration = Configuration_js_1.Configuration.create('braket', {
    	    handler: {
    	        character: ['Braket-characters'],
    	        macro: ['Braket-macros']
    	    },
    	    items: (_a = {},
    	        _a[BraketItems_js_1.BraketItem.prototype.kind] = BraketItems_js_1.BraketItem,
    	        _a)
    	});
    	
    	return BraketConfiguration;
    }

    var BussproofsConfiguration = {};

    var BussproofsItems = {};

    var BussproofsUtil = {};

    var hasRequiredBussproofsUtil;

    function requireBussproofsUtil () {
    	if (hasRequiredBussproofsUtil) return BussproofsUtil;
    	hasRequiredBussproofsUtil = 1;
    	(function (exports) {
    		var __read = (BussproofsUtil.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __values = (BussproofsUtil.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __importDefault = (BussproofsUtil.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		var _a;
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.clearDocument = exports.saveDocument = exports.makeBsprAttributes = exports.removeProperty = exports.getProperty = exports.setProperty = exports.balanceRules = undefined;
    		var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var doc = null;
    		var item = null;
    		var getBBox = function (node) {
    		    item.root = node;
    		    var width = doc.outputJax.getBBox(item, doc).w;
    		    return width;
    		};
    		var getRule = function (node) {
    		    var i = 0;
    		    while (node && !NodeUtil_js_1.default.isType(node, 'mtable')) {
    		        if (NodeUtil_js_1.default.isType(node, 'text')) {
    		            return null;
    		        }
    		        if (NodeUtil_js_1.default.isType(node, 'mrow')) {
    		            node = node.childNodes[0];
    		            i = 0;
    		            continue;
    		        }
    		        node = node.parent.childNodes[i];
    		        i++;
    		    }
    		    return node;
    		};
    		var getPremises = function (rule, direction) {
    		    return rule.childNodes[direction === 'up' ? 1 : 0].childNodes[0].
    		        childNodes[0].childNodes[0].childNodes[0];
    		};
    		var getPremise = function (premises, n) {
    		    return premises.childNodes[n].childNodes[0].childNodes[0];
    		};
    		var firstPremise = function (premises) {
    		    return getPremise(premises, 0);
    		};
    		var lastPremise = function (premises) {
    		    return getPremise(premises, premises.childNodes.length - 1);
    		};
    		var getConclusion = function (rule, direction) {
    		    return rule.childNodes[direction === 'up' ? 0 : 1].childNodes[0].childNodes[0].childNodes[0];
    		};
    		var getColumn = function (inf) {
    		    while (inf && !NodeUtil_js_1.default.isType(inf, 'mtd')) {
    		        inf = inf.parent;
    		    }
    		    return inf;
    		};
    		var nextSibling = function (inf) {
    		    return inf.parent.childNodes[inf.parent.childNodes.indexOf(inf) + 1];
    		};
    		var getParentInf = function (inf) {
    		    while (inf && (0, exports.getProperty)(inf, 'inference') == null) {
    		        inf = inf.parent;
    		    }
    		    return inf;
    		};
    		var getSpaces = function (inf, rule, right) {
    		    if (right === undefined) { right = false; }
    		    var result = 0;
    		    if (inf === rule) {
    		        return result;
    		    }
    		    if (inf !== rule.parent) {
    		        var children_1 = inf.childNodes;
    		        var index_1 = right ? children_1.length - 1 : 0;
    		        if (NodeUtil_js_1.default.isType(children_1[index_1], 'mspace')) {
    		            result += getBBox(children_1[index_1]);
    		        }
    		        inf = rule.parent;
    		    }
    		    if (inf === rule) {
    		        return result;
    		    }
    		    var children = inf.childNodes;
    		    var index = right ? children.length - 1 : 0;
    		    if (children[index] !== rule) {
    		        result += getBBox(children[index]);
    		    }
    		    return result;
    		};
    		var adjustValue = function (inf, right) {
    		    if (right === undefined) { right = false; }
    		    var rule = getRule(inf);
    		    var conc = getConclusion(rule, (0, exports.getProperty)(rule, 'inferenceRule'));
    		    var w = getSpaces(inf, rule, right);
    		    var x = getBBox(rule);
    		    var y = getBBox(conc);
    		    return w + ((x - y) / 2);
    		};
    		var addSpace = function (config, inf, space, right) {
    		    if (right === undefined) { right = false; }
    		    if ((0, exports.getProperty)(inf, 'inferenceRule') ||
    		        (0, exports.getProperty)(inf, 'labelledRule')) {
    		        var mrow = config.nodeFactory.create('node', 'mrow');
    		        inf.parent.replaceChild(mrow, inf);
    		        mrow.setChildren([inf]);
    		        moveProperties(inf, mrow);
    		        inf = mrow;
    		    }
    		    var index = right ? inf.childNodes.length - 1 : 0;
    		    var mspace = inf.childNodes[index];
    		    if (NodeUtil_js_1.default.isType(mspace, 'mspace')) {
    		        NodeUtil_js_1.default.setAttribute(mspace, 'width', ParseUtil_js_1.default.Em(ParseUtil_js_1.default.dimen2em(NodeUtil_js_1.default.getAttribute(mspace, 'width')) + space));
    		        return;
    		    }
    		    mspace = config.nodeFactory.create('node', 'mspace', [], { width: ParseUtil_js_1.default.Em(space) });
    		    if (right) {
    		        inf.appendChild(mspace);
    		        return;
    		    }
    		    mspace.parent = inf;
    		    inf.childNodes.unshift(mspace);
    		};
    		var moveProperties = function (src, dest) {
    		    var props = ['inference', 'proof', 'maxAdjust', 'labelledRule'];
    		    props.forEach(function (x) {
    		        var value = (0, exports.getProperty)(src, x);
    		        if (value != null) {
    		            (0, exports.setProperty)(dest, x, value);
    		            (0, exports.removeProperty)(src, x);
    		        }
    		    });
    		};
    		var adjustSequents = function (config) {
    		    var sequents = config.nodeLists['sequent'];
    		    if (!sequents) {
    		        return;
    		    }
    		    for (var i = sequents.length - 1, seq = undefined; seq = sequents[i]; i--) {
    		        if ((0, exports.getProperty)(seq, 'sequentProcessed')) {
    		            (0, exports.removeProperty)(seq, 'sequentProcessed');
    		            continue;
    		        }
    		        var collect = [];
    		        var inf = getParentInf(seq);
    		        if ((0, exports.getProperty)(inf, 'inference') !== 1) {
    		            continue;
    		        }
    		        collect.push(seq);
    		        while ((0, exports.getProperty)(inf, 'inference') === 1) {
    		            inf = getRule(inf);
    		            var premise = firstPremise(getPremises(inf, (0, exports.getProperty)(inf, 'inferenceRule')));
    		            var sequent = ((0, exports.getProperty)(premise, 'inferenceRule')) ?
    		                getConclusion(premise, (0, exports.getProperty)(premise, 'inferenceRule')) :
    		                premise;
    		            if ((0, exports.getProperty)(sequent, 'sequent')) {
    		                seq = sequent.childNodes[0];
    		                collect.push(seq);
    		                (0, exports.setProperty)(seq, 'sequentProcessed', true);
    		            }
    		            inf = premise;
    		        }
    		        adjustSequentPairwise(config, collect);
    		    }
    		};
    		var addSequentSpace = function (config, sequent, position, direction, width) {
    		    var mspace = config.nodeFactory.create('node', 'mspace', [], { width: ParseUtil_js_1.default.Em(width) });
    		    if (direction === 'left') {
    		        var row = sequent.childNodes[position].childNodes[0];
    		        mspace.parent = row;
    		        row.childNodes.unshift(mspace);
    		    }
    		    else {
    		        sequent.childNodes[position].appendChild(mspace);
    		    }
    		    (0, exports.setProperty)(sequent.parent, 'sequentAdjust_' + direction, width);
    		};
    		var adjustSequentPairwise = function (config, sequents) {
    		    var top = sequents.pop();
    		    while (sequents.length) {
    		        var bottom = sequents.pop();
    		        var _a = __read(compareSequents(top, bottom), 2), left = _a[0], right = _a[1];
    		        if ((0, exports.getProperty)(top.parent, 'axiom')) {
    		            addSequentSpace(config, left < 0 ? top : bottom, 0, 'left', Math.abs(left));
    		            addSequentSpace(config, right < 0 ? top : bottom, 2, 'right', Math.abs(right));
    		        }
    		        top = bottom;
    		    }
    		};
    		var compareSequents = function (top, bottom) {
    		    var tr = getBBox(top.childNodes[2]);
    		    var br = getBBox(bottom.childNodes[2]);
    		    var tl = getBBox(top.childNodes[0]);
    		    var bl = getBBox(bottom.childNodes[0]);
    		    var dl = tl - bl;
    		    var dr = tr - br;
    		    return [dl, dr];
    		};
    		var balanceRules = function (arg) {
    		    var e_1, _a;
    		    item = new arg.document.options.MathItem('', null, arg.math.display);
    		    var config = arg.data;
    		    adjustSequents(config);
    		    var inferences = config.nodeLists['inference'] || [];
    		    try {
    		        for (var inferences_1 = __values(inferences), inferences_1_1 = inferences_1.next(); !inferences_1_1.done; inferences_1_1 = inferences_1.next()) {
    		            var inf = inferences_1_1.value;
    		            var isProof = (0, exports.getProperty)(inf, 'proof');
    		            var rule = getRule(inf);
    		            var premises = getPremises(rule, (0, exports.getProperty)(rule, 'inferenceRule'));
    		            var premiseF = firstPremise(premises);
    		            if ((0, exports.getProperty)(premiseF, 'inference')) {
    		                var adjust_1 = adjustValue(premiseF);
    		                if (adjust_1) {
    		                    addSpace(config, premiseF, -adjust_1);
    		                    var w_1 = getSpaces(inf, rule, false);
    		                    addSpace(config, inf, adjust_1 - w_1);
    		                }
    		            }
    		            var premiseL = lastPremise(premises);
    		            if ((0, exports.getProperty)(premiseL, 'inference') == null) {
    		                continue;
    		            }
    		            var adjust = adjustValue(premiseL, true);
    		            addSpace(config, premiseL, -adjust, true);
    		            var w = getSpaces(inf, rule, true);
    		            var maxAdjust = (0, exports.getProperty)(inf, 'maxAdjust');
    		            if (maxAdjust != null) {
    		                adjust = Math.max(adjust, maxAdjust);
    		            }
    		            var column = void 0;
    		            if (isProof || !(column = getColumn(inf))) {
    		                addSpace(config, (0, exports.getProperty)(inf, 'proof') ? inf : inf.parent, adjust - w, true);
    		                continue;
    		            }
    		            var sibling = nextSibling(column);
    		            if (sibling) {
    		                var pos = config.nodeFactory.create('node', 'mspace', [], { width: adjust - w + 'em' });
    		                sibling.appendChild(pos);
    		                inf.removeProperty('maxAdjust');
    		                continue;
    		            }
    		            var parentRule = getParentInf(column);
    		            if (!parentRule) {
    		                continue;
    		            }
    		            adjust = (0, exports.getProperty)(parentRule, 'maxAdjust') ?
    		                Math.max((0, exports.getProperty)(parentRule, 'maxAdjust'), adjust) : adjust;
    		            (0, exports.setProperty)(parentRule, 'maxAdjust', adjust);
    		        }
    		    }
    		    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		    finally {
    		        try {
    		            if (inferences_1_1 && !inferences_1_1.done && (_a = inferences_1.return)) _a.call(inferences_1);
    		        }
    		        finally { if (e_1) throw e_1.error; }
    		    }
    		};
    		exports.balanceRules = balanceRules;
    		var property_prefix = 'bspr_';
    		var blacklistedProperties = (_a = {},
    		    _a[property_prefix + 'maxAdjust'] = true,
    		    _a);
    		var setProperty = function (node, property, value) {
    		    NodeUtil_js_1.default.setProperty(node, property_prefix + property, value);
    		};
    		exports.setProperty = setProperty;
    		var getProperty = function (node, property) {
    		    return NodeUtil_js_1.default.getProperty(node, property_prefix + property);
    		};
    		exports.getProperty = getProperty;
    		var removeProperty = function (node, property) {
    		    node.removeProperty(property_prefix + property);
    		};
    		exports.removeProperty = removeProperty;
    		var makeBsprAttributes = function (arg) {
    		    arg.data.root.walkTree(function (mml, _data) {
    		        var attr = [];
    		        mml.getPropertyNames().forEach(function (x) {
    		            if (!blacklistedProperties[x] && x.match(RegExp('^' + property_prefix))) {
    		                attr.push(x + ':' + mml.getProperty(x));
    		            }
    		        });
    		        if (attr.length) {
    		            NodeUtil_js_1.default.setAttribute(mml, 'semantics', attr.join(';'));
    		        }
    		    });
    		};
    		exports.makeBsprAttributes = makeBsprAttributes;
    		var saveDocument = function (arg) {
    		    doc = arg.document;
    		    if (!('getBBox' in doc.outputJax)) {
    		        throw Error('The bussproofs extension requires an output jax with a getBBox() method');
    		    }
    		};
    		exports.saveDocument = saveDocument;
    		var clearDocument = function (_arg) {
    		    doc = null;
    		};
    		exports.clearDocument = clearDocument;
    		
    	} (BussproofsUtil));
    	return BussproofsUtil;
    }

    var hasRequiredBussproofsItems;

    function requireBussproofsItems () {
    	if (hasRequiredBussproofsItems) return BussproofsItems;
    	hasRequiredBussproofsItems = 1;
    	var __extends = (BussproofsItems.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __createBinding = (BussproofsItems.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (BussproofsItems.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (BussproofsItems.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __importDefault = (BussproofsItems.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BussproofsItems, "__esModule", { value: true });
    	BussproofsItems.ProofTreeItem = undefined;
    	var TexError_js_1 = __importDefault(requireTexError());
    	var StackItem_js_1 = requireStackItem();
    	var Stack_js_1 = __importDefault(requireStack());
    	var BussproofsUtil = __importStar(requireBussproofsUtil());
    	var ProofTreeItem = (function (_super) {
    	    __extends(ProofTreeItem, _super);
    	    function ProofTreeItem() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.leftLabel = null;
    	        _this.rigthLabel = null;
    	        _this.innerStack = new Stack_js_1.default(_this.factory, {}, true);
    	        return _this;
    	    }
    	    Object.defineProperty(ProofTreeItem.prototype, "kind", {
    	        get: function () {
    	            return 'proofTree';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    ProofTreeItem.prototype.checkItem = function (item) {
    	        if (item.isKind('end') && item.getName() === 'prooftree') {
    	            var node = this.toMml();
    	            BussproofsUtil.setProperty(node, 'proof', true);
    	            return [[this.factory.create('mml', node), item], true];
    	        }
    	        if (item.isKind('stop')) {
    	            throw new TexError_js_1.default('EnvMissingEnd', 'Missing \\end{%1}', this.getName());
    	        }
    	        this.innerStack.Push(item);
    	        return StackItem_js_1.BaseItem.fail;
    	    };
    	    ProofTreeItem.prototype.toMml = function () {
    	        var tree = _super.prototype.toMml.call(this);
    	        var start = this.innerStack.Top();
    	        if (start.isKind('start') && !start.Size()) {
    	            return tree;
    	        }
    	        this.innerStack.Push(this.factory.create('stop'));
    	        var prefix = this.innerStack.Top().toMml();
    	        return this.create('node', 'mrow', [prefix, tree], {});
    	    };
    	    return ProofTreeItem;
    	}(StackItem_js_1.BaseItem));
    	BussproofsItems.ProofTreeItem = ProofTreeItem;
    	
    	return BussproofsItems;
    }

    var BussproofsMappings = {};

    var BussproofsMethods = {};

    var hasRequiredBussproofsMethods;

    function requireBussproofsMethods () {
    	if (hasRequiredBussproofsMethods) return BussproofsMethods;
    	hasRequiredBussproofsMethods = 1;
    	var __createBinding = (BussproofsMethods.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (BussproofsMethods.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (BussproofsMethods.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __read = (BussproofsMethods.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (BussproofsMethods.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __importDefault = (BussproofsMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BussproofsMethods, "__esModule", { value: true });
    	var TexError_js_1 = __importDefault(requireTexError());
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var BussproofsUtil = __importStar(requireBussproofsUtil());
    	var BussproofsMethods$1 = {};
    	BussproofsMethods$1.Prooftree = function (parser, begin) {
    	    parser.Push(begin);
    	    var newItem = parser.itemFactory.create('proofTree').
    	        setProperties({ name: begin.getName(),
    	        line: 'solid', currentLine: 'solid', rootAtTop: false });
    	    return newItem;
    	};
    	BussproofsMethods$1.Axiom = function (parser, name) {
    	    var top = parser.stack.Top();
    	    if (top.kind !== 'proofTree') {
    	        throw new TexError_js_1.default('IllegalProofCommand', 'Proof commands only allowed in prooftree environment.');
    	    }
    	    var content = paddedContent(parser, parser.GetArgument(name));
    	    BussproofsUtil.setProperty(content, 'axiom', true);
    	    top.Push(content);
    	};
    	var paddedContent = function (parser, content) {
    	    var nodes = ParseUtil_js_1.default.internalMath(parser, ParseUtil_js_1.default.trimSpaces(content), 0);
    	    if (!nodes[0].childNodes[0].childNodes.length) {
    	        return parser.create('node', 'mrow', []);
    	    }
    	    var lpad = parser.create('node', 'mspace', [], { width: '.5ex' });
    	    var rpad = parser.create('node', 'mspace', [], { width: '.5ex' });
    	    return parser.create('node', 'mrow', __spreadArray(__spreadArray([lpad], __read(nodes), false), [rpad], false));
    	};
    	BussproofsMethods$1.Inference = function (parser, name, n) {
    	    var top = parser.stack.Top();
    	    if (top.kind !== 'proofTree') {
    	        throw new TexError_js_1.default('IllegalProofCommand', 'Proof commands only allowed in prooftree environment.');
    	    }
    	    if (top.Size() < n) {
    	        throw new TexError_js_1.default('BadProofTree', 'Proof tree badly specified.');
    	    }
    	    var rootAtTop = top.getProperty('rootAtTop');
    	    var childCount = (n === 1 && !top.Peek()[0].childNodes.length) ? 0 : n;
    	    var children = [];
    	    do {
    	        if (children.length) {
    	            children.unshift(parser.create('node', 'mtd', [], {}));
    	        }
    	        children.unshift(parser.create('node', 'mtd', [top.Pop()], { 'rowalign': (rootAtTop ? 'top' : 'bottom') }));
    	        n--;
    	    } while (n > 0);
    	    var row = parser.create('node', 'mtr', children, {});
    	    var table = parser.create('node', 'mtable', [row], { framespacing: '0 0' });
    	    var conclusion = paddedContent(parser, parser.GetArgument(name));
    	    var style = top.getProperty('currentLine');
    	    if (style !== top.getProperty('line')) {
    	        top.setProperty('currentLine', top.getProperty('line'));
    	    }
    	    var rule = createRule(parser, table, [conclusion], top.getProperty('left'), top.getProperty('right'), style, rootAtTop);
    	    top.setProperty('left', null);
    	    top.setProperty('right', null);
    	    BussproofsUtil.setProperty(rule, 'inference', childCount);
    	    parser.configuration.addNode('inference', rule);
    	    top.Push(rule);
    	};
    	function createRule(parser, premise, conclusions, left, right, style, rootAtTop) {
    	    var upper = parser.create('node', 'mtr', [parser.create('node', 'mtd', [premise], {})], {});
    	    var lower = parser.create('node', 'mtr', [parser.create('node', 'mtd', conclusions, {})], {});
    	    var rule = parser.create('node', 'mtable', rootAtTop ? [lower, upper] : [upper, lower], { align: 'top 2', rowlines: style, framespacing: '0 0' });
    	    BussproofsUtil.setProperty(rule, 'inferenceRule', rootAtTop ? 'up' : 'down');
    	    var leftLabel, rightLabel;
    	    if (left) {
    	        leftLabel = parser.create('node', 'mpadded', [left], { height: '+.5em', width: '+.5em', voffset: '-.15em' });
    	        BussproofsUtil.setProperty(leftLabel, 'prooflabel', 'left');
    	    }
    	    if (right) {
    	        rightLabel = parser.create('node', 'mpadded', [right], { height: '+.5em', width: '+.5em', voffset: '-.15em' });
    	        BussproofsUtil.setProperty(rightLabel, 'prooflabel', 'right');
    	    }
    	    var children, label;
    	    if (left && right) {
    	        children = [leftLabel, rule, rightLabel];
    	        label = 'both';
    	    }
    	    else if (left) {
    	        children = [leftLabel, rule];
    	        label = 'left';
    	    }
    	    else if (right) {
    	        children = [rule, rightLabel];
    	        label = 'right';
    	    }
    	    else {
    	        return rule;
    	    }
    	    rule = parser.create('node', 'mrow', children);
    	    BussproofsUtil.setProperty(rule, 'labelledRule', label);
    	    return rule;
    	}
    	BussproofsMethods$1.Label = function (parser, name, side) {
    	    var top = parser.stack.Top();
    	    if (top.kind !== 'proofTree') {
    	        throw new TexError_js_1.default('IllegalProofCommand', 'Proof commands only allowed in prooftree environment.');
    	    }
    	    var content = ParseUtil_js_1.default.internalMath(parser, parser.GetArgument(name), 0);
    	    var label = (content.length > 1) ?
    	        parser.create('node', 'mrow', content, {}) : content[0];
    	    top.setProperty(side, label);
    	};
    	BussproofsMethods$1.SetLine = function (parser, _name, style, always) {
    	    var top = parser.stack.Top();
    	    if (top.kind !== 'proofTree') {
    	        throw new TexError_js_1.default('IllegalProofCommand', 'Proof commands only allowed in prooftree environment.');
    	    }
    	    top.setProperty('currentLine', style);
    	    if (always) {
    	        top.setProperty('line', style);
    	    }
    	};
    	BussproofsMethods$1.RootAtTop = function (parser, _name, where) {
    	    var top = parser.stack.Top();
    	    if (top.kind !== 'proofTree') {
    	        throw new TexError_js_1.default('IllegalProofCommand', 'Proof commands only allowed in prooftree environment.');
    	    }
    	    top.setProperty('rootAtTop', where);
    	};
    	BussproofsMethods$1.AxiomF = function (parser, name) {
    	    var top = parser.stack.Top();
    	    if (top.kind !== 'proofTree') {
    	        throw new TexError_js_1.default('IllegalProofCommand', 'Proof commands only allowed in prooftree environment.');
    	    }
    	    var line = parseFCenterLine(parser, name);
    	    BussproofsUtil.setProperty(line, 'axiom', true);
    	    top.Push(line);
    	};
    	function parseFCenterLine(parser, name) {
    	    var dollar = parser.GetNext();
    	    if (dollar !== '$') {
    	        throw new TexError_js_1.default('IllegalUseOfCommand', 'Use of %1 does not match it\'s definition.', name);
    	    }
    	    parser.i++;
    	    var axiom = parser.GetUpTo(name, '$');
    	    if (axiom.indexOf('\\fCenter') === -1) {
    	        throw new TexError_js_1.default('IllegalUseOfCommand', 'Missing \\fCenter in %1.', name);
    	    }
    	    var _a = __read(axiom.split('\\fCenter'), 2), prem = _a[0], conc = _a[1];
    	    var premise = (new TexParser_js_1.default(prem, parser.stack.env, parser.configuration)).mml();
    	    var conclusion = (new TexParser_js_1.default(conc, parser.stack.env, parser.configuration)).mml();
    	    var fcenter = (new TexParser_js_1.default('\\fCenter', parser.stack.env, parser.configuration)).mml();
    	    var left = parser.create('node', 'mtd', [premise], {});
    	    var middle = parser.create('node', 'mtd', [fcenter], {});
    	    var right = parser.create('node', 'mtd', [conclusion], {});
    	    var row = parser.create('node', 'mtr', [left, middle, right], {});
    	    var table = parser.create('node', 'mtable', [row], { columnspacing: '.5ex', columnalign: 'center 2' });
    	    BussproofsUtil.setProperty(table, 'sequent', true);
    	    parser.configuration.addNode('sequent', row);
    	    return table;
    	}
    	BussproofsMethods$1.FCenter = function (_parser, _name) { };
    	BussproofsMethods$1.InferenceF = function (parser, name, n) {
    	    var top = parser.stack.Top();
    	    if (top.kind !== 'proofTree') {
    	        throw new TexError_js_1.default('IllegalProofCommand', 'Proof commands only allowed in prooftree environment.');
    	    }
    	    if (top.Size() < n) {
    	        throw new TexError_js_1.default('BadProofTree', 'Proof tree badly specified.');
    	    }
    	    var rootAtTop = top.getProperty('rootAtTop');
    	    var childCount = (n === 1 && !top.Peek()[0].childNodes.length) ? 0 : n;
    	    var children = [];
    	    do {
    	        if (children.length) {
    	            children.unshift(parser.create('node', 'mtd', [], {}));
    	        }
    	        children.unshift(parser.create('node', 'mtd', [top.Pop()], { 'rowalign': (rootAtTop ? 'top' : 'bottom') }));
    	        n--;
    	    } while (n > 0);
    	    var row = parser.create('node', 'mtr', children, {});
    	    var table = parser.create('node', 'mtable', [row], { framespacing: '0 0' });
    	    var conclusion = parseFCenterLine(parser, name);
    	    var style = top.getProperty('currentLine');
    	    if (style !== top.getProperty('line')) {
    	        top.setProperty('currentLine', top.getProperty('line'));
    	    }
    	    var rule = createRule(parser, table, [conclusion], top.getProperty('left'), top.getProperty('right'), style, rootAtTop);
    	    top.setProperty('left', null);
    	    top.setProperty('right', null);
    	    BussproofsUtil.setProperty(rule, 'inference', childCount);
    	    parser.configuration.addNode('inference', rule);
    	    top.Push(rule);
    	};
    	BussproofsMethods.default = BussproofsMethods$1;
    	
    	return BussproofsMethods;
    }

    var hasRequiredBussproofsMappings;

    function requireBussproofsMappings () {
    	if (hasRequiredBussproofsMappings) return BussproofsMappings;
    	hasRequiredBussproofsMappings = 1;
    	var __importDefault = (BussproofsMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(BussproofsMappings, "__esModule", { value: true });
    	var BussproofsMethods_js_1 = __importDefault(requireBussproofsMethods());
    	var ParseMethods_js_1 = __importDefault(requireParseMethods());
    	var SymbolMap_js_1 = requireSymbolMap();
    	new SymbolMap_js_1.CommandMap('Bussproofs-macros', {
    	    AxiomC: 'Axiom',
    	    UnaryInfC: ['Inference', 1],
    	    BinaryInfC: ['Inference', 2],
    	    TrinaryInfC: ['Inference', 3],
    	    QuaternaryInfC: ['Inference', 4],
    	    QuinaryInfC: ['Inference', 5],
    	    RightLabel: ['Label', 'right'],
    	    LeftLabel: ['Label', 'left'],
    	    AXC: 'Axiom',
    	    UIC: ['Inference', 1],
    	    BIC: ['Inference', 2],
    	    TIC: ['Inference', 3],
    	    RL: ['Label', 'right'],
    	    LL: ['Label', 'left'],
    	    noLine: ['SetLine', 'none', false],
    	    singleLine: ['SetLine', 'solid', false],
    	    solidLine: ['SetLine', 'solid', false],
    	    dashedLine: ['SetLine', 'dashed', false],
    	    alwaysNoLine: ['SetLine', 'none', true],
    	    alwaysSingleLine: ['SetLine', 'solid', true],
    	    alwaysSolidLine: ['SetLine', 'solid', true],
    	    alwaysDashedLine: ['SetLine', 'dashed', true],
    	    rootAtTop: ['RootAtTop', true],
    	    alwaysRootAtTop: ['RootAtTop', true],
    	    rootAtBottom: ['RootAtTop', false],
    	    alwaysRootAtBottom: ['RootAtTop', false],
    	    fCenter: 'FCenter',
    	    Axiom: 'AxiomF',
    	    UnaryInf: ['InferenceF', 1],
    	    BinaryInf: ['InferenceF', 2],
    	    TrinaryInf: ['InferenceF', 3],
    	    QuaternaryInf: ['InferenceF', 4],
    	    QuinaryInf: ['InferenceF', 5]
    	}, BussproofsMethods_js_1.default);
    	new SymbolMap_js_1.EnvironmentMap('Bussproofs-environments', ParseMethods_js_1.default.environment, {
    	    prooftree: ['Prooftree', null, false]
    	}, BussproofsMethods_js_1.default);
    	
    	return BussproofsMappings;
    }

    var hasRequiredBussproofsConfiguration;

    function requireBussproofsConfiguration () {
    	if (hasRequiredBussproofsConfiguration) return BussproofsConfiguration;
    	hasRequiredBussproofsConfiguration = 1;
    	var _a;
    	Object.defineProperty(BussproofsConfiguration, "__esModule", { value: true });
    	BussproofsConfiguration.BussproofsConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var BussproofsItems_js_1 = requireBussproofsItems();
    	var BussproofsUtil_js_1 = requireBussproofsUtil();
    	requireBussproofsMappings();
    	BussproofsConfiguration.BussproofsConfiguration = Configuration_js_1.Configuration.create('bussproofs', {
    	    handler: {
    	        macro: ['Bussproofs-macros'],
    	        environment: ['Bussproofs-environments']
    	    },
    	    items: (_a = {},
    	        _a[BussproofsItems_js_1.ProofTreeItem.prototype.kind] = BussproofsItems_js_1.ProofTreeItem,
    	        _a),
    	    preprocessors: [
    	        [BussproofsUtil_js_1.saveDocument, 1]
    	    ],
    	    postprocessors: [
    	        [BussproofsUtil_js_1.clearDocument, 3],
    	        [BussproofsUtil_js_1.makeBsprAttributes, 2],
    	        [BussproofsUtil_js_1.balanceRules, 1]
    	    ]
    	});
    	
    	return BussproofsConfiguration;
    }

    var CancelConfiguration = {};

    var EncloseConfiguration = {};

    var hasRequiredEncloseConfiguration;

    function requireEncloseConfiguration () {
    	if (hasRequiredEncloseConfiguration) return EncloseConfiguration;
    	hasRequiredEncloseConfiguration = 1;
    	(function (exports) {
    		var __importDefault = (EncloseConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.EncloseConfiguration = exports.EncloseMethods = exports.ENCLOSE_OPTIONS = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		exports.ENCLOSE_OPTIONS = {
    		    'data-arrowhead': 1,
    		    color: 1,
    		    mathcolor: 1,
    		    background: 1,
    		    mathbackground: 1,
    		    'data-padding': 1,
    		    'data-thickness': 1
    		};
    		exports.EncloseMethods = {};
    		exports.EncloseMethods.Enclose = function (parser, name) {
    		    var notation = parser.GetArgument(name).replace(/,/g, ' ');
    		    var attr = parser.GetBrackets(name, '');
    		    var math = parser.ParseArg(name);
    		    var def = ParseUtil_js_1.default.keyvalOptions(attr, exports.ENCLOSE_OPTIONS);
    		    def.notation = notation;
    		    parser.Push(parser.create('node', 'menclose', [math], def));
    		};
    		new SymbolMap_js_1.CommandMap('enclose', { enclose: 'Enclose' }, exports.EncloseMethods);
    		exports.EncloseConfiguration = Configuration_js_1.Configuration.create('enclose', { handler: { macro: ['enclose'] } });
    		
    	} (EncloseConfiguration));
    	return EncloseConfiguration;
    }

    var hasRequiredCancelConfiguration;

    function requireCancelConfiguration () {
    	if (hasRequiredCancelConfiguration) return CancelConfiguration;
    	hasRequiredCancelConfiguration = 1;
    	(function (exports) {
    		var __importDefault = (CancelConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.CancelConfiguration = exports.CancelMethods = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var TexConstants_js_1 = requireTexConstants();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var EncloseConfiguration_js_1 = requireEncloseConfiguration();
    		exports.CancelMethods = {};
    		exports.CancelMethods.Cancel = function (parser, name, notation) {
    		    var attr = parser.GetBrackets(name, '');
    		    var math = parser.ParseArg(name);
    		    var def = ParseUtil_js_1.default.keyvalOptions(attr, EncloseConfiguration_js_1.ENCLOSE_OPTIONS);
    		    def['notation'] = notation;
    		    parser.Push(parser.create('node', 'menclose', [math], def));
    		};
    		exports.CancelMethods.CancelTo = function (parser, name) {
    		    var attr = parser.GetBrackets(name, '');
    		    var value = parser.ParseArg(name);
    		    var math = parser.ParseArg(name);
    		    var def = ParseUtil_js_1.default.keyvalOptions(attr, EncloseConfiguration_js_1.ENCLOSE_OPTIONS);
    		    def['notation'] = [TexConstants_js_1.TexConstant.Notation.UPDIAGONALSTRIKE,
    		        TexConstants_js_1.TexConstant.Notation.UPDIAGONALARROW,
    		        TexConstants_js_1.TexConstant.Notation.NORTHEASTARROW].join(' ');
    		    value = parser.create('node', 'mpadded', [value], { depth: '-.1em', height: '+.1em', voffset: '.1em' });
    		    parser.Push(parser.create('node', 'msup', [parser.create('node', 'menclose', [math], def), value]));
    		};
    		new SymbolMap_js_1.CommandMap('cancel', {
    		    cancel: ['Cancel', TexConstants_js_1.TexConstant.Notation.UPDIAGONALSTRIKE],
    		    bcancel: ['Cancel', TexConstants_js_1.TexConstant.Notation.DOWNDIAGONALSTRIKE],
    		    xcancel: ['Cancel', TexConstants_js_1.TexConstant.Notation.UPDIAGONALSTRIKE + ' ' +
    		            TexConstants_js_1.TexConstant.Notation.DOWNDIAGONALSTRIKE],
    		    cancelto: 'CancelTo'
    		}, exports.CancelMethods);
    		exports.CancelConfiguration = Configuration_js_1.Configuration.create('cancel', { handler: { macro: ['cancel'] } });
    		
    	} (CancelConfiguration));
    	return CancelConfiguration;
    }

    var CasesConfiguration = {};

    var EmpheqUtil = {};

    var hasRequiredEmpheqUtil;

    function requireEmpheqUtil () {
    	if (hasRequiredEmpheqUtil) return EmpheqUtil;
    	hasRequiredEmpheqUtil = 1;
    	(function (exports) {
    		var __read = (EmpheqUtil.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __spreadArray = (EmpheqUtil.__spreadArray) || function (to, from, pack) {
    		    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    		        if (ar || !(i in from)) {
    		            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    		            ar[i] = from[i];
    		        }
    		    }
    		    return to.concat(ar || Array.prototype.slice.call(from));
    		};
    		var __values = (EmpheqUtil.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __importDefault = (EmpheqUtil.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.EmpheqUtil = undefined;
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var TexParser_js_1 = __importDefault(requireTexParser());
    		exports.EmpheqUtil = {
    		    environment: function (parser, env, func, args) {
    		        var name = args[0];
    		        var item = parser.itemFactory.create(name + '-begin').setProperties({ name: env, end: name });
    		        parser.Push(func.apply(undefined, __spreadArray([parser, item], __read(args.slice(1)), false)));
    		    },
    		    splitOptions: function (text, allowed) {
    		        if (allowed === undefined) { allowed = null; }
    		        return ParseUtil_js_1.default.keyvalOptions(text, allowed, true);
    		    },
    		    columnCount: function (table) {
    		        var e_1, _a;
    		        var m = 0;
    		        try {
    		            for (var _b = __values(table.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var row = _c.value;
    		                var n = row.childNodes.length - (row.isKind('mlabeledtr') ? 1 : 0);
    		                if (n > m)
    		                    m = n;
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		        return m;
    		    },
    		    cellBlock: function (tex, table, parser, env) {
    		        var e_2, _a;
    		        var mpadded = parser.create('node', 'mpadded', [], { height: 0, depth: 0, voffset: '-1height' });
    		        var result = new TexParser_js_1.default(tex, parser.stack.env, parser.configuration);
    		        var mml = result.mml();
    		        if (env && result.configuration.tags.label) {
    		            result.configuration.tags.currentTag.env = env;
    		            result.configuration.tags.getTag(true);
    		        }
    		        try {
    		            for (var _b = __values((mml.isInferred ? mml.childNodes : [mml])), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var child = _c.value;
    		                mpadded.appendChild(child);
    		            }
    		        }
    		        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_2) throw e_2.error; }
    		        }
    		        mpadded.appendChild(parser.create('node', 'mphantom', [
    		            parser.create('node', 'mpadded', [table], { width: 0 })
    		        ]));
    		        return mpadded;
    		    },
    		    topRowTable: function (original, parser) {
    		        var table = ParseUtil_js_1.default.copyNode(original, parser);
    		        table.setChildren(table.childNodes.slice(0, 1));
    		        table.attributes.set('align', 'baseline 1');
    		        return original.factory.create('mphantom', {}, [parser.create('node', 'mpadded', [table], { width: 0 })]);
    		    },
    		    rowspanCell: function (mtd, tex, table, parser, env) {
    		        mtd.appendChild(parser.create('node', 'mpadded', [
    		            this.cellBlock(tex, ParseUtil_js_1.default.copyNode(table, parser), parser, env),
    		            this.topRowTable(table, parser)
    		        ], { height: 0, depth: 0, voffset: 'height' }));
    		    },
    		    left: function (table, original, left, parser, env) {
    		        var e_3, _a;
    		        if (env === undefined) { env = ''; }
    		        table.attributes.set('columnalign', 'right ' + (table.attributes.get('columnalign') || ''));
    		        table.attributes.set('columnspacing', '0em ' + (table.attributes.get('columnspacing') || ''));
    		        var mtd;
    		        try {
    		            for (var _b = __values(table.childNodes.slice(0).reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var row = _c.value;
    		                mtd = parser.create('node', 'mtd');
    		                row.childNodes.unshift(mtd);
    		                mtd.parent = row;
    		                if (row.isKind('mlabeledtr')) {
    		                    row.childNodes[0] = row.childNodes[1];
    		                    row.childNodes[1] = mtd;
    		                }
    		            }
    		        }
    		        catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_3) throw e_3.error; }
    		        }
    		        this.rowspanCell(mtd, left, original, parser, env);
    		    },
    		    right: function (table, original, right, parser, env) {
    		        if (env === undefined) { env = ''; }
    		        if (table.childNodes.length === 0) {
    		            table.appendChild(parser.create('node', 'mtr'));
    		        }
    		        var m = exports.EmpheqUtil.columnCount(table);
    		        var row = table.childNodes[0];
    		        while (row.childNodes.length < m)
    		            row.appendChild(parser.create('node', 'mtd'));
    		        var mtd = row.appendChild(parser.create('node', 'mtd'));
    		        exports.EmpheqUtil.rowspanCell(mtd, right, original, parser, env);
    		        table.attributes.set('columnalign', (table.attributes.get('columnalign') || '').split(/ /).slice(0, m).join(' ') + ' left');
    		        table.attributes.set('columnspacing', (table.attributes.get('columnspacing') || '').split(/ /).slice(0, m - 1).join(' ') + ' 0em');
    		    },
    		    adjustTable: function (empheq, parser) {
    		        var left = empheq.getProperty('left');
    		        var right = empheq.getProperty('right');
    		        if (left || right) {
    		            var table = empheq.Last;
    		            var original = ParseUtil_js_1.default.copyNode(table, parser);
    		            if (left)
    		                this.left(table, original, left, parser);
    		            if (right)
    		                this.right(table, original, right, parser);
    		        }
    		    },
    		    allowEnv: {
    		        equation: true,
    		        align: true,
    		        gather: true,
    		        flalign: true,
    		        alignat: true,
    		        multline: true
    		    },
    		    checkEnv: function (env) {
    		        return this.allowEnv.hasOwnProperty(env.replace(/\*$/, '')) || false;
    		    }
    		};
    		
    	} (EmpheqUtil));
    	return EmpheqUtil;
    }

    var hasRequiredCasesConfiguration;

    function requireCasesConfiguration () {
    	if (hasRequiredCasesConfiguration) return CasesConfiguration;
    	hasRequiredCasesConfiguration = 1;
    	(function (exports) {
    		var __extends = (CasesConfiguration.__extends) || (function () {
    		    var extendStatics = function (d, b) {
    		        extendStatics = Object.setPrototypeOf ||
    		            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    		            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    		        return extendStatics(d, b);
    		    };
    		    return function (d, b) {
    		        if (typeof b !== "function" && b !== null)
    		            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    		        extendStatics(d, b);
    		        function __() { this.constructor = d; }
    		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    		    };
    		})();
    		var __importDefault = (CasesConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		var _a;
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.CasesConfiguration = exports.CasesMethods = exports.CasesTags = exports.CasesBeginItem = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    		var TexError_js_1 = __importDefault(requireTexError());
    		var BaseItems_js_1 = requireBaseItems();
    		var AmsConfiguration_js_1 = requireAmsConfiguration();
    		var EmpheqUtil_js_1 = requireEmpheqUtil();
    		var CasesBeginItem = (function (_super) {
    		    __extends(CasesBeginItem, _super);
    		    function CasesBeginItem() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    Object.defineProperty(CasesBeginItem.prototype, "kind", {
    		        get: function () {
    		            return 'cases-begin';
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    CasesBeginItem.prototype.checkItem = function (item) {
    		        if (item.isKind('end') && item.getName() === this.getName()) {
    		            if (this.getProperty('end')) {
    		                this.setProperty('end', false);
    		                return [[], true];
    		            }
    		        }
    		        return _super.prototype.checkItem.call(this, item);
    		    };
    		    return CasesBeginItem;
    		}(BaseItems_js_1.BeginItem));
    		exports.CasesBeginItem = CasesBeginItem;
    		var CasesTags = (function (_super) {
    		    __extends(CasesTags, _super);
    		    function CasesTags() {
    		        var _this = _super !== null && _super.apply(this, arguments) || this;
    		        _this.subcounter = 0;
    		        return _this;
    		    }
    		    CasesTags.prototype.start = function (env, taggable, defaultTags) {
    		        this.subcounter = 0;
    		        _super.prototype.start.call(this, env, taggable, defaultTags);
    		    };
    		    CasesTags.prototype.autoTag = function () {
    		        if (this.currentTag.tag != null)
    		            return;
    		        if (this.currentTag.env === 'subnumcases') {
    		            if (this.subcounter === 0)
    		                this.counter++;
    		            this.subcounter++;
    		            this.tag(this.formatNumber(this.counter, this.subcounter), false);
    		        }
    		        else {
    		            if (this.subcounter === 0 || this.currentTag.env !== 'numcases-left')
    		                this.counter++;
    		            this.tag(this.formatNumber(this.counter), false);
    		        }
    		    };
    		    CasesTags.prototype.formatNumber = function (n, m) {
    		        if (m === undefined) { m = null; }
    		        return n.toString() + (m === null ? '' : String.fromCharCode(0x60 + m));
    		    };
    		    return CasesTags;
    		}(AmsConfiguration_js_1.AmsTags));
    		exports.CasesTags = CasesTags;
    		exports.CasesMethods = {
    		    NumCases: function (parser, begin) {
    		        if (parser.stack.env.closing === begin.getName()) {
    		            delete parser.stack.env.closing;
    		            parser.Push(parser.itemFactory.create('end').setProperty('name', begin.getName()));
    		            var cases = parser.stack.Top();
    		            var table = cases.Last;
    		            var original = ParseUtil_js_1.default.copyNode(table, parser);
    		            var left = cases.getProperty('left');
    		            EmpheqUtil_js_1.EmpheqUtil.left(table, original, left + '\\empheqlbrace\\,', parser, 'numcases-left');
    		            parser.Push(parser.itemFactory.create('end').setProperty('name', begin.getName()));
    		            return null;
    		        }
    		        else {
    		            var left = parser.GetArgument('\\begin{' + begin.getName() + '}');
    		            begin.setProperty('left', left);
    		            var array = BaseMethods_js_1.default.EqnArray(parser, begin, true, true, 'll');
    		            array.arraydef.displaystyle = false;
    		            array.arraydef.rowspacing = '.2em';
    		            array.setProperty('numCases', true);
    		            parser.Push(begin);
    		            return array;
    		        }
    		    },
    		    Entry: function (parser, name) {
    		        if (!parser.stack.Top().getProperty('numCases')) {
    		            return BaseMethods_js_1.default.Entry(parser, name);
    		        }
    		        parser.Push(parser.itemFactory.create('cell').setProperties({ isEntry: true, name: name }));
    		        var tex = parser.string;
    		        var braces = 0, i = parser.i, m = tex.length;
    		        while (i < m) {
    		            var c = tex.charAt(i);
    		            if (c === '{') {
    		                braces++;
    		                i++;
    		            }
    		            else if (c === '}') {
    		                if (braces === 0) {
    		                    break;
    		                }
    		                else {
    		                    braces--;
    		                    i++;
    		                }
    		            }
    		            else if (c === '&' && braces === 0) {
    		                throw new TexError_js_1.default('ExtraCasesAlignTab', 'Extra alignment tab in text for numcase environment');
    		            }
    		            else if (c === '\\' && braces === 0) {
    		                var cs = (tex.slice(i + 1).match(/^[a-z]+|./i) || [])[0];
    		                if (cs === '\\' || cs === 'cr' || cs === 'end' || cs === 'label') {
    		                    break;
    		                }
    		                else {
    		                    i += cs.length;
    		                }
    		            }
    		            else {
    		                i++;
    		            }
    		        }
    		        var text = tex.substr(parser.i, i - parser.i).replace(/^\s*/, '');
    		        parser.PushAll(ParseUtil_js_1.default.internalMath(parser, text, 0));
    		        parser.i = i;
    		    }
    		};
    		new SymbolMap_js_1.EnvironmentMap('cases-env', EmpheqUtil_js_1.EmpheqUtil.environment, {
    		    numcases: ['NumCases', 'cases'],
    		    subnumcases: ['NumCases', 'cases']
    		}, exports.CasesMethods);
    		new SymbolMap_js_1.MacroMap('cases-macros', {
    		    '&': 'Entry'
    		}, exports.CasesMethods);
    		exports.CasesConfiguration = Configuration_js_1.Configuration.create('cases', {
    		    handler: {
    		        environment: ['cases-env'],
    		        character: ['cases-macros']
    		    },
    		    items: (_a = {},
    		        _a[CasesBeginItem.prototype.kind] = CasesBeginItem,
    		        _a),
    		    tags: { 'cases': CasesTags }
    		});
    		
    	} (CasesConfiguration));
    	return CasesConfiguration;
    }

    var CenternotConfiguration = {};

    var hasRequiredCenternotConfiguration;

    function requireCenternotConfiguration () {
    	if (hasRequiredCenternotConfiguration) return CenternotConfiguration;
    	hasRequiredCenternotConfiguration = 1;
    	var __values = (CenternotConfiguration.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __importDefault = (CenternotConfiguration.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(CenternotConfiguration, "__esModule", { value: true });
    	CenternotConfiguration.CenternotConfiguration = CenternotConfiguration.filterCenterOver = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var SymbolMap_js_1 = requireSymbolMap();
    	var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    	new SymbolMap_js_1.CommandMap('centernot', {
    	    centerOver: 'CenterOver',
    	    centernot: ['Macro', '\\centerOver{#1}{{\u29F8}}', 1]
    	}, {
    	    CenterOver: function (parser, name) {
    	        var arg = '{' + parser.GetArgument(name) + '}';
    	        var over = parser.ParseArg(name);
    	        var base = new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml();
    	        var mml = parser.create('node', 'TeXAtom', [
    	            new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml(),
    	            parser.create('node', 'mpadded', [
    	                parser.create('node', 'mpadded', [over], { width: 0, lspace: '-.5width' }),
    	                parser.create('node', 'mphantom', [base])
    	            ], { width: 0, lspace: '-.5width' })
    	        ]);
    	        parser.configuration.addNode('centerOver', base);
    	        parser.Push(mml);
    	    },
    	    Macro: BaseMethods_js_1.default.Macro
    	});
    	function filterCenterOver(_a) {
    	    var e_1, _b;
    	    var data = _a.data;
    	    try {
    	        for (var _c = __values(data.getList('centerOver')), _d = _c.next(); !_d.done; _d = _c.next()) {
    	            var base = _d.value;
    	            var texClass = NodeUtil_js_1.default.getTexClass(base.childNodes[0].childNodes[0]);
    	            if (texClass !== null) {
    	                NodeUtil_js_1.default.setProperties(base.parent.parent.parent.parent.parent.parent, { texClass: texClass });
    	            }
    	        }
    	    }
    	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	    finally {
    	        try {
    	            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
    	        }
    	        finally { if (e_1) throw e_1.error; }
    	    }
    	}
    	CenternotConfiguration.filterCenterOver = filterCenterOver;
    	CenternotConfiguration.CenternotConfiguration = Configuration_js_1.Configuration.create('centernot', {
    	    handler: { macro: ['centernot'] },
    	    postprocessors: [filterCenterOver]
    	});
    	
    	return CenternotConfiguration;
    }

    var ColorConfiguration = {};

    var ColorMethods = {};

    var hasRequiredColorMethods;

    function requireColorMethods () {
    	if (hasRequiredColorMethods) return ColorMethods;
    	hasRequiredColorMethods = 1;
    	(function (exports) {
    		var __importDefault = (ColorMethods.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.ColorMethods = undefined;
    		var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		function padding(colorPadding) {
    		    var pad = "+".concat(colorPadding);
    		    var unit = colorPadding.replace(/^.*?([a-z]*)$/, '$1');
    		    var pad2 = 2 * parseFloat(pad);
    		    return {
    		        width: "+".concat(pad2).concat(unit),
    		        height: pad,
    		        depth: pad,
    		        lspace: colorPadding,
    		    };
    		}
    		exports.ColorMethods = {};
    		exports.ColorMethods.Color = function (parser, name) {
    		    var model = parser.GetBrackets(name, '');
    		    var colorDef = parser.GetArgument(name);
    		    var colorModel = parser.configuration.packageData.get('color').model;
    		    var color = colorModel.getColor(model, colorDef);
    		    var style = parser.itemFactory.create('style')
    		        .setProperties({ styles: { mathcolor: color } });
    		    parser.stack.env['color'] = color;
    		    parser.Push(style);
    		};
    		exports.ColorMethods.TextColor = function (parser, name) {
    		    var model = parser.GetBrackets(name, '');
    		    var colorDef = parser.GetArgument(name);
    		    var colorModel = parser.configuration.packageData.get('color').model;
    		    var color = colorModel.getColor(model, colorDef);
    		    var old = parser.stack.env['color'];
    		    parser.stack.env['color'] = color;
    		    var math = parser.ParseArg(name);
    		    if (old) {
    		        parser.stack.env['color'] = old;
    		    }
    		    else {
    		        delete parser.stack.env['color'];
    		    }
    		    var node = parser.create('node', 'mstyle', [math], { mathcolor: color });
    		    parser.Push(node);
    		};
    		exports.ColorMethods.DefineColor = function (parser, name) {
    		    var cname = parser.GetArgument(name);
    		    var model = parser.GetArgument(name);
    		    var def = parser.GetArgument(name);
    		    var colorModel = parser.configuration.packageData.get('color').model;
    		    colorModel.defineColor(model, cname, def);
    		};
    		exports.ColorMethods.ColorBox = function (parser, name) {
    		    var cname = parser.GetArgument(name);
    		    var math = ParseUtil_js_1.default.internalMath(parser, parser.GetArgument(name));
    		    var colorModel = parser.configuration.packageData.get('color').model;
    		    var node = parser.create('node', 'mpadded', math, {
    		        mathbackground: colorModel.getColor('named', cname)
    		    });
    		    NodeUtil_js_1.default.setProperties(node, padding(parser.options.color.padding));
    		    parser.Push(node);
    		};
    		exports.ColorMethods.FColorBox = function (parser, name) {
    		    var fname = parser.GetArgument(name);
    		    var cname = parser.GetArgument(name);
    		    var math = ParseUtil_js_1.default.internalMath(parser, parser.GetArgument(name));
    		    var options = parser.options.color;
    		    var colorModel = parser.configuration.packageData.get('color').model;
    		    var node = parser.create('node', 'mpadded', math, {
    		        mathbackground: colorModel.getColor('named', cname),
    		        style: "border: ".concat(options.borderWidth, " solid ").concat(colorModel.getColor('named', fname))
    		    });
    		    NodeUtil_js_1.default.setProperties(node, padding(options.padding));
    		    parser.Push(node);
    		};
    		
    	} (ColorMethods));
    	return ColorMethods;
    }

    var ColorUtil = {};

    var ColorConstants = {};

    var hasRequiredColorConstants;

    function requireColorConstants () {
    	if (hasRequiredColorConstants) return ColorConstants;
    	hasRequiredColorConstants = 1;
    	Object.defineProperty(ColorConstants, "__esModule", { value: true });
    	ColorConstants.COLORS = undefined;
    	ColorConstants.COLORS = new Map([
    	    ['Apricot', '#FBB982'],
    	    ['Aquamarine', '#00B5BE'],
    	    ['Bittersweet', '#C04F17'],
    	    ['Black', '#221E1F'],
    	    ['Blue', '#2D2F92'],
    	    ['BlueGreen', '#00B3B8'],
    	    ['BlueViolet', '#473992'],
    	    ['BrickRed', '#B6321C'],
    	    ['Brown', '#792500'],
    	    ['BurntOrange', '#F7921D'],
    	    ['CadetBlue', '#74729A'],
    	    ['CarnationPink', '#F282B4'],
    	    ['Cerulean', '#00A2E3'],
    	    ['CornflowerBlue', '#41B0E4'],
    	    ['Cyan', '#00AEEF'],
    	    ['Dandelion', '#FDBC42'],
    	    ['DarkOrchid', '#A4538A'],
    	    ['Emerald', '#00A99D'],
    	    ['ForestGreen', '#009B55'],
    	    ['Fuchsia', '#8C368C'],
    	    ['Goldenrod', '#FFDF42'],
    	    ['Gray', '#949698'],
    	    ['Green', '#00A64F'],
    	    ['GreenYellow', '#DFE674'],
    	    ['JungleGreen', '#00A99A'],
    	    ['Lavender', '#F49EC4'],
    	    ['LimeGreen', '#8DC73E'],
    	    ['Magenta', '#EC008C'],
    	    ['Mahogany', '#A9341F'],
    	    ['Maroon', '#AF3235'],
    	    ['Melon', '#F89E7B'],
    	    ['MidnightBlue', '#006795'],
    	    ['Mulberry', '#A93C93'],
    	    ['NavyBlue', '#006EB8'],
    	    ['OliveGreen', '#3C8031'],
    	    ['Orange', '#F58137'],
    	    ['OrangeRed', '#ED135A'],
    	    ['Orchid', '#AF72B0'],
    	    ['Peach', '#F7965A'],
    	    ['Periwinkle', '#7977B8'],
    	    ['PineGreen', '#008B72'],
    	    ['Plum', '#92268F'],
    	    ['ProcessBlue', '#00B0F0'],
    	    ['Purple', '#99479B'],
    	    ['RawSienna', '#974006'],
    	    ['Red', '#ED1B23'],
    	    ['RedOrange', '#F26035'],
    	    ['RedViolet', '#A1246B'],
    	    ['Rhodamine', '#EF559F'],
    	    ['RoyalBlue', '#0071BC'],
    	    ['RoyalPurple', '#613F99'],
    	    ['RubineRed', '#ED017D'],
    	    ['Salmon', '#F69289'],
    	    ['SeaGreen', '#3FBC9D'],
    	    ['Sepia', '#671800'],
    	    ['SkyBlue', '#46C5DD'],
    	    ['SpringGreen', '#C6DC67'],
    	    ['Tan', '#DA9D76'],
    	    ['TealBlue', '#00AEB3'],
    	    ['Thistle', '#D883B7'],
    	    ['Turquoise', '#00B4CE'],
    	    ['Violet', '#58429B'],
    	    ['VioletRed', '#EF58A0'],
    	    ['White', '#FFFFFF'],
    	    ['WildStrawberry', '#EE2967'],
    	    ['Yellow', '#FFF200'],
    	    ['YellowGreen', '#98CC70'],
    	    ['YellowOrange', '#FAA21A'],
    	]);
    	
    	return ColorConstants;
    }

    var hasRequiredColorUtil;

    function requireColorUtil () {
    	if (hasRequiredColorUtil) return ColorUtil;
    	hasRequiredColorUtil = 1;
    	var __values = (ColorUtil.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __importDefault = (ColorUtil.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(ColorUtil, "__esModule", { value: true });
    	ColorUtil.ColorModel = undefined;
    	var TexError_js_1 = __importDefault(requireTexError());
    	var ColorConstants_js_1 = requireColorConstants();
    	var ColorModelProcessors = new Map();
    	var ColorModel = (function () {
    	    function ColorModel() {
    	        this.userColors = new Map();
    	    }
    	    ColorModel.prototype.normalizeColor = function (model, def) {
    	        if (!model || model === 'named') {
    	            return def;
    	        }
    	        if (ColorModelProcessors.has(model)) {
    	            var modelProcessor = ColorModelProcessors.get(model);
    	            return modelProcessor(def);
    	        }
    	        throw new TexError_js_1.default('UndefinedColorModel', 'Color model \'%1\' not defined', model);
    	    };
    	    ColorModel.prototype.getColor = function (model, def) {
    	        if (!model || model === 'named') {
    	            return this.getColorByName(def);
    	        }
    	        return this.normalizeColor(model, def);
    	    };
    	    ColorModel.prototype.getColorByName = function (name) {
    	        if (this.userColors.has(name)) {
    	            return this.userColors.get(name);
    	        }
    	        if (ColorConstants_js_1.COLORS.has(name)) {
    	            return ColorConstants_js_1.COLORS.get(name);
    	        }
    	        return name;
    	    };
    	    ColorModel.prototype.defineColor = function (model, name, def) {
    	        var normalized = this.normalizeColor(model, def);
    	        this.userColors.set(name, normalized);
    	    };
    	    return ColorModel;
    	}());
    	ColorUtil.ColorModel = ColorModel;
    	ColorModelProcessors.set('rgb', function (rgb) {
    	    var e_1, _a;
    	    var rgbParts = rgb.trim().split(/\s*,\s*/);
    	    var RGB = '#';
    	    if (rgbParts.length !== 3) {
    	        throw new TexError_js_1.default('ModelArg1', 'Color values for the %1 model require 3 numbers', 'rgb');
    	    }
    	    try {
    	        for (var rgbParts_1 = __values(rgbParts), rgbParts_1_1 = rgbParts_1.next(); !rgbParts_1_1.done; rgbParts_1_1 = rgbParts_1.next()) {
    	            var rgbPart = rgbParts_1_1.value;
    	            if (!rgbPart.match(/^(\d+(\.\d*)?|\.\d+)$/)) {
    	                throw new TexError_js_1.default('InvalidDecimalNumber', 'Invalid decimal number');
    	            }
    	            var n = parseFloat(rgbPart);
    	            if (n < 0 || n > 1) {
    	                throw new TexError_js_1.default('ModelArg2', 'Color values for the %1 model must be between %2 and %3', 'rgb', '0', '1');
    	            }
    	            var pn = Math.floor(n * 255).toString(16);
    	            if (pn.length < 2) {
    	                pn = '0' + pn;
    	            }
    	            RGB += pn;
    	        }
    	    }
    	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	    finally {
    	        try {
    	            if (rgbParts_1_1 && !rgbParts_1_1.done && (_a = rgbParts_1.return)) _a.call(rgbParts_1);
    	        }
    	        finally { if (e_1) throw e_1.error; }
    	    }
    	    return RGB;
    	});
    	ColorModelProcessors.set('RGB', function (rgb) {
    	    var e_2, _a;
    	    var rgbParts = rgb.trim().split(/\s*,\s*/);
    	    var RGB = '#';
    	    if (rgbParts.length !== 3) {
    	        throw new TexError_js_1.default('ModelArg1', 'Color values for the %1 model require 3 numbers', 'RGB');
    	    }
    	    try {
    	        for (var rgbParts_2 = __values(rgbParts), rgbParts_2_1 = rgbParts_2.next(); !rgbParts_2_1.done; rgbParts_2_1 = rgbParts_2.next()) {
    	            var rgbPart = rgbParts_2_1.value;
    	            if (!rgbPart.match(/^\d+$/)) {
    	                throw new TexError_js_1.default('InvalidNumber', 'Invalid number');
    	            }
    	            var n = parseInt(rgbPart);
    	            if (n > 255) {
    	                throw new TexError_js_1.default('ModelArg2', 'Color values for the %1 model must be between %2 and %3', 'RGB', '0', '255');
    	            }
    	            var pn = n.toString(16);
    	            if (pn.length < 2) {
    	                pn = '0' + pn;
    	            }
    	            RGB += pn;
    	        }
    	    }
    	    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	    finally {
    	        try {
    	            if (rgbParts_2_1 && !rgbParts_2_1.done && (_a = rgbParts_2.return)) _a.call(rgbParts_2);
    	        }
    	        finally { if (e_2) throw e_2.error; }
    	    }
    	    return RGB;
    	});
    	ColorModelProcessors.set('gray', function (gray) {
    	    if (!gray.match(/^\s*(\d+(\.\d*)?|\.\d+)\s*$/)) {
    	        throw new TexError_js_1.default('InvalidDecimalNumber', 'Invalid decimal number');
    	    }
    	    var n = parseFloat(gray);
    	    if (n < 0 || n > 1) {
    	        throw new TexError_js_1.default('ModelArg2', 'Color values for the %1 model must be between %2 and %3', 'gray', '0', '1');
    	    }
    	    var pn = Math.floor(n * 255).toString(16);
    	    if (pn.length < 2) {
    	        pn = '0' + pn;
    	    }
    	    return "#".concat(pn).concat(pn).concat(pn);
    	});
    	
    	return ColorUtil;
    }

    var hasRequiredColorConfiguration;

    function requireColorConfiguration () {
    	if (hasRequiredColorConfiguration) return ColorConfiguration;
    	hasRequiredColorConfiguration = 1;
    	Object.defineProperty(ColorConfiguration, "__esModule", { value: true });
    	ColorConfiguration.ColorConfiguration = undefined;
    	var SymbolMap_js_1 = requireSymbolMap();
    	var Configuration_js_1 = requireConfiguration();
    	var ColorMethods_js_1 = requireColorMethods();
    	var ColorUtil_js_1 = requireColorUtil();
    	new SymbolMap_js_1.CommandMap('color', {
    	    color: 'Color',
    	    textcolor: 'TextColor',
    	    definecolor: 'DefineColor',
    	    colorbox: 'ColorBox',
    	    fcolorbox: 'FColorBox'
    	}, ColorMethods_js_1.ColorMethods);
    	var config = function (_config, jax) {
    	    jax.parseOptions.packageData.set('color', { model: new ColorUtil_js_1.ColorModel() });
    	};
    	ColorConfiguration.ColorConfiguration = Configuration_js_1.Configuration.create('color', {
    	    handler: {
    	        macro: ['color'],
    	    },
    	    options: {
    	        color: {
    	            padding: '5px',
    	            borderWidth: '2px'
    	        }
    	    },
    	    config: config
    	});
    	
    	return ColorConfiguration;
    }

    var ColorV2Configuration = {};

    var hasRequiredColorV2Configuration;

    function requireColorV2Configuration () {
    	if (hasRequiredColorV2Configuration) return ColorV2Configuration;
    	hasRequiredColorV2Configuration = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.ColorConfiguration = exports.ColorV2Methods = undefined;
    		var SymbolMap_js_1 = requireSymbolMap();
    		var Configuration_js_1 = requireConfiguration();
    		exports.ColorV2Methods = {
    		    Color: function (parser, name) {
    		        var color = parser.GetArgument(name);
    		        var old = parser.stack.env['color'];
    		        parser.stack.env['color'] = color;
    		        var math = parser.ParseArg(name);
    		        if (old) {
    		            parser.stack.env['color'] = old;
    		        }
    		        else {
    		            delete parser.stack.env['color'];
    		        }
    		        var node = parser.create('node', 'mstyle', [math], { mathcolor: color });
    		        parser.Push(node);
    		    }
    		};
    		new SymbolMap_js_1.CommandMap('colorv2', { color: 'Color' }, exports.ColorV2Methods);
    		exports.ColorConfiguration = Configuration_js_1.Configuration.create('colorv2', { handler: { macro: ['colorv2'] } });
    		
    	} (ColorV2Configuration));
    	return ColorV2Configuration;
    }

    var ColortblConfiguration = {};

    var hasRequiredColortblConfiguration;

    function requireColortblConfiguration () {
    	if (hasRequiredColortblConfiguration) return ColortblConfiguration;
    	hasRequiredColortblConfiguration = 1;
    	var __extends = (ColortblConfiguration.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __importDefault = (ColortblConfiguration.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(ColortblConfiguration, "__esModule", { value: true });
    	ColortblConfiguration.ColortblConfiguration = ColortblConfiguration.ColorArrayItem = undefined;
    	var BaseItems_js_1 = requireBaseItems();
    	var Configuration_js_1 = requireConfiguration();
    	var SymbolMap_js_1 = requireSymbolMap();
    	var TexError_js_1 = __importDefault(requireTexError());
    	var ColorArrayItem = (function (_super) {
    	    __extends(ColorArrayItem, _super);
    	    function ColorArrayItem() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.color = {
    	            cell: '',
    	            row: '',
    	            col: []
    	        };
    	        _this.hasColor = false;
    	        return _this;
    	    }
    	    ColorArrayItem.prototype.EndEntry = function () {
    	        _super.prototype.EndEntry.call(this);
    	        var cell = this.row[this.row.length - 1];
    	        var color = this.color.cell || this.color.row || this.color.col[this.row.length - 1];
    	        if (color) {
    	            cell.attributes.set('mathbackground', color);
    	            this.color.cell = '';
    	            this.hasColor = true;
    	        }
    	    };
    	    ColorArrayItem.prototype.EndRow = function () {
    	        _super.prototype.EndRow.call(this);
    	        this.color.row = '';
    	    };
    	    ColorArrayItem.prototype.createMml = function () {
    	        var mml = _super.prototype.createMml.call(this);
    	        var table = (mml.isKind('mrow') ? mml.childNodes[1] : mml);
    	        if (table.isKind('menclose')) {
    	            table = table.childNodes[0].childNodes[0];
    	        }
    	        if (this.hasColor && table.attributes.get('frame') === 'none') {
    	            table.attributes.set('frame', '');
    	        }
    	        return mml;
    	    };
    	    return ColorArrayItem;
    	}(BaseItems_js_1.ArrayItem));
    	ColortblConfiguration.ColorArrayItem = ColorArrayItem;
    	new SymbolMap_js_1.CommandMap('colortbl', {
    	    cellcolor: ['TableColor', 'cell'],
    	    rowcolor: ['TableColor', 'row'],
    	    columncolor: ['TableColor', 'col']
    	}, {
    	    TableColor: function (parser, name, type) {
    	        var lookup = parser.configuration.packageData.get('color').model;
    	        var model = parser.GetBrackets(name, '');
    	        var color = lookup.getColor(model, parser.GetArgument(name));
    	        var top = parser.stack.Top();
    	        if (!(top instanceof ColorArrayItem)) {
    	            throw new TexError_js_1.default('UnsupportedTableColor', 'Unsupported use of %1', parser.currentCS);
    	        }
    	        if (type === 'col') {
    	            if (top.table.length) {
    	                throw new TexError_js_1.default('ColumnColorNotTop', '%1 must be in the top row', name);
    	            }
    	            top.color.col[top.row.length] = color;
    	            if (parser.GetBrackets(name, '')) {
    	                parser.GetBrackets(name, '');
    	            }
    	        }
    	        else {
    	            top.color[type] = color;
    	            if (type === 'row' && (top.Size() || top.row.length)) {
    	                throw new TexError_js_1.default('RowColorNotFirst', '%1 must be at the beginning of a row', name);
    	            }
    	        }
    	    }
    	});
    	var config = function (config, jax) {
    	    if (!jax.parseOptions.packageData.has('color')) {
    	        Configuration_js_1.ConfigurationHandler.get('color').config(config, jax);
    	    }
    	};
    	ColortblConfiguration.ColortblConfiguration = Configuration_js_1.Configuration.create('colortbl', {
    	    handler: { macro: ['colortbl'] },
    	    items: { 'array': ColorArrayItem },
    	    priority: 10,
    	    config: [config, 10]
    	});
    	
    	return ColortblConfiguration;
    }

    var ConfigMacrosConfiguration = {};

    var NewcommandMethods = {};

    var NewcommandUtil = {};

    var hasRequiredNewcommandUtil;

    function requireNewcommandUtil () {
    	if (hasRequiredNewcommandUtil) return NewcommandUtil;
    	hasRequiredNewcommandUtil = 1;
    	var __importDefault = (NewcommandUtil.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(NewcommandUtil, "__esModule", { value: true });
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var Symbol_js_1 = require_Symbol();
    	var NewcommandUtil$1;
    	(function (NewcommandUtil) {
    	    function disassembleSymbol(name, symbol) {
    	        var newArgs = [name, symbol.char];
    	        if (symbol.attributes) {
    	            for (var key in symbol.attributes) {
    	                newArgs.push(key);
    	                newArgs.push(symbol.attributes[key]);
    	            }
    	        }
    	        return newArgs;
    	    }
    	    NewcommandUtil.disassembleSymbol = disassembleSymbol;
    	    function assembleSymbol(args) {
    	        var name = args[0];
    	        var char = args[1];
    	        var attrs = {};
    	        for (var i = 2; i < args.length; i = i + 2) {
    	            attrs[args[i]] = args[i + 1];
    	        }
    	        return new Symbol_js_1.Symbol(name, char, attrs);
    	    }
    	    NewcommandUtil.assembleSymbol = assembleSymbol;
    	    function GetCSname(parser, cmd) {
    	        var c = parser.GetNext();
    	        if (c !== '\\') {
    	            throw new TexError_js_1.default('MissingCS', '%1 must be followed by a control sequence', cmd);
    	        }
    	        var cs = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(cmd));
    	        return cs.substr(1);
    	    }
    	    NewcommandUtil.GetCSname = GetCSname;
    	    function GetCsNameArgument(parser, name) {
    	        var cs = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(name));
    	        if (cs.charAt(0) === '\\') {
    	            cs = cs.substr(1);
    	        }
    	        if (!cs.match(/^(.|[a-z]+)$/i)) {
    	            throw new TexError_js_1.default('IllegalControlSequenceName', 'Illegal control sequence name for %1', name);
    	        }
    	        return cs;
    	    }
    	    NewcommandUtil.GetCsNameArgument = GetCsNameArgument;
    	    function GetArgCount(parser, name) {
    	        var n = parser.GetBrackets(name);
    	        if (n) {
    	            n = ParseUtil_js_1.default.trimSpaces(n);
    	            if (!n.match(/^[0-9]+$/)) {
    	                throw new TexError_js_1.default('IllegalParamNumber', 'Illegal number of parameters specified in %1', name);
    	            }
    	        }
    	        return n;
    	    }
    	    NewcommandUtil.GetArgCount = GetArgCount;
    	    function GetTemplate(parser, cmd, cs) {
    	        var c = parser.GetNext();
    	        var params = [];
    	        var n = 0;
    	        var i = parser.i;
    	        while (parser.i < parser.string.length) {
    	            c = parser.GetNext();
    	            if (c === '#') {
    	                if (i !== parser.i) {
    	                    params[n] = parser.string.substr(i, parser.i - i);
    	                }
    	                c = parser.string.charAt(++parser.i);
    	                if (!c.match(/^[1-9]$/)) {
    	                    throw new TexError_js_1.default('CantUseHash2', 'Illegal use of # in template for %1', cs);
    	                }
    	                if (parseInt(c) !== ++n) {
    	                    throw new TexError_js_1.default('SequentialParam', 'Parameters for %1 must be numbered sequentially', cs);
    	                }
    	                i = parser.i + 1;
    	            }
    	            else if (c === '{') {
    	                if (i !== parser.i) {
    	                    params[n] = parser.string.substr(i, parser.i - i);
    	                }
    	                if (params.length > 0) {
    	                    return [n.toString()].concat(params);
    	                }
    	                else {
    	                    return n;
    	                }
    	            }
    	            parser.i++;
    	        }
    	        throw new TexError_js_1.default('MissingReplacementString', 'Missing replacement string for definition of %1', cmd);
    	    }
    	    NewcommandUtil.GetTemplate = GetTemplate;
    	    function GetParameter(parser, name, param) {
    	        if (param == null) {
    	            return parser.GetArgument(name);
    	        }
    	        var i = parser.i;
    	        var j = 0;
    	        var hasBraces = 0;
    	        while (parser.i < parser.string.length) {
    	            var c = parser.string.charAt(parser.i);
    	            if (c === '{') {
    	                if (parser.i === i) {
    	                    hasBraces = 1;
    	                }
    	                parser.GetArgument(name);
    	                j = parser.i - i;
    	            }
    	            else if (MatchParam(parser, param)) {
    	                if (hasBraces) {
    	                    i++;
    	                    j -= 2;
    	                }
    	                return parser.string.substr(i, j);
    	            }
    	            else if (c === '\\') {
    	                parser.i++;
    	                j++;
    	                hasBraces = 0;
    	                var match = parser.string.substr(parser.i).match(/[a-z]+|./i);
    	                if (match) {
    	                    parser.i += match[0].length;
    	                    j = parser.i - i;
    	                }
    	            }
    	            else {
    	                parser.i++;
    	                j++;
    	                hasBraces = 0;
    	            }
    	        }
    	        throw new TexError_js_1.default('RunawayArgument', 'Runaway argument for %1?', name);
    	    }
    	    NewcommandUtil.GetParameter = GetParameter;
    	    function MatchParam(parser, param) {
    	        if (parser.string.substr(parser.i, param.length) !== param) {
    	            return 0;
    	        }
    	        if (param.match(/\\[a-z]+$/i) &&
    	            parser.string.charAt(parser.i + param.length).match(/[a-z]/i)) {
    	            return 0;
    	        }
    	        parser.i += param.length;
    	        return 1;
    	    }
    	    NewcommandUtil.MatchParam = MatchParam;
    	    function addDelimiter(parser, cs, char, attr) {
    	        var handlers = parser.configuration.handlers;
    	        var handler = handlers.retrieve(NewcommandUtil.NEW_DELIMITER);
    	        handler.add(cs, new Symbol_js_1.Symbol(cs, char, attr));
    	    }
    	    NewcommandUtil.addDelimiter = addDelimiter;
    	    function addMacro(parser, cs, func, attr, symbol) {
    	        if (symbol === undefined) { symbol = ''; }
    	        var handlers = parser.configuration.handlers;
    	        var handler = handlers.retrieve(NewcommandUtil.NEW_COMMAND);
    	        handler.add(cs, new Symbol_js_1.Macro(symbol ? symbol : cs, func, attr));
    	    }
    	    NewcommandUtil.addMacro = addMacro;
    	    function addEnvironment(parser, env, func, attr) {
    	        var handlers = parser.configuration.handlers;
    	        var handler = handlers.retrieve(NewcommandUtil.NEW_ENVIRONMENT);
    	        handler.add(env, new Symbol_js_1.Macro(env, func, attr));
    	    }
    	    NewcommandUtil.addEnvironment = addEnvironment;
    	    NewcommandUtil.NEW_DELIMITER = 'new-Delimiter';
    	    NewcommandUtil.NEW_COMMAND = 'new-Command';
    	    NewcommandUtil.NEW_ENVIRONMENT = 'new-Environment';
    	})(NewcommandUtil$1 || (NewcommandUtil$1 = {}));
    	NewcommandUtil.default = NewcommandUtil$1;
    	
    	return NewcommandUtil;
    }

    var hasRequiredNewcommandMethods;

    function requireNewcommandMethods () {
    	if (hasRequiredNewcommandMethods) return NewcommandMethods;
    	hasRequiredNewcommandMethods = 1;
    	var __createBinding = (NewcommandMethods.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (NewcommandMethods.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (NewcommandMethods.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __importDefault = (NewcommandMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(NewcommandMethods, "__esModule", { value: true });
    	var TexError_js_1 = __importDefault(requireTexError());
    	var sm = __importStar(requireSymbolMap());
    	var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var NewcommandUtil_js_1 = __importDefault(requireNewcommandUtil());
    	var NewcommandMethods$1 = {};
    	NewcommandMethods$1.NewCommand = function (parser, name) {
    	    var cs = NewcommandUtil_js_1.default.GetCsNameArgument(parser, name);
    	    var n = NewcommandUtil_js_1.default.GetArgCount(parser, name);
    	    var opt = parser.GetBrackets(name);
    	    var def = parser.GetArgument(name);
    	    NewcommandUtil_js_1.default.addMacro(parser, cs, NewcommandMethods$1.Macro, [def, n, opt]);
    	};
    	NewcommandMethods$1.NewEnvironment = function (parser, name) {
    	    var env = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(name));
    	    var n = NewcommandUtil_js_1.default.GetArgCount(parser, name);
    	    var opt = parser.GetBrackets(name);
    	    var bdef = parser.GetArgument(name);
    	    var edef = parser.GetArgument(name);
    	    NewcommandUtil_js_1.default.addEnvironment(parser, env, NewcommandMethods$1.BeginEnv, [true, bdef, edef, n, opt]);
    	};
    	NewcommandMethods$1.MacroDef = function (parser, name) {
    	    var cs = NewcommandUtil_js_1.default.GetCSname(parser, name);
    	    var params = NewcommandUtil_js_1.default.GetTemplate(parser, name, '\\' + cs);
    	    var def = parser.GetArgument(name);
    	    !(params instanceof Array) ?
    	        NewcommandUtil_js_1.default.addMacro(parser, cs, NewcommandMethods$1.Macro, [def, params]) :
    	        NewcommandUtil_js_1.default.addMacro(parser, cs, NewcommandMethods$1.MacroWithTemplate, [def].concat(params));
    	};
    	NewcommandMethods$1.Let = function (parser, name) {
    	    var cs = NewcommandUtil_js_1.default.GetCSname(parser, name);
    	    var c = parser.GetNext();
    	    if (c === '=') {
    	        parser.i++;
    	        c = parser.GetNext();
    	    }
    	    var handlers = parser.configuration.handlers;
    	    if (c === '\\') {
    	        name = NewcommandUtil_js_1.default.GetCSname(parser, name);
    	        var macro_1 = handlers.get('delimiter').lookup('\\' + name);
    	        if (macro_1) {
    	            NewcommandUtil_js_1.default.addDelimiter(parser, '\\' + cs, macro_1.char, macro_1.attributes);
    	            return;
    	        }
    	        var map_1 = handlers.get('macro').applicable(name);
    	        if (!map_1) {
    	            return;
    	        }
    	        if (map_1 instanceof sm.MacroMap) {
    	            var macro_2 = map_1.lookup(name);
    	            NewcommandUtil_js_1.default.addMacro(parser, cs, macro_2.func, macro_2.args, macro_2.symbol);
    	            return;
    	        }
    	        macro_1 = map_1.lookup(name);
    	        var newArgs = NewcommandUtil_js_1.default.disassembleSymbol(cs, macro_1);
    	        var method = function (p, _cs) {
    	            var rest = [];
    	            for (var _i = 2; _i < arguments.length; _i++) {
    	                rest[_i - 2] = arguments[_i];
    	            }
    	            var symb = NewcommandUtil_js_1.default.assembleSymbol(rest);
    	            return map_1.parser(p, symb);
    	        };
    	        NewcommandUtil_js_1.default.addMacro(parser, cs, method, newArgs);
    	        return;
    	    }
    	    parser.i++;
    	    var macro = handlers.get('delimiter').lookup(c);
    	    if (macro) {
    	        NewcommandUtil_js_1.default.addDelimiter(parser, '\\' + cs, macro.char, macro.attributes);
    	        return;
    	    }
    	    NewcommandUtil_js_1.default.addMacro(parser, cs, NewcommandMethods$1.Macro, [c]);
    	};
    	NewcommandMethods$1.MacroWithTemplate = function (parser, name, text, n) {
    	    var params = [];
    	    for (var _i = 4; _i < arguments.length; _i++) {
    	        params[_i - 4] = arguments[_i];
    	    }
    	    var argCount = parseInt(n, 10);
    	    if (argCount) {
    	        var args = [];
    	        parser.GetNext();
    	        if (params[0] && !NewcommandUtil_js_1.default.MatchParam(parser, params[0])) {
    	            throw new TexError_js_1.default('MismatchUseDef', 'Use of %1 doesn\'t match its definition', name);
    	        }
    	        for (var i = 0; i < argCount; i++) {
    	            args.push(NewcommandUtil_js_1.default.GetParameter(parser, name, params[i + 1]));
    	        }
    	        text = ParseUtil_js_1.default.substituteArgs(parser, args, text);
    	    }
    	    parser.string = ParseUtil_js_1.default.addArgs(parser, text, parser.string.slice(parser.i));
    	    parser.i = 0;
    	    ParseUtil_js_1.default.checkMaxMacros(parser);
    	};
    	NewcommandMethods$1.BeginEnv = function (parser, begin, bdef, edef, n, def) {
    	    if (begin.getProperty('end') && parser.stack.env['closing'] === begin.getName()) {
    	        delete parser.stack.env['closing'];
    	        var rest = parser.string.slice(parser.i);
    	        parser.string = edef;
    	        parser.i = 0;
    	        parser.Parse();
    	        parser.string = rest;
    	        parser.i = 0;
    	        return parser.itemFactory.create('end').setProperty('name', begin.getName());
    	    }
    	    if (n) {
    	        var args = [];
    	        if (def != null) {
    	            var optional = parser.GetBrackets('\\begin{' + begin.getName() + '}');
    	            args.push(optional == null ? def : optional);
    	        }
    	        for (var i = args.length; i < n; i++) {
    	            args.push(parser.GetArgument('\\begin{' + begin.getName() + '}'));
    	        }
    	        bdef = ParseUtil_js_1.default.substituteArgs(parser, args, bdef);
    	        edef = ParseUtil_js_1.default.substituteArgs(parser, [], edef);
    	    }
    	    parser.string = ParseUtil_js_1.default.addArgs(parser, bdef, parser.string.slice(parser.i));
    	    parser.i = 0;
    	    return parser.itemFactory.create('beginEnv').setProperty('name', begin.getName());
    	};
    	NewcommandMethods$1.Macro = BaseMethods_js_1.default.Macro;
    	NewcommandMethods.default = NewcommandMethods$1;
    	
    	return NewcommandMethods;
    }

    var NewcommandItems = {};

    var hasRequiredNewcommandItems;

    function requireNewcommandItems () {
    	if (hasRequiredNewcommandItems) return NewcommandItems;
    	hasRequiredNewcommandItems = 1;
    	var __extends = (NewcommandItems.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __importDefault = (NewcommandItems.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(NewcommandItems, "__esModule", { value: true });
    	NewcommandItems.BeginEnvItem = undefined;
    	var TexError_js_1 = __importDefault(requireTexError());
    	var StackItem_js_1 = requireStackItem();
    	var BeginEnvItem = (function (_super) {
    	    __extends(BeginEnvItem, _super);
    	    function BeginEnvItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(BeginEnvItem.prototype, "kind", {
    	        get: function () {
    	            return 'beginEnv';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(BeginEnvItem.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    BeginEnvItem.prototype.checkItem = function (item) {
    	        if (item.isKind('end')) {
    	            if (item.getName() !== this.getName()) {
    	                throw new TexError_js_1.default('EnvBadEnd', '\\begin{%1} ended with \\end{%2}', this.getName(), item.getName());
    	            }
    	            return [[this.factory.create('mml', this.toMml())], true];
    	        }
    	        if (item.isKind('stop')) {
    	            throw new TexError_js_1.default('EnvMissingEnd', 'Missing \\end{%1}', this.getName());
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    return BeginEnvItem;
    	}(StackItem_js_1.BaseItem));
    	NewcommandItems.BeginEnvItem = BeginEnvItem;
    	
    	return NewcommandItems;
    }

    var hasRequiredConfigMacrosConfiguration;

    function requireConfigMacrosConfiguration () {
    	if (hasRequiredConfigMacrosConfiguration) return ConfigMacrosConfiguration;
    	hasRequiredConfigMacrosConfiguration = 1;
    	var __values = (ConfigMacrosConfiguration.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __importDefault = (ConfigMacrosConfiguration.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	var _a;
    	Object.defineProperty(ConfigMacrosConfiguration, "__esModule", { value: true });
    	ConfigMacrosConfiguration.ConfigMacrosConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var Options_js_1 = requireOptions();
    	var SymbolMap_js_1 = requireSymbolMap();
    	var ParseMethods_js_1 = __importDefault(requireParseMethods());
    	var Symbol_js_1 = require_Symbol();
    	var NewcommandMethods_js_1 = __importDefault(requireNewcommandMethods());
    	var NewcommandItems_js_1 = requireNewcommandItems();
    	var MACROSMAP = 'configmacros-map';
    	var ENVIRONMENTMAP = 'configmacros-env-map';
    	function configmacrosInit(config) {
    	    new SymbolMap_js_1.CommandMap(MACROSMAP, {}, {});
    	    new SymbolMap_js_1.EnvironmentMap(ENVIRONMENTMAP, ParseMethods_js_1.default.environment, {}, {});
    	    config.append(Configuration_js_1.Configuration.local({
    	        handler: {
    	            macro: [MACROSMAP],
    	            environment: [ENVIRONMENTMAP]
    	        },
    	        priority: 3
    	    }));
    	}
    	function configmacrosConfig(_config, jax) {
    	    configMacros(jax);
    	    configEnvironments(jax);
    	}
    	function configMacros(jax) {
    	    var e_1, _a;
    	    var handler = jax.parseOptions.handlers.retrieve(MACROSMAP);
    	    var macros = jax.parseOptions.options.macros;
    	    try {
    	        for (var _b = __values(Object.keys(macros)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	            var cs = _c.value;
    	            var def = (typeof macros[cs] === 'string' ? [macros[cs]] : macros[cs]);
    	            var macro = Array.isArray(def[2]) ?
    	                new Symbol_js_1.Macro(cs, NewcommandMethods_js_1.default.MacroWithTemplate, def.slice(0, 2).concat(def[2])) :
    	                new Symbol_js_1.Macro(cs, NewcommandMethods_js_1.default.Macro, def);
    	            handler.add(cs, macro);
    	        }
    	    }
    	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	    finally {
    	        try {
    	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	        }
    	        finally { if (e_1) throw e_1.error; }
    	    }
    	}
    	function configEnvironments(jax) {
    	    var e_2, _a;
    	    var handler = jax.parseOptions.handlers.retrieve(ENVIRONMENTMAP);
    	    var environments = jax.parseOptions.options.environments;
    	    try {
    	        for (var _b = __values(Object.keys(environments)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	            var env = _c.value;
    	            handler.add(env, new Symbol_js_1.Macro(env, NewcommandMethods_js_1.default.BeginEnv, [true].concat(environments[env])));
    	        }
    	    }
    	    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	    finally {
    	        try {
    	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	        }
    	        finally { if (e_2) throw e_2.error; }
    	    }
    	}
    	ConfigMacrosConfiguration.ConfigMacrosConfiguration = Configuration_js_1.Configuration.create('configmacros', {
    	    init: configmacrosInit,
    	    config: configmacrosConfig,
    	    items: (_a = {},
    	        _a[NewcommandItems_js_1.BeginEnvItem.prototype.kind] = NewcommandItems_js_1.BeginEnvItem,
    	        _a),
    	    options: {
    	        macros: (0, Options_js_1.expandable)({}),
    	        environments: (0, Options_js_1.expandable)({})
    	    }
    	});
    	
    	return ConfigMacrosConfiguration;
    }

    var EmpheqConfiguration = {};

    var hasRequiredEmpheqConfiguration;

    function requireEmpheqConfiguration () {
    	if (hasRequiredEmpheqConfiguration) return EmpheqConfiguration;
    	hasRequiredEmpheqConfiguration = 1;
    	(function (exports) {
    		var __extends = (EmpheqConfiguration.__extends) || (function () {
    		    var extendStatics = function (d, b) {
    		        extendStatics = Object.setPrototypeOf ||
    		            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    		            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    		        return extendStatics(d, b);
    		    };
    		    return function (d, b) {
    		        if (typeof b !== "function" && b !== null)
    		            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    		        extendStatics(d, b);
    		        function __() { this.constructor = d; }
    		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    		    };
    		})();
    		var __read = (EmpheqConfiguration.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __importDefault = (EmpheqConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		var _a;
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.EmpheqConfiguration = exports.EmpheqMethods = exports.EmpheqBeginItem = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var TexError_js_1 = __importDefault(requireTexError());
    		var BaseItems_js_1 = requireBaseItems();
    		var EmpheqUtil_js_1 = requireEmpheqUtil();
    		var EmpheqBeginItem = (function (_super) {
    		    __extends(EmpheqBeginItem, _super);
    		    function EmpheqBeginItem() {
    		        return _super !== null && _super.apply(this, arguments) || this;
    		    }
    		    Object.defineProperty(EmpheqBeginItem.prototype, "kind", {
    		        get: function () {
    		            return 'empheq-begin';
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    EmpheqBeginItem.prototype.checkItem = function (item) {
    		        if (item.isKind('end') && item.getName() === this.getName()) {
    		            this.setProperty('end', false);
    		        }
    		        return _super.prototype.checkItem.call(this, item);
    		    };
    		    return EmpheqBeginItem;
    		}(BaseItems_js_1.BeginItem));
    		exports.EmpheqBeginItem = EmpheqBeginItem;
    		exports.EmpheqMethods = {
    		    Empheq: function (parser, begin) {
    		        if (parser.stack.env.closing === begin.getName()) {
    		            delete parser.stack.env.closing;
    		            parser.Push(parser.itemFactory.create('end').setProperty('name', parser.stack.global.empheq));
    		            parser.stack.global.empheq = '';
    		            var empheq = parser.stack.Top();
    		            EmpheqUtil_js_1.EmpheqUtil.adjustTable(empheq, parser);
    		            parser.Push(parser.itemFactory.create('end').setProperty('name', 'empheq'));
    		        }
    		        else {
    		            ParseUtil_js_1.default.checkEqnEnv(parser);
    		            delete parser.stack.global.eqnenv;
    		            var opts = parser.GetBrackets('\\begin{' + begin.getName() + '}') || '';
    		            var _a = __read((parser.GetArgument('\\begin{' + begin.getName() + '}') || '').split(/=/), 2), env = _a[0], n = _a[1];
    		            if (!EmpheqUtil_js_1.EmpheqUtil.checkEnv(env)) {
    		                throw new TexError_js_1.default('UnknownEnv', 'Unknown environment "%1"', env);
    		            }
    		            if (opts) {
    		                begin.setProperties(EmpheqUtil_js_1.EmpheqUtil.splitOptions(opts, { left: 1, right: 1 }));
    		            }
    		            parser.stack.global.empheq = env;
    		            parser.string = '\\begin{' + env + '}' + (n ? '{' + n + '}' : '') + parser.string.slice(parser.i);
    		            parser.i = 0;
    		            parser.Push(begin);
    		        }
    		    },
    		    EmpheqMO: function (parser, _name, c) {
    		        parser.Push(parser.create('token', 'mo', {}, c));
    		    },
    		    EmpheqDelim: function (parser, name) {
    		        var c = parser.GetDelimiter(name);
    		        parser.Push(parser.create('token', 'mo', { stretchy: true, symmetric: true }, c));
    		    }
    		};
    		new SymbolMap_js_1.EnvironmentMap('empheq-env', EmpheqUtil_js_1.EmpheqUtil.environment, {
    		    empheq: ['Empheq', 'empheq'],
    		}, exports.EmpheqMethods);
    		new SymbolMap_js_1.CommandMap('empheq-macros', {
    		    empheqlbrace: ['EmpheqMO', '{'],
    		    empheqrbrace: ['EmpheqMO', '}'],
    		    empheqlbrack: ['EmpheqMO', '['],
    		    empheqrbrack: ['EmpheqMO', ']'],
    		    empheqlangle: ['EmpheqMO', '\u27E8'],
    		    empheqrangle: ['EmpheqMO', '\u27E9'],
    		    empheqlparen: ['EmpheqMO', '('],
    		    empheqrparen: ['EmpheqMO', ')'],
    		    empheqlvert: ['EmpheqMO', '|'],
    		    empheqrvert: ['EmpheqMO', '|'],
    		    empheqlVert: ['EmpheqMO', '\u2016'],
    		    empheqrVert: ['EmpheqMO', '\u2016'],
    		    empheqlfloor: ['EmpheqMO', '\u230A'],
    		    empheqrfloor: ['EmpheqMO', '\u230B'],
    		    empheqlceil: ['EmpheqMO', '\u2308'],
    		    empheqrceil: ['EmpheqMO', '\u2309'],
    		    empheqbiglbrace: ['EmpheqMO', '{'],
    		    empheqbigrbrace: ['EmpheqMO', '}'],
    		    empheqbiglbrack: ['EmpheqMO', '['],
    		    empheqbigrbrack: ['EmpheqMO', ']'],
    		    empheqbiglangle: ['EmpheqMO', '\u27E8'],
    		    empheqbigrangle: ['EmpheqMO', '\u27E9'],
    		    empheqbiglparen: ['EmpheqMO', '('],
    		    empheqbigrparen: ['EmpheqMO', ')'],
    		    empheqbiglvert: ['EmpheqMO', '|'],
    		    empheqbigrvert: ['EmpheqMO', '|'],
    		    empheqbiglVert: ['EmpheqMO', '\u2016'],
    		    empheqbigrVert: ['EmpheqMO', '\u2016'],
    		    empheqbiglfloor: ['EmpheqMO', '\u230A'],
    		    empheqbigrfloor: ['EmpheqMO', '\u230B'],
    		    empheqbiglceil: ['EmpheqMO', '\u2308'],
    		    empheqbigrceil: ['EmpheqMO', '\u2309'],
    		    empheql: 'EmpheqDelim',
    		    empheqr: 'EmpheqDelim',
    		    empheqbigl: 'EmpheqDelim',
    		    empheqbigr: 'EmpheqDelim'
    		}, exports.EmpheqMethods);
    		exports.EmpheqConfiguration = Configuration_js_1.Configuration.create('empheq', {
    		    handler: {
    		        macro: ['empheq-macros'],
    		        environment: ['empheq-env'],
    		    },
    		    items: (_a = {},
    		        _a[EmpheqBeginItem.prototype.kind] = EmpheqBeginItem,
    		        _a)
    		});
    		
    	} (EmpheqConfiguration));
    	return EmpheqConfiguration;
    }

    var ExtpfeilConfiguration = {};

    var NewcommandConfiguration = {};

    var NewcommandMappings = {};

    var hasRequiredNewcommandMappings;

    function requireNewcommandMappings () {
    	if (hasRequiredNewcommandMappings) return NewcommandMappings;
    	hasRequiredNewcommandMappings = 1;
    	var __importDefault = (NewcommandMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(NewcommandMappings, "__esModule", { value: true });
    	var NewcommandMethods_js_1 = __importDefault(requireNewcommandMethods());
    	var SymbolMap_js_1 = requireSymbolMap();
    	new SymbolMap_js_1.CommandMap('Newcommand-macros', {
    	    newcommand: 'NewCommand',
    	    renewcommand: 'NewCommand',
    	    newenvironment: 'NewEnvironment',
    	    renewenvironment: 'NewEnvironment',
    	    def: 'MacroDef',
    	    'let': 'Let'
    	}, NewcommandMethods_js_1.default);
    	
    	return NewcommandMappings;
    }

    var hasRequiredNewcommandConfiguration;

    function requireNewcommandConfiguration () {
    	if (hasRequiredNewcommandConfiguration) return NewcommandConfiguration;
    	hasRequiredNewcommandConfiguration = 1;
    	var __createBinding = (NewcommandConfiguration.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (NewcommandConfiguration.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (NewcommandConfiguration.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __importDefault = (NewcommandConfiguration.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	var _a;
    	Object.defineProperty(NewcommandConfiguration, "__esModule", { value: true });
    	NewcommandConfiguration.NewcommandConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var NewcommandItems_js_1 = requireNewcommandItems();
    	var NewcommandUtil_js_1 = __importDefault(requireNewcommandUtil());
    	requireNewcommandMappings();
    	var ParseMethods_js_1 = __importDefault(requireParseMethods());
    	var sm = __importStar(requireSymbolMap());
    	var init = function (config) {
    	    new sm.DelimiterMap(NewcommandUtil_js_1.default.NEW_DELIMITER, ParseMethods_js_1.default.delimiter, {});
    	    new sm.CommandMap(NewcommandUtil_js_1.default.NEW_COMMAND, {}, {});
    	    new sm.EnvironmentMap(NewcommandUtil_js_1.default.NEW_ENVIRONMENT, ParseMethods_js_1.default.environment, {}, {});
    	    config.append(Configuration_js_1.Configuration.local({ handler: { character: [],
    	            delimiter: [NewcommandUtil_js_1.default.NEW_DELIMITER],
    	            macro: [NewcommandUtil_js_1.default.NEW_DELIMITER,
    	                NewcommandUtil_js_1.default.NEW_COMMAND],
    	            environment: [NewcommandUtil_js_1.default.NEW_ENVIRONMENT]
    	        },
    	        priority: -1 }));
    	};
    	NewcommandConfiguration.NewcommandConfiguration = Configuration_js_1.Configuration.create('newcommand', {
    	    handler: {
    	        macro: ['Newcommand-macros']
    	    },
    	    items: (_a = {},
    	        _a[NewcommandItems_js_1.BeginEnvItem.prototype.kind] = NewcommandItems_js_1.BeginEnvItem,
    	        _a),
    	    options: { maxMacros: 1000 },
    	    init: init
    	});
    	
    	return NewcommandConfiguration;
    }

    var hasRequiredExtpfeilConfiguration;

    function requireExtpfeilConfiguration () {
    	if (hasRequiredExtpfeilConfiguration) return ExtpfeilConfiguration;
    	hasRequiredExtpfeilConfiguration = 1;
    	(function (exports) {
    		var __importDefault = (ExtpfeilConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.ExtpfeilConfiguration = exports.ExtpfeilMethods = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var AmsMethods_js_1 = requireAmsMethods();
    		var NewcommandUtil_js_1 = __importDefault(requireNewcommandUtil());
    		var NewcommandConfiguration_js_1 = requireNewcommandConfiguration();
    		var TexError_js_1 = __importDefault(requireTexError());
    		exports.ExtpfeilMethods = {};
    		exports.ExtpfeilMethods.xArrow = AmsMethods_js_1.AmsMethods.xArrow;
    		exports.ExtpfeilMethods.NewExtArrow = function (parser, name) {
    		    var cs = parser.GetArgument(name);
    		    var space = parser.GetArgument(name);
    		    var chr = parser.GetArgument(name);
    		    if (!cs.match(/^\\([a-z]+|.)$/i)) {
    		        throw new TexError_js_1.default('NewextarrowArg1', 'First argument to %1 must be a control sequence name', name);
    		    }
    		    if (!space.match(/^(\d+),(\d+)$/)) {
    		        throw new TexError_js_1.default('NewextarrowArg2', 'Second argument to %1 must be two integers separated by a comma', name);
    		    }
    		    if (!chr.match(/^(\d+|0x[0-9A-F]+)$/i)) {
    		        throw new TexError_js_1.default('NewextarrowArg3', 'Third argument to %1 must be a unicode character number', name);
    		    }
    		    cs = cs.substr(1);
    		    var spaces = space.split(',');
    		    NewcommandUtil_js_1.default.addMacro(parser, cs, exports.ExtpfeilMethods.xArrow, [parseInt(chr), parseInt(spaces[0]), parseInt(spaces[1])]);
    		};
    		new SymbolMap_js_1.CommandMap('extpfeil', {
    		    xtwoheadrightarrow: ['xArrow', 0x21A0, 12, 16],
    		    xtwoheadleftarrow: ['xArrow', 0x219E, 17, 13],
    		    xmapsto: ['xArrow', 0x21A6, 6, 7],
    		    xlongequal: ['xArrow', 0x003D, 7, 7],
    		    xtofrom: ['xArrow', 0x21C4, 12, 12],
    		    Newextarrow: 'NewExtArrow'
    		}, exports.ExtpfeilMethods);
    		var init = function (config) {
    		    NewcommandConfiguration_js_1.NewcommandConfiguration.init(config);
    		};
    		exports.ExtpfeilConfiguration = Configuration_js_1.Configuration.create('extpfeil', {
    		    handler: { macro: ['extpfeil'] },
    		    init: init
    		});
    		
    	} (ExtpfeilConfiguration));
    	return ExtpfeilConfiguration;
    }

    var GensymbConfiguration = {};

    var hasRequiredGensymbConfiguration;

    function requireGensymbConfiguration () {
    	if (hasRequiredGensymbConfiguration) return GensymbConfiguration;
    	hasRequiredGensymbConfiguration = 1;
    	Object.defineProperty(GensymbConfiguration, "__esModule", { value: true });
    	GensymbConfiguration.GensymbConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var TexConstants_js_1 = requireTexConstants();
    	var SymbolMap_js_1 = requireSymbolMap();
    	function mathcharUnit(parser, mchar) {
    	    var def = mchar.attributes || {};
    	    def.mathvariant = TexConstants_js_1.TexConstant.Variant.NORMAL;
    	    def.class = 'MathML-Unit';
    	    var node = parser.create('token', 'mi', def, mchar.char);
    	    parser.Push(node);
    	}
    	new SymbolMap_js_1.CharacterMap('gensymb-symbols', mathcharUnit, {
    	    ohm: '\u2126',
    	    degree: '\u00B0',
    	    celsius: '\u2103',
    	    perthousand: '\u2030',
    	    micro: '\u00B5'
    	});
    	GensymbConfiguration.GensymbConfiguration = Configuration_js_1.Configuration.create('gensymb', {
    	    handler: { macro: ['gensymb-symbols'] },
    	});
    	
    	return GensymbConfiguration;
    }

    var HtmlConfiguration = {};

    var HtmlMethods = {};

    var hasRequiredHtmlMethods;

    function requireHtmlMethods () {
    	if (hasRequiredHtmlMethods) return HtmlMethods;
    	hasRequiredHtmlMethods = 1;
    	var __importDefault = (HtmlMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(HtmlMethods, "__esModule", { value: true });
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var HtmlMethods$1 = {};
    	HtmlMethods$1.Href = function (parser, name) {
    	    var url = parser.GetArgument(name);
    	    var arg = GetArgumentMML(parser, name);
    	    NodeUtil_js_1.default.setAttribute(arg, 'href', url);
    	    parser.Push(arg);
    	};
    	HtmlMethods$1.Class = function (parser, name) {
    	    var CLASS = parser.GetArgument(name);
    	    var arg = GetArgumentMML(parser, name);
    	    var oldClass = NodeUtil_js_1.default.getAttribute(arg, 'class');
    	    if (oldClass) {
    	        CLASS = oldClass + ' ' + CLASS;
    	    }
    	    NodeUtil_js_1.default.setAttribute(arg, 'class', CLASS);
    	    parser.Push(arg);
    	};
    	HtmlMethods$1.Style = function (parser, name) {
    	    var style = parser.GetArgument(name);
    	    var arg = GetArgumentMML(parser, name);
    	    var oldStyle = NodeUtil_js_1.default.getAttribute(arg, 'style');
    	    if (oldStyle) {
    	        if (style.charAt(style.length - 1) !== ';') {
    	            style += ';';
    	        }
    	        style = oldStyle + ' ' + style;
    	    }
    	    NodeUtil_js_1.default.setAttribute(arg, 'style', style);
    	    parser.Push(arg);
    	};
    	HtmlMethods$1.Id = function (parser, name) {
    	    var ID = parser.GetArgument(name);
    	    var arg = GetArgumentMML(parser, name);
    	    NodeUtil_js_1.default.setAttribute(arg, 'id', ID);
    	    parser.Push(arg);
    	};
    	var GetArgumentMML = function (parser, name) {
    	    var arg = parser.ParseArg(name);
    	    if (!NodeUtil_js_1.default.isInferred(arg)) {
    	        return arg;
    	    }
    	    var children = NodeUtil_js_1.default.getChildren(arg);
    	    if (children.length === 1) {
    	        return children[0];
    	    }
    	    var mrow = parser.create('node', 'mrow');
    	    NodeUtil_js_1.default.copyChildren(arg, mrow);
    	    NodeUtil_js_1.default.copyAttributes(arg, mrow);
    	    return mrow;
    	};
    	HtmlMethods.default = HtmlMethods$1;
    	
    	return HtmlMethods;
    }

    var hasRequiredHtmlConfiguration;

    function requireHtmlConfiguration () {
    	if (hasRequiredHtmlConfiguration) return HtmlConfiguration;
    	hasRequiredHtmlConfiguration = 1;
    	var __importDefault = (HtmlConfiguration.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(HtmlConfiguration, "__esModule", { value: true });
    	HtmlConfiguration.HtmlConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var SymbolMap_js_1 = requireSymbolMap();
    	var HtmlMethods_js_1 = __importDefault(requireHtmlMethods());
    	new SymbolMap_js_1.CommandMap('html_macros', {
    	    href: 'Href',
    	    'class': 'Class',
    	    style: 'Style',
    	    cssId: 'Id'
    	}, HtmlMethods_js_1.default);
    	HtmlConfiguration.HtmlConfiguration = Configuration_js_1.Configuration.create('html', { handler: { macro: ['html_macros'] } });
    	
    	return HtmlConfiguration;
    }

    var MathtoolsConfiguration = {};

    var MathtoolsMappings = {};

    var MathtoolsMethods = {};

    var MathtoolsUtil = {};

    var hasRequiredMathtoolsUtil;

    function requireMathtoolsUtil () {
    	if (hasRequiredMathtoolsUtil) return MathtoolsUtil;
    	hasRequiredMathtoolsUtil = 1;
    	var __read = (MathtoolsUtil.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __importDefault = (MathtoolsUtil.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(MathtoolsUtil, "__esModule", { value: true });
    	MathtoolsUtil.MathtoolsUtil = undefined;
    	var BaseItems_js_1 = requireBaseItems();
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var Symbol_js_1 = require_Symbol();
    	var Options_js_1 = requireOptions();
    	var MathtoolsMethods_js_1 = requireMathtoolsMethods();
    	var MathtoolsConfiguration_js_1 = requireMathtoolsConfiguration();
    	MathtoolsUtil.MathtoolsUtil = {
    	    setDisplayLevel: function (mml, style) {
    	        if (!style)
    	            return;
    	        var _a = __read((0, Options_js_1.lookup)(style, {
    	            '\\displaystyle': [true, 0],
    	            '\\textstyle': [false, 0],
    	            '\\scriptstyle': [false, 1],
    	            '\\scriptscriptstyle': [false, 2]
    	        }, [null, null]), 2), display = _a[0], script = _a[1];
    	        if (display !== null) {
    	            mml.attributes.set('displaystyle', display);
    	            mml.attributes.set('scriptlevel', script);
    	        }
    	    },
    	    checkAlignment: function (parser, name) {
    	        var top = parser.stack.Top();
    	        if (top.kind !== BaseItems_js_1.EqnArrayItem.prototype.kind) {
    	            throw new TexError_js_1.default('NotInAlignment', '%1 can only be used in aligment environments', name);
    	        }
    	        return top;
    	    },
    	    addPairedDelims: function (config, cs, args) {
    	        var delims = config.handlers.retrieve(MathtoolsConfiguration_js_1.PAIREDDELIMS);
    	        delims.add(cs, new Symbol_js_1.Macro(cs, MathtoolsMethods_js_1.MathtoolsMethods.PairedDelimiters, args));
    	    },
    	    spreadLines: function (mtable, spread) {
    	        if (!mtable.isKind('mtable'))
    	            return;
    	        var rowspacing = mtable.attributes.get('rowspacing');
    	        if (rowspacing) {
    	            var add_1 = ParseUtil_js_1.default.dimen2em(spread);
    	            rowspacing = rowspacing
    	                .split(/ /)
    	                .map(function (s) { return ParseUtil_js_1.default.Em(Math.max(0, ParseUtil_js_1.default.dimen2em(s) + add_1)); })
    	                .join(' ');
    	        }
    	        else {
    	            rowspacing = spread;
    	        }
    	        mtable.attributes.set('rowspacing', rowspacing);
    	    },
    	    plusOrMinus: function (name, n) {
    	        n = n.trim();
    	        if (!n.match(/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)$/)) {
    	            throw new TexError_js_1.default('NotANumber', 'Argument to %1 is not a number', name);
    	        }
    	        return (n.match(/^[-+]/) ? n : '+' + n);
    	    },
    	    getScript: function (parser, name, pos) {
    	        var arg = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(name));
    	        if (arg === '') {
    	            return parser.create('node', 'none');
    	        }
    	        var format = parser.options.mathtools["prescript-".concat(pos, "-format")];
    	        format && (arg = "".concat(format, "{").concat(arg, "}"));
    	        return new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml();
    	    }
    	};
    	
    	return MathtoolsUtil;
    }

    var hasRequiredMathtoolsMethods;

    function requireMathtoolsMethods () {
    	if (hasRequiredMathtoolsMethods) return MathtoolsMethods;
    	hasRequiredMathtoolsMethods = 1;
    	(function (exports) {
    		var __assign = (MathtoolsMethods.__assign) || function () {
    		    __assign = Object.assign || function(t) {
    		        for (var s, i = 1, n = arguments.length; i < n; i++) {
    		            s = arguments[i];
    		            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    		                t[p] = s[p];
    		        }
    		        return t;
    		    };
    		    return __assign.apply(this, arguments);
    		};
    		var __read = (MathtoolsMethods.__read) || function (o, n) {
    		    var m = typeof Symbol === "function" && o[Symbol.iterator];
    		    if (!m) return o;
    		    var i = m.call(o), r, ar = [], e;
    		    try {
    		        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    		    }
    		    catch (error) { e = { error: error }; }
    		    finally {
    		        try {
    		            if (r && !r.done && (m = i["return"])) m.call(i);
    		        }
    		        finally { if (e) throw e.error; }
    		    }
    		    return ar;
    		};
    		var __values = (MathtoolsMethods.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __importDefault = (MathtoolsMethods.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.MathtoolsMethods = undefined;
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var AmsMethods_js_1 = requireAmsMethods();
    		var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    		var TexParser_js_1 = __importDefault(requireTexParser());
    		var TexError_js_1 = __importDefault(requireTexError());
    		var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    		var MmlNode_js_1 = requireMmlNode();
    		var lengths_js_1 = requireLengths();
    		var Options_js_1 = requireOptions();
    		var NewcommandUtil_js_1 = __importDefault(requireNewcommandUtil());
    		var NewcommandMethods_js_1 = __importDefault(requireNewcommandMethods());
    		var MathtoolsUtil_js_1 = requireMathtoolsUtil();
    		exports.MathtoolsMethods = {
    		    MtMatrix: function (parser, begin, open, close) {
    		        var align = parser.GetBrackets("\\begin{".concat(begin.getName(), "}"), 'c');
    		        return exports.MathtoolsMethods.Array(parser, begin, open, close, align);
    		    },
    		    MtSmallMatrix: function (parser, begin, open, close, align) {
    		        if (!align) {
    		            align = parser.GetBrackets("\\begin{".concat(begin.getName(), "}"), parser.options.mathtools['smallmatrix-align']);
    		        }
    		        return exports.MathtoolsMethods.Array(parser, begin, open, close, align, ParseUtil_js_1.default.Em(1 / 3), '.2em', 'S', 1);
    		    },
    		    MtMultlined: function (parser, begin) {
    		        var _a;
    		        var name = "\\begin{".concat(begin.getName(), "}");
    		        var pos = parser.GetBrackets(name, parser.options.mathtools['multlined-pos'] || 'c');
    		        var width = pos ? parser.GetBrackets(name, '') : '';
    		        if (pos && !pos.match(/^[cbt]$/)) {
    		            _a = __read([pos, width], 2), width = _a[0], pos = _a[1];
    		        }
    		        parser.Push(begin);
    		        var item = parser.itemFactory.create('multlined', parser, begin);
    		        item.arraydef = {
    		            displaystyle: true,
    		            rowspacing: '.5em',
    		            width: width || 'auto',
    		            columnwidth: '100%',
    		        };
    		        return ParseUtil_js_1.default.setArrayAlign(item, pos || 'c');
    		    },
    		    HandleShove: function (parser, name, shove) {
    		        var top = parser.stack.Top();
    		        if (top.kind !== 'multline' && top.kind !== 'multlined') {
    		            throw new TexError_js_1.default('CommandInMultlined', '%1 can only appear within the multline or multlined environments', name);
    		        }
    		        if (top.Size()) {
    		            throw new TexError_js_1.default('CommandAtTheBeginingOfLine', '%1 must come at the beginning of the line', name);
    		        }
    		        top.setProperty('shove', shove);
    		        var shift = parser.GetBrackets(name);
    		        var mml = parser.ParseArg(name);
    		        if (shift) {
    		            var mrow = parser.create('node', 'mrow', []);
    		            var mspace = parser.create('node', 'mspace', [], { width: shift });
    		            if (shove === 'left') {
    		                mrow.appendChild(mspace);
    		                mrow.appendChild(mml);
    		            }
    		            else {
    		                mrow.appendChild(mml);
    		                mrow.appendChild(mspace);
    		            }
    		            mml = mrow;
    		        }
    		        parser.Push(mml);
    		    },
    		    SpreadLines: function (parser, begin) {
    		        var e_1, _a;
    		        if (parser.stack.env.closing === begin.getName()) {
    		            delete parser.stack.env.closing;
    		            var top_1 = parser.stack.Pop();
    		            var mml = top_1.toMml();
    		            var spread = top_1.getProperty('spread');
    		            if (mml.isInferred) {
    		                try {
    		                    for (var _b = __values(NodeUtil_js_1.default.getChildren(mml)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                        var child = _c.value;
    		                        MathtoolsUtil_js_1.MathtoolsUtil.spreadLines(child, spread);
    		                    }
    		                }
    		                catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		                finally {
    		                    try {
    		                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		                    }
    		                    finally { if (e_1) throw e_1.error; }
    		                }
    		            }
    		            else {
    		                MathtoolsUtil_js_1.MathtoolsUtil.spreadLines(mml, spread);
    		            }
    		            parser.Push(mml);
    		        }
    		        else {
    		            var spread = parser.GetDimen("\\begin{".concat(begin.getName(), "}"));
    		            begin.setProperty('spread', spread);
    		            parser.Push(begin);
    		        }
    		    },
    		    Cases: function (parser, begin, open, close, style) {
    		        var array = parser.itemFactory.create('array').setProperty('casesEnv', begin.getName());
    		        array.arraydef = {
    		            rowspacing: '.2em',
    		            columnspacing: '1em',
    		            columnalign: 'left'
    		        };
    		        if (style === 'D') {
    		            array.arraydef.displaystyle = true;
    		        }
    		        array.setProperties({ open: open, close: close });
    		        parser.Push(begin);
    		        return array;
    		    },
    		    MathLap: function (parser, name, pos, cramped) {
    		        var style = parser.GetBrackets(name, '').trim();
    		        var mml = parser.create('node', 'mstyle', [
    		            parser.create('node', 'mpadded', [parser.ParseArg(name)], __assign({ width: 0 }, (pos === 'r' ? {} : { lspace: (pos === 'l' ? '-1width' : '-.5width') })))
    		        ], { 'data-cramped': cramped });
    		        MathtoolsUtil_js_1.MathtoolsUtil.setDisplayLevel(mml, style);
    		        parser.Push(parser.create('node', 'TeXAtom', [mml]));
    		    },
    		    Cramped: function (parser, name) {
    		        var style = parser.GetBrackets(name, '').trim();
    		        var arg = parser.ParseArg(name);
    		        var mml = parser.create('node', 'mstyle', [arg], { 'data-cramped': true });
    		        MathtoolsUtil_js_1.MathtoolsUtil.setDisplayLevel(mml, style);
    		        parser.Push(mml);
    		    },
    		    MtLap: function (parser, name, pos) {
    		        var content = ParseUtil_js_1.default.internalMath(parser, parser.GetArgument(name), 0);
    		        var mml = parser.create('node', 'mpadded', content, { width: 0 });
    		        if (pos !== 'r') {
    		            NodeUtil_js_1.default.setAttribute(mml, 'lspace', pos === 'l' ? '-1width' : '-.5width');
    		        }
    		        parser.Push(mml);
    		    },
    		    MathMakeBox: function (parser, name) {
    		        var width = parser.GetBrackets(name);
    		        var pos = parser.GetBrackets(name, 'c');
    		        var mml = parser.create('node', 'mpadded', [parser.ParseArg(name)]);
    		        if (width) {
    		            NodeUtil_js_1.default.setAttribute(mml, 'width', width);
    		        }
    		        var align = (0, Options_js_1.lookup)(pos, { c: 'center', r: 'right' }, '');
    		        if (align) {
    		            NodeUtil_js_1.default.setAttribute(mml, 'data-align', align);
    		        }
    		        parser.Push(mml);
    		    },
    		    MathMBox: function (parser, name) {
    		        parser.Push(parser.create('node', 'mrow', [parser.ParseArg(name)]));
    		    },
    		    UnderOverBracket: function (parser, name) {
    		        var thickness = (0, lengths_js_1.length2em)(parser.GetBrackets(name, '.1em'), .1);
    		        var height = parser.GetBrackets(name, '.2em');
    		        var arg = parser.GetArgument(name);
    		        var _a = __read((name.charAt(1) === 'o' ?
    		            ['over', 'accent', 'bottom'] :
    		            ['under', 'accentunder', 'top']), 3), pos = _a[0], accent = _a[1], border = _a[2];
    		        var t = (0, lengths_js_1.em)(thickness);
    		        var base = new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml();
    		        var copy = new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml();
    		        var script = parser.create('node', 'mpadded', [
    		            parser.create('node', 'mphantom', [copy])
    		        ], {
    		            style: "border: ".concat(t, " solid; border-").concat(border, ": none"),
    		            height: height,
    		            depth: 0
    		        });
    		        var node = ParseUtil_js_1.default.underOver(parser, base, script, pos, true);
    		        var munderover = NodeUtil_js_1.default.getChildAt(NodeUtil_js_1.default.getChildAt(node, 0), 0);
    		        NodeUtil_js_1.default.setAttribute(munderover, accent, true);
    		        parser.Push(node);
    		    },
    		    Aboxed: function (parser, name) {
    		        var top = MathtoolsUtil_js_1.MathtoolsUtil.checkAlignment(parser, name);
    		        if (top.row.length % 2 === 1) {
    		            top.row.push(parser.create('node', 'mtd', []));
    		        }
    		        var arg = parser.GetArgument(name);
    		        var rest = parser.string.substr(parser.i);
    		        parser.string = arg + '&&\\endAboxed';
    		        parser.i = 0;
    		        var left = parser.GetUpTo(name, '&');
    		        var right = parser.GetUpTo(name, '&');
    		        parser.GetUpTo(name, '\\endAboxed');
    		        var tex = ParseUtil_js_1.default.substituteArgs(parser, [left, right], '\\rlap{\\boxed{#1{}#2}}\\kern.267em\\phantom{#1}&\\phantom{{}#2}\\kern.267em');
    		        parser.string = tex + rest;
    		        parser.i = 0;
    		    },
    		    ArrowBetweenLines: function (parser, name) {
    		        var top = MathtoolsUtil_js_1.MathtoolsUtil.checkAlignment(parser, name);
    		        if (top.Size() || top.row.length) {
    		            throw new TexError_js_1.default('BetweenLines', '%1 must be on a row by itself', name);
    		        }
    		        var star = parser.GetStar();
    		        var symbol = parser.GetBrackets(name, '\\Updownarrow');
    		        if (star) {
    		            top.EndEntry();
    		            top.EndEntry();
    		        }
    		        var tex = (star ? '\\quad' + symbol : symbol + '\\quad');
    		        var mml = new TexParser_js_1.default(tex, parser.stack.env, parser.configuration).mml();
    		        parser.Push(mml);
    		        top.EndEntry();
    		        top.EndRow();
    		    },
    		    VDotsWithin: function (parser, name) {
    		        var top = parser.stack.Top();
    		        var isFlush = (top.getProperty('flushspaceabove') === top.table.length);
    		        var arg = '\\mmlToken{mi}{}' + parser.GetArgument(name) + '\\mmlToken{mi}{}';
    		        var base = new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml();
    		        var mml = parser.create('node', 'mpadded', [
    		            parser.create('node', 'mpadded', [
    		                parser.create('node', 'mo', [
    		                    parser.create('text', '\u22EE')
    		                ])
    		            ], __assign({ width: 0, lspace: '-.5width' }, (isFlush ? { height: '-.6em', voffset: '-.18em' } : {}))),
    		            parser.create('node', 'mphantom', [base])
    		        ], {
    		            lspace: '.5width'
    		        });
    		        parser.Push(mml);
    		    },
    		    ShortVDotsWithin: function (parser, _name) {
    		        var top = parser.stack.Top();
    		        var star = parser.GetStar();
    		        exports.MathtoolsMethods.FlushSpaceAbove(parser, '\\MTFlushSpaceAbove');
    		        !star && top.EndEntry();
    		        exports.MathtoolsMethods.VDotsWithin(parser, '\\vdotswithin');
    		        star && top.EndEntry();
    		        exports.MathtoolsMethods.FlushSpaceBelow(parser, '\\MTFlushSpaceBelow');
    		    },
    		    FlushSpaceAbove: function (parser, name) {
    		        var top = MathtoolsUtil_js_1.MathtoolsUtil.checkAlignment(parser, name);
    		        top.setProperty('flushspaceabove', top.table.length);
    		        top.addRowSpacing('-' + parser.options.mathtools['shortvdotsadjustabove']);
    		    },
    		    FlushSpaceBelow: function (parser, name) {
    		        var top = MathtoolsUtil_js_1.MathtoolsUtil.checkAlignment(parser, name);
    		        top.Size() && top.EndEntry();
    		        top.EndRow();
    		        top.addRowSpacing('-' + parser.options.mathtools['shortvdotsadjustbelow']);
    		    },
    		    PairedDelimiters: function (parser, name, open, close, body, n, pre, post) {
    		        if (body === undefined) { body = '#1'; }
    		        if (n === undefined) { n = 1; }
    		        if (pre === undefined) { pre = ''; }
    		        if (post === undefined) { post = ''; }
    		        var star = parser.GetStar();
    		        var size = (star ? '' : parser.GetBrackets(name));
    		        var _a = __read((star ? ['\\left', '\\right'] : size ? [size + 'l', size + 'r'] : ['', '']), 2), left = _a[0], right = _a[1];
    		        var delim = (star ? '\\middle' : size || '');
    		        if (n) {
    		            var args = [];
    		            for (var i = args.length; i < n; i++) {
    		                args.push(parser.GetArgument(name));
    		            }
    		            pre = ParseUtil_js_1.default.substituteArgs(parser, args, pre);
    		            body = ParseUtil_js_1.default.substituteArgs(parser, args, body);
    		            post = ParseUtil_js_1.default.substituteArgs(parser, args, post);
    		        }
    		        body = body.replace(/\\delimsize/g, delim);
    		        parser.string = [pre, left, open, body, right, close, post, parser.string.substr(parser.i)]
    		            .reduce(function (s, part) { return ParseUtil_js_1.default.addArgs(parser, s, part); }, '');
    		        parser.i = 0;
    		        ParseUtil_js_1.default.checkMaxMacros(parser);
    		    },
    		    DeclarePairedDelimiter: function (parser, name) {
    		        var cs = NewcommandUtil_js_1.default.GetCsNameArgument(parser, name);
    		        var open = parser.GetArgument(name);
    		        var close = parser.GetArgument(name);
    		        MathtoolsUtil_js_1.MathtoolsUtil.addPairedDelims(parser.configuration, cs, [open, close]);
    		    },
    		    DeclarePairedDelimiterX: function (parser, name) {
    		        var cs = NewcommandUtil_js_1.default.GetCsNameArgument(parser, name);
    		        var n = NewcommandUtil_js_1.default.GetArgCount(parser, name);
    		        var open = parser.GetArgument(name);
    		        var close = parser.GetArgument(name);
    		        var body = parser.GetArgument(name);
    		        MathtoolsUtil_js_1.MathtoolsUtil.addPairedDelims(parser.configuration, cs, [open, close, body, n]);
    		    },
    		    DeclarePairedDelimiterXPP: function (parser, name) {
    		        var cs = NewcommandUtil_js_1.default.GetCsNameArgument(parser, name);
    		        var n = NewcommandUtil_js_1.default.GetArgCount(parser, name);
    		        var pre = parser.GetArgument(name);
    		        var open = parser.GetArgument(name);
    		        var close = parser.GetArgument(name);
    		        var post = parser.GetArgument(name);
    		        var body = parser.GetArgument(name);
    		        MathtoolsUtil_js_1.MathtoolsUtil.addPairedDelims(parser.configuration, cs, [open, close, body, n, pre, post]);
    		    },
    		    CenterColon: function (parser, _name, center, force, thin) {
    		        if (force === undefined) { force = false; }
    		        if (thin === undefined) { thin = false; }
    		        var options = parser.options.mathtools;
    		        var mml = parser.create('token', 'mo', {}, ':');
    		        if (center && (options['centercolon'] || force)) {
    		            var dy = options['centercolon-offset'];
    		            mml = parser.create('node', 'mpadded', [mml], __assign({ voffset: dy, height: "+".concat(dy), depth: "-".concat(dy) }, (thin ? { width: options['thincolon-dw'], lspace: options['thincolon-dx'] } : {})));
    		        }
    		        parser.Push(mml);
    		    },
    		    Relation: function (parser, _name, tex, unicode) {
    		        var options = parser.options.mathtools;
    		        if (options['use-unicode'] && unicode) {
    		            parser.Push(parser.create('token', 'mo', { texClass: MmlNode_js_1.TEXCLASS.REL }, unicode));
    		        }
    		        else {
    		            tex = '\\mathrel{' + tex.replace(/:/g, '\\MTThinColon').replace(/-/g, '\\mathrel{-}') + '}';
    		            parser.string = ParseUtil_js_1.default.addArgs(parser, tex, parser.string.substr(parser.i));
    		            parser.i = 0;
    		        }
    		    },
    		    NArrow: function (parser, _name, c, dy) {
    		        parser.Push(parser.create('node', 'TeXAtom', [
    		            parser.create('token', 'mtext', {}, c),
    		            parser.create('node', 'mpadded', [
    		                parser.create('node', 'mpadded', [
    		                    parser.create('node', 'menclose', [
    		                        parser.create('node', 'mspace', [], { height: '.2em', depth: 0, width: '.4em' })
    		                    ], { notation: 'updiagonalstrike', 'data-thickness': '.05em', 'data-padding': 0 })
    		                ], { width: 0, lspace: '-.5width', voffset: dy }),
    		                parser.create('node', 'mphantom', [
    		                    parser.create('token', 'mtext', {}, c)
    		                ])
    		            ], { width: 0, lspace: '-.5width' })
    		        ], { texClass: MmlNode_js_1.TEXCLASS.REL }));
    		    },
    		    SplitFrac: function (parser, name, display) {
    		        var num = parser.ParseArg(name);
    		        var den = parser.ParseArg(name);
    		        parser.Push(parser.create('node', 'mstyle', [
    		            parser.create('node', 'mfrac', [
    		                parser.create('node', 'mstyle', [
    		                    num,
    		                    parser.create('token', 'mi'),
    		                    parser.create('token', 'mspace', { width: '1em' })
    		                ], { scriptlevel: 0 }),
    		                parser.create('node', 'mstyle', [
    		                    parser.create('token', 'mspace', { width: '1em' }),
    		                    parser.create('token', 'mi'),
    		                    den
    		                ], { scriptlevel: 0 })
    		            ], { linethickness: 0, numalign: 'left', denomalign: 'right' })
    		        ], { displaystyle: display, scriptlevel: 0 }));
    		    },
    		    XMathStrut: function (parser, name) {
    		        var dd = parser.GetBrackets(name);
    		        var dh = parser.GetArgument(name);
    		        dh = MathtoolsUtil_js_1.MathtoolsUtil.plusOrMinus(name, dh);
    		        dd = MathtoolsUtil_js_1.MathtoolsUtil.plusOrMinus(name, dd || dh);
    		        parser.Push(parser.create('node', 'TeXAtom', [
    		            parser.create('node', 'mpadded', [
    		                parser.create('node', 'mphantom', [
    		                    parser.create('token', 'mo', { stretchy: false }, '(')
    		                ])
    		            ], { width: 0, height: dh + 'height', depth: dd + 'depth' })
    		        ], { texClass: MmlNode_js_1.TEXCLASS.ORD }));
    		    },
    		    Prescript: function (parser, name) {
    		        var sup = MathtoolsUtil_js_1.MathtoolsUtil.getScript(parser, name, 'sup');
    		        var sub = MathtoolsUtil_js_1.MathtoolsUtil.getScript(parser, name, 'sub');
    		        var base = MathtoolsUtil_js_1.MathtoolsUtil.getScript(parser, name, 'arg');
    		        if (NodeUtil_js_1.default.isType(sup, 'none') && NodeUtil_js_1.default.isType(sub, 'none')) {
    		            parser.Push(base);
    		            return;
    		        }
    		        var mml = parser.create('node', 'mmultiscripts', [base]);
    		        NodeUtil_js_1.default.getChildren(mml).push(null, null);
    		        NodeUtil_js_1.default.appendChildren(mml, [parser.create('node', 'mprescripts'), sub, sup]);
    		        mml.setProperty('fixPrescript', true);
    		        parser.Push(mml);
    		    },
    		    NewTagForm: function (parser, name, renew) {
    		        if (renew === undefined) { renew = false; }
    		        var tags = parser.tags;
    		        if (!('mtFormats' in tags)) {
    		            throw new TexError_js_1.default('TagsNotMT', '%1 can only be used with ams or mathtools tags', name);
    		        }
    		        var id = parser.GetArgument(name).trim();
    		        if (!id) {
    		            throw new TexError_js_1.default('InvalidTagFormID', 'Tag form name can\'t be empty');
    		        }
    		        var format = parser.GetBrackets(name, '');
    		        var left = parser.GetArgument(name);
    		        var right = parser.GetArgument(name);
    		        if (!renew && tags.mtFormats.has(id)) {
    		            throw new TexError_js_1.default('DuplicateTagForm', 'Duplicate tag form: %1', id);
    		        }
    		        tags.mtFormats.set(id, [left, right, format]);
    		    },
    		    UseTagForm: function (parser, name) {
    		        var tags = parser.tags;
    		        if (!('mtFormats' in tags)) {
    		            throw new TexError_js_1.default('TagsNotMT', '%1 can only be used with ams or mathtools tags', name);
    		        }
    		        var id = parser.GetArgument(name).trim();
    		        if (!id) {
    		            tags.mtCurrent = null;
    		            return;
    		        }
    		        if (!tags.mtFormats.has(id)) {
    		            throw new TexError_js_1.default('UndefinedTagForm', 'Undefined tag form: %1', id);
    		        }
    		        tags.mtCurrent = tags.mtFormats.get(id);
    		    },
    		    SetOptions: function (parser, name) {
    		        var e_2, _a;
    		        var options = parser.options.mathtools;
    		        if (!options['allow-mathtoolsset']) {
    		            throw new TexError_js_1.default('ForbiddenMathtoolsSet', '%1 is disabled', name);
    		        }
    		        var allowed = {};
    		        Object.keys(options).forEach(function (id) {
    		            if (id !== 'pariedDelimiters' && id !== 'tagforms' && id !== 'allow-mathtoolsset') {
    		                allowed[id] = 1;
    		            }
    		        });
    		        var args = parser.GetArgument(name);
    		        var keys = ParseUtil_js_1.default.keyvalOptions(args, allowed, true);
    		        try {
    		            for (var _b = __values(Object.keys(keys)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var id = _c.value;
    		                options[id] = keys[id];
    		            }
    		        }
    		        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_2) throw e_2.error; }
    		        }
    		    },
    		    Array: BaseMethods_js_1.default.Array,
    		    Macro: BaseMethods_js_1.default.Macro,
    		    xArrow: AmsMethods_js_1.AmsMethods.xArrow,
    		    HandleRef: AmsMethods_js_1.AmsMethods.HandleRef,
    		    AmsEqnArray: AmsMethods_js_1.AmsMethods.AmsEqnArray,
    		    MacroWithTemplate: NewcommandMethods_js_1.default.MacroWithTemplate,
    		};
    		
    	} (MathtoolsMethods));
    	return MathtoolsMethods;
    }

    var hasRequiredMathtoolsMappings;

    function requireMathtoolsMappings () {
    	if (hasRequiredMathtoolsMappings) return MathtoolsMappings;
    	hasRequiredMathtoolsMappings = 1;
    	var __importDefault = (MathtoolsMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(MathtoolsMappings, "__esModule", { value: true });
    	var ParseMethods_js_1 = __importDefault(requireParseMethods());
    	var SymbolMap_js_1 = requireSymbolMap();
    	var TexConstants_js_1 = requireTexConstants();
    	var MathtoolsMethods_js_1 = requireMathtoolsMethods();
    	new SymbolMap_js_1.CommandMap('mathtools-macros', {
    	    shoveleft: ['HandleShove', TexConstants_js_1.TexConstant.Align.LEFT],
    	    shoveright: ['HandleShove', TexConstants_js_1.TexConstant.Align.RIGHT],
    	    xleftrightarrow: ['xArrow', 0x2194, 10, 10],
    	    xLeftarrow: ['xArrow', 0x21D0, 12, 7],
    	    xRightarrow: ['xArrow', 0x21D2, 7, 12],
    	    xLeftrightarrow: ['xArrow', 0x21D4, 12, 12],
    	    xhookleftarrow: ['xArrow', 0x21A9, 10, 5],
    	    xhookrightarrow: ['xArrow', 0x21AA, 5, 10],
    	    xmapsto: ['xArrow', 0x21A6, 10, 10],
    	    xrightharpoondown: ['xArrow', 0x21C1, 5, 10],
    	    xleftharpoondown: ['xArrow', 0x21BD, 10, 5],
    	    xrightleftharpoons: ['xArrow', 0x21CC, 10, 10],
    	    xrightharpoonup: ['xArrow', 0x21C0, 5, 10],
    	    xleftharpoonup: ['xArrow', 0x21BC, 10, 5],
    	    xleftrightharpoons: ['xArrow', 0x21CB, 10, 10],
    	    mathllap: ['MathLap', 'l', false],
    	    mathrlap: ['MathLap', 'r', false],
    	    mathclap: ['MathLap', 'c', false],
    	    clap: ['MtLap', 'c'],
    	    textllap: ['MtLap', 'l'],
    	    textrlap: ['MtLap', 'r'],
    	    textclap: ['MtLap', 'c'],
    	    cramped: 'Cramped',
    	    crampedllap: ['MathLap', 'l', true],
    	    crampedrlap: ['MathLap', 'r', true],
    	    crampedclap: ['MathLap', 'c', true],
    	    crampedsubstack: ['Macro', '\\begin{crampedsubarray}{c}#1\\end{crampedsubarray}', 1],
    	    mathmbox: 'MathMBox',
    	    mathmakebox: 'MathMakeBox',
    	    overbracket: 'UnderOverBracket',
    	    underbracket: 'UnderOverBracket',
    	    refeq: 'HandleRef',
    	    MoveEqLeft: ['Macro', '\\hspace{#1em}&\\hspace{-#1em}', 1, '2'],
    	    Aboxed: 'Aboxed',
    	    ArrowBetweenLines: 'ArrowBetweenLines',
    	    vdotswithin: 'VDotsWithin',
    	    shortvdotswithin: 'ShortVDotsWithin',
    	    MTFlushSpaceAbove: 'FlushSpaceAbove',
    	    MTFlushSpaceBelow: 'FlushSpaceBelow',
    	    DeclarePairedDelimiter: 'DeclarePairedDelimiter',
    	    DeclarePairedDelimiterX: 'DeclarePairedDelimiterX',
    	    DeclarePairedDelimiterXPP: 'DeclarePairedDelimiterXPP',
    	    DeclarePairedDelimiters: 'DeclarePairedDelimiter',
    	    DeclarePairedDelimitersX: 'DeclarePairedDelimiterX',
    	    DeclarePairedDelimitersXPP: 'DeclarePairedDelimiterXPP',
    	    centercolon: ['CenterColon', true, true],
    	    ordinarycolon: ['CenterColon', false],
    	    MTThinColon: ['CenterColon', true, true, true],
    	    coloneqq: ['Relation', ':=', '\u2254'],
    	    Coloneqq: ['Relation', '::=', '\u2A74'],
    	    coloneq: ['Relation', ':-'],
    	    Coloneq: ['Relation', '::-'],
    	    eqqcolon: ['Relation', '=:', '\u2255'],
    	    Eqqcolon: ['Relation', '=::'],
    	    eqcolon: ['Relation', '-:', '\u2239'],
    	    Eqcolon: ['Relation', '-::'],
    	    colonapprox: ['Relation', ':\\approx'],
    	    Colonapprox: ['Relation', '::\\approx'],
    	    colonsim: ['Relation', ':\\sim'],
    	    Colonsim: ['Relation', '::\\sim'],
    	    dblcolon: ['Relation', '::', '\u2237'],
    	    nuparrow: ['NArrow', '\u2191', '.06em'],
    	    ndownarrow: ['NArrow', '\u2193', '.25em'],
    	    bigtimes: ['Macro', '\\mathop{\\Large\\kern-.1em\\boldsymbol{\\times}\\kern-.1em}'],
    	    splitfrac: ['SplitFrac', false],
    	    splitdfrac: ['SplitFrac', true],
    	    xmathstrut: 'XMathStrut',
    	    prescript: 'Prescript',
    	    newtagform: ['NewTagForm', false],
    	    renewtagform: ['NewTagForm', true],
    	    usetagform: 'UseTagForm',
    	    adjustlimits: [
    	        'MacroWithTemplate',
    	        '\\mathop{{#1}\\vphantom{{#3}}}_{{#2}\\vphantom{{#4}}}\\mathop{{#3}\\vphantom{{#1}}}_{{#4}\\vphantom{{#2}}}',
    	        4, , '_', , '_'
    	    ],
    	    mathtoolsset: 'SetOptions'
    	}, MathtoolsMethods_js_1.MathtoolsMethods);
    	new SymbolMap_js_1.EnvironmentMap('mathtools-environments', ParseMethods_js_1.default.environment, {
    	    dcases: ['Array', null, '\\{', '', 'll', null, '.2em', 'D'],
    	    rcases: ['Array', null, '', '\\}', 'll', null, '.2em'],
    	    drcases: ['Array', null, '', '\\}', 'll', null, '.2em', 'D'],
    	    'dcases*': ['Cases', null, '{', '', 'D'],
    	    'rcases*': ['Cases', null, '', '}'],
    	    'drcases*': ['Cases', null, '', '}', 'D'],
    	    'cases*': ['Cases', null, '{', ''],
    	    'matrix*': ['MtMatrix', null, null, null],
    	    'pmatrix*': ['MtMatrix', null, '(', ')'],
    	    'bmatrix*': ['MtMatrix', null, '[', ']'],
    	    'Bmatrix*': ['MtMatrix', null, '\\{', '\\}'],
    	    'vmatrix*': ['MtMatrix', null, '\\vert', '\\vert'],
    	    'Vmatrix*': ['MtMatrix', null, '\\Vert', '\\Vert'],
    	    'smallmatrix*': ['MtSmallMatrix', null, null, null],
    	    psmallmatrix: ['MtSmallMatrix', null, '(', ')', 'c'],
    	    'psmallmatrix*': ['MtSmallMatrix', null, '(', ')'],
    	    bsmallmatrix: ['MtSmallMatrix', null, '[', ']', 'c'],
    	    'bsmallmatrix*': ['MtSmallMatrix', null, '[', ']'],
    	    Bsmallmatrix: ['MtSmallMatrix', null, '\\{', '\\}', 'c'],
    	    'Bsmallmatrix*': ['MtSmallMatrix', null, '\\{', '\\}'],
    	    vsmallmatrix: ['MtSmallMatrix', null, '\\vert', '\\vert', 'c'],
    	    'vsmallmatrix*': ['MtSmallMatrix', null, '\\vert', '\\vert'],
    	    Vsmallmatrix: ['MtSmallMatrix', null, '\\Vert', '\\Vert', 'c'],
    	    'Vsmallmatrix*': ['MtSmallMatrix', null, '\\Vert', '\\Vert'],
    	    crampedsubarray: ['Array', null, null, null, null, '0em', '0.1em', 'S\'', 1],
    	    multlined: 'MtMultlined',
    	    spreadlines: ['SpreadLines', true],
    	    lgathered: ['AmsEqnArray', null, null, null, 'l', null, '.5em', 'D'],
    	    rgathered: ['AmsEqnArray', null, null, null, 'r', null, '.5em', 'D'],
    	}, MathtoolsMethods_js_1.MathtoolsMethods);
    	new SymbolMap_js_1.DelimiterMap('mathtools-delimiters', ParseMethods_js_1.default.delimiter, {
    	    '\\lparen': '(',
    	    '\\rparen': ')'
    	});
    	new SymbolMap_js_1.CommandMap('mathtools-characters', {
    	    ':': ['CenterColon', true]
    	}, MathtoolsMethods_js_1.MathtoolsMethods);
    	
    	return MathtoolsMappings;
    }

    var MathtoolsTags = {};

    var hasRequiredMathtoolsTags;

    function requireMathtoolsTags () {
    	if (hasRequiredMathtoolsTags) return MathtoolsTags;
    	hasRequiredMathtoolsTags = 1;
    	var __extends = (MathtoolsTags.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __values = (MathtoolsTags.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (MathtoolsTags.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __importDefault = (MathtoolsTags.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(MathtoolsTags, "__esModule", { value: true });
    	MathtoolsTags.MathtoolsTagFormat = undefined;
    	var TexError_js_1 = __importDefault(requireTexError());
    	var Tags_js_1 = requireTags();
    	var tagID = 0;
    	function MathtoolsTagFormat(config, jax) {
    	    var tags = jax.parseOptions.options.tags;
    	    if (tags !== 'base' && config.tags.hasOwnProperty(tags)) {
    	        Tags_js_1.TagsFactory.add(tags, config.tags[tags]);
    	    }
    	    var TagClass = Tags_js_1.TagsFactory.create(jax.parseOptions.options.tags).constructor;
    	    var TagFormat = (function (_super) {
    	        __extends(TagFormat, _super);
    	        function TagFormat() {
    	            var e_1, _a;
    	            var _this = _super.call(this) || this;
    	            _this.mtFormats = new Map();
    	            _this.mtCurrent = null;
    	            var forms = jax.parseOptions.options.mathtools.tagforms;
    	            try {
    	                for (var _b = __values(Object.keys(forms)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                    var form = _c.value;
    	                    if (!Array.isArray(forms[form]) || forms[form].length !== 3) {
    	                        throw new TexError_js_1.default('InvalidTagFormDef', 'The tag form definition for "%1" should be an array fo three strings', form);
    	                    }
    	                    _this.mtFormats.set(form, forms[form]);
    	                }
    	            }
    	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	            finally {
    	                try {
    	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	                }
    	                finally { if (e_1) throw e_1.error; }
    	            }
    	            return _this;
    	        }
    	        TagFormat.prototype.formatTag = function (tag) {
    	            if (this.mtCurrent) {
    	                var _a = __read(this.mtCurrent, 3), left = _a[0], right = _a[1], format = _a[2];
    	                return (format ? "".concat(left).concat(format, "{").concat(tag, "}").concat(right) : "".concat(left).concat(tag).concat(right));
    	            }
    	            return _super.prototype.formatTag.call(this, tag);
    	        };
    	        return TagFormat;
    	    }(TagClass));
    	    tagID++;
    	    var tagName = 'MathtoolsTags-' + tagID;
    	    Tags_js_1.TagsFactory.add(tagName, TagFormat);
    	    jax.parseOptions.options.tags = tagName;
    	}
    	MathtoolsTags.MathtoolsTagFormat = MathtoolsTagFormat;
    	
    	return MathtoolsTags;
    }

    var MathtoolsItems = {};

    var hasRequiredMathtoolsItems;

    function requireMathtoolsItems () {
    	if (hasRequiredMathtoolsItems) return MathtoolsItems;
    	hasRequiredMathtoolsItems = 1;
    	var __extends = (MathtoolsItems.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __importDefault = (MathtoolsItems.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(MathtoolsItems, "__esModule", { value: true });
    	MathtoolsItems.MultlinedItem = undefined;
    	var AmsItems_js_1 = requireAmsItems();
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var TexConstants_js_1 = requireTexConstants();
    	var MultlinedItem = (function (_super) {
    	    __extends(MultlinedItem, _super);
    	    function MultlinedItem() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Object.defineProperty(MultlinedItem.prototype, "kind", {
    	        get: function () {
    	            return 'multlined';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    MultlinedItem.prototype.EndTable = function () {
    	        if (this.Size() || this.row.length) {
    	            this.EndEntry();
    	            this.EndRow();
    	        }
    	        if (this.table.length > 1) {
    	            var options = this.factory.configuration.options.mathtools;
    	            var gap = options.multlinegap;
    	            var firstskip = options['firstline-afterskip'] || gap;
    	            var lastskip = options['lastline-preskip'] || gap;
    	            var first = NodeUtil_js_1.default.getChildren(this.table[0])[0];
    	            if (NodeUtil_js_1.default.getAttribute(first, 'columnalign') !== TexConstants_js_1.TexConstant.Align.RIGHT) {
    	                first.appendChild(this.create('node', 'mspace', [], { width: firstskip }));
    	            }
    	            var last = NodeUtil_js_1.default.getChildren(this.table[this.table.length - 1])[0];
    	            if (NodeUtil_js_1.default.getAttribute(last, 'columnalign') !== TexConstants_js_1.TexConstant.Align.LEFT) {
    	                var top_1 = NodeUtil_js_1.default.getChildren(last)[0];
    	                top_1.childNodes.unshift(null);
    	                var space = this.create('node', 'mspace', [], { width: lastskip });
    	                NodeUtil_js_1.default.setChild(top_1, 0, space);
    	            }
    	        }
    	        _super.prototype.EndTable.call(this);
    	    };
    	    return MultlinedItem;
    	}(AmsItems_js_1.MultlineItem));
    	MathtoolsItems.MultlinedItem = MultlinedItem;
    	
    	return MathtoolsItems;
    }

    var hasRequiredMathtoolsConfiguration;

    function requireMathtoolsConfiguration () {
    	if (hasRequiredMathtoolsConfiguration) return MathtoolsConfiguration;
    	hasRequiredMathtoolsConfiguration = 1;
    	(function (exports) {
    		var __values = (MathtoolsConfiguration.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __importDefault = (MathtoolsConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		var _a;
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.MathtoolsConfiguration = exports.fixPrescripts = exports.PAIREDDELIMS = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    		var Options_js_1 = requireOptions();
    		requireMathtoolsMappings();
    		var MathtoolsUtil_js_1 = requireMathtoolsUtil();
    		var MathtoolsTags_js_1 = requireMathtoolsTags();
    		var MathtoolsItems_js_1 = requireMathtoolsItems();
    		exports.PAIREDDELIMS = 'mathtools-paired-delims';
    		function initMathtools(config) {
    		    new SymbolMap_js_1.CommandMap(exports.PAIREDDELIMS, {}, {});
    		    config.append(Configuration_js_1.Configuration.local({ handler: { macro: [exports.PAIREDDELIMS] }, priority: -5 }));
    		}
    		function configMathtools(config, jax) {
    		    var e_1, _a;
    		    var parser = jax.parseOptions;
    		    var pairedDelims = parser.options.mathtools.pairedDelimiters;
    		    try {
    		        for (var _b = __values(Object.keys(pairedDelims)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		            var cs = _c.value;
    		            MathtoolsUtil_js_1.MathtoolsUtil.addPairedDelims(parser, cs, pairedDelims[cs]);
    		        }
    		    }
    		    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		    finally {
    		        try {
    		            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		        }
    		        finally { if (e_1) throw e_1.error; }
    		    }
    		    (0, MathtoolsTags_js_1.MathtoolsTagFormat)(config, jax);
    		}
    		function fixPrescripts(_a) {
    		    var e_2, _b, e_3, _c, e_4, _d;
    		    var data = _a.data;
    		    try {
    		        for (var _e = __values(data.getList('mmultiscripts')), _f = _e.next(); !_f.done; _f = _e.next()) {
    		            var node = _f.value;
    		            if (!node.getProperty('fixPrescript'))
    		                continue;
    		            var childNodes = NodeUtil_js_1.default.getChildren(node);
    		            var n = 0;
    		            try {
    		                for (var _g = (e_3 = void 0, __values([1, 2])), _h = _g.next(); !_h.done; _h = _g.next()) {
    		                    var i = _h.value;
    		                    if (!childNodes[i]) {
    		                        NodeUtil_js_1.default.setChild(node, i, data.nodeFactory.create('node', 'none'));
    		                        n++;
    		                    }
    		                }
    		            }
    		            catch (e_3_1) { e_3 = { error: e_3_1 }; }
    		            finally {
    		                try {
    		                    if (_h && !_h.done && (_c = _g.return)) _c.call(_g);
    		                }
    		                finally { if (e_3) throw e_3.error; }
    		            }
    		            try {
    		                for (var _j = (e_4 = void 0, __values([4, 5])), _k = _j.next(); !_k.done; _k = _j.next()) {
    		                    var i = _k.value;
    		                    if (NodeUtil_js_1.default.isType(childNodes[i], 'mrow') && NodeUtil_js_1.default.getChildren(childNodes[i]).length === 0) {
    		                        NodeUtil_js_1.default.setChild(node, i, data.nodeFactory.create('node', 'none'));
    		                    }
    		                }
    		            }
    		            catch (e_4_1) { e_4 = { error: e_4_1 }; }
    		            finally {
    		                try {
    		                    if (_k && !_k.done && (_d = _j.return)) _d.call(_j);
    		                }
    		                finally { if (e_4) throw e_4.error; }
    		            }
    		            if (n === 2) {
    		                childNodes.splice(1, 2);
    		            }
    		        }
    		    }
    		    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    		    finally {
    		        try {
    		            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
    		        }
    		        finally { if (e_2) throw e_2.error; }
    		    }
    		}
    		exports.fixPrescripts = fixPrescripts;
    		exports.MathtoolsConfiguration = Configuration_js_1.Configuration.create('mathtools', {
    		    handler: {
    		        macro: ['mathtools-macros', 'mathtools-delimiters'],
    		        environment: ['mathtools-environments'],
    		        delimiter: ['mathtools-delimiters'],
    		        character: ['mathtools-characters']
    		    },
    		    items: (_a = {},
    		        _a[MathtoolsItems_js_1.MultlinedItem.prototype.kind] = MathtoolsItems_js_1.MultlinedItem,
    		        _a),
    		    init: initMathtools,
    		    config: configMathtools,
    		    postprocessors: [[fixPrescripts, -6]],
    		    options: {
    		        mathtools: {
    		            'multlinegap': '1em',
    		            'multlined-pos': 'c',
    		            'firstline-afterskip': '',
    		            'lastline-preskip': '',
    		            'smallmatrix-align': 'c',
    		            'shortvdotsadjustabove': '.2em',
    		            'shortvdotsadjustbelow': '.2em',
    		            'centercolon': false,
    		            'centercolon-offset': '.04em',
    		            'thincolon-dx': '-.04em',
    		            'thincolon-dw': '-.08em',
    		            'use-unicode': false,
    		            'prescript-sub-format': '',
    		            'prescript-sup-format': '',
    		            'prescript-arg-format': '',
    		            'allow-mathtoolsset': true,
    		            pairedDelimiters: (0, Options_js_1.expandable)({}),
    		            tagforms: (0, Options_js_1.expandable)({}),
    		        }
    		    }
    		});
    		
    	} (MathtoolsConfiguration));
    	return MathtoolsConfiguration;
    }

    var MhchemConfiguration = {};

    var mhchemParser = {};

    var hasRequiredMhchemParser;

    function requireMhchemParser () {
    	if (hasRequiredMhchemParser) return mhchemParser;
    	hasRequiredMhchemParser = 1;
    	/*!
    	 *************************************************************************
    	 *
    	 *  mhchemParser.ts
    	 *  4.2.1
    	 *
    	 *  Parser for the \ce command and \pu command for MathJax and Co.
    	 *
    	 *  mhchem's \ce is a tool for writing beautiful chemical equations easily.
    	 *  mhchem's \pu is a tool for writing physical units easily.
    	 *
    	 *  ----------------------------------------------------------------------
    	 *
    	 *  Copyright (c) 2015-2023 Martin Hensel
    	 *
    	 *  Licensed under the Apache License, Version 2.0 (the "License");
    	 *  you may not use this file except in compliance with the License.
    	 *  You may obtain a copy of the License at
    	 *
    	 *      http://www.apache.org/licenses/LICENSE-2.0
    	 *
    	 *  Unless required by applicable law or agreed to in writing, software
    	 *  distributed under the License is distributed on an "AS IS" BASIS,
    	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    	 *  See the License for the specific language governing permissions and
    	 *  limitations under the License.
    	 *
    	 *  ----------------------------------------------------------------------
    	 *
    	 *  https://github.com/mhchem/mhchemParser
    	 *
    	 */
    	Object.defineProperty(mhchemParser, "__esModule", { value: true });
    	mhchemParser.mhchemParser = undefined;
    	var mhchemParser$1 = (function () {
    	    function mhchemParser() {
    	    }
    	    mhchemParser.toTex = function (input, type) {
    	        return _mhchemTexify.go(_mhchemParser.go(input, type), type !== "tex");
    	    };
    	    return mhchemParser;
    	}());
    	mhchemParser.mhchemParser = mhchemParser$1;
    	function _mhchemCreateTransitions(o) {
    	    var pattern, state;
    	    var transitions = {};
    	    for (pattern in o) {
    	        for (state in o[pattern]) {
    	            var stateArray = state.split("|");
    	            o[pattern][state].stateArray = stateArray;
    	            for (var i = 0; i < stateArray.length; i++) {
    	                transitions[stateArray[i]] = [];
    	            }
    	        }
    	    }
    	    for (pattern in o) {
    	        for (state in o[pattern]) {
    	            var stateArray = o[pattern][state].stateArray || [];
    	            for (var i = 0; i < stateArray.length; i++) {
    	                var p = o[pattern][state];
    	                p.action_ = [].concat(p.action_);
    	                for (var k = 0; k < p.action_.length; k++) {
    	                    if (typeof p.action_[k] === "string") {
    	                        p.action_[k] = { type_: p.action_[k] };
    	                    }
    	                }
    	                var patternArray = pattern.split("|");
    	                for (var j = 0; j < patternArray.length; j++) {
    	                    if (stateArray[i] === '*') {
    	                        var t = undefined;
    	                        for (t in transitions) {
    	                            transitions[t].push({ pattern: patternArray[j], task: p });
    	                        }
    	                    }
    	                    else {
    	                        transitions[stateArray[i]].push({ pattern: patternArray[j], task: p });
    	                    }
    	                }
    	            }
    	        }
    	    }
    	    return transitions;
    	}
    	var _mhchemParser = {
    	    go: function (input, stateMachine) {
    	        if (!input) {
    	            return [];
    	        }
    	        if (stateMachine === undefined) {
    	            stateMachine = 'ce';
    	        }
    	        var state = '0';
    	        var buffer = {};
    	        buffer['parenthesisLevel'] = 0;
    	        input = input.replace(/\n/g, " ");
    	        input = input.replace(/[\u2212\u2013\u2014\u2010]/g, "-");
    	        input = input.replace(/[\u2026]/g, "...");
    	        var lastInput;
    	        var watchdog = 10;
    	        var output = [];
    	        while (true) {
    	            if (lastInput !== input) {
    	                watchdog = 10;
    	                lastInput = input;
    	            }
    	            else {
    	                watchdog--;
    	            }
    	            var machine = _mhchemParser.stateMachines[stateMachine];
    	            var t = machine.transitions[state] || machine.transitions['*'];
    	            iterateTransitions: for (var i = 0; i < t.length; i++) {
    	                var matches = _mhchemParser.patterns.match_(t[i].pattern, input);
    	                if (matches) {
    	                    var task = t[i].task;
    	                    for (var iA = 0; iA < task.action_.length; iA++) {
    	                        var o = undefined;
    	                        if (machine.actions[task.action_[iA].type_]) {
    	                            o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);
    	                        }
    	                        else if (_mhchemParser.actions[task.action_[iA].type_]) {
    	                            o = _mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);
    	                        }
    	                        else {
    	                            throw ["MhchemBugA", "mhchem bug A. Please report. (" + task.action_[iA].type_ + ")"];
    	                        }
    	                        _mhchemParser.concatArray(output, o);
    	                    }
    	                    state = task.nextState || state;
    	                    if (input.length > 0) {
    	                        if (!task.revisit) {
    	                            input = matches.remainder;
    	                        }
    	                        if (!task.toContinue) {
    	                            break iterateTransitions;
    	                        }
    	                    }
    	                    else {
    	                        return output;
    	                    }
    	                }
    	            }
    	            if (watchdog <= 0) {
    	                throw ["MhchemBugU", "mhchem bug U. Please report."];
    	            }
    	        }
    	    },
    	    concatArray: function (a, b) {
    	        if (b) {
    	            if (Array.isArray(b)) {
    	                for (var iB = 0; iB < b.length; iB++) {
    	                    a.push(b[iB]);
    	                }
    	            }
    	            else {
    	                a.push(b);
    	            }
    	        }
    	    },
    	    patterns: {
    	        patterns: {
    	            'empty': /^$/,
    	            'else': /^./,
    	            'else2': /^./,
    	            'space': /^\s/,
    	            'space A': /^\s(?=[A-Z\\$])/,
    	            'space$': /^\s$/,
    	            'a-z': /^[a-z]/,
    	            'x': /^x/,
    	            'x$': /^x$/,
    	            'i$': /^i$/,
    	            'letters': /^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,
    	            '\\greek': /^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,
    	            'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,
    	            '$one lowercase latin letter$ $': /^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,
    	            'one lowercase greek letter $': /^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,
    	            'digits': /^[0-9]+/,
    	            '-9.,9': /^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,
    	            '-9.,9 no missing 0': /^[+\-]?[0-9]+(?:[.,][0-9]+)?/,
    	            '(-)(9.,9)(e)(99)': function (input) {
    	                var match = input.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:(?:([eE])|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/);
    	                if (match && match[0]) {
    	                    return { match_: match.slice(1), remainder: input.substr(match[0].length) };
    	                }
    	                return null;
    	            },
    	            '(-)(9)^(-9)': /^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/,
    	            'state of aggregation $': function (input) {
    	                var a = _mhchemParser.patterns.findObserveGroups(input, "", /^\([a-z]{1,3}(?=[\),])/, ")", "");
    	                if (a && a.remainder.match(/^($|[\s,;\)\]\}])/)) {
    	                    return a;
    	                }
    	                var match = input.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/);
    	                if (match) {
    	                    return { match_: match[0], remainder: input.substr(match[0].length) };
    	                }
    	                return null;
    	            },
    	            '_{(state of aggregation)}$': /^_\{(\([a-z]{1,3}\))\}/,
    	            '{[(': /^(?:\\\{|\[|\()/,
    	            ')]}': /^(?:\)|\]|\\\})/,
    	            ', ': /^[,;]\s*/,
    	            ',': /^[,;]/,
    	            '.': /^[.]/,
    	            '. __* ': /^([.\u22C5\u00B7\u2022]|[*])\s*/,
    	            '...': /^\.\.\.(?=$|[^.])/,
    	            '^{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "^{", "", "", "}"); },
    	            '^($...$)': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "^", "$", "$", ""); },
    	            '^a': /^\^([0-9]+|[^\\_])/,
    	            '^\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "^", /^\\[a-zA-Z]+\{/, "}", "", "", "{", "}", "", true); },
    	            '^\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "^", /^\\[a-zA-Z]+\{/, "}", ""); },
    	            '^\\x': /^\^(\\[a-zA-Z]+)\s*/,
    	            '^(-1)': /^\^(-?\d+)/,
    	            '\'': /^'/,
    	            '_{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "_{", "", "", "}"); },
    	            '_($...$)': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "_", "$", "$", ""); },
    	            '_9': /^_([+\-]?[0-9]+|[^\\])/,
    	            '_\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "_", /^\\[a-zA-Z]+\{/, "}", "", "", "{", "}", "", true); },
    	            '_\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "_", /^\\[a-zA-Z]+\{/, "}", ""); },
    	            '_\\x': /^_(\\[a-zA-Z]+)\s*/,
    	            '^_': /^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,
    	            '{}^': /^\{\}(?=\^)/,
    	            '{}': /^\{\}/,
    	            '{...}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "", "{", "}", ""); },
    	            '{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "{", "", "", "}"); },
    	            '$...$': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "", "$", "$", ""); },
    	            '${(...)}$__$(...)$': function (input) {
    	                return _mhchemParser.patterns.findObserveGroups(input, "${", "", "", "}$") || _mhchemParser.patterns.findObserveGroups(input, "$", "", "", "$");
    	            },
    	            '=<>': /^[=<>]/,
    	            '#': /^[#\u2261]/,
    	            '+': /^\+/,
    	            '-$': /^-(?=[\s_},;\]/]|$|\([a-z]+\))/,
    	            '-9': /^-(?=[0-9])/,
    	            '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,
    	            '-': /^-/,
    	            'pm-operator': /^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,
    	            'operator': /^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,
    	            'arrowUpDown': /^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,
    	            '\\bond{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "\\bond{", "", "", "}"); },
    	            '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,
    	            'CMT': /^[CMT](?=\[)/,
    	            '[(...)]': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "[", "", "", "]"); },
    	            '1st-level escape': /^(&|\\\\|\\hline)\s*/,
    	            '\\,': /^(?:\\[,\ ;:])/,
    	            '\\x{}{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "", /^\\[a-zA-Z]+\{/, "}", "", "", "{", "}", "", true); },
    	            '\\x{}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "", /^\\[a-zA-Z]+\{/, "}", ""); },
    	            '\\ca': /^\\ca(?:\s+|(?![a-zA-Z]))/,
    	            '\\x': /^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,
    	            'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,
    	            'others': /^[\/~|]/,
    	            '\\frac{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "\\frac{", "", "", "}", "{", "", "", "}"); },
    	            '\\overset{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "\\overset{", "", "", "}", "{", "", "", "}"); },
    	            '\\underset{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "\\underset{", "", "", "}", "{", "", "", "}"); },
    	            '\\underbrace{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "\\underbrace{", "", "", "}_", "{", "", "", "}"); },
    	            '\\color{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "\\color{", "", "", "}"); },
    	            '\\color{(...)}{(...)}': function (input) {
    	                return _mhchemParser.patterns.findObserveGroups(input, "\\color{", "", "", "}", "{", "", "", "}") ||
    	                    _mhchemParser.patterns.findObserveGroups(input, "\\color", "\\", "", /^(?=\{)/, "{", "", "", "}");
    	            },
    	            '\\ce{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "\\ce{", "", "", "}"); },
    	            '\\pu{(...)}': function (input) { return _mhchemParser.patterns.findObserveGroups(input, "\\pu{", "", "", "}"); },
    	            'oxidation$': /^(?:[+-][IVX]+|(?:\\pm|\$\\pm\$|\+-|\+\/-)\s*0)$/,
    	            'd-oxidation$': /^(?:[+-]?[IVX]+|(?:\\pm|\$\\pm\$|\+-|\+\/-)\s*0)$/,
    	            '1/2$': /^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,
    	            'amount': function (input) {
    	                var match;
    	                match = input.match(/^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/);
    	                if (match) {
    	                    return { match_: match[0], remainder: input.substr(match[0].length) };
    	                }
    	                var a = _mhchemParser.patterns.findObserveGroups(input, "", "$", "$", "");
    	                if (a) {
    	                    match = a.match_.match(/^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/);
    	                    if (match) {
    	                        return { match_: match[0], remainder: input.substr(match[0].length) };
    	                    }
    	                }
    	                return null;
    	            },
    	            'amount2': function (input) { return this['amount'](input); },
    	            '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,
    	            'formula$': function (input) {
    	                if (input.match(/^\([a-z]+\)$/)) {
    	                    return null;
    	                }
    	                var match = input.match(/^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/);
    	                if (match) {
    	                    return { match_: match[0], remainder: input.substr(match[0].length) };
    	                }
    	                return null;
    	            },
    	            'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,
    	            '/': /^\s*(\/)\s*/,
    	            '//': /^\s*(\/\/)\s*/,
    	            '*': /^\s*[*.]\s*/
    	        },
    	        findObserveGroups: function (input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {
    	            var _match = function (input, pattern) {
    	                if (typeof pattern === "string") {
    	                    if (input.indexOf(pattern) !== 0) {
    	                        return null;
    	                    }
    	                    return pattern;
    	                }
    	                else {
    	                    var match_1 = input.match(pattern);
    	                    if (!match_1) {
    	                        return null;
    	                    }
    	                    return match_1[0];
    	                }
    	            };
    	            var _findObserveGroups = function (input, i, endChars) {
    	                var braces = 0;
    	                while (i < input.length) {
    	                    var a = input.charAt(i);
    	                    var match_2 = _match(input.substr(i), endChars);
    	                    if (match_2 !== null && braces === 0) {
    	                        return { endMatchBegin: i, endMatchEnd: i + match_2.length };
    	                    }
    	                    else if (a === "{") {
    	                        braces++;
    	                    }
    	                    else if (a === "}") {
    	                        if (braces === 0) {
    	                            throw ["ExtraCloseMissingOpen", "Extra close brace or missing open brace"];
    	                        }
    	                        else {
    	                            braces--;
    	                        }
    	                    }
    	                    i++;
    	                }
    	                if (braces > 0) {
    	                    return null;
    	                }
    	                return null;
    	            };
    	            var match = _match(input, begExcl);
    	            if (match === null) {
    	                return null;
    	            }
    	            input = input.substr(match.length);
    	            match = _match(input, begIncl);
    	            if (match === null) {
    	                return null;
    	            }
    	            var e = _findObserveGroups(input, match.length, endIncl || endExcl);
    	            if (e === null) {
    	                return null;
    	            }
    	            var match1 = input.substring(0, (endIncl ? e.endMatchEnd : e.endMatchBegin));
    	            if (!(beg2Excl || beg2Incl)) {
    	                return {
    	                    match_: match1,
    	                    remainder: input.substr(e.endMatchEnd)
    	                };
    	            }
    	            else {
    	                var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);
    	                if (group2 === null) {
    	                    return null;
    	                }
    	                var matchRet = [match1, group2.match_];
    	                return {
    	                    match_: (combine ? matchRet.join("") : matchRet),
    	                    remainder: group2.remainder
    	                };
    	            }
    	        },
    	        match_: function (m, input) {
    	            var pattern = _mhchemParser.patterns.patterns[m];
    	            if (pattern === undefined) {
    	                throw ["MhchemBugP", "mhchem bug P. Please report. (" + m + ")"];
    	            }
    	            else if (typeof pattern === "function") {
    	                return _mhchemParser.patterns.patterns[m](input);
    	            }
    	            else {
    	                var match = input.match(pattern);
    	                if (match) {
    	                    if (match.length > 2) {
    	                        return { match_: match.slice(1), remainder: input.substr(match[0].length) };
    	                    }
    	                    else {
    	                        return { match_: match[1] || match[0], remainder: input.substr(match[0].length) };
    	                    }
    	                }
    	                return null;
    	            }
    	        }
    	    },
    	    actions: {
    	        'a=': function (buffer, m) { buffer.a = (buffer.a || "") + m; return undefined; },
    	        'b=': function (buffer, m) { buffer.b = (buffer.b || "") + m; return undefined; },
    	        'p=': function (buffer, m) { buffer.p = (buffer.p || "") + m; return undefined; },
    	        'o=': function (buffer, m) { buffer.o = (buffer.o || "") + m; return undefined; },
    	        'o=+p1': function (buffer, _m, a) { buffer.o = (buffer.o || "") + a; return undefined; },
    	        'q=': function (buffer, m) { buffer.q = (buffer.q || "") + m; return undefined; },
    	        'd=': function (buffer, m) { buffer.d = (buffer.d || "") + m; return undefined; },
    	        'rm=': function (buffer, m) { buffer.rm = (buffer.rm || "") + m; return undefined; },
    	        'text=': function (buffer, m) { buffer.text_ = (buffer.text_ || "") + m; return undefined; },
    	        'insert': function (_buffer, _m, a) { return { type_: a }; },
    	        'insert+p1': function (_buffer, m, a) { return { type_: a, p1: m }; },
    	        'insert+p1+p2': function (_buffer, m, a) { return { type_: a, p1: m[0], p2: m[1] }; },
    	        'copy': function (_buffer, m) { return m; },
    	        'write': function (_buffer, _m, a) { return a; },
    	        'rm': function (_buffer, m) { return { type_: 'rm', p1: m }; },
    	        'text': function (_buffer, m) { return _mhchemParser.go(m, 'text'); },
    	        'tex-math': function (_buffer, m) { return _mhchemParser.go(m, 'tex-math'); },
    	        'tex-math tight': function (_buffer, m) { return _mhchemParser.go(m, 'tex-math tight'); },
    	        'bond': function (_buffer, m, k) { return { type_: 'bond', kind_: k || m }; },
    	        'color0-output': function (_buffer, m) { return { type_: 'color0', color: m }; },
    	        'ce': function (_buffer, m) { return _mhchemParser.go(m, 'ce'); },
    	        'pu': function (_buffer, m) { return _mhchemParser.go(m, 'pu'); },
    	        '1/2': function (_buffer, m) {
    	            var ret = [];
    	            if (m.match(/^[+\-]/)) {
    	                ret.push(m.substr(0, 1));
    	                m = m.substr(1);
    	            }
    	            var n = m.match(/^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/);
    	            n[1] = n[1].replace(/\$/g, "");
    	            ret.push({ type_: 'frac', p1: n[1], p2: n[2] });
    	            if (n[3]) {
    	                n[3] = n[3].replace(/\$/g, "");
    	                ret.push({ type_: 'tex-math', p1: n[3] });
    	            }
    	            return ret;
    	        },
    	        '9,9': function (_buffer, m) { return _mhchemParser.go(m, '9,9'); }
    	    },
    	    stateMachines: {
    	        'tex': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '0': { action_: 'copy' }
    	                },
    	                '\\ce{(...)}': {
    	                    '0': { action_: [{ type_: 'write', option: "{" }, 'ce', { type_: 'write', option: "}" }] }
    	                },
    	                '\\pu{(...)}': {
    	                    '0': { action_: [{ type_: 'write', option: "{" }, 'pu', { type_: 'write', option: "}" }] }
    	                },
    	                'else': {
    	                    '0': { action_: 'copy' }
    	                },
    	            }),
    	            actions: {}
    	        },
    	        'ce': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: 'output' }
    	                },
    	                'else': {
    	                    '0|1|2': { action_: 'beginsWithBond=false', revisit: true, toContinue: true }
    	                },
    	                'oxidation$': {
    	                    '0': { action_: 'oxidation-output' }
    	                },
    	                'CMT': {
    	                    'r': { action_: 'rdt=', nextState: 'rt' },
    	                    'rd': { action_: 'rqt=', nextState: 'rdt' }
    	                },
    	                'arrowUpDown': {
    	                    '0|1|2|as': { action_: ['sb=false', 'output', 'operator'], nextState: '1' }
    	                },
    	                'uprightEntities': {
    	                    '0|1|2': { action_: ['o=', 'output'], nextState: '1' }
    	                },
    	                'orbital': {
    	                    '0|1|2|3': { action_: 'o=', nextState: 'o' }
    	                },
    	                '->': {
    	                    '0|1|2|3': { action_: 'r=', nextState: 'r' },
    	                    'a|as': { action_: ['output', 'r='], nextState: 'r' },
    	                    '*': { action_: ['output', 'r='], nextState: 'r' }
    	                },
    	                '+': {
    	                    'o': { action_: 'd= kv', nextState: 'd' },
    	                    'd|D': { action_: 'd=', nextState: 'd' },
    	                    'q': { action_: 'd=', nextState: 'qd' },
    	                    'qd|qD': { action_: 'd=', nextState: 'qd' },
    	                    'dq': { action_: ['output', 'd='], nextState: 'd' },
    	                    '3': { action_: ['sb=false', 'output', 'operator'], nextState: '0' }
    	                },
    	                'amount': {
    	                    '0|2': { action_: 'a=', nextState: 'a' }
    	                },
    	                'pm-operator': {
    	                    '0|1|2|a|as': { action_: ['sb=false', 'output', { type_: 'operator', option: '\\pm' }], nextState: '0' }
    	                },
    	                'operator': {
    	                    '0|1|2|a|as': { action_: ['sb=false', 'output', 'operator'], nextState: '0' }
    	                },
    	                '-$': {
    	                    'o|q': { action_: ['charge or bond', 'output'], nextState: 'qd' },
    	                    'd': { action_: 'd=', nextState: 'd' },
    	                    'D': { action_: ['output', { type_: 'bond', option: "-" }], nextState: '3' },
    	                    'q': { action_: 'd=', nextState: 'qd' },
    	                    'qd': { action_: 'd=', nextState: 'qd' },
    	                    'qD|dq': { action_: ['output', { type_: 'bond', option: "-" }], nextState: '3' }
    	                },
    	                '-9': {
    	                    '3|o': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '3' }
    	                },
    	                '- orbital overlap': {
    	                    'o': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' },
    	                    'd': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' }
    	                },
    	                '-': {
    	                    '0|1|2': { action_: [{ type_: 'output', option: 1 }, 'beginsWithBond=true', { type_: 'bond', option: "-" }], nextState: '3' },
    	                    '3': { action_: { type_: 'bond', option: "-" } },
    	                    'a': { action_: ['output', { type_: 'insert', option: 'hyphen' }], nextState: '2' },
    	                    'as': { action_: [{ type_: 'output', option: 2 }, { type_: 'bond', option: "-" }], nextState: '3' },
    	                    'b': { action_: 'b=' },
    	                    'o': { action_: { type_: '- after o/d', option: false }, nextState: '2' },
    	                    'q': { action_: { type_: '- after o/d', option: false }, nextState: '2' },
    	                    'd|qd|dq': { action_: { type_: '- after o/d', option: true }, nextState: '2' },
    	                    'D|qD|p': { action_: ['output', { type_: 'bond', option: "-" }], nextState: '3' }
    	                },
    	                'amount2': {
    	                    '1|3': { action_: 'a=', nextState: 'a' }
    	                },
    	                'letters': {
    	                    '0|1|2|3|a|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },
    	                    'q|dq': { action_: ['output', 'o='], nextState: 'o' },
    	                    'd|D|qd|qD': { action_: 'o after d', nextState: 'o' }
    	                },
    	                'digits': {
    	                    'o': { action_: 'q=', nextState: 'q' },
    	                    'd|D': { action_: 'q=', nextState: 'dq' },
    	                    'q': { action_: ['output', 'o='], nextState: 'o' },
    	                    'a': { action_: 'o=', nextState: 'o' }
    	                },
    	                'space A': {
    	                    'b|p|bp': { action_: [] }
    	                },
    	                'space': {
    	                    'a': { action_: [], nextState: 'as' },
    	                    '0': { action_: 'sb=false' },
    	                    '1|2': { action_: 'sb=true' },
    	                    'r|rt|rd|rdt|rdq': { action_: 'output', nextState: '0' },
    	                    '*': { action_: ['output', 'sb=true'], nextState: '1' }
    	                },
    	                '1st-level escape': {
    	                    '1|2': { action_: ['output', { type_: 'insert+p1', option: '1st-level escape' }] },
    	                    '*': { action_: ['output', { type_: 'insert+p1', option: '1st-level escape' }], nextState: '0' }
    	                },
    	                '[(...)]': {
    	                    'r|rt': { action_: 'rd=', nextState: 'rd' },
    	                    'rd|rdt': { action_: 'rq=', nextState: 'rdq' }
    	                },
    	                '...': {
    	                    'o|d|D|dq|qd|qD': { action_: ['output', { type_: 'bond', option: "..." }], nextState: '3' },
    	                    '*': { action_: [{ type_: 'output', option: 1 }, { type_: 'insert', option: 'ellipsis' }], nextState: '1' }
    	                },
    	                '. __* ': {
    	                    '*': { action_: ['output', { type_: 'insert', option: 'addition compound' }], nextState: '1' }
    	                },
    	                'state of aggregation $': {
    	                    '*': { action_: ['output', 'state of aggregation'], nextState: '1' }
    	                },
    	                '{[(': {
    	                    'a|as|o': { action_: ['o=', 'output', 'parenthesisLevel++'], nextState: '2' },
    	                    '0|1|2|3': { action_: ['o=', 'output', 'parenthesisLevel++'], nextState: '2' },
    	                    '*': { action_: ['output', 'o=', 'output', 'parenthesisLevel++'], nextState: '2' }
    	                },
    	                ')]}': {
    	                    '0|1|2|3|b|p|bp|o': { action_: ['o=', 'parenthesisLevel--'], nextState: 'o' },
    	                    'a|as|d|D|q|qd|qD|dq': { action_: ['output', 'o=', 'parenthesisLevel--'], nextState: 'o' }
    	                },
    	                ', ': {
    	                    '*': { action_: ['output', 'comma'], nextState: '0' }
    	                },
    	                '^_': {
    	                    '*': { action_: [] }
    	                },
    	                '^{(...)}|^($...$)': {
    	                    '0|1|2|as': { action_: 'b=', nextState: 'b' },
    	                    'p': { action_: 'b=', nextState: 'bp' },
    	                    '3|o': { action_: 'd= kv', nextState: 'D' },
    	                    'q': { action_: 'd=', nextState: 'qD' },
    	                    'd|D|qd|qD|dq': { action_: ['output', 'd='], nextState: 'D' }
    	                },
    	                '^a|^\\x{}{}|^\\x{}|^\\x|\'': {
    	                    '0|1|2|as': { action_: 'b=', nextState: 'b' },
    	                    'p': { action_: 'b=', nextState: 'bp' },
    	                    '3|o': { action_: 'd= kv', nextState: 'd' },
    	                    'q': { action_: 'd=', nextState: 'qd' },
    	                    'd|qd|D|qD': { action_: 'd=' },
    	                    'dq': { action_: ['output', 'd='], nextState: 'd' }
    	                },
    	                '_{(state of aggregation)}$': {
    	                    'd|D|q|qd|qD|dq': { action_: ['output', 'q='], nextState: 'q' }
    	                },
    	                '_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x': {
    	                    '0|1|2|as': { action_: 'p=', nextState: 'p' },
    	                    'b': { action_: 'p=', nextState: 'bp' },
    	                    '3|o': { action_: 'q=', nextState: 'q' },
    	                    'd|D': { action_: 'q=', nextState: 'dq' },
    	                    'q|qd|qD|dq': { action_: ['output', 'q='], nextState: 'q' }
    	                },
    	                '=<>': {
    	                    '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': { action_: [{ type_: 'output', option: 2 }, 'bond'], nextState: '3' }
    	                },
    	                '#': {
    	                    '0|1|2|3|a|as|o': { action_: [{ type_: 'output', option: 2 }, { type_: 'bond', option: "#" }], nextState: '3' }
    	                },
    	                '{}^': {
    	                    '*': { action_: [{ type_: 'output', option: 1 }, { type_: 'insert', option: 'tinySkip' }], nextState: '1' }
    	                },
    	                '{}': {
    	                    '*': { action_: { type_: 'output', option: 1 }, nextState: '1' }
    	                },
    	                '{...}': {
    	                    '0|1|2|3|a|as|b|p|bp': { action_: 'o=', nextState: 'o' },
    	                    'o|d|D|q|qd|qD|dq': { action_: ['output', 'o='], nextState: 'o' }
    	                },
    	                '$...$': {
    	                    'a': { action_: 'a=' },
    	                    '0|1|2|3|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },
    	                    'as|o': { action_: 'o=' },
    	                    'q|d|D|qd|qD|dq': { action_: ['output', 'o='], nextState: 'o' }
    	                },
    	                '\\bond{(...)}': {
    	                    '*': { action_: [{ type_: 'output', option: 2 }, 'bond'], nextState: "3" }
    	                },
    	                '\\frac{(...)}': {
    	                    '*': { action_: [{ type_: 'output', option: 1 }, 'frac-output'], nextState: '3' }
    	                },
    	                '\\overset{(...)}': {
    	                    '*': { action_: [{ type_: 'output', option: 2 }, 'overset-output'], nextState: '3' }
    	                },
    	                '\\underset{(...)}': {
    	                    '*': { action_: [{ type_: 'output', option: 2 }, 'underset-output'], nextState: '3' }
    	                },
    	                '\\underbrace{(...)}': {
    	                    '*': { action_: [{ type_: 'output', option: 2 }, 'underbrace-output'], nextState: '3' }
    	                },
    	                '\\color{(...)}{(...)}': {
    	                    '*': { action_: [{ type_: 'output', option: 2 }, 'color-output'], nextState: '3' }
    	                },
    	                '\\color{(...)}': {
    	                    '*': { action_: [{ type_: 'output', option: 2 }, 'color0-output'] }
    	                },
    	                '\\ce{(...)}': {
    	                    '*': { action_: [{ type_: 'output', option: 2 }, 'ce'], nextState: '3' }
    	                },
    	                '\\,': {
    	                    '*': { action_: [{ type_: 'output', option: 1 }, 'copy'], nextState: '1' }
    	                },
    	                '\\pu{(...)}': {
    	                    '*': { action_: ['output', { type_: 'write', option: "{" }, 'pu', { type_: 'write', option: "}" }], nextState: '3' }
    	                },
    	                '\\x{}{}|\\x{}|\\x': {
    	                    '0|1|2|3|a|as|b|p|bp|o|c0': { action_: ['o=', 'output'], nextState: '3' },
    	                    '*': { action_: ['output', 'o=', 'output'], nextState: '3' }
    	                },
    	                'others': {
    	                    '*': { action_: [{ type_: 'output', option: 1 }, 'copy'], nextState: '3' }
    	                },
    	                'else2': {
    	                    'a': { action_: 'a to o', nextState: 'o', revisit: true },
    	                    'as': { action_: ['output', 'sb=true'], nextState: '1', revisit: true },
    	                    'r|rt|rd|rdt|rdq': { action_: ['output'], nextState: '0', revisit: true },
    	                    '*': { action_: ['output', 'copy'], nextState: '3' }
    	                }
    	            }),
    	            actions: {
    	                'o after d': function (buffer, m) {
    	                    var ret;
    	                    if ((buffer.d || "").match(/^[1-9][0-9]*$/)) {
    	                        var tmp = buffer.d;
    	                        buffer.d = undefined;
    	                        ret = this['output'](buffer);
    	                        ret.push({ type_: 'tinySkip' });
    	                        buffer.b = tmp;
    	                    }
    	                    else {
    	                        ret = this['output'](buffer);
    	                    }
    	                    _mhchemParser.actions['o='](buffer, m);
    	                    return ret;
    	                },
    	                'd= kv': function (buffer, m) {
    	                    buffer.d = m;
    	                    buffer.dType = 'kv';
    	                    return undefined;
    	                },
    	                'charge or bond': function (buffer, m) {
    	                    if (buffer['beginsWithBond']) {
    	                        var ret = [];
    	                        _mhchemParser.concatArray(ret, this['output'](buffer));
    	                        _mhchemParser.concatArray(ret, _mhchemParser.actions['bond'](buffer, m, "-"));
    	                        return ret;
    	                    }
    	                    else {
    	                        buffer.d = m;
    	                        return undefined;
    	                    }
    	                },
    	                '- after o/d': function (buffer, m, isAfterD) {
    	                    var c1 = _mhchemParser.patterns.match_('orbital', buffer.o || "");
    	                    var c2 = _mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || "");
    	                    var c3 = _mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || "");
    	                    var c4 = _mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || "");
    	                    var hyphenFollows = m === "-" && (c1 && c1.remainder === "" || c2 || c3 || c4);
    	                    if (hyphenFollows && !buffer.a && !buffer.b && !buffer.p && !buffer.d && !buffer.q && !c1 && c3) {
    	                        buffer.o = '$' + buffer.o + '$';
    	                    }
    	                    var ret = [];
    	                    if (hyphenFollows) {
    	                        _mhchemParser.concatArray(ret, this['output'](buffer));
    	                        ret.push({ type_: 'hyphen' });
    	                    }
    	                    else {
    	                        c1 = _mhchemParser.patterns.match_('digits', buffer.d || "");
    	                        if (isAfterD && c1 && c1.remainder === '') {
    	                            _mhchemParser.concatArray(ret, _mhchemParser.actions['d='](buffer, m));
    	                            _mhchemParser.concatArray(ret, this['output'](buffer));
    	                        }
    	                        else {
    	                            _mhchemParser.concatArray(ret, this['output'](buffer));
    	                            _mhchemParser.concatArray(ret, _mhchemParser.actions['bond'](buffer, m, "-"));
    	                        }
    	                    }
    	                    return ret;
    	                },
    	                'a to o': function (buffer) {
    	                    buffer.o = buffer.a;
    	                    buffer.a = undefined;
    	                    return undefined;
    	                },
    	                'sb=true': function (buffer) { buffer.sb = true; return undefined; },
    	                'sb=false': function (buffer) { buffer.sb = false; return undefined; },
    	                'beginsWithBond=true': function (buffer) { buffer['beginsWithBond'] = true; return undefined; },
    	                'beginsWithBond=false': function (buffer) { buffer['beginsWithBond'] = false; return undefined; },
    	                'parenthesisLevel++': function (buffer) { buffer['parenthesisLevel']++; return undefined; },
    	                'parenthesisLevel--': function (buffer) { buffer['parenthesisLevel']--; return undefined; },
    	                'state of aggregation': function (_buffer, m) {
    	                    return { type_: 'state of aggregation', p1: _mhchemParser.go(m, 'o') };
    	                },
    	                'comma': function (buffer, m) {
    	                    var a = m.replace(/\s*$/, '');
    	                    var withSpace = (a !== m);
    	                    if (withSpace && buffer['parenthesisLevel'] === 0) {
    	                        return { type_: 'comma enumeration L', p1: a };
    	                    }
    	                    else {
    	                        return { type_: 'comma enumeration M', p1: a };
    	                    }
    	                },
    	                'output': function (buffer, _m, entityFollows) {
    	                    var ret;
    	                    if (!buffer.r) {
    	                        ret = [];
    	                        if (!buffer.a && !buffer.b && !buffer.p && !buffer.o && !buffer.q && !buffer.d && !entityFollows) ;
    	                        else {
    	                            if (buffer.sb) {
    	                                ret.push({ type_: 'entitySkip' });
    	                            }
    	                            if (!buffer.o && !buffer.q && !buffer.d && !buffer.b && !buffer.p && entityFollows !== 2) {
    	                                buffer.o = buffer.a;
    	                                buffer.a = undefined;
    	                            }
    	                            else if (!buffer.o && !buffer.q && !buffer.d && (buffer.b || buffer.p)) {
    	                                buffer.o = buffer.a;
    	                                buffer.d = buffer.b;
    	                                buffer.q = buffer.p;
    	                                buffer.a = buffer.b = buffer.p = undefined;
    	                            }
    	                            else {
    	                                if (buffer.o && buffer.dType === 'kv' && _mhchemParser.patterns.match_('d-oxidation$', buffer.d || "")) {
    	                                    buffer.dType = 'oxidation';
    	                                }
    	                                else if (buffer.o && buffer.dType === 'kv' && !buffer.q) {
    	                                    buffer.dType = undefined;
    	                                }
    	                            }
    	                            ret.push({
    	                                type_: 'chemfive',
    	                                a: _mhchemParser.go(buffer.a, 'a'),
    	                                b: _mhchemParser.go(buffer.b, 'bd'),
    	                                p: _mhchemParser.go(buffer.p, 'pq'),
    	                                o: _mhchemParser.go(buffer.o, 'o'),
    	                                q: _mhchemParser.go(buffer.q, 'pq'),
    	                                d: _mhchemParser.go(buffer.d, (buffer.dType === 'oxidation' ? 'oxidation' : 'bd')),
    	                                dType: buffer.dType
    	                            });
    	                        }
    	                    }
    	                    else {
    	                        var rd = undefined;
    	                        if (buffer.rdt === 'M') {
    	                            rd = _mhchemParser.go(buffer.rd, 'tex-math');
    	                        }
    	                        else if (buffer.rdt === 'T') {
    	                            rd = [{ type_: 'text', p1: buffer.rd || "" }];
    	                        }
    	                        else {
    	                            rd = _mhchemParser.go(buffer.rd, 'ce');
    	                        }
    	                        var rq = undefined;
    	                        if (buffer.rqt === 'M') {
    	                            rq = _mhchemParser.go(buffer.rq, 'tex-math');
    	                        }
    	                        else if (buffer.rqt === 'T') {
    	                            rq = [{ type_: 'text', p1: buffer.rq || "" }];
    	                        }
    	                        else {
    	                            rq = _mhchemParser.go(buffer.rq, 'ce');
    	                        }
    	                        ret = {
    	                            type_: 'arrow',
    	                            r: buffer.r,
    	                            rd: rd,
    	                            rq: rq
    	                        };
    	                    }
    	                    for (var p in buffer) {
    	                        if (p !== 'parenthesisLevel' && p !== 'beginsWithBond') {
    	                            delete buffer[p];
    	                        }
    	                    }
    	                    return ret;
    	                },
    	                'oxidation-output': function (_buffer, m) {
    	                    var ret = ["{"];
    	                    _mhchemParser.concatArray(ret, _mhchemParser.go(m, 'oxidation'));
    	                    ret.push("}");
    	                    return ret;
    	                },
    	                'frac-output': function (_buffer, m) {
    	                    return { type_: 'frac-ce', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };
    	                },
    	                'overset-output': function (_buffer, m) {
    	                    return { type_: 'overset', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };
    	                },
    	                'underset-output': function (_buffer, m) {
    	                    return { type_: 'underset', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };
    	                },
    	                'underbrace-output': function (_buffer, m) {
    	                    return { type_: 'underbrace', p1: _mhchemParser.go(m[0], 'ce'), p2: _mhchemParser.go(m[1], 'ce') };
    	                },
    	                'color-output': function (_buffer, m) {
    	                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'ce') };
    	                },
    	                'r=': function (buffer, m) { buffer.r = m; return undefined; },
    	                'rdt=': function (buffer, m) { buffer.rdt = m; return undefined; },
    	                'rd=': function (buffer, m) { buffer.rd = m; return undefined; },
    	                'rqt=': function (buffer, m) { buffer.rqt = m; return undefined; },
    	                'rq=': function (buffer, m) { buffer.rq = m; return undefined; },
    	                'operator': function (_buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; }
    	            }
    	        },
    	        'a': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: [] }
    	                },
    	                '1/2$': {
    	                    '0': { action_: '1/2' }
    	                },
    	                'else': {
    	                    '0': { action_: [], nextState: '1', revisit: true }
    	                },
    	                '${(...)}$__$(...)$': {
    	                    '*': { action_: 'tex-math tight', nextState: '1' }
    	                },
    	                ',': {
    	                    '*': { action_: { type_: 'insert', option: 'commaDecimal' } }
    	                },
    	                'else2': {
    	                    '*': { action_: 'copy' }
    	                }
    	            }),
    	            actions: {}
    	        },
    	        'o': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: [] }
    	                },
    	                '1/2$': {
    	                    '0': { action_: '1/2' }
    	                },
    	                'else': {
    	                    '0': { action_: [], nextState: '1', revisit: true }
    	                },
    	                'letters': {
    	                    '*': { action_: 'rm' }
    	                },
    	                '\\ca': {
    	                    '*': { action_: { type_: 'insert', option: 'circa' } }
    	                },
    	                '\\pu{(...)}': {
    	                    '*': { action_: [{ type_: 'write', option: "{" }, 'pu', { type_: 'write', option: "}" }] }
    	                },
    	                '\\x{}{}|\\x{}|\\x': {
    	                    '*': { action_: 'copy' }
    	                },
    	                '${(...)}$__$(...)$': {
    	                    '*': { action_: 'tex-math' }
    	                },
    	                '{(...)}': {
    	                    '*': { action_: [{ type_: 'write', option: "{" }, 'text', { type_: 'write', option: "}" }] }
    	                },
    	                'else2': {
    	                    '*': { action_: 'copy' }
    	                }
    	            }),
    	            actions: {}
    	        },
    	        'text': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: 'output' }
    	                },
    	                '{...}': {
    	                    '*': { action_: 'text=' }
    	                },
    	                '${(...)}$__$(...)$': {
    	                    '*': { action_: 'tex-math' }
    	                },
    	                '\\greek': {
    	                    '*': { action_: ['output', 'rm'] }
    	                },
    	                '\\pu{(...)}': {
    	                    '*': { action_: ['output', { type_: 'write', option: "{" }, 'pu', { type_: 'write', option: "}" }] }
    	                },
    	                '\\,|\\x{}{}|\\x{}|\\x': {
    	                    '*': { action_: ['output', 'copy'] }
    	                },
    	                'else': {
    	                    '*': { action_: 'text=' }
    	                }
    	            }),
    	            actions: {
    	                'output': function (buffer) {
    	                    if (buffer.text_) {
    	                        var ret = { type_: 'text', p1: buffer.text_ };
    	                        for (var p in buffer) {
    	                            delete buffer[p];
    	                        }
    	                        return ret;
    	                    }
    	                    return undefined;
    	                }
    	            }
    	        },
    	        'pq': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: [] }
    	                },
    	                'state of aggregation $': {
    	                    '*': { action_: 'state of aggregation' }
    	                },
    	                'i$': {
    	                    '0': { action_: [], nextState: '!f', revisit: true }
    	                },
    	                '(KV letters),': {
    	                    '0': { action_: 'rm', nextState: '0' }
    	                },
    	                'formula$': {
    	                    '0': { action_: [], nextState: 'f', revisit: true }
    	                },
    	                '1/2$': {
    	                    '0': { action_: '1/2' }
    	                },
    	                'else': {
    	                    '0': { action_: [], nextState: '!f', revisit: true }
    	                },
    	                '${(...)}$__$(...)$': {
    	                    '*': { action_: 'tex-math' }
    	                },
    	                '{(...)}': {
    	                    '*': { action_: 'text' }
    	                },
    	                'a-z': {
    	                    'f': { action_: 'tex-math' }
    	                },
    	                'letters': {
    	                    '*': { action_: 'rm' }
    	                },
    	                '-9.,9': {
    	                    '*': { action_: '9,9' }
    	                },
    	                ',': {
    	                    '*': { action_: { type_: 'insert+p1', option: 'comma enumeration S' } }
    	                },
    	                '\\color{(...)}{(...)}': {
    	                    '*': { action_: 'color-output' }
    	                },
    	                '\\color{(...)}': {
    	                    '*': { action_: 'color0-output' }
    	                },
    	                '\\ce{(...)}': {
    	                    '*': { action_: 'ce' }
    	                },
    	                '\\pu{(...)}': {
    	                    '*': { action_: [{ type_: 'write', option: "{" }, 'pu', { type_: 'write', option: "}" }] }
    	                },
    	                '\\,|\\x{}{}|\\x{}|\\x': {
    	                    '*': { action_: 'copy' }
    	                },
    	                'else2': {
    	                    '*': { action_: 'copy' }
    	                }
    	            }),
    	            actions: {
    	                'state of aggregation': function (_buffer, m) {
    	                    return { type_: 'state of aggregation subscript', p1: _mhchemParser.go(m, 'o') };
    	                },
    	                'color-output': function (_buffer, m) {
    	                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'pq') };
    	                }
    	            }
    	        },
    	        'bd': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: [] }
    	                },
    	                'x$': {
    	                    '0': { action_: [], nextState: '!f', revisit: true }
    	                },
    	                'formula$': {
    	                    '0': { action_: [], nextState: 'f', revisit: true }
    	                },
    	                'else': {
    	                    '0': { action_: [], nextState: '!f', revisit: true }
    	                },
    	                '-9.,9 no missing 0': {
    	                    '*': { action_: '9,9' }
    	                },
    	                '.': {
    	                    '*': { action_: { type_: 'insert', option: 'electron dot' } }
    	                },
    	                'a-z': {
    	                    'f': { action_: 'tex-math' }
    	                },
    	                'x': {
    	                    '*': { action_: { type_: 'insert', option: 'KV x' } }
    	                },
    	                'letters': {
    	                    '*': { action_: 'rm' }
    	                },
    	                '\'': {
    	                    '*': { action_: { type_: 'insert', option: 'prime' } }
    	                },
    	                '${(...)}$__$(...)$': {
    	                    '*': { action_: 'tex-math' }
    	                },
    	                '{(...)}': {
    	                    '*': { action_: 'text' }
    	                },
    	                '\\color{(...)}{(...)}': {
    	                    '*': { action_: 'color-output' }
    	                },
    	                '\\color{(...)}': {
    	                    '*': { action_: 'color0-output' }
    	                },
    	                '\\ce{(...)}': {
    	                    '*': { action_: 'ce' }
    	                },
    	                '\\pu{(...)}': {
    	                    '*': { action_: [{ type_: 'write', option: "{" }, 'pu', { type_: 'write', option: "}" }] }
    	                },
    	                '\\,|\\x{}{}|\\x{}|\\x': {
    	                    '*': { action_: 'copy' }
    	                },
    	                'else2': {
    	                    '*': { action_: 'copy' }
    	                }
    	            }),
    	            actions: {
    	                'color-output': function (_buffer, m) {
    	                    return { type_: 'color', color1: m[0], color2: _mhchemParser.go(m[1], 'bd') };
    	                }
    	            }
    	        },
    	        'oxidation': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: 'roman-numeral' }
    	                },
    	                'pm-operator': {
    	                    '*': { action_: { type_: 'o=+p1', option: "\\pm" } }
    	                },
    	                'else': {
    	                    '*': { action_: 'o=' }
    	                }
    	            }),
    	            actions: {
    	                'roman-numeral': function (buffer) { return { type_: 'roman numeral', p1: buffer.o || "" }; }
    	            }
    	        },
    	        'tex-math': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: 'output' }
    	                },
    	                '\\ce{(...)}': {
    	                    '*': { action_: ['output', 'ce'] }
    	                },
    	                '\\pu{(...)}': {
    	                    '*': { action_: ['output', { type_: 'write', option: "{" }, 'pu', { type_: 'write', option: "}" }] }
    	                },
    	                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
    	                    '*': { action_: 'o=' }
    	                },
    	                'else': {
    	                    '*': { action_: 'o=' }
    	                }
    	            }),
    	            actions: {
    	                'output': function (buffer) {
    	                    if (buffer.o) {
    	                        var ret = { type_: 'tex-math', p1: buffer.o };
    	                        for (var p in buffer) {
    	                            delete buffer[p];
    	                        }
    	                        return ret;
    	                    }
    	                    return undefined;
    	                }
    	            }
    	        },
    	        'tex-math tight': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: 'output' }
    	                },
    	                '\\ce{(...)}': {
    	                    '*': { action_: ['output', 'ce'] }
    	                },
    	                '\\pu{(...)}': {
    	                    '*': { action_: ['output', { type_: 'write', option: "{" }, 'pu', { type_: 'write', option: "}" }] }
    	                },
    	                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
    	                    '*': { action_: 'o=' }
    	                },
    	                '-|+': {
    	                    '*': { action_: 'tight operator' }
    	                },
    	                'else': {
    	                    '*': { action_: 'o=' }
    	                }
    	            }),
    	            actions: {
    	                'tight operator': function (buffer, m) { buffer.o = (buffer.o || "") + "{" + m + "}"; return undefined; },
    	                'output': function (buffer) {
    	                    if (buffer.o) {
    	                        var ret = { type_: 'tex-math', p1: buffer.o };
    	                        for (var p in buffer) {
    	                            delete buffer[p];
    	                        }
    	                        return ret;
    	                    }
    	                    return undefined;
    	                }
    	            }
    	        },
    	        '9,9': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: [] }
    	                },
    	                ',': {
    	                    '*': { action_: 'comma' }
    	                },
    	                'else': {
    	                    '*': { action_: 'copy' }
    	                }
    	            }),
    	            actions: {
    	                'comma': function () { return { type_: 'commaDecimal' }; }
    	            }
    	        },
    	        'pu': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: 'output' }
    	                },
    	                'space$': {
    	                    '*': { action_: ['output', 'space'] }
    	                },
    	                '{[(|)]}': {
    	                    '0|a': { action_: 'copy' }
    	                },
    	                '(-)(9)^(-9)': {
    	                    '0': { action_: 'number^', nextState: 'a' }
    	                },
    	                '(-)(9.,9)(e)(99)': {
    	                    '0': { action_: 'enumber', nextState: 'a' }
    	                },
    	                'space': {
    	                    '0|a': { action_: [] }
    	                },
    	                'pm-operator': {
    	                    '0|a': { action_: { type_: 'operator', option: '\\pm' }, nextState: '0' }
    	                },
    	                'operator': {
    	                    '0|a': { action_: 'copy', nextState: '0' }
    	                },
    	                '//': {
    	                    'd': { action_: 'o=', nextState: '/' }
    	                },
    	                '/': {
    	                    'd': { action_: 'o=', nextState: '/' }
    	                },
    	                '{...}|else': {
    	                    '0|d': { action_: 'd=', nextState: 'd' },
    	                    'a': { action_: ['space', 'd='], nextState: 'd' },
    	                    '/|q': { action_: 'q=', nextState: 'q' }
    	                }
    	            }),
    	            actions: {
    	                'enumber': function (_buffer, m) {
    	                    var ret = [];
    	                    if (m[0] === "+-" || m[0] === "+/-") {
    	                        ret.push("\\pm ");
    	                    }
    	                    else if (m[0]) {
    	                        ret.push(m[0]);
    	                    }
    	                    if (m[1]) {
    	                        _mhchemParser.concatArray(ret, _mhchemParser.go(m[1], 'pu-9,9'));
    	                        if (m[2]) {
    	                            if (m[2].match(/[,.]/)) {
    	                                _mhchemParser.concatArray(ret, _mhchemParser.go(m[2], 'pu-9,9'));
    	                            }
    	                            else {
    	                                ret.push(m[2]);
    	                            }
    	                        }
    	                        if (m[3] || m[4]) {
    	                            if (m[3] === "e" || m[4] === "*") {
    	                                ret.push({ type_: 'cdot' });
    	                            }
    	                            else {
    	                                ret.push({ type_: 'times' });
    	                            }
    	                        }
    	                    }
    	                    if (m[5]) {
    	                        ret.push("10^{" + m[5] + "}");
    	                    }
    	                    return ret;
    	                },
    	                'number^': function (_buffer, m) {
    	                    var ret = [];
    	                    if (m[0] === "+-" || m[0] === "+/-") {
    	                        ret.push("\\pm ");
    	                    }
    	                    else if (m[0]) {
    	                        ret.push(m[0]);
    	                    }
    	                    _mhchemParser.concatArray(ret, _mhchemParser.go(m[1], 'pu-9,9'));
    	                    ret.push("^{" + m[2] + "}");
    	                    return ret;
    	                },
    	                'operator': function (_buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; },
    	                'space': function () { return { type_: 'pu-space-1' }; },
    	                'output': function (buffer) {
    	                    var ret;
    	                    var md = _mhchemParser.patterns.match_('{(...)}', buffer.d || "");
    	                    if (md && md.remainder === '') {
    	                        buffer.d = md.match_;
    	                    }
    	                    var mq = _mhchemParser.patterns.match_('{(...)}', buffer.q || "");
    	                    if (mq && mq.remainder === '') {
    	                        buffer.q = mq.match_;
    	                    }
    	                    if (buffer.d) {
    	                        buffer.d = buffer.d.replace(/\u00B0C|\^oC|\^{o}C/g, "{}^{\\circ}C");
    	                        buffer.d = buffer.d.replace(/\u00B0F|\^oF|\^{o}F/g, "{}^{\\circ}F");
    	                    }
    	                    if (buffer.q) {
    	                        buffer.q = buffer.q.replace(/\u00B0C|\^oC|\^{o}C/g, "{}^{\\circ}C");
    	                        buffer.q = buffer.q.replace(/\u00B0F|\^oF|\^{o}F/g, "{}^{\\circ}F");
    	                        var b5 = {
    	                            d: _mhchemParser.go(buffer.d, 'pu'),
    	                            q: _mhchemParser.go(buffer.q, 'pu')
    	                        };
    	                        if (buffer.o === '//') {
    	                            ret = { type_: 'pu-frac', p1: b5.d, p2: b5.q };
    	                        }
    	                        else {
    	                            ret = b5.d;
    	                            if (b5.d.length > 1 || b5.q.length > 1) {
    	                                ret.push({ type_: ' / ' });
    	                            }
    	                            else {
    	                                ret.push({ type_: '/' });
    	                            }
    	                            _mhchemParser.concatArray(ret, b5.q);
    	                        }
    	                    }
    	                    else {
    	                        ret = _mhchemParser.go(buffer.d, 'pu-2');
    	                    }
    	                    for (var p in buffer) {
    	                        delete buffer[p];
    	                    }
    	                    return ret;
    	                }
    	            }
    	        },
    	        'pu-2': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '*': { action_: 'output' }
    	                },
    	                '*': {
    	                    '*': { action_: ['output', 'cdot'], nextState: '0' }
    	                },
    	                '\\x': {
    	                    '*': { action_: 'rm=' }
    	                },
    	                'space': {
    	                    '*': { action_: ['output', 'space'], nextState: '0' }
    	                },
    	                '^{(...)}|^(-1)': {
    	                    '1': { action_: '^(-1)' }
    	                },
    	                '-9.,9': {
    	                    '0': { action_: 'rm=', nextState: '0' },
    	                    '1': { action_: '^(-1)', nextState: '0' }
    	                },
    	                '{...}|else': {
    	                    '*': { action_: 'rm=', nextState: '1' }
    	                }
    	            }),
    	            actions: {
    	                'cdot': function () { return { type_: 'tight cdot' }; },
    	                '^(-1)': function (buffer, m) { buffer.rm += "^{" + m + "}"; return undefined; },
    	                'space': function () { return { type_: 'pu-space-2' }; },
    	                'output': function (buffer) {
    	                    var ret = [];
    	                    if (buffer.rm) {
    	                        var mrm = _mhchemParser.patterns.match_('{(...)}', buffer.rm || "");
    	                        if (mrm && mrm.remainder === '') {
    	                            ret = _mhchemParser.go(mrm.match_, 'pu');
    	                        }
    	                        else {
    	                            ret = { type_: 'rm', p1: buffer.rm };
    	                        }
    	                    }
    	                    for (var p in buffer) {
    	                        delete buffer[p];
    	                    }
    	                    return ret;
    	                }
    	            }
    	        },
    	        'pu-9,9': {
    	            transitions: _mhchemCreateTransitions({
    	                'empty': {
    	                    '0': { action_: 'output-0' },
    	                    'o': { action_: 'output-o' }
    	                },
    	                ',': {
    	                    '0': { action_: ['output-0', 'comma'], nextState: 'o' }
    	                },
    	                '.': {
    	                    '0': { action_: ['output-0', 'copy'], nextState: 'o' }
    	                },
    	                'else': {
    	                    '*': { action_: 'text=' }
    	                }
    	            }),
    	            actions: {
    	                'comma': function () { return { type_: 'commaDecimal' }; },
    	                'output-0': function (buffer) {
    	                    var ret = [];
    	                    buffer.text_ = buffer.text_ || "";
    	                    if (buffer.text_.length > 4) {
    	                        var a = buffer.text_.length % 3;
    	                        if (a === 0) {
    	                            a = 3;
    	                        }
    	                        for (var i = buffer.text_.length - 3; i > 0; i -= 3) {
    	                            ret.push(buffer.text_.substr(i, 3));
    	                            ret.push({ type_: '1000 separator' });
    	                        }
    	                        ret.push(buffer.text_.substr(0, a));
    	                        ret.reverse();
    	                    }
    	                    else {
    	                        ret.push(buffer.text_);
    	                    }
    	                    for (var p in buffer) {
    	                        delete buffer[p];
    	                    }
    	                    return ret;
    	                },
    	                'output-o': function (buffer) {
    	                    var ret = [];
    	                    buffer.text_ = buffer.text_ || "";
    	                    if (buffer.text_.length > 4) {
    	                        var a = buffer.text_.length - 3;
    	                        var i = undefined;
    	                        for (i = 0; i < a; i += 3) {
    	                            ret.push(buffer.text_.substr(i, 3));
    	                            ret.push({ type_: '1000 separator' });
    	                        }
    	                        ret.push(buffer.text_.substr(i));
    	                    }
    	                    else {
    	                        ret.push(buffer.text_);
    	                    }
    	                    for (var p in buffer) {
    	                        delete buffer[p];
    	                    }
    	                    return ret;
    	                }
    	            }
    	        }
    	    }
    	};
    	var _mhchemTexify = {
    	    go: function (input, addOuterBraces) {
    	        if (!input) {
    	            return "";
    	        }
    	        var res = "";
    	        var cee = false;
    	        for (var i = 0; i < input.length; i++) {
    	            var inputi = input[i];
    	            if (typeof inputi === "string") {
    	                res += inputi;
    	            }
    	            else {
    	                res += _mhchemTexify._go2(inputi);
    	                if (inputi.type_ === '1st-level escape') {
    	                    cee = true;
    	                }
    	            }
    	        }
    	        if (addOuterBraces && !cee && res) {
    	            res = "{" + res + "}";
    	        }
    	        return res;
    	    },
    	    _goInner: function (input) {
    	        return _mhchemTexify.go(input, false);
    	    },
    	    _go2: function (buf) {
    	        var res;
    	        switch (buf.type_) {
    	            case 'chemfive':
    	                res = "";
    	                var b5 = {
    	                    a: _mhchemTexify._goInner(buf.a),
    	                    b: _mhchemTexify._goInner(buf.b),
    	                    p: _mhchemTexify._goInner(buf.p),
    	                    o: _mhchemTexify._goInner(buf.o),
    	                    q: _mhchemTexify._goInner(buf.q),
    	                    d: _mhchemTexify._goInner(buf.d)
    	                };
    	                if (b5.a) {
    	                    if (b5.a.match(/^[+\-]/)) {
    	                        b5.a = "{" + b5.a + "}";
    	                    }
    	                    res += b5.a + "\\,";
    	                }
    	                if (b5.b || b5.p) {
    	                    res += "{\\vphantom{A}}";
    	                    res += "^{\\hphantom{" + (b5.b || "") + "}}_{\\hphantom{" + (b5.p || "") + "}}";
    	                    res += "\\mkern-1.5mu";
    	                    res += "{\\vphantom{A}}";
    	                    res += "^{\\smash[t]{\\vphantom{2}}\\llap{" + (b5.b || "") + "}}";
    	                    res += "_{\\vphantom{2}\\llap{\\smash[t]{" + (b5.p || "") + "}}}";
    	                }
    	                if (b5.o) {
    	                    if (b5.o.match(/^[+\-]/)) {
    	                        b5.o = "{" + b5.o + "}";
    	                    }
    	                    res += b5.o;
    	                }
    	                if (buf.dType === 'kv') {
    	                    if (b5.d || b5.q) {
    	                        res += "{\\vphantom{A}}";
    	                    }
    	                    if (b5.d) {
    	                        res += "^{" + b5.d + "}";
    	                    }
    	                    if (b5.q) {
    	                        res += "_{\\smash[t]{" + b5.q + "}}";
    	                    }
    	                }
    	                else if (buf.dType === 'oxidation') {
    	                    if (b5.d) {
    	                        res += "{\\vphantom{A}}";
    	                        res += "^{" + b5.d + "}";
    	                    }
    	                    if (b5.q) {
    	                        res += "{\\vphantom{A}}";
    	                        res += "_{\\smash[t]{" + b5.q + "}}";
    	                    }
    	                }
    	                else {
    	                    if (b5.q) {
    	                        res += "{\\vphantom{A}}";
    	                        res += "_{\\smash[t]{" + b5.q + "}}";
    	                    }
    	                    if (b5.d) {
    	                        res += "{\\vphantom{A}}";
    	                        res += "^{" + b5.d + "}";
    	                    }
    	                }
    	                break;
    	            case 'rm':
    	                res = "\\mathrm{" + buf.p1 + "}";
    	                break;
    	            case 'text':
    	                if (buf.p1.match(/[\^_]/)) {
    	                    buf.p1 = buf.p1.replace(" ", "~").replace("-", "\\text{-}");
    	                    res = "\\mathrm{" + buf.p1 + "}";
    	                }
    	                else {
    	                    res = "\\text{" + buf.p1 + "}";
    	                }
    	                break;
    	            case 'roman numeral':
    	                res = "\\mathrm{" + buf.p1 + "}";
    	                break;
    	            case 'state of aggregation':
    	                res = "\\mskip2mu " + _mhchemTexify._goInner(buf.p1);
    	                break;
    	            case 'state of aggregation subscript':
    	                res = "\\mskip1mu " + _mhchemTexify._goInner(buf.p1);
    	                break;
    	            case 'bond':
    	                res = _mhchemTexify._getBond(buf.kind_);
    	                if (!res) {
    	                    throw ["MhchemErrorBond", "mhchem Error. Unknown bond type (" + buf.kind_ + ")"];
    	                }
    	                break;
    	            case 'frac':
    	                var c = "\\frac{" + buf.p1 + "}{" + buf.p2 + "}";
    	                res = "\\mathchoice{\\textstyle" + c + "}{" + c + "}{" + c + "}{" + c + "}";
    	                break;
    	            case 'pu-frac':
    	                var d = "\\frac{" + _mhchemTexify._goInner(buf.p1) + "}{" + _mhchemTexify._goInner(buf.p2) + "}";
    	                res = "\\mathchoice{\\textstyle" + d + "}{" + d + "}{" + d + "}{" + d + "}";
    	                break;
    	            case 'tex-math':
    	                res = buf.p1 + " ";
    	                break;
    	            case 'frac-ce':
    	                res = "\\frac{" + _mhchemTexify._goInner(buf.p1) + "}{" + _mhchemTexify._goInner(buf.p2) + "}";
    	                break;
    	            case 'overset':
    	                res = "\\overset{" + _mhchemTexify._goInner(buf.p1) + "}{" + _mhchemTexify._goInner(buf.p2) + "}";
    	                break;
    	            case 'underset':
    	                res = "\\underset{" + _mhchemTexify._goInner(buf.p1) + "}{" + _mhchemTexify._goInner(buf.p2) + "}";
    	                break;
    	            case 'underbrace':
    	                res = "\\underbrace{" + _mhchemTexify._goInner(buf.p1) + "}_{" + _mhchemTexify._goInner(buf.p2) + "}";
    	                break;
    	            case 'color':
    	                res = "{\\color{" + buf.color1 + "}{" + _mhchemTexify._goInner(buf.color2) + "}}";
    	                break;
    	            case 'color0':
    	                res = "\\color{" + buf.color + "}";
    	                break;
    	            case 'arrow':
    	                var b6 = {
    	                    rd: _mhchemTexify._goInner(buf.rd),
    	                    rq: _mhchemTexify._goInner(buf.rq)
    	                };
    	                var arrow = _mhchemTexify._getArrow(buf.r);
    	                if (b6.rd || b6.rq) {
    	                    if (buf.r === "<=>" || buf.r === "<=>>" || buf.r === "<<=>" || buf.r === "<-->") {
    	                        arrow = "\\long" + arrow;
    	                        if (b6.rd) {
    	                            arrow = "\\overset{" + b6.rd + "}{" + arrow + "}";
    	                        }
    	                        if (b6.rq) {
    	                            if (buf.r === "<-->") {
    	                                arrow = "\\underset{\\lower2mu{" + b6.rq + "}}{" + arrow + "}";
    	                            }
    	                            else {
    	                                arrow = "\\underset{\\lower6mu{" + b6.rq + "}}{" + arrow + "}";
    	                            }
    	                        }
    	                        arrow = " {}\\mathrel{" + arrow + "}{} ";
    	                    }
    	                    else {
    	                        if (b6.rq) {
    	                            arrow += "[{" + b6.rq + "}]";
    	                        }
    	                        arrow += "{" + b6.rd + "}";
    	                        arrow = " {}\\mathrel{\\x" + arrow + "}{} ";
    	                    }
    	                }
    	                else {
    	                    arrow = " {}\\mathrel{\\long" + arrow + "}{} ";
    	                }
    	                res = arrow;
    	                break;
    	            case 'operator':
    	                res = _mhchemTexify._getOperator(buf.kind_);
    	                break;
    	            case '1st-level escape':
    	                res = buf.p1 + " ";
    	                break;
    	            case 'space':
    	                res = " ";
    	                break;
    	            case 'tinySkip':
    	                res = '\\mkern2mu';
    	                break;
    	            case 'entitySkip':
    	                res = "~";
    	                break;
    	            case 'pu-space-1':
    	                res = "~";
    	                break;
    	            case 'pu-space-2':
    	                res = "\\mkern3mu ";
    	                break;
    	            case '1000 separator':
    	                res = "\\mkern2mu ";
    	                break;
    	            case 'commaDecimal':
    	                res = "{,}";
    	                break;
    	            case 'comma enumeration L':
    	                res = "{" + buf.p1 + "}\\mkern6mu ";
    	                break;
    	            case 'comma enumeration M':
    	                res = "{" + buf.p1 + "}\\mkern3mu ";
    	                break;
    	            case 'comma enumeration S':
    	                res = "{" + buf.p1 + "}\\mkern1mu ";
    	                break;
    	            case 'hyphen':
    	                res = "\\text{-}";
    	                break;
    	            case 'addition compound':
    	                res = "\\,{\\cdot}\\,";
    	                break;
    	            case 'electron dot':
    	                res = "\\mkern1mu \\bullet\\mkern1mu ";
    	                break;
    	            case 'KV x':
    	                res = "{\\times}";
    	                break;
    	            case 'prime':
    	                res = "\\prime ";
    	                break;
    	            case 'cdot':
    	                res = "\\cdot ";
    	                break;
    	            case 'tight cdot':
    	                res = "\\mkern1mu{\\cdot}\\mkern1mu ";
    	                break;
    	            case 'times':
    	                res = "\\times ";
    	                break;
    	            case 'circa':
    	                res = "{\\sim}";
    	                break;
    	            case '^':
    	                res = "uparrow";
    	                break;
    	            case 'v':
    	                res = "downarrow";
    	                break;
    	            case 'ellipsis':
    	                res = "\\ldots ";
    	                break;
    	            case '/':
    	                res = "/";
    	                break;
    	            case ' / ':
    	                res = "\\,/\\,";
    	                break;
    	            default:
    	                throw ["MhchemBugT", "mhchem bug T. Please report."];
    	        }
    	        return res;
    	    },
    	    _getArrow: function (a) {
    	        switch (a) {
    	            case "->": return "rightarrow";
    	            case "\u2192": return "rightarrow";
    	            case "\u27F6": return "rightarrow";
    	            case "<-": return "leftarrow";
    	            case "<->": return "leftrightarrow";
    	            case "<-->": return "leftrightarrows";
    	            case "<=>": return "rightleftharpoons";
    	            case "\u21CC": return "rightleftharpoons";
    	            case "<=>>": return "Rightleftharpoons";
    	            case "<<=>": return "Leftrightharpoons";
    	            default:
    	                throw ["MhchemBugT", "mhchem bug T. Please report."];
    	        }
    	    },
    	    _getBond: function (a) {
    	        switch (a) {
    	            case "-": return "{-}";
    	            case "1": return "{-}";
    	            case "=": return "{=}";
    	            case "2": return "{=}";
    	            case "#": return "{\\equiv}";
    	            case "3": return "{\\equiv}";
    	            case "~": return "{\\tripledash}";
    	            case "~-": return "{\\rlap{\\lower.1em{-}}\\raise.1em{\\tripledash}}";
    	            case "~=": return "{\\rlap{\\lower.2em{-}}\\rlap{\\raise.2em{\\tripledash}}-}";
    	            case "~--": return "{\\rlap{\\lower.2em{-}}\\rlap{\\raise.2em{\\tripledash}}-}";
    	            case "-~-": return "{\\rlap{\\lower.2em{-}}\\rlap{\\raise.2em{-}}\\tripledash}";
    	            case "...": return "{{\\cdot}{\\cdot}{\\cdot}}";
    	            case "....": return "{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}";
    	            case "->": return "{\\rightarrow}";
    	            case "<-": return "{\\leftarrow}";
    	            case "<": return "{<}";
    	            case ">": return "{>}";
    	            default:
    	                throw ["MhchemBugT", "mhchem bug T. Please report."];
    	        }
    	    },
    	    _getOperator: function (a) {
    	        switch (a) {
    	            case "+": return " {}+{} ";
    	            case "-": return " {}-{} ";
    	            case "=": return " {}={} ";
    	            case "<": return " {}<{} ";
    	            case ">": return " {}>{} ";
    	            case "<<": return " {}\\ll{} ";
    	            case ">>": return " {}\\gg{} ";
    	            case "\\pm": return " {}\\pm{} ";
    	            case "\\approx": return " {}\\approx{} ";
    	            case "$\\approx$": return " {}\\approx{} ";
    	            case "v": return " \\downarrow{} ";
    	            case "(v)": return " \\downarrow{} ";
    	            case "^": return " \\uparrow{} ";
    	            case "(^)": return " \\uparrow{} ";
    	            default:
    	                throw ["MhchemBugT", "mhchem bug T. Please report."];
    	        }
    	    }
    	};
    	return mhchemParser;
    }

    var hasRequiredMhchemConfiguration;

    function requireMhchemConfiguration () {
    	if (hasRequiredMhchemConfiguration) return MhchemConfiguration;
    	hasRequiredMhchemConfiguration = 1;
    	var __importDefault = (MhchemConfiguration.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(MhchemConfiguration, "__esModule", { value: true });
    	MhchemConfiguration.MhchemConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var SymbolMap_js_1 = requireSymbolMap();
    	var TexError_js_1 = __importDefault(requireTexError());
    	var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    	var AmsMethods_js_1 = requireAmsMethods();
    	var mhchemParser_js_1 = requireMhchemParser();
    	var MhchemMethods = {};
    	MhchemMethods.Macro = BaseMethods_js_1.default.Macro;
    	MhchemMethods.xArrow = AmsMethods_js_1.AmsMethods.xArrow;
    	MhchemMethods.Machine = function (parser, name, machine) {
    	    var arg = parser.GetArgument(name);
    	    var tex;
    	    try {
    	        tex = mhchemParser_js_1.mhchemParser.toTex(arg, machine);
    	    }
    	    catch (err) {
    	        throw new TexError_js_1.default(err[0], err[1]);
    	    }
    	    parser.string = tex + parser.string.substr(parser.i);
    	    parser.i = 0;
    	};
    	new SymbolMap_js_1.CommandMap('mhchem', {
    	    ce: ['Machine', 'ce'],
    	    pu: ['Machine', 'pu'],
    	    longrightleftharpoons: [
    	        'Macro',
    	        '\\stackrel{\\textstyle{-}\\!\\!{\\rightharpoonup}}{\\smash{{\\leftharpoondown}\\!\\!{-}}}'
    	    ],
    	    longRightleftharpoons: [
    	        'Macro',
    	        '\\stackrel{\\textstyle{-}\\!\\!{\\rightharpoonup}}{\\smash{\\leftharpoondown}}'
    	    ],
    	    longLeftrightharpoons: [
    	        'Macro',
    	        '\\stackrel{\\textstyle\\vphantom{{-}}{\\rightharpoonup}}{\\smash{{\\leftharpoondown}\\!\\!{-}}}'
    	    ],
    	    longleftrightarrows: [
    	        'Macro',
    	        '\\stackrel{\\longrightarrow}{\\smash{\\longleftarrow}\\Rule{0px}{.25em}{0px}}'
    	    ],
    	    tripledash: [
    	        'Macro',
    	        '\\vphantom{-}\\raise2mu{\\kern2mu\\tiny\\text{-}\\kern1mu\\text{-}\\kern1mu\\text{-}\\kern2mu}'
    	    ],
    	    xleftrightarrow: ['xArrow', 0x2194, 6, 6],
    	    xrightleftharpoons: ['xArrow', 0x21CC, 5, 7],
    	    xRightleftharpoons: ['xArrow', 0x21CC, 5, 7],
    	    xLeftrightharpoons: ['xArrow', 0x21CC, 5, 7]
    	}, MhchemMethods);
    	MhchemConfiguration.MhchemConfiguration = Configuration_js_1.Configuration.create('mhchem', { handler: { macro: ['mhchem'] } });
    	
    	return MhchemConfiguration;
    }

    var NoErrorsConfiguration = {};

    var hasRequiredNoErrorsConfiguration;

    function requireNoErrorsConfiguration () {
    	if (hasRequiredNoErrorsConfiguration) return NoErrorsConfiguration;
    	hasRequiredNoErrorsConfiguration = 1;
    	Object.defineProperty(NoErrorsConfiguration, "__esModule", { value: true });
    	NoErrorsConfiguration.NoErrorsConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	function noErrors(factory, message, _id, expr) {
    	    var mtext = factory.create('token', 'mtext', {}, expr.replace(/\n/g, ' '));
    	    var error = factory.create('node', 'merror', [mtext], { 'data-mjx-error': message, title: message });
    	    return error;
    	}
    	NoErrorsConfiguration.NoErrorsConfiguration = Configuration_js_1.Configuration.create('noerrors', { nodes: { 'error': noErrors } });
    	
    	return NoErrorsConfiguration;
    }

    var NoUndefinedConfiguration = {};

    var hasRequiredNoUndefinedConfiguration;

    function requireNoUndefinedConfiguration () {
    	if (hasRequiredNoUndefinedConfiguration) return NoUndefinedConfiguration;
    	hasRequiredNoUndefinedConfiguration = 1;
    	var __values = (NoUndefinedConfiguration.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	Object.defineProperty(NoUndefinedConfiguration, "__esModule", { value: true });
    	NoUndefinedConfiguration.NoUndefinedConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	function noUndefined(parser, name) {
    	    var e_1, _a;
    	    var textNode = parser.create('text', '\\' + name);
    	    var options = parser.options.noundefined || {};
    	    var def = {};
    	    try {
    	        for (var _b = __values(['color', 'background', 'size']), _c = _b.next(); !_c.done; _c = _b.next()) {
    	            var id = _c.value;
    	            if (options[id]) {
    	                def['math' + id] = options[id];
    	            }
    	        }
    	    }
    	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	    finally {
    	        try {
    	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	        }
    	        finally { if (e_1) throw e_1.error; }
    	    }
    	    parser.Push(parser.create('node', 'mtext', [], def, textNode));
    	}
    	NoUndefinedConfiguration.NoUndefinedConfiguration = Configuration_js_1.Configuration.create('noundefined', {
    	    fallback: { macro: noUndefined },
    	    options: {
    	        noundefined: {
    	            color: 'red',
    	            background: '',
    	            size: ''
    	        }
    	    },
    	    priority: 3
    	});
    	
    	return NoUndefinedConfiguration;
    }

    var PhysicsConfiguration = {};

    var PhysicsItems = {};

    var hasRequiredPhysicsItems;

    function requirePhysicsItems () {
    	if (hasRequiredPhysicsItems) return PhysicsItems;
    	hasRequiredPhysicsItems = 1;
    	var __extends = (PhysicsItems.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __importDefault = (PhysicsItems.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(PhysicsItems, "__esModule", { value: true });
    	PhysicsItems.AutoOpen = undefined;
    	var StackItem_js_1 = requireStackItem();
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var AutoOpen = (function (_super) {
    	    __extends(AutoOpen, _super);
    	    function AutoOpen() {
    	        var _this = _super !== null && _super.apply(this, arguments) || this;
    	        _this.openCount = 0;
    	        return _this;
    	    }
    	    Object.defineProperty(AutoOpen.prototype, "kind", {
    	        get: function () {
    	            return 'auto open';
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(AutoOpen.prototype, "isOpen", {
    	        get: function () {
    	            return true;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    AutoOpen.prototype.toMml = function () {
    	        var parser = this.factory.configuration.parser;
    	        var right = this.getProperty('right');
    	        if (this.getProperty('smash')) {
    	            var mml_1 = _super.prototype.toMml.call(this);
    	            var smash = parser.create('node', 'mpadded', [mml_1], { height: 0, depth: 0 });
    	            this.Clear();
    	            this.Push(parser.create('node', 'TeXAtom', [smash]));
    	        }
    	        if (right) {
    	            this.Push(new TexParser_js_1.default(right, parser.stack.env, parser.configuration).mml());
    	        }
    	        var mml = ParseUtil_js_1.default.fenced(this.factory.configuration, this.getProperty('open'), _super.prototype.toMml.call(this), this.getProperty('close'), this.getProperty('big'));
    	        NodeUtil_js_1.default.removeProperties(mml, 'open', 'close', 'texClass');
    	        return mml;
    	    };
    	    AutoOpen.prototype.checkItem = function (item) {
    	        if (item.isKind('mml') && item.Size() === 1) {
    	            var mml = item.toMml();
    	            if (mml.isKind('mo') && mml.getText() === this.getProperty('open')) {
    	                this.openCount++;
    	            }
    	        }
    	        var close = item.getProperty('autoclose');
    	        if (close && close === this.getProperty('close') && !this.openCount--) {
    	            if (this.getProperty('ignore')) {
    	                this.Clear();
    	                return [[], true];
    	            }
    	            return [[this.toMml()], true];
    	        }
    	        return _super.prototype.checkItem.call(this, item);
    	    };
    	    AutoOpen.errors = Object.assign(Object.create(StackItem_js_1.BaseItem.errors), {
    	        'stop': ['ExtraOrMissingDelims', 'Extra open or missing close delimiter']
    	    });
    	    return AutoOpen;
    	}(StackItem_js_1.BaseItem));
    	PhysicsItems.AutoOpen = AutoOpen;
    	
    	return PhysicsItems;
    }

    var PhysicsMappings = {};

    var PhysicsMethods = {};

    var hasRequiredPhysicsMethods;

    function requirePhysicsMethods () {
    	if (hasRequiredPhysicsMethods) return PhysicsMethods;
    	hasRequiredPhysicsMethods = 1;
    	var __read = (PhysicsMethods.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __importDefault = (PhysicsMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(PhysicsMethods, "__esModule", { value: true });
    	var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var MmlNode_js_1 = requireMmlNode();
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var NodeFactory_js_1 = requireNodeFactory$1();
    	var PhysicsMethods$1 = {};
    	var pairs = {
    	    '(': ')',
    	    '[': ']',
    	    '{': '}',
    	    '|': '|',
    	};
    	var biggs = /^(b|B)i(g{1,2})$/;
    	PhysicsMethods$1.Quantity = function (parser, name, open, close, arg, named, variant) {
    	    if (open === undefined) { open = '('; }
    	    if (close === undefined) { close = ')'; }
    	    if (arg === undefined) { arg = false; }
    	    if (named === undefined) { named = ''; }
    	    if (variant === undefined) { variant = ''; }
    	    var star = arg ? parser.GetStar() : false;
    	    var next = parser.GetNext();
    	    var position = parser.i;
    	    var big = null;
    	    if (next === '\\') {
    	        parser.i++;
    	        big = parser.GetCS();
    	        if (!big.match(biggs)) {
    	            var empty = parser.create('node', 'mrow');
    	            parser.Push(ParseUtil_js_1.default.fenced(parser.configuration, open, empty, close));
    	            parser.i = position;
    	            return;
    	        }
    	        next = parser.GetNext();
    	    }
    	    var right = pairs[next];
    	    if (arg && next !== '{') {
    	        throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', parser.currentCS);
    	    }
    	    if (!right) {
    	        var empty = parser.create('node', 'mrow');
    	        parser.Push(ParseUtil_js_1.default.fenced(parser.configuration, open, empty, close));
    	        parser.i = position;
    	        return;
    	    }
    	    if (named) {
    	        var mml = parser.create('token', 'mi', { texClass: MmlNode_js_1.TEXCLASS.OP }, named);
    	        if (variant) {
    	            NodeUtil_js_1.default.setAttribute(mml, 'mathvariant', variant);
    	        }
    	        parser.Push(parser.itemFactory.create('fn', mml));
    	    }
    	    if (next === '{') {
    	        var argument = parser.GetArgument(name);
    	        next = arg ? open : '\\{';
    	        right = arg ? close : '\\}';
    	        argument = star ? next + ' ' + argument + ' ' + right :
    	            (big ?
    	                '\\' + big + 'l' + next + ' ' + argument + ' ' + '\\' + big + 'r' + right :
    	                '\\left' + next + ' ' + argument + ' ' + '\\right' + right);
    	        parser.Push(new TexParser_js_1.default(argument, parser.stack.env, parser.configuration).mml());
    	        return;
    	    }
    	    if (arg) {
    	        next = open;
    	        right = close;
    	    }
    	    parser.i++;
    	    parser.Push(parser.itemFactory.create('auto open')
    	        .setProperties({ open: next, close: right, big: big }));
    	};
    	PhysicsMethods$1.Eval = function (parser, name) {
    	    var star = parser.GetStar();
    	    var next = parser.GetNext();
    	    if (next === '{') {
    	        var arg = parser.GetArgument(name);
    	        var replace = '\\left. ' +
    	            (star ? '\\smash{' + arg + '}' : arg) +
    	            ' ' + '\\vphantom{\\int}\\right|';
    	        parser.string = parser.string.slice(0, parser.i) + replace +
    	            parser.string.slice(parser.i);
    	        return;
    	    }
    	    if (next === '(' || next === '[') {
    	        parser.i++;
    	        parser.Push(parser.itemFactory.create('auto open')
    	            .setProperties({ open: next, close: '|',
    	            smash: star, right: '\\vphantom{\\int}' }));
    	        return;
    	    }
    	    throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', parser.currentCS);
    	};
    	PhysicsMethods$1.Commutator = function (parser, name, open, close) {
    	    if (open === undefined) { open = '['; }
    	    if (close === undefined) { close = ']'; }
    	    var star = parser.GetStar();
    	    var next = parser.GetNext();
    	    var big = null;
    	    if (next === '\\') {
    	        parser.i++;
    	        big = parser.GetCS();
    	        if (!big.match(biggs)) {
    	            throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', parser.currentCS);
    	        }
    	        next = parser.GetNext();
    	    }
    	    if (next !== '{') {
    	        throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', parser.currentCS);
    	    }
    	    var arg1 = parser.GetArgument(name);
    	    var arg2 = parser.GetArgument(name);
    	    var argument = arg1 + ',' + arg2;
    	    argument = star ? open + ' ' + argument + ' ' + close :
    	        (big ?
    	            '\\' + big + 'l' + open + ' ' + argument + ' ' + '\\' + big + 'r' + close :
    	            '\\left' + open + ' ' + argument + ' ' + '\\right' + close);
    	    parser.Push(new TexParser_js_1.default(argument, parser.stack.env, parser.configuration).mml());
    	};
    	var latinCap = [0x41, 0x5A];
    	var latinSmall = [0x61, 0x7A];
    	var greekCap = [0x391, 0x3A9];
    	var greekSmall = [0x3B1, 0x3C9];
    	var digits = [0x30, 0x39];
    	function inRange(value, range) {
    	    return (value >= range[0] && value <= range[1]);
    	}
    	function createVectorToken(factory, kind, def, text) {
    	    var parser = factory.configuration.parser;
    	    var token = NodeFactory_js_1.NodeFactory.createToken(factory, kind, def, text);
    	    var code = text.codePointAt(0);
    	    if (text.length === 1 && !parser.stack.env.font &&
    	        parser.stack.env.vectorFont &&
    	        (inRange(code, latinCap) || inRange(code, latinSmall) ||
    	            inRange(code, greekCap) || inRange(code, digits) ||
    	            (inRange(code, greekSmall) && parser.stack.env.vectorStar) ||
    	            NodeUtil_js_1.default.getAttribute(token, 'accent'))) {
    	        NodeUtil_js_1.default.setAttribute(token, 'mathvariant', parser.stack.env.vectorFont);
    	    }
    	    return token;
    	}
    	PhysicsMethods$1.VectorBold = function (parser, name) {
    	    var star = parser.GetStar();
    	    var arg = parser.GetArgument(name);
    	    var oldToken = parser.configuration.nodeFactory.get('token');
    	    var oldFont = parser.stack.env.font;
    	    delete parser.stack.env.font;
    	    parser.configuration.nodeFactory.set('token', createVectorToken);
    	    parser.stack.env.vectorFont = star ? 'bold-italic' : 'bold';
    	    parser.stack.env.vectorStar = star;
    	    var node = new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml();
    	    if (oldFont) {
    	        parser.stack.env.font = oldFont;
    	    }
    	    delete parser.stack.env.vectorFont;
    	    delete parser.stack.env.vectorStar;
    	    parser.configuration.nodeFactory.set('token', oldToken);
    	    parser.Push(node);
    	};
    	PhysicsMethods$1.StarMacro = function (parser, name, argcount) {
    	    var parts = [];
    	    for (var _i = 3; _i < arguments.length; _i++) {
    	        parts[_i - 3] = arguments[_i];
    	    }
    	    var star = parser.GetStar();
    	    var args = [];
    	    if (argcount) {
    	        for (var i = args.length; i < argcount; i++) {
    	            args.push(parser.GetArgument(name));
    	        }
    	    }
    	    var macro = parts.join(star ? '*' : '');
    	    macro = ParseUtil_js_1.default.substituteArgs(parser, args, macro);
    	    parser.string = ParseUtil_js_1.default.addArgs(parser, macro, parser.string.slice(parser.i));
    	    parser.i = 0;
    	    ParseUtil_js_1.default.checkMaxMacros(parser);
    	};
    	var vectorApplication = function (parser, kind, name, operator, fences) {
    	    var op = new TexParser_js_1.default(operator, parser.stack.env, parser.configuration).mml();
    	    parser.Push(parser.itemFactory.create(kind, op));
    	    var left = parser.GetNext();
    	    var right = pairs[left];
    	    if (!right) {
    	        return;
    	    }
    	    var lfence = '', rfence = '', arg = '';
    	    var enlarge = fences.indexOf(left) !== -1;
    	    if (left === '{') {
    	        arg = parser.GetArgument(name);
    	        lfence = enlarge ? '\\left\\{' : '';
    	        rfence = enlarge ? '\\right\\}' : '';
    	        var macro = lfence + ' ' + arg + ' ' + rfence;
    	        parser.string = macro + parser.string.slice(parser.i);
    	        parser.i = 0;
    	        return;
    	    }
    	    if (!enlarge) {
    	        return;
    	    }
    	    parser.i++;
    	    parser.Push(parser.itemFactory.create('auto open')
    	        .setProperties({ open: left, close: right }));
    	};
    	PhysicsMethods$1.OperatorApplication = function (parser, name, operator) {
    	    var fences = [];
    	    for (var _i = 3; _i < arguments.length; _i++) {
    	        fences[_i - 3] = arguments[_i];
    	    }
    	    vectorApplication(parser, 'fn', name, operator, fences);
    	};
    	PhysicsMethods$1.VectorOperator = function (parser, name, operator) {
    	    var fences = [];
    	    for (var _i = 3; _i < arguments.length; _i++) {
    	        fences[_i - 3] = arguments[_i];
    	    }
    	    vectorApplication(parser, 'mml', name, operator, fences);
    	};
    	PhysicsMethods$1.Expression = function (parser, name, opt, id) {
    	    if (opt === undefined) { opt = true; }
    	    if (id === undefined) { id = ''; }
    	    id = id || name.slice(1);
    	    var exp = opt ? parser.GetBrackets(name) : null;
    	    var mml = parser.create('token', 'mi', { texClass: MmlNode_js_1.TEXCLASS.OP }, id);
    	    if (exp) {
    	        var sup = new TexParser_js_1.default(exp, parser.stack.env, parser.configuration).mml();
    	        mml = parser.create('node', 'msup', [mml, sup]);
    	    }
    	    parser.Push(parser.itemFactory.create('fn', mml));
    	    if (parser.GetNext() !== '(') {
    	        return;
    	    }
    	    parser.i++;
    	    parser.Push(parser.itemFactory.create('auto open')
    	        .setProperties({ open: '(', close: ')' }));
    	};
    	PhysicsMethods$1.Qqtext = function (parser, name, text) {
    	    var star = parser.GetStar();
    	    var arg = text ? text : parser.GetArgument(name);
    	    var replace = (star ? '' : '\\quad') + '\\text{' + arg + '}\\quad ';
    	    parser.string = parser.string.slice(0, parser.i) + replace +
    	        parser.string.slice(parser.i);
    	};
    	PhysicsMethods$1.Differential = function (parser, name, op) {
    	    var optArg = parser.GetBrackets(name);
    	    var power = optArg != null ? '^{' + optArg + '}' : ' ';
    	    var parens = parser.GetNext() === '(';
    	    var braces = parser.GetNext() === '{';
    	    var macro = op + power;
    	    if (!(parens || braces)) {
    	        macro += parser.GetArgument(name, true) || '';
    	        var mml = new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml();
    	        parser.Push(mml);
    	        return;
    	    }
    	    if (braces) {
    	        macro += parser.GetArgument(name);
    	        var mml = new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml();
    	        parser.Push(parser.create('node', 'TeXAtom', [mml], { texClass: MmlNode_js_1.TEXCLASS.OP }));
    	        return;
    	    }
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	    parser.i++;
    	    parser.Push(parser.itemFactory.create('auto open')
    	        .setProperties({ open: '(', close: ')' }));
    	};
    	PhysicsMethods$1.Derivative = function (parser, name, argMax, op) {
    	    var star = parser.GetStar();
    	    var optArg = parser.GetBrackets(name);
    	    var argCounter = 1;
    	    var args = [];
    	    args.push(parser.GetArgument(name));
    	    while (parser.GetNext() === '{' && argCounter < argMax) {
    	        args.push(parser.GetArgument(name));
    	        argCounter++;
    	    }
    	    var ignore = false;
    	    var power1 = ' ';
    	    var power2 = ' ';
    	    if (argMax > 2 && args.length > 2) {
    	        power1 = '^{' + (args.length - 1) + '}';
    	        ignore = true;
    	    }
    	    else if (optArg != null) {
    	        if (argMax > 2 && args.length > 1) {
    	            ignore = true;
    	        }
    	        power1 = '^{' + optArg + '}';
    	        power2 = power1;
    	    }
    	    var frac = star ? '\\flatfrac' : '\\frac';
    	    var first = args.length > 1 ? args[0] : '';
    	    var second = args.length > 1 ? args[1] : args[0];
    	    var rest = '';
    	    for (var i = 2, arg = undefined; arg = args[i]; i++) {
    	        rest += op + ' ' + arg;
    	    }
    	    var macro = frac + '{' + op + power1 + first + '}' +
    	        '{' + op + ' ' + second + power2 + ' ' + rest + '}';
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	    if (parser.GetNext() === '(') {
    	        parser.i++;
    	        parser.Push(parser.itemFactory.create('auto open')
    	            .setProperties({ open: '(', close: ')', ignore: ignore }));
    	    }
    	};
    	PhysicsMethods$1.Bra = function (parser, name) {
    	    var starBra = parser.GetStar();
    	    var bra = parser.GetArgument(name);
    	    var ket = '';
    	    var hasKet = false;
    	    var starKet = false;
    	    if (parser.GetNext() === '\\') {
    	        var saveI = parser.i;
    	        parser.i++;
    	        var cs = parser.GetCS();
    	        var symbol = parser.lookup('macro', cs);
    	        if (symbol && symbol.symbol === 'ket') {
    	            hasKet = true;
    	            saveI = parser.i;
    	            starKet = parser.GetStar();
    	            if (parser.GetNext() === '{') {
    	                ket = parser.GetArgument(cs, true);
    	            }
    	            else {
    	                parser.i = saveI;
    	                starKet = false;
    	            }
    	        }
    	        else {
    	            parser.i = saveI;
    	        }
    	    }
    	    var macro = '';
    	    if (hasKet) {
    	        macro = (starBra || starKet) ?
    	            "\\langle{".concat(bra, "}\\vert{").concat(ket, "}\\rangle") :
    	            "\\left\\langle{".concat(bra, "}\\middle\\vert{").concat(ket, "}\\right\\rangle");
    	    }
    	    else {
    	        macro = (starBra || starKet) ?
    	            "\\langle{".concat(bra, "}\\vert") : "\\left\\langle{".concat(bra, "}\\right\\vert{").concat(ket, "}");
    	    }
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	};
    	PhysicsMethods$1.Ket = function (parser, name) {
    	    var star = parser.GetStar();
    	    var ket = parser.GetArgument(name);
    	    var macro = star ? "\\vert{".concat(ket, "}\\rangle") :
    	        "\\left\\vert{".concat(ket, "}\\right\\rangle");
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	};
    	PhysicsMethods$1.BraKet = function (parser, name) {
    	    var star = parser.GetStar();
    	    var bra = parser.GetArgument(name);
    	    var ket = null;
    	    if (parser.GetNext() === '{') {
    	        ket = parser.GetArgument(name, true);
    	    }
    	    var macro = '';
    	    if (ket == null) {
    	        macro = star ?
    	            "\\langle{".concat(bra, "}\\vert{").concat(bra, "}\\rangle") :
    	            "\\left\\langle{".concat(bra, "}\\middle\\vert{").concat(bra, "}\\right\\rangle");
    	    }
    	    else {
    	        macro = star ?
    	            "\\langle{".concat(bra, "}\\vert{").concat(ket, "}\\rangle") :
    	            "\\left\\langle{".concat(bra, "}\\middle\\vert{").concat(ket, "}\\right\\rangle");
    	    }
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	};
    	PhysicsMethods$1.KetBra = function (parser, name) {
    	    var star = parser.GetStar();
    	    var ket = parser.GetArgument(name);
    	    var bra = null;
    	    if (parser.GetNext() === '{') {
    	        bra = parser.GetArgument(name, true);
    	    }
    	    var macro = '';
    	    if (bra == null) {
    	        macro = star ?
    	            "\\vert{".concat(ket, "}\\rangle\\!\\langle{").concat(ket, "}\\vert") :
    	            "\\left\\vert{".concat(ket, "}\\middle\\rangle\\!\\middle\\langle{").concat(ket, "}\\right\\vert");
    	    }
    	    else {
    	        macro = star ?
    	            "\\vert{".concat(ket, "}\\rangle\\!\\langle{").concat(bra, "}\\vert") :
    	            "\\left\\vert{".concat(ket, "}\\middle\\rangle\\!\\middle\\langle{").concat(bra, "}\\right\\vert");
    	    }
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	};
    	function outputBraket(_a, star1, star2) {
    	    var _b = __read(_a, 3), arg1 = _b[0], arg2 = _b[1], arg3 = _b[2];
    	    return (star1 && star2) ?
    	        "\\left\\langle{".concat(arg1, "}\\middle\\vert{").concat(arg2, "}\\middle\\vert{").concat(arg3, "}\\right\\rangle") :
    	        (star1 ? "\\langle{".concat(arg1, "}\\vert{").concat(arg2, "}\\vert{").concat(arg3, "}\\rangle") :
    	            "\\left\\langle{".concat(arg1, "}\\right\\vert{").concat(arg2, "}\\left\\vert{").concat(arg3, "}\\right\\rangle"));
    	}
    	PhysicsMethods$1.Expectation = function (parser, name) {
    	    var star1 = parser.GetStar();
    	    var star2 = star1 && parser.GetStar();
    	    var arg1 = parser.GetArgument(name);
    	    var arg2 = null;
    	    if (parser.GetNext() === '{') {
    	        arg2 = parser.GetArgument(name, true);
    	    }
    	    var macro = (arg1 && arg2) ?
    	        outputBraket([arg2, arg1, arg2], star1, star2) :
    	        (star1 ? "\\langle {".concat(arg1, "} \\rangle") :
    	            "\\left\\langle {".concat(arg1, "} \\right\\rangle"));
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	};
    	PhysicsMethods$1.MatrixElement = function (parser, name) {
    	    var star1 = parser.GetStar();
    	    var star2 = star1 && parser.GetStar();
    	    var arg1 = parser.GetArgument(name);
    	    var arg2 = parser.GetArgument(name);
    	    var arg3 = parser.GetArgument(name);
    	    var macro = outputBraket([arg1, arg2, arg3], star1, star2);
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	};
    	PhysicsMethods$1.MatrixQuantity = function (parser, name, small) {
    	    var star = parser.GetStar();
    	    var next = parser.GetNext();
    	    var array = small ? 'smallmatrix' : 'array';
    	    var arg = '';
    	    var open = '';
    	    var close = '';
    	    switch (next) {
    	        case '{':
    	            arg = parser.GetArgument(name);
    	            break;
    	        case '(':
    	            parser.i++;
    	            open = star ? '\\lgroup' : '(';
    	            close = star ? '\\rgroup' : ')';
    	            arg = parser.GetUpTo(name, ')');
    	            break;
    	        case '[':
    	            parser.i++;
    	            open = '[';
    	            close = ']';
    	            arg = parser.GetUpTo(name, ']');
    	            break;
    	        case '|':
    	            parser.i++;
    	            open = '|';
    	            close = '|';
    	            arg = parser.GetUpTo(name, '|');
    	            break;
    	        default:
    	            open = '(';
    	            close = ')';
    	            break;
    	    }
    	    var macro = (open ? '\\left' : '') + open +
    	        '\\begin{' + array + '}{} ' + arg + '\\end{' + array + '}' +
    	        (open ? '\\right' : '') + close;
    	    parser.Push(new TexParser_js_1.default(macro, parser.stack.env, parser.configuration).mml());
    	};
    	PhysicsMethods$1.IdentityMatrix = function (parser, name) {
    	    var arg = parser.GetArgument(name);
    	    var size = parseInt(arg, 10);
    	    if (isNaN(size)) {
    	        throw new TexError_js_1.default('InvalidNumber', 'Invalid number');
    	    }
    	    if (size <= 1) {
    	        parser.string = '1' + parser.string.slice(parser.i);
    	        parser.i = 0;
    	        return;
    	    }
    	    var zeros = Array(size).fill('0');
    	    var columns = [];
    	    for (var i = 0; i < size; i++) {
    	        var row = zeros.slice();
    	        row[i] = '1';
    	        columns.push(row.join(' & '));
    	    }
    	    parser.string = columns.join('\\\\ ') + parser.string.slice(parser.i);
    	    parser.i = 0;
    	};
    	PhysicsMethods$1.XMatrix = function (parser, name) {
    	    var star = parser.GetStar();
    	    var arg1 = parser.GetArgument(name);
    	    var arg2 = parser.GetArgument(name);
    	    var arg3 = parser.GetArgument(name);
    	    var n = parseInt(arg2, 10);
    	    var m = parseInt(arg3, 10);
    	    if (isNaN(n) || isNaN(m) || m.toString() !== arg3 || n.toString() !== arg2) {
    	        throw new TexError_js_1.default('InvalidNumber', 'Invalid number');
    	    }
    	    n = n < 1 ? 1 : n;
    	    m = m < 1 ? 1 : m;
    	    if (!star) {
    	        var row = Array(m).fill(arg1).join(' & ');
    	        var matrix_1 = Array(n).fill(row).join('\\\\ ');
    	        parser.string = matrix_1 + parser.string.slice(parser.i);
    	        parser.i = 0;
    	        return;
    	    }
    	    var matrix = '';
    	    if (n === 1 && m === 1) {
    	        matrix = arg1;
    	    }
    	    else if (n === 1) {
    	        var row = [];
    	        for (var i = 1; i <= m; i++) {
    	            row.push("".concat(arg1, "_{").concat(i, "}"));
    	        }
    	        matrix = row.join(' & ');
    	    }
    	    else if (m === 1) {
    	        var row = [];
    	        for (var i = 1; i <= n; i++) {
    	            row.push("".concat(arg1, "_{").concat(i, "}"));
    	        }
    	        matrix = row.join('\\\\ ');
    	    }
    	    else {
    	        var rows = [];
    	        for (var i = 1; i <= n; i++) {
    	            var row = [];
    	            for (var j = 1; j <= m; j++) {
    	                row.push("".concat(arg1, "_{{").concat(i, "}{").concat(j, "}}"));
    	            }
    	            rows.push(row.join(' & '));
    	        }
    	        matrix = rows.join('\\\\ ');
    	    }
    	    parser.string = matrix + parser.string.slice(parser.i);
    	    parser.i = 0;
    	    return;
    	};
    	PhysicsMethods$1.PauliMatrix = function (parser, name) {
    	    var arg = parser.GetArgument(name);
    	    var matrix = arg.slice(1);
    	    switch (arg[0]) {
    	        case '0':
    	            matrix += ' 1 & 0\\\\ 0 & 1';
    	            break;
    	        case '1':
    	        case 'x':
    	            matrix += ' 0 & 1\\\\ 1 & 0';
    	            break;
    	        case '2':
    	        case 'y':
    	            matrix += ' 0 & -i\\\\ i & 0';
    	            break;
    	        case '3':
    	        case 'z':
    	            matrix += ' 1 & 0\\\\ 0 & -1';
    	            break;
    	    }
    	    parser.string = matrix + parser.string.slice(parser.i);
    	    parser.i = 0;
    	};
    	PhysicsMethods$1.DiagonalMatrix = function (parser, name, anti) {
    	    if (parser.GetNext() !== '{') {
    	        return;
    	    }
    	    var startI = parser.i;
    	    parser.GetArgument(name);
    	    var endI = parser.i;
    	    parser.i = startI + 1;
    	    var elements = [];
    	    var element = '';
    	    var currentI = parser.i;
    	    while (currentI < endI) {
    	        try {
    	            element = parser.GetUpTo(name, ',');
    	        }
    	        catch (e) {
    	            parser.i = endI;
    	            elements.push(parser.string.slice(currentI, endI - 1));
    	            break;
    	        }
    	        if (parser.i >= endI) {
    	            elements.push(parser.string.slice(currentI, endI));
    	            break;
    	        }
    	        currentI = parser.i;
    	        elements.push(element);
    	    }
    	    parser.string = makeDiagMatrix(elements, anti) + parser.string.slice(endI);
    	    parser.i = 0;
    	};
    	function makeDiagMatrix(elements, anti) {
    	    var length = elements.length;
    	    var matrix = [];
    	    for (var i = 0; i < length; i++) {
    	        matrix.push(Array(anti ? length - i : i + 1).join('&') +
    	            '\\mqty{' + elements[i] + '}');
    	    }
    	    return matrix.join('\\\\ ');
    	}
    	PhysicsMethods$1.AutoClose = function (parser, fence, _texclass) {
    	    var mo = parser.create('token', 'mo', { stretchy: false }, fence);
    	    var item = parser.itemFactory.create('mml', mo).
    	        setProperties({ autoclose: fence });
    	    parser.Push(item);
    	};
    	PhysicsMethods$1.Vnabla = function (parser, _name) {
    	    var argument = parser.options.physics.arrowdel ?
    	        '\\vec{\\gradientnabla}' : '{\\gradientnabla}';
    	    return parser.Push(new TexParser_js_1.default(argument, parser.stack.env, parser.configuration).mml());
    	};
    	PhysicsMethods$1.DiffD = function (parser, _name) {
    	    var argument = parser.options.physics.italicdiff ? 'd' : '{\\rm d}';
    	    return parser.Push(new TexParser_js_1.default(argument, parser.stack.env, parser.configuration).mml());
    	};
    	PhysicsMethods$1.Macro = BaseMethods_js_1.default.Macro;
    	PhysicsMethods$1.NamedFn = BaseMethods_js_1.default.NamedFn;
    	PhysicsMethods$1.Array = BaseMethods_js_1.default.Array;
    	PhysicsMethods.default = PhysicsMethods$1;
    	
    	return PhysicsMethods;
    }

    var hasRequiredPhysicsMappings;

    function requirePhysicsMappings () {
    	if (hasRequiredPhysicsMappings) return PhysicsMappings;
    	hasRequiredPhysicsMappings = 1;
    	var __importDefault = (PhysicsMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(PhysicsMappings, "__esModule", { value: true });
    	var SymbolMap_js_1 = requireSymbolMap();
    	var PhysicsMethods_js_1 = __importDefault(requirePhysicsMethods());
    	var TexConstants_js_1 = requireTexConstants();
    	var ParseMethods_js_1 = __importDefault(requireParseMethods());
    	var MmlNode_js_1 = requireMmlNode();
    	new SymbolMap_js_1.CommandMap('Physics-automatic-bracing-macros', {
    	    'quantity': 'Quantity',
    	    'qty': 'Quantity',
    	    'pqty': ['Quantity', '(', ')', true],
    	    'bqty': ['Quantity', '[', ']', true],
    	    'vqty': ['Quantity', '|', '|', true],
    	    'Bqty': ['Quantity', '\\{', '\\}', true],
    	    'absolutevalue': ['Quantity', '|', '|', true],
    	    'abs': ['Quantity', '|', '|', true],
    	    'norm': ['Quantity', '\\|', '\\|', true],
    	    'evaluated': 'Eval',
    	    'eval': 'Eval',
    	    'order': ['Quantity', '(', ')', true, 'O',
    	        TexConstants_js_1.TexConstant.Variant.CALLIGRAPHIC],
    	    'commutator': 'Commutator',
    	    'comm': 'Commutator',
    	    'anticommutator': ['Commutator', '\\{', '\\}'],
    	    'acomm': ['Commutator', '\\{', '\\}'],
    	    'poissonbracket': ['Commutator', '\\{', '\\}'],
    	    'pb': ['Commutator', '\\{', '\\}']
    	}, PhysicsMethods_js_1.default);
    	new SymbolMap_js_1.CharacterMap('Physics-vector-mo', ParseMethods_js_1.default.mathchar0mo, {
    	    dotproduct: ['\u22C5', { mathvariant: TexConstants_js_1.TexConstant.Variant.BOLD }],
    	    vdot: ['\u22C5', { mathvariant: TexConstants_js_1.TexConstant.Variant.BOLD }],
    	    crossproduct: '\u00D7',
    	    cross: '\u00D7',
    	    cp: '\u00D7',
    	    gradientnabla: ['\u2207', { mathvariant: TexConstants_js_1.TexConstant.Variant.BOLD }]
    	});
    	new SymbolMap_js_1.CharacterMap('Physics-vector-mi', ParseMethods_js_1.default.mathchar0mi, {
    	    real: ['\u211C', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }],
    	    imaginary: ['\u2111', { mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL }]
    	});
    	new SymbolMap_js_1.CommandMap('Physics-vector-macros', {
    	    'vnabla': 'Vnabla',
    	    'vectorbold': 'VectorBold',
    	    'vb': 'VectorBold',
    	    'vectorarrow': ['StarMacro', 1, '\\vec{\\vb', '{#1}}'],
    	    'va': ['StarMacro', 1, '\\vec{\\vb', '{#1}}'],
    	    'vectorunit': ['StarMacro', 1, '\\hat{\\vb', '{#1}}'],
    	    'vu': ['StarMacro', 1, '\\hat{\\vb', '{#1}}'],
    	    'gradient': ['OperatorApplication', '\\vnabla', '(', '['],
    	    'grad': ['OperatorApplication', '\\vnabla', '(', '['],
    	    'divergence': ['VectorOperator', '\\vnabla\\vdot', '(', '['],
    	    'div': ['VectorOperator', '\\vnabla\\vdot', '(', '['],
    	    'curl': ['VectorOperator', '\\vnabla\\crossproduct', '(', '['],
    	    'laplacian': ['OperatorApplication', '\\nabla^2', '(', '['],
    	}, PhysicsMethods_js_1.default);
    	new SymbolMap_js_1.CommandMap('Physics-expressions-macros', {
    	    'sin': 'Expression',
    	    'sinh': 'Expression',
    	    'arcsin': 'Expression',
    	    'asin': 'Expression',
    	    'cos': 'Expression',
    	    'cosh': 'Expression',
    	    'arccos': 'Expression',
    	    'acos': 'Expression',
    	    'tan': 'Expression',
    	    'tanh': 'Expression',
    	    'arctan': 'Expression',
    	    'atan': 'Expression',
    	    'csc': 'Expression',
    	    'csch': 'Expression',
    	    'arccsc': 'Expression',
    	    'acsc': 'Expression',
    	    'sec': 'Expression',
    	    'sech': 'Expression',
    	    'arcsec': 'Expression',
    	    'asec': 'Expression',
    	    'cot': 'Expression',
    	    'coth': 'Expression',
    	    'arccot': 'Expression',
    	    'acot': 'Expression',
    	    'exp': ['Expression', false],
    	    'log': 'Expression',
    	    'ln': 'Expression',
    	    'det': ['Expression', false],
    	    'Pr': ['Expression', false],
    	    'tr': ['Expression', false],
    	    'trace': ['Expression', false, 'tr'],
    	    'Tr': ['Expression', false],
    	    'Trace': ['Expression', false, 'Tr'],
    	    'rank': 'NamedFn',
    	    'erf': ['Expression', false],
    	    'Residue': ['Macro', '\\mathrm{Res}'],
    	    'Res': ['OperatorApplication', '\\Residue', '(', '[', '{'],
    	    'principalvalue': ['OperatorApplication', '{\\cal P}'],
    	    'pv': ['OperatorApplication', '{\\cal P}'],
    	    'PV': ['OperatorApplication', '{\\rm P.V.}'],
    	    'Re': ['OperatorApplication', '\\mathrm{Re}', '{'],
    	    'Im': ['OperatorApplication', '\\mathrm{Im}', '{'],
    	    'sine': ['NamedFn', 'sin'],
    	    'hypsine': ['NamedFn', 'sinh'],
    	    'arcsine': ['NamedFn', 'arcsin'],
    	    'asine': ['NamedFn', 'asin'],
    	    'cosine': ['NamedFn', 'cos'],
    	    'hypcosine': ['NamedFn', 'cosh'],
    	    'arccosine': ['NamedFn', 'arccos'],
    	    'acosine': ['NamedFn', 'acos'],
    	    'tangent': ['NamedFn', 'tan'],
    	    'hyptangent': ['NamedFn', 'tanh'],
    	    'arctangent': ['NamedFn', 'arctan'],
    	    'atangent': ['NamedFn', 'atan'],
    	    'cosecant': ['NamedFn', 'csc'],
    	    'hypcosecant': ['NamedFn', 'csch'],
    	    'arccosecant': ['NamedFn', 'arccsc'],
    	    'acosecant': ['NamedFn', 'acsc'],
    	    'secant': ['NamedFn', 'sec'],
    	    'hypsecant': ['NamedFn', 'sech'],
    	    'arcsecant': ['NamedFn', 'arcsec'],
    	    'asecant': ['NamedFn', 'asec'],
    	    'cotangent': ['NamedFn', 'cot'],
    	    'hypcotangent': ['NamedFn', 'coth'],
    	    'arccotangent': ['NamedFn', 'arccot'],
    	    'acotangent': ['NamedFn', 'acot'],
    	    'exponential': ['NamedFn', 'exp'],
    	    'logarithm': ['NamedFn', 'log'],
    	    'naturallogarithm': ['NamedFn', 'ln'],
    	    'determinant': ['NamedFn', 'det'],
    	    'Probability': ['NamedFn', 'Pr'],
    	}, PhysicsMethods_js_1.default);
    	new SymbolMap_js_1.CommandMap('Physics-quick-quad-macros', {
    	    'qqtext': 'Qqtext',
    	    'qq': 'Qqtext',
    	    'qcomma': ['Macro', '\\qqtext*{,}'],
    	    'qc': ['Macro', '\\qqtext*{,}'],
    	    'qcc': ['Qqtext', 'c.c.'],
    	    'qif': ['Qqtext', 'if'],
    	    'qthen': ['Qqtext', 'then'],
    	    'qelse': ['Qqtext', 'else'],
    	    'qotherwise': ['Qqtext', 'otherwise'],
    	    'qunless': ['Qqtext', 'unless'],
    	    'qgiven': ['Qqtext', 'given'],
    	    'qusing': ['Qqtext', 'using'],
    	    'qassume': ['Qqtext', 'assume'],
    	    'qsince': ['Qqtext', 'since'],
    	    'qlet': ['Qqtext', 'let'],
    	    'qfor': ['Qqtext', 'for'],
    	    'qall': ['Qqtext', 'all'],
    	    'qeven': ['Qqtext', 'even'],
    	    'qodd': ['Qqtext', 'odd'],
    	    'qinteger': ['Qqtext', 'integer'],
    	    'qand': ['Qqtext', 'and'],
    	    'qor': ['Qqtext', 'or'],
    	    'qas': ['Qqtext', 'as'],
    	    'qin': ['Qqtext', 'in'],
    	}, PhysicsMethods_js_1.default);
    	new SymbolMap_js_1.CommandMap('Physics-derivative-macros', {
    	    'diffd': 'DiffD',
    	    'flatfrac': ['Macro', '\\left.#1\\middle/#2\\right.', 2],
    	    'differential': ['Differential', '\\diffd'],
    	    'dd': ['Differential', '\\diffd'],
    	    'variation': ['Differential', '\\delta'],
    	    'var': ['Differential', '\\delta'],
    	    'derivative': ['Derivative', 2, '\\diffd'],
    	    'dv': ['Derivative', 2, '\\diffd'],
    	    'partialderivative': ['Derivative', 3, '\\partial'],
    	    'pderivative': ['Derivative', 3, '\\partial'],
    	    'pdv': ['Derivative', 3, '\\partial'],
    	    'functionalderivative': ['Derivative', 2, '\\delta'],
    	    'fderivative': ['Derivative', 2, '\\delta'],
    	    'fdv': ['Derivative', 2, '\\delta'],
    	}, PhysicsMethods_js_1.default);
    	new SymbolMap_js_1.CommandMap('Physics-bra-ket-macros', {
    	    'bra': 'Bra',
    	    'ket': 'Ket',
    	    'innerproduct': 'BraKet',
    	    'ip': 'BraKet',
    	    'braket': 'BraKet',
    	    'outerproduct': 'KetBra',
    	    'dyad': 'KetBra',
    	    'ketbra': 'KetBra',
    	    'op': 'KetBra',
    	    'expectationvalue': 'Expectation',
    	    'expval': 'Expectation',
    	    'ev': 'Expectation',
    	    'matrixelement': 'MatrixElement',
    	    'matrixel': 'MatrixElement',
    	    'mel': 'MatrixElement',
    	}, PhysicsMethods_js_1.default);
    	new SymbolMap_js_1.CommandMap('Physics-matrix-macros', {
    	    'matrixquantity': 'MatrixQuantity',
    	    'mqty': 'MatrixQuantity',
    	    'pmqty': ['Macro', '\\mqty(#1)', 1],
    	    'Pmqty': ['Macro', '\\mqty*(#1)', 1],
    	    'bmqty': ['Macro', '\\mqty[#1]', 1],
    	    'vmqty': ['Macro', '\\mqty|#1|', 1],
    	    'smallmatrixquantity': ['MatrixQuantity', true],
    	    'smqty': ['MatrixQuantity', true],
    	    'spmqty': ['Macro', '\\smqty(#1)', 1],
    	    'sPmqty': ['Macro', '\\smqty*(#1)', 1],
    	    'sbmqty': ['Macro', '\\smqty[#1]', 1],
    	    'svmqty': ['Macro', '\\smqty|#1|', 1],
    	    'matrixdeterminant': ['Macro', '\\vmqty{#1}', 1],
    	    'mdet': ['Macro', '\\vmqty{#1}', 1],
    	    'smdet': ['Macro', '\\svmqty{#1}', 1],
    	    'identitymatrix': 'IdentityMatrix',
    	    'imat': 'IdentityMatrix',
    	    'xmatrix': 'XMatrix',
    	    'xmat': 'XMatrix',
    	    'zeromatrix': ['Macro', '\\xmat{0}{#1}{#2}', 2],
    	    'zmat': ['Macro', '\\xmat{0}{#1}{#2}', 2],
    	    'paulimatrix': 'PauliMatrix',
    	    'pmat': 'PauliMatrix',
    	    'diagonalmatrix': 'DiagonalMatrix',
    	    'dmat': 'DiagonalMatrix',
    	    'antidiagonalmatrix': ['DiagonalMatrix', true],
    	    'admat': ['DiagonalMatrix', true]
    	}, PhysicsMethods_js_1.default);
    	new SymbolMap_js_1.EnvironmentMap('Physics-aux-envs', ParseMethods_js_1.default.environment, {
    	    smallmatrix: ['Array', null, null, null, 'c', '0.333em', '.2em', 'S', 1]
    	}, PhysicsMethods_js_1.default);
    	new SymbolMap_js_1.MacroMap('Physics-characters', {
    	    '|': ['AutoClose', MmlNode_js_1.TEXCLASS.ORD],
    	    ')': 'AutoClose',
    	    ']': 'AutoClose'
    	}, PhysicsMethods_js_1.default);
    	
    	return PhysicsMappings;
    }

    var hasRequiredPhysicsConfiguration;

    function requirePhysicsConfiguration () {
    	if (hasRequiredPhysicsConfiguration) return PhysicsConfiguration;
    	hasRequiredPhysicsConfiguration = 1;
    	var _a;
    	Object.defineProperty(PhysicsConfiguration, "__esModule", { value: true });
    	PhysicsConfiguration.PhysicsConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var PhysicsItems_js_1 = requirePhysicsItems();
    	requirePhysicsMappings();
    	PhysicsConfiguration.PhysicsConfiguration = Configuration_js_1.Configuration.create('physics', {
    	    handler: {
    	        macro: [
    	            'Physics-automatic-bracing-macros',
    	            'Physics-vector-macros',
    	            'Physics-vector-mo',
    	            'Physics-vector-mi',
    	            'Physics-derivative-macros',
    	            'Physics-expressions-macros',
    	            'Physics-quick-quad-macros',
    	            'Physics-bra-ket-macros',
    	            'Physics-matrix-macros'
    	        ],
    	        character: ['Physics-characters'],
    	        environment: ['Physics-aux-envs']
    	    },
    	    items: (_a = {},
    	        _a[PhysicsItems_js_1.AutoOpen.prototype.kind] = PhysicsItems_js_1.AutoOpen,
    	        _a),
    	    options: {
    	        physics: {
    	            italicdiff: false,
    	            arrowdel: false
    	        }
    	    }
    	});
    	
    	return PhysicsConfiguration;
    }

    var SetOptionsConfiguration = {};

    var hasRequiredSetOptionsConfiguration;

    function requireSetOptionsConfiguration () {
    	if (hasRequiredSetOptionsConfiguration) return SetOptionsConfiguration;
    	hasRequiredSetOptionsConfiguration = 1;
    	(function (exports) {
    		var __values = (SetOptionsConfiguration.__values) || function(o) {
    		    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    		    if (m) return m.call(o);
    		    if (o && typeof o.length === "number") return {
    		        next: function () {
    		            if (o && i >= o.length) o = undefined;
    		            return { value: o && o[i++], done: !o };
    		        }
    		    };
    		    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    		};
    		var __importDefault = (SetOptionsConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.SetOptionsConfiguration = exports.SetOptionsUtil = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var TexError_js_1 = __importDefault(requireTexError());
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var Symbol_js_1 = require_Symbol();
    		var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    		var Options_js_1 = requireOptions();
    		exports.SetOptionsUtil = {
    		    filterPackage: function (parser, extension) {
    		        if (extension !== 'tex' && !Configuration_js_1.ConfigurationHandler.get(extension)) {
    		            throw new TexError_js_1.default('NotAPackage', 'Not a defined package: %1', extension);
    		        }
    		        var config = parser.options.setoptions;
    		        var options = config.allowOptions[extension];
    		        if ((options === undefined && !config.allowPackageDefault) || options === false) {
    		            throw new TexError_js_1.default('PackageNotSettable', 'Options can\'t be set for package "%1"', extension);
    		        }
    		        return true;
    		    },
    		    filterOption: function (parser, extension, option) {
    		        var _a;
    		        var config = parser.options.setoptions;
    		        var options = config.allowOptions[extension] || {};
    		        var allow = (options.hasOwnProperty(option) && !(0, Options_js_1.isObject)(options[option]) ? options[option] : null);
    		        if (allow === false || (allow === null && !config.allowOptionsDefault)) {
    		            throw new TexError_js_1.default('OptionNotSettable', 'Option "%1" is not allowed to be set', option);
    		        }
    		        if (!((_a = (extension === 'tex' ? parser.options : parser.options[extension])) === null || _a === undefined ? undefined : _a.hasOwnProperty(option))) {
    		            if (extension === 'tex') {
    		                throw new TexError_js_1.default('InvalidTexOption', 'Invalid TeX option "%1"', option);
    		            }
    		            else {
    		                throw new TexError_js_1.default('InvalidOptionKey', 'Invalid option "%1" for package "%2"', option, extension);
    		            }
    		        }
    		        return true;
    		    },
    		    filterValue: function (_parser, _extension, _option, value) {
    		        return value;
    		    }
    		};
    		var setOptionsMap = new SymbolMap_js_1.CommandMap('setoptions', {
    		    setOptions: 'SetOptions'
    		}, {
    		    SetOptions: function (parser, name) {
    		        var e_1, _a;
    		        var extension = parser.GetBrackets(name) || 'tex';
    		        var options = ParseUtil_js_1.default.keyvalOptions(parser.GetArgument(name));
    		        var config = parser.options.setoptions;
    		        if (!config.filterPackage(parser, extension))
    		            return;
    		        try {
    		            for (var _b = __values(Object.keys(options)), _c = _b.next(); !_c.done; _c = _b.next()) {
    		                var key = _c.value;
    		                if (config.filterOption(parser, extension, key)) {
    		                    (extension === 'tex' ? parser.options : parser.options[extension])[key] =
    		                        config.filterValue(parser, extension, key, options[key]);
    		                }
    		            }
    		        }
    		        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    		        finally {
    		            try {
    		                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    		            }
    		            finally { if (e_1) throw e_1.error; }
    		        }
    		    }
    		});
    		function setoptionsConfig(_config, jax) {
    		    var require = jax.parseOptions.handlers.get('macro').lookup('require');
    		    if (require) {
    		        setOptionsMap.add('Require', new Symbol_js_1.Macro('Require', require._func));
    		        setOptionsMap.add('require', new Symbol_js_1.Macro('require', BaseMethods_js_1.default.Macro, ['\\Require{#2}\\setOptions[#2]{#1}', 2, '']));
    		    }
    		}
    		exports.SetOptionsConfiguration = Configuration_js_1.Configuration.create('setoptions', {
    		    handler: { macro: ['setoptions'] },
    		    config: setoptionsConfig,
    		    priority: 3,
    		    options: {
    		        setoptions: {
    		            filterPackage: exports.SetOptionsUtil.filterPackage,
    		            filterOption: exports.SetOptionsUtil.filterOption,
    		            filterValue: exports.SetOptionsUtil.filterValue,
    		            allowPackageDefault: true,
    		            allowOptionsDefault: true,
    		            allowOptions: (0, Options_js_1.expandable)({
    		                tex: {
    		                    FindTeX: false,
    		                    formatError: false,
    		                    package: false,
    		                    baseURL: false,
    		                    tags: false,
    		                    maxBuffer: false,
    		                    maxMaxros: false,
    		                    macros: false,
    		                    environments: false
    		                },
    		                setoptions: false,
    		                autoload: false,
    		                require: false,
    		                configmacros: false,
    		                tagformat: false
    		            })
    		        }
    		    }
    		});
    		
    	} (SetOptionsConfiguration));
    	return SetOptionsConfiguration;
    }

    var TagFormatConfiguration = {};

    var hasRequiredTagFormatConfiguration;

    function requireTagFormatConfiguration () {
    	if (hasRequiredTagFormatConfiguration) return TagFormatConfiguration;
    	hasRequiredTagFormatConfiguration = 1;
    	var __extends = (TagFormatConfiguration.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(TagFormatConfiguration, "__esModule", { value: true });
    	TagFormatConfiguration.TagFormatConfiguration = TagFormatConfiguration.tagformatConfig = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var Tags_js_1 = requireTags();
    	var tagID = 0;
    	function tagformatConfig(config, jax) {
    	    var tags = jax.parseOptions.options.tags;
    	    if (tags !== 'base' && config.tags.hasOwnProperty(tags)) {
    	        Tags_js_1.TagsFactory.add(tags, config.tags[tags]);
    	    }
    	    var TagClass = Tags_js_1.TagsFactory.create(jax.parseOptions.options.tags).constructor;
    	    var TagFormat = (function (_super) {
    	        __extends(TagFormat, _super);
    	        function TagFormat() {
    	            return _super !== null && _super.apply(this, arguments) || this;
    	        }
    	        TagFormat.prototype.formatNumber = function (n) {
    	            return jax.parseOptions.options.tagformat.number(n);
    	        };
    	        TagFormat.prototype.formatTag = function (tag) {
    	            return jax.parseOptions.options.tagformat.tag(tag);
    	        };
    	        TagFormat.prototype.formatId = function (id) {
    	            return jax.parseOptions.options.tagformat.id(id);
    	        };
    	        TagFormat.prototype.formatUrl = function (id, base) {
    	            return jax.parseOptions.options.tagformat.url(id, base);
    	        };
    	        return TagFormat;
    	    }(TagClass));
    	    tagID++;
    	    var tagName = 'configTags-' + tagID;
    	    Tags_js_1.TagsFactory.add(tagName, TagFormat);
    	    jax.parseOptions.options.tags = tagName;
    	}
    	TagFormatConfiguration.tagformatConfig = tagformatConfig;
    	TagFormatConfiguration.TagFormatConfiguration = Configuration_js_1.Configuration.create('tagformat', {
    	    config: [tagformatConfig, 10],
    	    options: {
    	        tagformat: {
    	            number: function (n) { return n.toString(); },
    	            tag: function (tag) { return '(' + tag + ')'; },
    	            id: function (id) { return 'mjx-eqn:' + id.replace(/\s/g, '_'); },
    	            url: function (id, base) { return base + '#' + encodeURIComponent(id); },
    	        }
    	    }
    	});
    	
    	return TagFormatConfiguration;
    }

    var TextcompConfiguration = {};

    var TextcompMappings = {};

    var TextMacrosMethods = {};

    var hasRequiredTextMacrosMethods;

    function requireTextMacrosMethods () {
    	if (hasRequiredTextMacrosMethods) return TextMacrosMethods;
    	hasRequiredTextMacrosMethods = 1;
    	var __importDefault = (TextMacrosMethods.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(TextMacrosMethods, "__esModule", { value: true });
    	TextMacrosMethods.TextMacrosMethods = undefined;
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var Retries_js_1 = requireRetries();
    	var BaseMethods_js_1 = __importDefault(requireBaseMethods());
    	TextMacrosMethods.TextMacrosMethods = {
    	    Comment: function (parser, _c) {
    	        while (parser.i < parser.string.length && parser.string.charAt(parser.i) !== '\n') {
    	            parser.i++;
    	        }
    	        parser.i++;
    	    },
    	    Math: function (parser, open) {
    	        parser.saveText();
    	        var i = parser.i;
    	        var j, c;
    	        var braces = 0;
    	        while ((c = parser.GetNext())) {
    	            j = parser.i++;
    	            switch (c) {
    	                case '\\':
    	                    var cs = parser.GetCS();
    	                    if (cs === ')')
    	                        c = '\\(';
    	                case '$':
    	                    if (braces === 0 && open === c) {
    	                        var config = parser.texParser.configuration;
    	                        var mml = (new TexParser_js_1.default(parser.string.substr(i, j - i), parser.stack.env, config)).mml();
    	                        parser.PushMath(mml);
    	                        return;
    	                    }
    	                    break;
    	                case '{':
    	                    braces++;
    	                    break;
    	                case '}':
    	                    if (braces === 0) {
    	                        parser.Error('ExtraCloseMissingOpen', 'Extra close brace or missing open brace');
    	                    }
    	                    braces--;
    	                    break;
    	            }
    	        }
    	        parser.Error('MathNotTerminated', 'Math-mode is not properly terminated');
    	    },
    	    MathModeOnly: function (parser, c) {
    	        parser.Error('MathModeOnly', '\'%1\' allowed only in math mode', c);
    	    },
    	    Misplaced: function (parser, c) {
    	        parser.Error('Misplaced', '\'%1\' can not be used here', c);
    	    },
    	    OpenBrace: function (parser, _c) {
    	        var env = parser.stack.env;
    	        parser.envStack.push(env);
    	        parser.stack.env = Object.assign({}, env);
    	    },
    	    CloseBrace: function (parser, _c) {
    	        if (parser.envStack.length) {
    	            parser.saveText();
    	            parser.stack.env = parser.envStack.pop();
    	        }
    	        else {
    	            parser.Error('ExtraCloseMissingOpen', 'Extra close brace or missing open brace');
    	        }
    	    },
    	    OpenQuote: function (parser, c) {
    	        if (parser.string.charAt(parser.i) === c) {
    	            parser.text += '\u201C';
    	            parser.i++;
    	        }
    	        else {
    	            parser.text += '\u2018';
    	        }
    	    },
    	    CloseQuote: function (parser, c) {
    	        if (parser.string.charAt(parser.i) === c) {
    	            parser.text += '\u201D';
    	            parser.i++;
    	        }
    	        else {
    	            parser.text += '\u2019';
    	        }
    	    },
    	    Tilde: function (parser, _c) {
    	        parser.text += '\u00A0';
    	    },
    	    Space: function (parser, _c) {
    	        parser.text += ' ';
    	        while (parser.GetNext().match(/\s/))
    	            parser.i++;
    	    },
    	    SelfQuote: function (parser, name) {
    	        parser.text += name.substr(1);
    	    },
    	    Insert: function (parser, _name, c) {
    	        parser.text += c;
    	    },
    	    Accent: function (parser, name, c) {
    	        var base = parser.ParseArg(name);
    	        var accent = parser.create('token', 'mo', {}, c);
    	        parser.addAttributes(accent);
    	        parser.Push(parser.create('node', 'mover', [base, accent]));
    	    },
    	    Emph: function (parser, name) {
    	        var variant = (parser.stack.env.mathvariant === '-tex-mathit' ? 'normal' : '-tex-mathit');
    	        parser.Push(parser.ParseTextArg(name, { mathvariant: variant }));
    	    },
    	    SetFont: function (parser, _name, variant) {
    	        parser.saveText();
    	        parser.stack.env.mathvariant = variant;
    	    },
    	    SetSize: function (parser, _name, size) {
    	        parser.saveText();
    	        parser.stack.env.mathsize = size;
    	    },
    	    CheckAutoload: function (parser, name) {
    	        var autoload = parser.configuration.packageData.get('autoload');
    	        var texParser = parser.texParser;
    	        name = name.slice(1);
    	        var macro = texParser.lookup('macro', name);
    	        if (!macro || (autoload && macro._func === autoload.Autoload)) {
    	            texParser.parse('macro', [texParser, name]);
    	            if (!macro)
    	                return;
    	            (0, Retries_js_1.retryAfter)(Promise.resolve());
    	        }
    	        texParser.parse('macro', [parser, name]);
    	    },
    	    Macro: BaseMethods_js_1.default.Macro,
    	    Spacer: BaseMethods_js_1.default.Spacer,
    	    Hskip: BaseMethods_js_1.default.Hskip,
    	    rule: BaseMethods_js_1.default.rule,
    	    Rule: BaseMethods_js_1.default.Rule,
    	    HandleRef: BaseMethods_js_1.default.HandleRef
    	};
    	
    	return TextMacrosMethods;
    }

    var TextParser = {};

    var hasRequiredTextParser;

    function requireTextParser () {
    	if (hasRequiredTextParser) return TextParser;
    	hasRequiredTextParser = 1;
    	var __extends = (TextParser.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	var __values = (TextParser.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = undefined;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (TextParser.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __spreadArray = (TextParser.__spreadArray) || function (to, from, pack) {
    	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    	        if (ar || !(i in from)) {
    	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
    	            ar[i] = from[i];
    	        }
    	    }
    	    return to.concat(ar || Array.prototype.slice.call(from));
    	};
    	var __importDefault = (TextParser.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(TextParser, "__esModule", { value: true });
    	TextParser.TextParser = undefined;
    	var TexParser_js_1 = __importDefault(requireTexParser());
    	var TexError_js_1 = __importDefault(requireTexError());
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var MmlNode_js_1 = requireMmlNode();
    	var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    	var BaseItems_js_1 = requireBaseItems();
    	var TextParser$1 = (function (_super) {
    	    __extends(TextParser, _super);
    	    function TextParser(text, env, configuration, level) {
    	        var _this = _super.call(this, text, env, configuration) || this;
    	        _this.level = level;
    	        return _this;
    	    }
    	    Object.defineProperty(TextParser.prototype, "texParser", {
    	        get: function () {
    	            return this.configuration.packageData.get('textmacros').texParser;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    Object.defineProperty(TextParser.prototype, "tags", {
    	        get: function () {
    	            return this.texParser.tags;
    	        },
    	        enumerable: false,
    	        configurable: true
    	    });
    	    TextParser.prototype.mml = function () {
    	        return (this.level != null ?
    	            this.create('node', 'mstyle', this.nodes, { displaystyle: false, scriptlevel: this.level }) :
    	            this.nodes.length === 1 ? this.nodes[0] : this.create('node', 'mrow', this.nodes));
    	    };
    	    TextParser.prototype.Parse = function () {
    	        this.text = '';
    	        this.nodes = [];
    	        this.envStack = [];
    	        _super.prototype.Parse.call(this);
    	    };
    	    TextParser.prototype.saveText = function () {
    	        if (this.text) {
    	            var mathvariant = this.stack.env.mathvariant;
    	            var text = ParseUtil_js_1.default.internalText(this, this.text, mathvariant ? { mathvariant: mathvariant } : {});
    	            this.text = '';
    	            this.Push(text);
    	        }
    	    };
    	    TextParser.prototype.Push = function (mml) {
    	        if (this.text) {
    	            this.saveText();
    	        }
    	        if (mml instanceof BaseItems_js_1.StopItem) {
    	            return _super.prototype.Push.call(this, mml);
    	        }
    	        if (mml instanceof BaseItems_js_1.StyleItem) {
    	            this.stack.env.mathcolor = this.stack.env.color;
    	            return;
    	        }
    	        if (mml instanceof MmlNode_js_1.AbstractMmlNode) {
    	            this.addAttributes(mml);
    	            this.nodes.push(mml);
    	        }
    	    };
    	    TextParser.prototype.PushMath = function (mml) {
    	        var e_1, _a;
    	        var env = this.stack.env;
    	        if (!mml.isKind('TeXAtom')) {
    	            mml = this.create('node', 'TeXAtom', [mml]);
    	        }
    	        try {
    	            for (var _b = __values(['mathsize', 'mathcolor']), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var name_1 = _c.value;
    	                if (env[name_1] && !mml.attributes.getExplicit(name_1)) {
    	                    if (!mml.isToken && !mml.isKind('mstyle')) {
    	                        mml = this.create('node', 'mstyle', [mml]);
    	                    }
    	                    NodeUtil_js_1.default.setAttribute(mml, name_1, env[name_1]);
    	                }
    	            }
    	        }
    	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_1) throw e_1.error; }
    	        }
    	        if (mml.isInferred) {
    	            mml = this.create('node', 'mrow', mml.childNodes);
    	        }
    	        this.nodes.push(mml);
    	    };
    	    TextParser.prototype.addAttributes = function (mml) {
    	        var e_2, _a;
    	        var env = this.stack.env;
    	        if (!mml.isToken)
    	            return;
    	        try {
    	            for (var _b = __values(['mathsize', 'mathcolor', 'mathvariant']), _c = _b.next(); !_c.done; _c = _b.next()) {
    	                var name_2 = _c.value;
    	                if (env[name_2] && !mml.attributes.getExplicit(name_2)) {
    	                    NodeUtil_js_1.default.setAttribute(mml, name_2, env[name_2]);
    	                }
    	            }
    	        }
    	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
    	        finally {
    	            try {
    	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	            }
    	            finally { if (e_2) throw e_2.error; }
    	        }
    	    };
    	    TextParser.prototype.ParseTextArg = function (name, env) {
    	        var text = this.GetArgument(name);
    	        env = Object.assign(Object.assign({}, this.stack.env), env);
    	        return (new TextParser(text, env, this.configuration)).mml();
    	    };
    	    TextParser.prototype.ParseArg = function (name) {
    	        return (new TextParser(this.GetArgument(name), this.stack.env, this.configuration)).mml();
    	    };
    	    TextParser.prototype.Error = function (id, message) {
    	        var args = [];
    	        for (var _i = 2; _i < arguments.length; _i++) {
    	            args[_i - 2] = arguments[_i];
    	        }
    	        throw new (TexError_js_1.default.bind.apply(TexError_js_1.default, __spreadArray([undefined, id, message], __read(args), false)))();
    	    };
    	    return TextParser;
    	}(TexParser_js_1.default));
    	TextParser.TextParser = TextParser$1;
    	
    	return TextParser;
    }

    var hasRequiredTextcompMappings;

    function requireTextcompMappings () {
    	if (hasRequiredTextcompMappings) return TextcompMappings;
    	hasRequiredTextcompMappings = 1;
    	var __importDefault = (TextcompMappings.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(TextcompMappings, "__esModule", { value: true });
    	var SymbolMap_js_1 = requireSymbolMap();
    	var TexConstants_js_1 = requireTexConstants();
    	var TextMacrosMethods_js_1 = requireTextMacrosMethods();
    	var ParseUtil_js_1 = __importDefault(requireParseUtil());
    	var TextParser_js_1 = requireTextParser();
    	new SymbolMap_js_1.CommandMap('textcomp-macros', {
    	    'textasciicircum': ['Insert', '\u005E'],
    	    'textasciitilde': ['Insert', '\u007E'],
    	    'textasteriskcentered': ['Insert', '\u002A'],
    	    'textbackslash': ['Insert', '\u005C'],
    	    'textbar': ['Insert', '\u007C'],
    	    'textbraceleft': ['Insert', '\u007B'],
    	    'textbraceright': ['Insert', '\u007D'],
    	    'textbullet': ['Insert', '\u2022'],
    	    'textdagger': ['Insert', '\u2020'],
    	    'textdaggerdbl': ['Insert', '\u2021'],
    	    'textellipsis': ['Insert', '\u2026'],
    	    'textemdash': ['Insert', '\u2014'],
    	    'textendash': ['Insert', '\u2013'],
    	    'textexclamdown': ['Insert', '\u00A1'],
    	    'textgreater': ['Insert', '\u003E'],
    	    'textless': ['Insert', '\u003C'],
    	    'textordfeminine': ['Insert', '\u00AA'],
    	    'textordmasculine': ['Insert', '\u00BA'],
    	    'textparagraph': ['Insert', '\u00B6'],
    	    'textperiodcentered': ['Insert', '\u00B7'],
    	    'textquestiondown': ['Insert', '\u00BF'],
    	    'textquotedblleft': ['Insert', '\u201C'],
    	    'textquotedblright': ['Insert', '\u201D'],
    	    'textquoteleft': ['Insert', '\u2018'],
    	    'textquoteright': ['Insert', '\u2019'],
    	    'textsection': ['Insert', '\u00A7'],
    	    'textunderscore': ['Insert', '\u005F'],
    	    'textvisiblespace': ['Insert', '\u2423'],
    	    'textacutedbl': ['Insert', '\u02DD'],
    	    'textasciiacute': ['Insert', '\u00B4'],
    	    'textasciibreve': ['Insert', '\u02D8'],
    	    'textasciicaron': ['Insert', '\u02C7'],
    	    'textasciidieresis': ['Insert', '\u00A8'],
    	    'textasciimacron': ['Insert', '\u00AF'],
    	    'textgravedbl': ['Insert', '\u02F5'],
    	    'texttildelow': ['Insert', '\u02F7'],
    	    'textbaht': ['Insert', '\u0E3F'],
    	    'textcent': ['Insert', '\u00A2'],
    	    'textcolonmonetary': ['Insert', '\u20A1'],
    	    'textcurrency': ['Insert', '\u00A4'],
    	    'textdollar': ['Insert', '\u0024'],
    	    'textdong': ['Insert', '\u20AB'],
    	    'texteuro': ['Insert', '\u20AC'],
    	    'textflorin': ['Insert', '\u0192'],
    	    'textguarani': ['Insert', '\u20B2'],
    	    'textlira': ['Insert', '\u20A4'],
    	    'textnaira': ['Insert', '\u20A6'],
    	    'textpeso': ['Insert', '\u20B1'],
    	    'textsterling': ['Insert', '\u00A3'],
    	    'textwon': ['Insert', '\u20A9'],
    	    'textyen': ['Insert', '\u00A5'],
    	    'textcircledP': ['Insert', '\u2117'],
    	    'textcompwordmark': ['Insert', '\u200C'],
    	    'textcopyleft': ['Insert', "\uD83C\uDD2F"],
    	    'textcopyright': ['Insert', '\u00A9'],
    	    'textregistered': ['Insert', '\u00AE'],
    	    'textservicemark': ['Insert', '\u2120'],
    	    'texttrademark': ['Insert', '\u2122'],
    	    'textbardbl': ['Insert', '\u2016'],
    	    'textbigcircle': ['Insert', '\u25EF'],
    	    'textblank': ['Insert', '\u2422'],
    	    'textbrokenbar': ['Insert', '\u00A6'],
    	    'textdiscount': ['Insert', '\u2052'],
    	    'textestimated': ['Insert', '\u212E'],
    	    'textinterrobang': ['Insert', '\u203D'],
    	    'textinterrobangdown': ['Insert', '\u2E18'],
    	    'textmusicalnote': ['Insert', '\u266A'],
    	    'textnumero': ['Insert', '\u2116'],
    	    'textopenbullet': ['Insert', '\u25E6'],
    	    'textpertenthousand': ['Insert', '\u2031'],
    	    'textperthousand': ['Insert', '\u2030'],
    	    'textrecipe': ['Insert', '\u211E'],
    	    'textreferencemark': ['Insert', '\u203B'],
    	    'textlangle': ['Insert', '\u2329'],
    	    'textrangle': ['Insert', '\u232A'],
    	    'textlbrackdbl': ['Insert', '\u27E6'],
    	    'textrbrackdbl': ['Insert', '\u27E7'],
    	    'textlquill': ['Insert', '\u2045'],
    	    'textrquill': ['Insert', '\u2046'],
    	    'textcelsius': ['Insert', '\u2103'],
    	    'textdegree': ['Insert', '\u00B0'],
    	    'textdiv': ['Insert', '\u00F7'],
    	    'textdownarrow': ['Insert', '\u2193'],
    	    'textfractionsolidus': ['Insert', '\u2044'],
    	    'textleftarrow': ['Insert', '\u2190'],
    	    'textlnot': ['Insert', '\u00AC'],
    	    'textmho': ['Insert', '\u2127'],
    	    'textminus': ['Insert', '\u2212'],
    	    'textmu': ['Insert', '\u00B5'],
    	    'textohm': ['Insert', '\u2126'],
    	    'textonehalf': ['Insert', '\u00BD'],
    	    'textonequarter': ['Insert', '\u00BC'],
    	    'textonesuperior': ['Insert', '\u00B9'],
    	    'textpm': ['Insert', '\u00B1'],
    	    'textrightarrow': ['Insert', '\u2192'],
    	    'textsurd': ['Insert', '\u221A'],
    	    'textthreequarters': ['Insert', '\u00BE'],
    	    'textthreesuperior': ['Insert', '\u00B3'],
    	    'texttimes': ['Insert', '\u00D7'],
    	    'texttwosuperior': ['Insert', '\u00B2'],
    	    'textuparrow': ['Insert', '\u2191'],
    	    'textborn': ['Insert', '\u002A'],
    	    'textdied': ['Insert', '\u2020'],
    	    'textdivorced': ['Insert', '\u26AE'],
    	    'textmarried': ['Insert', '\u26AD'],
    	    'textcentoldstyle': ['Insert', '\u00A2', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textdollaroldstyle': ['Insert', '\u0024', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textzerooldstyle': ['Insert', '0', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textoneoldstyle': ['Insert', '1', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'texttwooldstyle': ['Insert', '2', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textthreeoldstyle': ['Insert', '3', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textfouroldstyle': ['Insert', '4', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textfiveoldstyle': ['Insert', '5', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textsixoldstyle': ['Insert', '6', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textsevenoldstyle': ['Insert', '7', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'texteightoldstyle': ['Insert', '8', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    'textnineoldstyle': ['Insert', '9', TexConstants_js_1.TexConstant.Variant.OLDSTYLE]
    	}, {
    	    Insert: function (parser, name, c, font) {
    	        if (parser instanceof TextParser_js_1.TextParser) {
    	            if (!font) {
    	                TextMacrosMethods_js_1.TextMacrosMethods.Insert(parser, name, c);
    	                return;
    	            }
    	            parser.saveText();
    	        }
    	        parser.Push(ParseUtil_js_1.default.internalText(parser, c, font ? { mathvariant: font } : {}));
    	    }
    	});
    	
    	return TextcompMappings;
    }

    var hasRequiredTextcompConfiguration;

    function requireTextcompConfiguration () {
    	if (hasRequiredTextcompConfiguration) return TextcompConfiguration;
    	hasRequiredTextcompConfiguration = 1;
    	Object.defineProperty(TextcompConfiguration, "__esModule", { value: true });
    	TextcompConfiguration.TextcompConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	requireTextcompMappings();
    	TextcompConfiguration.TextcompConfiguration = Configuration_js_1.Configuration.create('textcomp', {
    	    handler: { macro: ['textcomp-macros'] }
    	});
    	
    	return TextcompConfiguration;
    }

    var TextMacrosConfiguration = {};

    var TextMacrosMappings = {};

    var hasRequiredTextMacrosMappings;

    function requireTextMacrosMappings () {
    	if (hasRequiredTextMacrosMappings) return TextMacrosMappings;
    	hasRequiredTextMacrosMappings = 1;
    	Object.defineProperty(TextMacrosMappings, "__esModule", { value: true });
    	var SymbolMap_js_1 = requireSymbolMap();
    	var TexConstants_js_1 = requireTexConstants();
    	var TextMacrosMethods_js_1 = requireTextMacrosMethods();
    	var lengths_js_1 = requireLengths();
    	new SymbolMap_js_1.MacroMap('text-special', {
    	    '$': 'Math',
    	    '%': 'Comment',
    	    '^': 'MathModeOnly',
    	    '_': 'MathModeOnly',
    	    '&': 'Misplaced',
    	    '#': 'Misplaced',
    	    '~': 'Tilde',
    	    ' ': 'Space',
    	    '\t': 'Space',
    	    '\r': 'Space',
    	    '\n': 'Space',
    	    '\u00A0': 'Tilde',
    	    '{': 'OpenBrace',
    	    '}': 'CloseBrace',
    	    '`': 'OpenQuote',
    	    '\'': 'CloseQuote'
    	}, TextMacrosMethods_js_1.TextMacrosMethods);
    	new SymbolMap_js_1.CommandMap('text-macros', {
    	    '(': 'Math',
    	    '$': 'SelfQuote',
    	    '_': 'SelfQuote',
    	    '%': 'SelfQuote',
    	    '{': 'SelfQuote',
    	    '}': 'SelfQuote',
    	    ' ': 'SelfQuote',
    	    '&': 'SelfQuote',
    	    '#': 'SelfQuote',
    	    '\\': 'SelfQuote',
    	    '\'': ['Accent', '\u00B4'],
    	    '\u2019': ['Accent', '\u00B4'],
    	    '`': ['Accent', '\u0060'],
    	    '\u2018': ['Accent', '\u0060'],
    	    '^': ['Accent', '^'],
    	    '\"': ['Accent', '\u00A8'],
    	    '~': ['Accent', '~'],
    	    '=': ['Accent', '\u00AF'],
    	    '.': ['Accent', '\u02D9'],
    	    'u': ['Accent', '\u02D8'],
    	    'v': ['Accent', '\u02C7'],
    	    emph: 'Emph',
    	    rm: ['SetFont', TexConstants_js_1.TexConstant.Variant.NORMAL],
    	    mit: ['SetFont', TexConstants_js_1.TexConstant.Variant.ITALIC],
    	    oldstyle: ['SetFont', TexConstants_js_1.TexConstant.Variant.OLDSTYLE],
    	    cal: ['SetFont', TexConstants_js_1.TexConstant.Variant.CALLIGRAPHIC],
    	    it: ['SetFont', '-tex-mathit'],
    	    bf: ['SetFont', TexConstants_js_1.TexConstant.Variant.BOLD],
    	    bbFont: ['SetFont', TexConstants_js_1.TexConstant.Variant.DOUBLESTRUCK],
    	    scr: ['SetFont', TexConstants_js_1.TexConstant.Variant.SCRIPT],
    	    frak: ['SetFont', TexConstants_js_1.TexConstant.Variant.FRAKTUR],
    	    sf: ['SetFont', TexConstants_js_1.TexConstant.Variant.SANSSERIF],
    	    tt: ['SetFont', TexConstants_js_1.TexConstant.Variant.MONOSPACE],
    	    tiny: ['SetSize', 0.5],
    	    Tiny: ['SetSize', 0.6],
    	    scriptsize: ['SetSize', 0.7],
    	    small: ['SetSize', 0.85],
    	    normalsize: ['SetSize', 1.0],
    	    large: ['SetSize', 1.2],
    	    Large: ['SetSize', 1.44],
    	    LARGE: ['SetSize', 1.73],
    	    huge: ['SetSize', 2.07],
    	    Huge: ['SetSize', 2.49],
    	    Bbb: ['Macro', '{\\bbFont #1}', 1],
    	    textnormal: ['Macro', '{\\rm #1}', 1],
    	    textup: ['Macro', '{\\rm #1}', 1],
    	    textrm: ['Macro', '{\\rm #1}', 1],
    	    textit: ['Macro', '{\\it #1}', 1],
    	    textbf: ['Macro', '{\\bf #1}', 1],
    	    textsf: ['Macro', '{\\sf #1}', 1],
    	    texttt: ['Macro', '{\\tt #1}', 1],
    	    dagger: ['Insert', '\u2020'],
    	    ddagger: ['Insert', '\u2021'],
    	    S: ['Insert', '\u00A7'],
    	    ',': ['Spacer', lengths_js_1.MATHSPACE.thinmathspace],
    	    ':': ['Spacer', lengths_js_1.MATHSPACE.mediummathspace],
    	    '>': ['Spacer', lengths_js_1.MATHSPACE.mediummathspace],
    	    ';': ['Spacer', lengths_js_1.MATHSPACE.thickmathspace],
    	    '!': ['Spacer', lengths_js_1.MATHSPACE.negativethinmathspace],
    	    enspace: ['Spacer', .5],
    	    quad: ['Spacer', 1],
    	    qquad: ['Spacer', 2],
    	    thinspace: ['Spacer', lengths_js_1.MATHSPACE.thinmathspace],
    	    negthinspace: ['Spacer', lengths_js_1.MATHSPACE.negativethinmathspace],
    	    hskip: 'Hskip',
    	    hspace: 'Hskip',
    	    kern: 'Hskip',
    	    mskip: 'Hskip',
    	    mspace: 'Hskip',
    	    mkern: 'Hskip',
    	    rule: 'rule',
    	    Rule: ['Rule'],
    	    Space: ['Rule', 'blank'],
    	    color: 'CheckAutoload',
    	    textcolor: 'CheckAutoload',
    	    colorbox: 'CheckAutoload',
    	    fcolorbox: 'CheckAutoload',
    	    href: 'CheckAutoload',
    	    style: 'CheckAutoload',
    	    class: 'CheckAutoload',
    	    cssId: 'CheckAutoload',
    	    unicode: 'CheckAutoload',
    	    ref: ['HandleRef', false],
    	    eqref: ['HandleRef', true],
    	}, TextMacrosMethods_js_1.TextMacrosMethods);
    	
    	return TextMacrosMappings;
    }

    var hasRequiredTextMacrosConfiguration;

    function requireTextMacrosConfiguration () {
    	if (hasRequiredTextMacrosConfiguration) return TextMacrosConfiguration;
    	hasRequiredTextMacrosConfiguration = 1;
    	var __importDefault = (TextMacrosConfiguration.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	var _a;
    	Object.defineProperty(TextMacrosConfiguration, "__esModule", { value: true });
    	TextMacrosConfiguration.TextMacrosConfiguration = TextMacrosConfiguration.TextBaseConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var ParseOptions_js_1 = __importDefault(requireParseOptions());
    	var Tags_js_1 = requireTags();
    	var BaseItems_js_1 = requireBaseItems();
    	var TextParser_js_1 = requireTextParser();
    	var TextMacrosMethods_js_1 = requireTextMacrosMethods();
    	requireTextMacrosMappings();
    	TextMacrosConfiguration.TextBaseConfiguration = Configuration_js_1.Configuration.create('text-base', {
    	    parser: 'text',
    	    handler: {
    	        character: ['command', 'text-special'],
    	        macro: ['text-macros']
    	    },
    	    fallback: {
    	        character: function (parser, c) {
    	            parser.text += c;
    	        },
    	        macro: function (parser, name) {
    	            var texParser = parser.texParser;
    	            var macro = texParser.lookup('macro', name);
    	            if (macro && macro._func !== TextMacrosMethods_js_1.TextMacrosMethods.Macro) {
    	                parser.Error('MathMacro', '%1 is only supported in math mode', '\\' + name);
    	            }
    	            texParser.parse('macro', [parser, name]);
    	        }
    	    },
    	    items: (_a = {},
    	        _a[BaseItems_js_1.StartItem.prototype.kind] = BaseItems_js_1.StartItem,
    	        _a[BaseItems_js_1.StopItem.prototype.kind] = BaseItems_js_1.StopItem,
    	        _a[BaseItems_js_1.MmlItem.prototype.kind] = BaseItems_js_1.MmlItem,
    	        _a[BaseItems_js_1.StyleItem.prototype.kind] = BaseItems_js_1.StyleItem,
    	        _a)
    	});
    	function internalMath(parser, text, level, mathvariant) {
    	    var config = parser.configuration.packageData.get('textmacros');
    	    if (!(parser instanceof TextParser_js_1.TextParser)) {
    	        config.texParser = parser;
    	    }
    	    return [(new TextParser_js_1.TextParser(text, mathvariant ? { mathvariant: mathvariant } : {}, config.parseOptions, level)).mml()];
    	}
    	TextMacrosConfiguration.TextMacrosConfiguration = Configuration_js_1.Configuration.create('textmacros', {
    	    config: function (_config, jax) {
    	        var textConf = new Configuration_js_1.ParserConfiguration(jax.parseOptions.options.textmacros.packages, ['tex', 'text']);
    	        textConf.init();
    	        var parseOptions = new ParseOptions_js_1.default(textConf, []);
    	        parseOptions.options = jax.parseOptions.options;
    	        textConf.config(jax);
    	        Tags_js_1.TagsFactory.addTags(textConf.tags);
    	        parseOptions.tags = Tags_js_1.TagsFactory.getDefault();
    	        parseOptions.tags.configuration = parseOptions;
    	        parseOptions.packageData = jax.parseOptions.packageData;
    	        parseOptions.packageData.set('textmacros', { parseOptions: parseOptions, jax: jax, texParser: null });
    	        parseOptions.options.internalMath = internalMath;
    	    },
    	    preprocessors: [function (data) {
    	            var config = data.data.packageData.get('textmacros');
    	            config.parseOptions.nodeFactory.setMmlFactory(config.jax.mmlFactory);
    	        }],
    	    options: {
    	        textmacros: {
    	            packages: ['text-base']
    	        }
    	    }
    	});
    	
    	return TextMacrosConfiguration;
    }

    var UpgreekConfiguration = {};

    var hasRequiredUpgreekConfiguration;

    function requireUpgreekConfiguration () {
    	if (hasRequiredUpgreekConfiguration) return UpgreekConfiguration;
    	hasRequiredUpgreekConfiguration = 1;
    	Object.defineProperty(UpgreekConfiguration, "__esModule", { value: true });
    	UpgreekConfiguration.UpgreekConfiguration = undefined;
    	var Configuration_js_1 = requireConfiguration();
    	var SymbolMap_js_1 = requireSymbolMap();
    	var TexConstants_js_1 = requireTexConstants();
    	function mathchar0miNormal(parser, mchar) {
    	    var def = mchar.attributes || {};
    	    def.mathvariant = TexConstants_js_1.TexConstant.Variant.NORMAL;
    	    var node = parser.create('token', 'mi', def, mchar.char);
    	    parser.Push(node);
    	}
    	new SymbolMap_js_1.CharacterMap('upgreek', mathchar0miNormal, {
    	    upalpha: '\u03B1',
    	    upbeta: '\u03B2',
    	    upgamma: '\u03B3',
    	    updelta: '\u03B4',
    	    upepsilon: '\u03F5',
    	    upzeta: '\u03B6',
    	    upeta: '\u03B7',
    	    uptheta: '\u03B8',
    	    upiota: '\u03B9',
    	    upkappa: '\u03BA',
    	    uplambda: '\u03BB',
    	    upmu: '\u03BC',
    	    upnu: '\u03BD',
    	    upxi: '\u03BE',
    	    upomicron: '\u03BF',
    	    uppi: '\u03C0',
    	    uprho: '\u03C1',
    	    upsigma: '\u03C3',
    	    uptau: '\u03C4',
    	    upupsilon: '\u03C5',
    	    upphi: '\u03D5',
    	    upchi: '\u03C7',
    	    uppsi: '\u03C8',
    	    upomega: '\u03C9',
    	    upvarepsilon: '\u03B5',
    	    upvartheta: '\u03D1',
    	    upvarpi: '\u03D6',
    	    upvarrho: '\u03F1',
    	    upvarsigma: '\u03C2',
    	    upvarphi: '\u03C6',
    	    Upgamma: '\u0393',
    	    Updelta: '\u0394',
    	    Uptheta: '\u0398',
    	    Uplambda: '\u039B',
    	    Upxi: '\u039E',
    	    Uppi: '\u03A0',
    	    Upsigma: '\u03A3',
    	    Upupsilon: '\u03A5',
    	    Upphi: '\u03A6',
    	    Uppsi: '\u03A8',
    	    Upomega: '\u03A9'
    	});
    	UpgreekConfiguration.UpgreekConfiguration = Configuration_js_1.Configuration.create('upgreek', {
    	    handler: { macro: ['upgreek'] },
    	});
    	
    	return UpgreekConfiguration;
    }

    var UnicodeConfiguration = {};

    var hasRequiredUnicodeConfiguration;

    function requireUnicodeConfiguration () {
    	if (hasRequiredUnicodeConfiguration) return UnicodeConfiguration;
    	hasRequiredUnicodeConfiguration = 1;
    	(function (exports) {
    		var __importDefault = (UnicodeConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.UnicodeConfiguration = exports.UnicodeMethods = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var TexError_js_1 = __importDefault(requireTexError());
    		var SymbolMap_js_1 = requireSymbolMap();
    		var ParseUtil_js_1 = __importDefault(requireParseUtil());
    		var NodeUtil_js_1 = __importDefault(requireNodeUtil());
    		var Entities_js_1 = requireEntities();
    		exports.UnicodeMethods = {};
    		var UnicodeCache = {};
    		exports.UnicodeMethods.Unicode = function (parser, name) {
    		    var HD = parser.GetBrackets(name);
    		    var HDsplit = null;
    		    var font = null;
    		    if (HD) {
    		        if (HD.replace(/ /g, '').
    		            match(/^(\d+(\.\d*)?|\.\d+),(\d+(\.\d*)?|\.\d+)$/)) {
    		            HDsplit = HD.replace(/ /g, '').split(/,/);
    		            font = parser.GetBrackets(name);
    		        }
    		        else {
    		            font = HD;
    		        }
    		    }
    		    var n = ParseUtil_js_1.default.trimSpaces(parser.GetArgument(name)).replace(/^0x/, 'x');
    		    if (!n.match(/^(x[0-9A-Fa-f]+|[0-9]+)$/)) {
    		        throw new TexError_js_1.default('BadUnicode', 'Argument to \\unicode must be a number');
    		    }
    		    var N = parseInt(n.match(/^x/) ? '0' + n : n);
    		    if (!UnicodeCache[N]) {
    		        UnicodeCache[N] = [800, 200, font, N];
    		    }
    		    else if (!font) {
    		        font = UnicodeCache[N][2];
    		    }
    		    if (HDsplit) {
    		        UnicodeCache[N][0] = Math.floor(parseFloat(HDsplit[0]) * 1000);
    		        UnicodeCache[N][1] = Math.floor(parseFloat(HDsplit[1]) * 1000);
    		    }
    		    var variant = parser.stack.env.font;
    		    var def = {};
    		    if (font) {
    		        UnicodeCache[N][2] = def.fontfamily = font.replace(/'/g, '\'');
    		        if (variant) {
    		            if (variant.match(/bold/)) {
    		                def.fontweight = 'bold';
    		            }
    		            if (variant.match(/italic|-mathit/)) {
    		                def.fontstyle = 'italic';
    		            }
    		        }
    		    }
    		    else if (variant) {
    		        def.mathvariant = variant;
    		    }
    		    var node = parser.create('token', 'mtext', def, (0, Entities_js_1.numeric)(n));
    		    NodeUtil_js_1.default.setProperty(node, 'unicode', true);
    		    parser.Push(node);
    		};
    		new SymbolMap_js_1.CommandMap('unicode', { unicode: 'Unicode' }, exports.UnicodeMethods);
    		exports.UnicodeConfiguration = Configuration_js_1.Configuration.create('unicode', { handler: { macro: ['unicode'] } });
    		
    	} (UnicodeConfiguration));
    	return UnicodeConfiguration;
    }

    var VerbConfiguration = {};

    var hasRequiredVerbConfiguration;

    function requireVerbConfiguration () {
    	if (hasRequiredVerbConfiguration) return VerbConfiguration;
    	hasRequiredVerbConfiguration = 1;
    	(function (exports) {
    		var __importDefault = (VerbConfiguration.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.VerbConfiguration = exports.VerbMethods = undefined;
    		var Configuration_js_1 = requireConfiguration();
    		var TexConstants_js_1 = requireTexConstants();
    		var SymbolMap_js_1 = requireSymbolMap();
    		var TexError_js_1 = __importDefault(requireTexError());
    		exports.VerbMethods = {};
    		exports.VerbMethods.Verb = function (parser, name) {
    		    var c = parser.GetNext();
    		    var start = ++parser.i;
    		    if (c === '') {
    		        throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', name);
    		    }
    		    while (parser.i < parser.string.length &&
    		        parser.string.charAt(parser.i) !== c) {
    		        parser.i++;
    		    }
    		    if (parser.i === parser.string.length) {
    		        throw new TexError_js_1.default('NoClosingDelim', 'Can\'t find closing delimiter for %1', parser.currentCS);
    		    }
    		    var text = parser.string.slice(start, parser.i).replace(/ /g, '\u00A0');
    		    parser.i++;
    		    parser.Push(parser.create('token', 'mtext', { mathvariant: TexConstants_js_1.TexConstant.Variant.MONOSPACE }, text));
    		};
    		new SymbolMap_js_1.CommandMap('verb', { verb: 'Verb' }, exports.VerbMethods);
    		exports.VerbConfiguration = Configuration_js_1.Configuration.create('verb', { handler: { macro: ['verb'] } });
    		
    	} (VerbConfiguration));
    	return VerbConfiguration;
    }

    var hasRequiredAllPackages;

    function requireAllPackages () {
    	if (hasRequiredAllPackages) return AllPackages;
    	hasRequiredAllPackages = 1;
    	Object.defineProperty(AllPackages, "__esModule", { value: true });
    	AllPackages.AllPackages = undefined;
    	requireBaseConfiguration();
    	requireActionConfiguration();
    	requireAmsConfiguration();
    	requireAmsCdConfiguration();
    	requireBboxConfiguration();
    	requireBoldsymbolConfiguration();
    	requireBraketConfiguration();
    	requireBussproofsConfiguration();
    	requireCancelConfiguration();
    	requireCasesConfiguration();
    	requireCenternotConfiguration();
    	requireColorConfiguration();
    	requireColorV2Configuration();
    	requireColortblConfiguration();
    	requireConfigMacrosConfiguration();
    	requireEmpheqConfiguration();
    	requireEncloseConfiguration();
    	requireExtpfeilConfiguration();
    	requireGensymbConfiguration();
    	requireHtmlConfiguration();
    	requireMathtoolsConfiguration();
    	requireMhchemConfiguration();
    	requireNewcommandConfiguration();
    	requireNoErrorsConfiguration();
    	requireNoUndefinedConfiguration();
    	requirePhysicsConfiguration();
    	requireSetOptionsConfiguration();
    	requireTagFormatConfiguration();
    	requireTextcompConfiguration();
    	requireTextMacrosConfiguration();
    	requireUpgreekConfiguration();
    	requireUnicodeConfiguration();
    	requireVerbConfiguration();
    	if (typeof MathJax !== 'undefined' && MathJax.loader) {
    	    MathJax.loader.preLoad('[tex]/action', '[tex]/ams', '[tex]/amscd', '[tex]/bbox', '[tex]/boldsymbol', '[tex]/braket', '[tex]/bussproofs', '[tex]/cancel', '[tex]/cases', '[tex]/centernot', '[tex]/color', '[tex]/colorv2', '[tex]/colortbl', '[tex]/empheq', '[tex]/enclose', '[tex]/extpfeil', '[tex]/gensymb', '[tex]/html', '[tex]/mathtools', '[tex]/mhchem', '[tex]/newcommand', '[tex]/noerrors', '[tex]/noundefined', '[tex]/physics', '[tex]/upgreek', '[tex]/unicode', '[tex]/verb', '[tex]/configmacros', '[tex]/tagformat', '[tex]/textcomp', '[tex]/textmacros', '[tex]/setoptions');
    	}
    	AllPackages.AllPackages = [
    	    'base',
    	    'action',
    	    'ams',
    	    'amscd',
    	    'bbox',
    	    'boldsymbol',
    	    'braket',
    	    'bussproofs',
    	    'cancel',
    	    'cases',
    	    'centernot',
    	    'color',
    	    'colortbl',
    	    'empheq',
    	    'enclose',
    	    'extpfeil',
    	    'gensymb',
    	    'html',
    	    'mathtools',
    	    'mhchem',
    	    'newcommand',
    	    'noerrors',
    	    'noundefined',
    	    'upgreek',
    	    'unicode',
    	    'verb',
    	    'configmacros',
    	    'tagformat',
    	    'textcomp',
    	    'textmacros'
    	];
    	
    	return AllPackages;
    }

    requireAllPackages();

    async function feedbackQuestion(originalFormulationClearfix) {
        // console.log('Iniciando feedbackQuestion');

        // Encontrar el hermano de originalFormulationClearfix que tiene clase "outcome clearfix"
        let hermano = originalFormulationClearfix.nextElementSibling;
        // console.log('Buscando hermano con clase "outcome clearfix"');

        while (hermano) {
            // console.log('Revisando elemento:', hermano);
            if (hermano.classList.contains('outcome') && hermano.classList.contains('clearfix')) {
                // console.log('Hermano encontrado:', hermano);
                break;
            }
            hermano = hermano.nextElementSibling;
        }
        if (!hermano) {
            // console.error('No se encontró el hermano con clase "outcome clearfix"');
            return '';
        }

        // Dentro del hermano, encontrar el elemento con clase "feedback"
        // console.log('Buscando elemento con clase "feedback" dentro del hermano');
        let feedback = hermano.querySelector('.feedback');
        if (!feedback) {
            console.error('No se encontró el elemento con clase "feedback"');
            return '';
        }

        // Dentro de feedback, encontrar el elemento con clase "generalfeedback"
        // console.log('Buscando elemento con clase "generalfeedback" dentro de feedback');
        let generalFeedback = feedback.querySelector('.generalfeedback');
        if (!generalFeedback) {
            console.error('No se encontró el elemento con clase "generalfeedback"');
            return '';
        }

        // Clonar el elemento generalFeedback para no modificar el original
        // console.log('Clonando el elemento generalFeedback');
        let generalFeedbackClone = generalFeedback.cloneNode(true);

        // Procesar imágenes que contienen 'pluginfile.php' en su URL en el clon
        // console.log('Buscando imágenes en generalFeedbackClone');
        let images = generalFeedbackClone.querySelectorAll('img');
        if (images.length > 0) {
            // console.log('Se encontraron imágenes:', images.length);
            let promises = [];

            images.forEach(img => {
                // console.log('Procesando imagen:', img.src);
                if (img.src.includes('pluginfile.php')) {
                    // console.log('La imagen contiene "pluginfile.php" en la URL');
                    let promise = convertImageToDataUri(img.src).then(dataUri => {
                        img.src = dataUri;
                        // console.log('Imagen convertida a Data URI');
                    }).catch(error => {
                        console.error(error);
                    });
                    promises.push(promise);
                }
            });

            // Esperar a que todas las conversiones terminen
            await Promise.all(promises);
        }

        // Eliminar <p> vacíos o con solo <br>, espacios o <span> sin contenido
        // console.log('Eliminando <p> vacíos de generalFeedbackClone');
        let paragraphs = generalFeedbackClone.querySelectorAll('p');
        paragraphs.forEach(p => {
            if (!p.textContent.trim() && !p.querySelector('img')) {
                // console.log('Eliminando <p> vacío o sin contenido relevante:', p);
                p.remove();
            }
        });

        // Extraer el contenido HTML del clon después de procesar las imágenes y eliminar <p> vacíos
        let textoFeedback = generalFeedbackClone.innerHTML;
        // console.log('Contenido del textoFeedback:', textoFeedback);

        // Retornar el texto del feedback
        return textoFeedback;
    }

    function getQuestionNumber(formulation_clearfix) {
        let contenedorPadre = formulation_clearfix.closest('.content');
        if (contenedorPadre) {
            let infoHermanos = contenedorPadre.parentElement.querySelector('.info');
            if (infoHermanos) {
                let numeroPreguntaSpan = infoHermanos.querySelector('.rui-qno');
                return numeroPreguntaSpan ? numeroPreguntaSpan.textContent.trim() : null; // Retornar número
            }
        }
        return null; // Sin número
    }

    // Función auxiliar para determinar el tipo de pregunta
    function determinarTipoPregunta(formulation_clearfix) {
        const hayUnSoloQtext = formulation_clearfix.querySelectorAll('.qtext').length === 1;
        const dropzonesElement = formulation_clearfix.querySelector('.dropzones') !== null;
        const draghomesElement = formulation_clearfix.querySelector('.draghome') !== null;

        const inputTextCount = formulation_clearfix.querySelectorAll('input[type="text"]').length;
        const inputRadioCount = formulation_clearfix.querySelectorAll('input[type="radio"]').length;
        const inputCheckboxCount = formulation_clearfix.querySelectorAll('input[type="checkbox"]').length;
        const selectCount = formulation_clearfix.querySelectorAll('select').length;

        if (hayUnSoloQtext) {
            if (inputRadioCount > 0 && inputCheckboxCount === 0 && selectCount === 0 && !dropzonesElement && !draghomesElement) {
                return 'inputradio_opcionmultiple_verdaderofalso';
            }
            if (inputCheckboxCount > 0 && inputRadioCount === 0 && selectCount === 0 && !dropzonesElement && !draghomesElement) {
                return 'inputchecked_opcionmultiple';
            }
            if (selectCount > 0 && inputRadioCount === 0 && inputCheckboxCount === 0 && !dropzonesElement && !draghomesElement) {
                return 'select_emparejamiento';
            }
            if (inputTextCount === 1 && inputRadioCount === 0 && inputCheckboxCount === 0 && selectCount === 0 && !dropzonesElement && !draghomesElement) {
                return 'inputtext_respuestacorta';
            }
        }

        if (draghomesElement && !dropzonesElement) {
            return 'draganddrop_text';
        }

        if (draghomesElement && dropzonesElement) {
            return 'draganddrop_image';
        }

        return 'otroscasos';
    }

    async function convertImgToDataUri(clonFormulation) {
        const images = clonFormulation.querySelectorAll('img');

        for (const img of images) {
            if (img.src === 'https://profes.ac/pub/logoap.svg') {
                img.remove(); // Eliminar la imagen no deseada
                // console.log('Imagen eliminada:', img.src);
            } else if (img.src.includes('pluginfile.php')) { // Convertir solo si la URL contiene 'pluginfile.php'
                try {
                    // Convertir a Data URI las imágenes que contienen 'pluginfile.php'
                    // console.log('Convirtiendo imagen (pluginfile.php):', img.src);

                    await new Promise((resolve, reject) => {
                        if (img.complete) {
                            resolve();
                        } else {
                            img.onload = resolve;
                            img.onerror = reject;
                        }
                    });

                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.width = img.naturalWidth;
                    canvas.height = img.naturalHeight;

                    context.drawImage(img, 0, 0);
                    const dataUri = canvas.toDataURL();
                    img.src = dataUri;
                    // console.log('Imagen convertida a Data URI:', img.src);

                } catch (error) {
                    console.error('Error en la conversión de la imagen:', error);
                }
            } else ;
        }
    }

    function convertImageToDataUri(src) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.src = src;

            img.onload = function () {
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                canvas.width = img.naturalWidth;
                canvas.height = img.naturalHeight;
                context.drawImage(img, 0, 0);
                const dataUri = canvas.toDataURL();
                resolve(dataUri);
            };

            img.onerror = function () {
                reject('Error en la conversión a Data URI');
            };
        });
    }

    async function File2DataUri(files) {
        let imagenes = [];
        let audios = [];
      
          if (files instanceof HTMLImageElement) {
            imagenes = [files];
          } else if (files instanceof HTMLAudioElement) {
            audios = [files];
          } else if (files instanceof HTMLElement) {
            imagenes = Array.from(files.querySelectorAll('img'));
            audios = Array.from(files.querySelectorAll('audio'));
          } else {
            // Si el tipo de entrada no es soportado, se lanza un error que se captura inmediatamente
            console.log("Tipo de entrada no soportado. Proporcione un elemento HTML, una imagen o un audio.");
          }
      
        // --- Procesar imágenes ---
        for (const imagen of imagenes) {
          // Procesar solo imágenes cuya URL contenga 'pluginfile.php'
          if (imagen.src.includes('pluginfile.php')) {
            try {
              // Esperar a que la imagen se cargue (ya sea de caché o en tiempo real)
              await new Promise((resolver, rechazar) => {
                if (imagen.complete) {
                  resolver();
                } else {
                  imagen.onload = resolver;
                  imagen.onerror = rechazar;
                }
              });
      
              // Dibujar la imagen en un canvas para obtener su Data URI
              const lienzo = document.createElement('canvas');
              const contexto = lienzo.getContext('2d');
              lienzo.width = imagen.naturalWidth;
              lienzo.height = imagen.naturalHeight;
              contexto.drawImage(imagen, 0, 0);
      
              const dataUriImagen = lienzo.toDataURL();
              imagen.src = dataUriImagen;
            } catch (error) {
              console.error('Error en la conversión de la imagen:', error);
            }
          }
          // Si la imagen no contiene 'pluginfile.php', se deja sin cambios.
        }
      
        // --- Procesar audios ---
        const umbralDuracionAudio = 60; // Duración umbral en segundos
        const umbralTamanoAudio = 10 * 1024 * 1024; // Tamaño umbral en bytes (10 MB)
      
        for (const audio of audios) {
          // Procesar solo si la URL existe y contiene 'pluginfile.php'
          if (audio.src && audio.src.includes('pluginfile.php')) {
            try {
              // Esperar a que se carguen los metadatos del audio (para obtener la duración)
              await new Promise((resolver, rechazar) => {
                if (audio.readyState >= 1 && !isNaN(audio.duration)) {
                  resolver();
                } else {
                  audio.onloadedmetadata = resolver;
                  audio.onerror = rechazar;
                }
              });
      
              // Obtener el blob del audio para revisar el tamaño
              const respuesta = await fetch(audio.src);
              const blob = await respuesta.blob();
      
              /*  
                Se realiza la conversión si:
                - El audio dura menos o igual al umbral, o
                - Si dura más, pero su tamaño es inferior al umbral.
                Esto permite convertir audios largos que estén bien comprimidos (por ejemplo, 5 minutos y 1 MB)
                y omitir la conversión en casos donde el audio sea extenso y pesado.
              */
              if (audio.duration > umbralDuracionAudio && blob.size > umbralTamanoAudio) {
                console.log('Audio demasiado largo y pesado, se omite la conversión:', audio.src);
                continue;
              }
      
              // Convertir el blob a Data URI usando FileReader
              const dataUriAudio = await new Promise((resolver, rechazar) => {
                const lector = new FileReader();
                lector.onloadend = () => resolver(lector.result);
                lector.onerror = rechazar;
                lector.readAsDataURL(blob);
              });
      
              audio.src = dataUriAudio;
            } catch (error) {
              console.error('Error en la conversión del audio a Data URI:', error);
            }
          }
        }
      }


      

      async function extractContentInOrder(node) {
        let content = '';
      
        for (const child of node.childNodes) {
          
          // 1) Nodos de texto
          if (child.nodeType === Node.TEXT_NODE) {
            const text = child.textContent;
            if (text && text !== '\n') {
              content += text;
            }
      
          // 2) Nodos de elemento
          } else if (child.nodeType === Node.ELEMENT_NODE) {
            const tagName = child.tagName.toLowerCase();
      
            // ------------------------------------------------------------------------
            // A) <script type="math/tex">
            // ------------------------------------------------------------------------
            if (tagName === 'script' && child.getAttribute('type') === 'math/tex') {
              const latexCode = child.textContent.trim();
              
              // Buscamos si el siguiente hermano es <span class="MathJax">
              let nextSibling = child.nextSibling;
              let matched = false;
              
              // Ignorar posibles nodos de texto vacíos
              while (nextSibling && nextSibling.nodeType === Node.TEXT_NODE) {
                if (!nextSibling.textContent.trim()) {
                  nextSibling = nextSibling.nextSibling;
                } else {
                  break;
                }
              }
      
              // Si el siguiente es un <span class="MathJax">, asumimos que es la misma fórmula
              if (nextSibling && nextSibling.nodeType === Node.ELEMENT_NODE) {
                const nsTag = nextSibling.tagName.toLowerCase();
                if (nsTag === 'span' && nextSibling.classList.contains('MathJax')) {
                  const mathml = nextSibling.getAttribute('data-mathml');
                  if (mathml) {
                    matched = true;
                    // Añadimos un espacio si es necesario
                    if (content.length > 0 && !content.endsWith(' ') && !content.endsWith('\u00A0')) {
                      content += ' ';
                    }
                    // Nos quedamos con la versión MathML
                    content += mathml;
                  }
                }
              }
      
              // Si no hay <span class="MathJax">, convertimos el LaTeX
              if (!matched) {
                if (content.length > 0 && !content.endsWith(' ') && !content.endsWith('\u00A0')) {
                  content += ' ';
                }
                // Conversión real usando MathJax
                const generatedMathML = convertLatexToMathML(latexCode);
                content += generatedMathML;
              }
      
            // ------------------------------------------------------------------------
            // B) <span class="MathJax" data-mathml>
            // ------------------------------------------------------------------------
            } else if (tagName === 'span' && child.classList.contains('MathJax')) {
              const mathml = child.getAttribute('data-mathml');
              if (mathml) {
                if (content.length > 0 && !content.endsWith(' ') && !content.endsWith('\u00A0')) {
                  content += ' ';
                }
                content += mathml;
              }
      
            // ------------------------------------------------------------------------
            // C) <img>
            // ------------------------------------------------------------------------
            } else if (tagName === 'img') {
              const src = child.getAttribute('src');
              if (src) {
                if (content.length > 0 && !content.endsWith(' ') && !content.endsWith('\u00A0')) {
                  content += ' ';
                }
                // Ya NO convertimos a Data URI, solo conservamos el src
                content += src;
              }
      
            // ------------------------------------------------------------------------
            // D) <sub>, <sup>
            // ------------------------------------------------------------------------
            } else if (tagName === 'sub' || tagName === 'sup') {
              // Conservamos las etiquetas
              content += child.outerHTML;
            
            // ------------------------------------------------------------------------
            // E) <p> (procesado recursivo + saltos de línea)
            // ------------------------------------------------------------------------
            } else if (tagName === 'p') {
              const childContent = await extractContentInOrder(child);
              if (childContent) {
                if (content.length > 0 && !content.endsWith('\n')) {
                  content += '\n';
                }
                content += childContent + '\n';
              }
      
            // ------------------------------------------------------------------------
            // F) <br> (salto de línea)
            // ------------------------------------------------------------------------
            } else if (tagName === 'br') {
              content += '\n';
      
            // ------------------------------------------------------------------------
            // G) Otros elementos (recursivo)
            // ------------------------------------------------------------------------
            } else {
              const childContent = await extractContentInOrder(child);
              if (childContent) {
                content += childContent;
              }
            }
          }
        }
      
        return content;
      }

      /**
     * Convierte LaTeX a MathML sin afectar la parte visible de la web.
     * Detecta la versión de MathJax (v3 o v2) y utiliza el método correspondiente.
     * Retorna una promesa que se resuelve con el MathML resultante.
     *
     * @param {string} latexCode - Código LaTeX a convertir.
     * @param {boolean} [displayMode=false] - true para ecuación de bloque, false para en línea.
     * @returns {Promise<string>} - Promesa con el MathML.
     */
    async function convertLatexToMathML(latexCode, displayMode = false) {
        if (!window.MathJax) {
          throw new Error("MathJax no está cargado en la página.");
        }
      
        // Si MathJax.tex2mmlPromise existe, asumimos que es v3
        if (typeof MathJax.tex2mmlPromise === 'function') {
          return await MathJax.tex2mmlPromise(latexCode, { display: displayMode });
        }
        // Si MathJax.Hub existe, asumimos que es v2
        else if (window.MathJax.Hub) {
          return await convertWithMathJaxV2(latexCode, displayMode);
        }
        else {
          throw new Error("No se pudo determinar la versión de MathJax.");
        }
      }
      
      /**
       * Conversión con MathJax v2.
       * Crea un contenedor temporal oculto para procesar el LaTeX sin afectar la vista.
       *
       * @param {string} latexCode - Código LaTeX a convertir.
       * @param {boolean} displayMode - true para bloque, false para en línea.
       * @returns {Promise<string>} - Promesa con el MathML.
       */
      function convertWithMathJaxV2(latexCode, displayMode) {
        return new Promise((resolve, reject) => {
          // Crear un contenedor oculto
          const container = document.createElement('div');
          container.style.position = 'absolute';
          container.style.top = '-9999px';
          container.style.visibility = 'hidden';
          
          // Inserta el LaTeX con los delimitadores adecuados según el modo.
          container.innerHTML = displayMode ? '$$' + latexCode + '$$' : '\\(' + latexCode + '\\)';
          
          // Agrega el contenedor al DOM (puedes insertarlo en el body sin afectar la vista)
          document.body.appendChild(container);
          
          // Forzar que MathJax procese el contenedor
          MathJax.Hub.Queue(["Typeset", MathJax.Hub, container]);
          MathJax.Hub.Queue(() => {
            const mathElements = container.getElementsByTagName('math');
            if (mathElements.length > 0) {
              const mathml = mathElements[0].outerHTML;
              document.body.removeChild(container);
              resolve(mathml);
            } else {
              document.body.removeChild(container);
              reject(new Error("No se generó MathML con MathJax v2."));
            }
          });
        });
      }

    // Manejar respuestas tipo 'draganddrop' (image)
     async function draganddrop_image(originalFormulationClearfix, questionsAutoSave) {
        const tipo = 'draganddrop_image';
        console.log(tipo);

        // Crear una lista para almacenar las respuestas directamente en questionsAutoSave
        const respuestas = questionsAutoSave.respuestas;

        const clonFormulation = originalFormulationClearfix.cloneNode(true);
        // Convierte las imágenes dentro del clon a formato Data URI
        await convertImgToDataUri(clonFormulation);

        // Seleccionar todos los elementos con la clase 'place' dentro de 'qtext' usando un selector más genérico
        const qtextZones = originalFormulationClearfix.querySelectorAll('[class*="dropzone"][class*="group"][class*="place"]');

        // Recorrer cada lugar (place) para verificar si contiene una respuesta o está vacío
        qtextZones.forEach((zoneElement) => {
            // Comprobar si el lugar está vacío (tiene la clase 'active')
            if (zoneElement.classList.contains('active')) {
                respuestas.push('n/a');
            } else {
                // Si el lugar no está vacío, buscar el hermano que contiene la respuesta
                const respuestaElement = zoneElement.nextElementSibling;
                if (respuestaElement && respuestaElement.classList.contains('draghome')) {
                    const texto = respuestaElement.textContent.trim(); // Extraer el texto de la respuesta
                    respuestas.push(texto || 'n/a'); // Agregar el texto o 'n/a' si el texto está vacío
                }
            }
        });

        // Imprimir el array de respuestas en la consola
        console.log('Respuestas encontradas:', respuestas);

        // Clonar el elemento formulation_clearfix y guardar el HTML en questionsAutoSave

        questionsAutoSave.html = clonFormulation.outerHTML; // Guardar el HTML del clon
        questionsAutoSave.tipo = tipo; // Guardar el tipo en el objeto questionsAutoSave
        const feedback = await feedbackQuestion(originalFormulationClearfix);
        questionsAutoSave.feedback = feedback;
        questionsAutoSave.ciclo = localStorage.getItem("ciclo");
    }

    // Manejar respuestas tipo 'draganddrop' (texto)
    async function draganddrop_text(originalFormulationClearfix, questionsAutoSave) {
        // Agregar un retraso de 1 segundo antes de ejecutar el resto del código
        const tipo = 'draganddrop_text';
        console.log(tipo);

        // Crear una lista para almacenar las respuestas directamente en questionsAutoSave
        const respuestas = questionsAutoSave.respuestas;

        const clonFormulation = originalFormulationClearfix.cloneNode(true);
        // Convierte las imágenes dentro del clon a formato Data URI
        await convertImgToDataUri(clonFormulation);

        // Seleccionar todos los elementos con la clase 'place' dentro de 'qtext' usando un selector más genérico
        const qtextPlaces = originalFormulationClearfix.querySelectorAll('[class*="place"][class*="drop"][class*="group"]');

        // Recorrer cada lugar (place) para verificar si contiene una respuesta o está vacío
        qtextPlaces.forEach((placeElement) => {
            // Comprobar si el lugar está vacío (tiene la clase 'active')
            if (placeElement.classList.contains('active')) {
                respuestas.push('n/a');
            } else {
                // Si el lugar no está vacío, buscar el hermano que contiene la respuesta
                const respuestaElement = placeElement.nextElementSibling;
                if (respuestaElement && respuestaElement.classList.contains('draghome')) {
                    const texto = respuestaElement.textContent.trim(); // Extraer el texto de la respuesta
                    respuestas.push(texto || 'n/a'); // Agregar el texto o 'n/a' si el texto está vacío
                }
            }
        });

        // Imprimir el array de respuestas en la consola
        console.log('Respuestas encontradas:', respuestas);

        // Clonar el elemento formulation_clearfix y guardar el HTML en questionsAutoSave
        questionsAutoSave.html = clonFormulation.outerHTML; // Guardar el HTML del clon
        questionsAutoSave.tipo = tipo; // Guardar el tipo en el objeto questionsAutoSave
        const feedback = await feedbackQuestion(originalFormulationClearfix);
        questionsAutoSave.feedback = feedback;
        questionsAutoSave.ciclo = localStorage.getItem("ciclo");
    }

    // Manejar respuestas tipo 'input checkbox'
    async function inputchecked_opcionmultiple(originalFormulationClearfix, questionsAutoSave) {

        const tipo = 'inputchecked_opcionmultiple';
        const clonFormulation = originalFormulationClearfix.cloneNode(true);

        // Convierte las imágenes dentro del clon a formato Data URI
        await convertImgToDataUri(clonFormulation);

        const respuestas = [];
        const allInputCheckbox = originalFormulationClearfix.querySelectorAll('input[type="checkbox"]');

        allInputCheckbox.forEach((inputCheckbox) => {
            if (inputCheckbox.checked) {
                const labelId = CSS.escape(inputCheckbox.getAttribute('aria-labelledby'));
                const labelElement = originalFormulationClearfix.querySelector(`#${labelId}`);

                let textoRespuesta = '';
                if (labelElement) {
                    textoRespuesta = Array.from(labelElement.querySelectorAll('div, span'))
                        .map(element => element.innerText.trim())
                        .join(' ');

                    textoRespuesta = textoRespuesta.replace(/^[a-zA-Z]\.|^[ivxlcdmIVXLCDM]+\./, '').trim();
                }

                if (textoRespuesta) {
                    respuestas.push(textoRespuesta);
                }
            }
        });

        // Guardar la información aunque no haya respuestas seleccionadas
        questionsAutoSave.respuestas = respuestas; // Si no hay respuestas, quedará como un array vacío
        questionsAutoSave.html = clonFormulation.outerHTML; // Guardar el HTML del clon
        questionsAutoSave.tipo = tipo;
        const feedback = await feedbackQuestion(originalFormulationClearfix);
        questionsAutoSave.feedback = feedback;
        questionsAutoSave.ciclo = localStorage.getItem("ciclo");
    }

    async function inputradio_opcionmultiple_verdaderofalso(originalFormulationClearfix) {
        const tipo = 'inputradio_opcionmultiple_verdaderofalso';

        // Clonamos el elemento original para trabajar sobre una copia sin modificar el DOM.
        const clonFormulation = originalFormulationClearfix.cloneNode(true);

        if (clonFormulation.querySelectorAll('img').length > 0 || clonFormulation.querySelectorAll('audio').length > 0) {
            await File2DataUri(clonFormulation);
        }

        // Extraemos el enunciado usando la función dedicada.
        const enunciado = await extractEnunciado(clonFormulation);

        // Extraemos las opciones de respuesta y la respuesta correcta.
        const { opcionesRespuesta, respuestaCorrecta } = await extractOpcionesYRespuesta(originalFormulationClearfix);

        // Obtenemos el feedback, si existe.
        const feedback = await feedbackQuestion(originalFormulationClearfix);

        // Construimos el objeto questionData con la información obtenida.
        const questionData = {
            enunciado: enunciado,
            opcionesRespuesta: opcionesRespuesta,
            respuestaCorrecta: respuestaCorrecta,
            html: clonFormulation.outerHTML,
            tipo: tipo,
            ciclo: localStorage.getItem("ciclo"),
            feedback: feedback,
        };

        console.log("Objeto questionData generado:", questionData);
        return questionData;
    }


    async function extractEnunciado(clonFormulation) {
        const enunciadoElement = clonFormulation.querySelector('.qtext');
        let enunciado = '';
        if (enunciadoElement) {
            enunciado = await extractContentInOrder(enunciadoElement);
        } else {
            console.log("No se encontró el elemento .qtext para extraer el enunciado.");
        }
        return enunciado;
    }

    async function extractOpcionesYRespuesta(originalFormulationClearfix) {
        const allInputRadio = originalFormulationClearfix.querySelectorAll('input[type="radio"]');
        let opcionesRespuesta = [];
        let respuestaCorrecta = '';

        for (const inputRadio of allInputRadio) {
            // Ignoramos inputs que correspondan a "Quitar mi elección" o similares.
            const parentDiv = inputRadio.closest('.qtype_multichoice_clearchoice');
            const isClearChoice = parentDiv !== null || inputRadio.value === "-1" || inputRadio.classList.contains('sr-only');
            if (isClearChoice) {
                continue;
            }

            // Se asume que el label asociado es el siguiente elemento en el DOM.
            let labelInput = inputRadio.nextElementSibling;
            let textoOpcion = '';
            if (labelInput) {
                // Si el label contiene un elemento con clase "flex-fill", se extrae desde allí.
                const flexFillElement = labelInput.querySelector('.flex-fill');
                if (flexFillElement) {
                    textoOpcion = await extractContentInOrder(flexFillElement);
                } else {
                    // Si no, se extrae directamente del label.
                    textoOpcion = await extractContentInOrder(labelInput);
                }
                // Si no se encuentra un elemento MathJax, se eliminan literales iniciales (como "a.", "b.", etc.).
                const mathJaxElement = labelInput.querySelector('.MathJax');
                if (!mathJaxElement) {
                    textoOpcion = textoOpcion.replace(/^[a-zA-Z]\.|^[ivxlcdmIVXLCDM]+\./, '');
                }
            } else {
                console.log("No se encontró label asociado para el input radio:", inputRadio);
            }

            opcionesRespuesta.push(textoOpcion);

            // Si el input está marcado, se asigna su texto como respuesta correcta.
            if (inputRadio.checked) {
                console.log("Input radio marcado encontrado. Respuesta correcta:", textoOpcion);
                respuestaCorrecta = textoOpcion;
            }
        }

        return { opcionesRespuesta, respuestaCorrecta };
    }

    // Manejar respuestas tipo 'input text' (respuesta corta)
     async function inputtext_respuestacorta(originalFormulationClearfix, questionsAutoSave) {
        const tipo = 'inputtext_respuestacorta';
        const respuestas = questionsAutoSave.respuestas;
        let hayRespuestaLleno = false;

        const clonFormulation = originalFormulationClearfix.cloneNode(true);
        // Convierte las imágenes dentro del clon a formato Data URI
        await convertImgToDataUri(clonFormulation);

        const allInputText = originalFormulationClearfix.querySelectorAll('input[type="text"]');

        allInputText.forEach((inputText) => {
            const valor = inputText.value;
            respuestas.push(valor);

            if (valor) {
                hayRespuestaLleno = true;
            }
        });

        if (hayRespuestaLleno) {
            questionsAutoSave.html = clonFormulation.outerHTML; // Guardar el HTML del clon
            questionsAutoSave.tipo = tipo;
            const feedback = await feedbackQuestion(originalFormulationClearfix);
            questionsAutoSave.feedback = feedback;
            questionsAutoSave.ciclo = localStorage.getItem("ciclo");
        }
    }

    // Manejar respuestas tipo 'select'
    async function select_emparejamiento(originalFormulationClearfix, questionsAutoSave) {
        const tipo = 'select_emparejamiento'; // Define el tipo de pregunta como "select_emparejamiento"
        questionsAutoSave.respuestas = [];    // Inicializa el array respuestas como vacío
        questionsAutoSave.enunciados = [];    // Inicializa el array enunciados como vacío

        // Crea un clon de la estructura HTML de la pregunta
        const clonFormulation = originalFormulationClearfix.cloneNode(true);

        // Convierte las imágenes dentro del clon a formato Data URI para almacenar todo el contenido en texto
        await convertImgToDataUri(clonFormulation);

        // Obtiene todos los elementos <select> en la pregunta original
        const allSelects = originalFormulationClearfix.querySelectorAll('select');

        // Itera sobre cada elemento <select> encontrado
        allSelects.forEach(async (selectElement) => {
            // Obtiene la opción seleccionada
            let opcionSeleccionada = selectElement.options[selectElement.selectedIndex];

            if (opcionSeleccionada) {
                // Si el valor es "0", la respuesta será una cadena vacía, de lo contrario, es el texto de la opción
                let textoRespuesta = (opcionSeleccionada.value === "0")
                    ? ""
                    : opcionSeleccionada.textContent.trim();

                // Almacena la respuesta (vacía o con texto, según corresponda)
                questionsAutoSave.respuestas.push(textoRespuesta);

                // Extrae el enunciado relacionado de la celda <td> más cercana que contiene el texto o una imagen
                let textoPregunta;
                const textoElement = selectElement.closest('tr').querySelector('td.text');
                if (textoElement) {
                    // Verifica si contiene texto
                    if (textoElement.innerText.trim()) {
                        textoPregunta = textoElement.innerText.trim();
                    } else {
                        // Si no contiene texto, intenta procesar la(s) imagen(es)
                        const imgElement = textoElement.querySelector('img');
                        if (imgElement) {
                            // Si la imagen proviene de 'pluginfile.php', la convertimos a Data URI
                            if (imgElement.src.includes('pluginfile.php')) {
                                try {
                                    console.log('Convirtiendo imagen (pluginfile.php):', imgElement.src);
                                    const dataUri = await convertImageToDataUri(imgElement);
                                    imgElement.src = dataUri;
                                    textoPregunta = dataUri;
                                    console.log('Imagen convertida a Data URI:', imgElement.src);
                                } catch (error) {
                                    console.error('Error en la conversión de la imagen:', error);
                                }
                            } else {
                                // Si la imagen no está en pluginfile.php, usamos su URL como textoPregunta
                                textoPregunta = imgElement.src;
                                console.log('La imagen no se convierte:', imgElement.src);
                            }
                        }
                    }

                    // Almacena el enunciado en questionsAutoSave.enunciados
                    if (textoPregunta) {
                        questionsAutoSave.enunciados.push(textoPregunta);
                         // console.log(`Enunciado almacenado: ${textoPregunta}`);
                    }
                }
            }
        });

        // Guarda el HTML del clon y el tipo de pregunta después de procesar todas las selecciones
        questionsAutoSave.html = clonFormulation.outerHTML;
        questionsAutoSave.tipo = tipo;

        // Llama a la función feedbackQuestion para obtener retroalimentación de la pregunta y la almacena
        const feedback = await feedbackQuestion(originalFormulationClearfix);
        questionsAutoSave.feedback = feedback;

        // Guarda el valor de "ciclo" de localStorage en el objeto questionsAutoSave
        questionsAutoSave.ciclo = localStorage.getItem("ciclo");

        //console.log(`[opc-autofill-autosave-moodle: autosave/questions-types] Pregunta guardada en SessionStorage`);
    }

    // Exporta una función llamada contenedorAutoSave_js
    function contenedorAutoSave_js() {
        const SWITCH_ID = 'switch-autosave';
        const BODY_ID = 'body-autoquiz-autosave';
        const STORAGE_KEY = 'autosave-autoquizfillapp';
        const ACTIVADO = 'activado';
        const DESACTIVADO = 'desactivado';

        const interruptorAutoSave = document.getElementById(SWITCH_ID);
        const bodyAutoSave = document.getElementById(BODY_ID);

        if (!interruptorAutoSave) {
            console.error(`Error: No se encontró el elemento con ID '${SWITCH_ID}'`);
            return;
        }

        const estadoGuardado = localStorage.getItem(STORAGE_KEY) || DESACTIVADO;
        console.log(`[opc-autofill-autosave-moodle: autosave] AutoSave: ${estadoGuardado}`);

        interruptorAutoSave.checked = estadoGuardado === ACTIVADO;

        // **Hacer que actualizarVisibilidadBody sea async**
        const actualizarVisibilidadBody = async () => {
            const esPaginaQuiz = window.location.href.includes('/mod/quiz/attempt.php');

            if (esPaginaQuiz && interruptorAutoSave.checked) {
                if (bodyAutoSave) {
                    bodyAutoSave.style.display = 'flex';
                    console.log(`[opc-autofill-autosave-moodle: autosave] Iniciando AutoSave...`);
                    const originalAllFormulations = document.querySelectorAll('.formulation.clearfix');

                    await AutoSave_SessionStorage(originalAllFormulations); // Espera a que termine AutoSave
                     // mostrarRespuestas_AutoSave();

                    detectarCambiosPreguntas();

                    console.log(`[opc-autofill-autosave-moodle: autosave] AutoSave completado.`);
                }
            } else if (esPaginaQuiz && !interruptorAutoSave.checked) {
                if (bodyAutoSave) {
                    bodyAutoSave.style.display = 'none';
                }

            } else if (!esPaginaQuiz) {
                console.log(`[opc-autofill-autosave-moodle: autosave] Esta página no soporta AutoSave.`);
            }
        };

        // **Llamar la función sin await para que no bloquee la ejecución**
        actualizarVisibilidadBody();

        // **Manejar cambios en el interruptor**
        interruptorAutoSave.addEventListener('change', () => {
            const estadoNuevo = interruptorAutoSave.checked ? ACTIVADO : DESACTIVADO;
            localStorage.setItem(STORAGE_KEY, estadoNuevo);
            console.log(`[opc-autofill-autosave-moodle: autosave] AutoSave: ${estadoNuevo}`);

            actualizarVisibilidadBody(); // Llamar sin await
        });
    }

    async function AutoSave_SessionStorage(questionsHtml, numeroQuestionUpdate = null) {

        // 1) Verificar si "questionsHtml" es una colección (NodeList o HTMLCollection).
        //    Si no lo es, se convierte a array para procesarlo de forma uniforme.
        if (!NodeList.prototype.isPrototypeOf(questionsHtml) && !HTMLCollection.prototype.isPrototypeOf(questionsHtml)) {
            questionsHtml = [questionsHtml];
        }

        // 2) Si el array está vacío, se muestra un error y se termina la ejecución.
        if (questionsHtml.length === 0) {
            console.error('[AutoSave_SessionStorage] No se pudo ejecutar porque no cumple con los argumentos correctos');
            return;
        }

        const funcQuestionType = {
            'inputradio_opcionmultiple_verdaderofalso': inputradio_opcionmultiple_verdaderofalso,
            'inputchecked_opcionmultiple': inputchecked_opcionmultiple,
            'select_emparejamiento': select_emparejamiento,
            'inputtext_respuestacorta': inputtext_respuestacorta,
            'draganddrop_text': async (questionHtml) => {
                return await new Promise(resolve => setTimeout(() => {
                    resolve(draganddrop_text(questionHtml));
                }, 1000));
            },
            'draganddrop_image': async (questionHtml) => {
                return await new Promise(resolve => setTimeout(() => {
                    resolve(draganddrop_image(questionHtml));
                }, 1000));
            }
            // Otros tipos se pueden agregar de forma similar...
        };

        // ——————————————————————————————————————————————————————
        // Determinar el caso a ejecutar:
        //   - Caso A: Si hay más de 1 elemento O si hay 1 elemento y numeroQuestionUpdate es null.
        //   - Caso B: Si hay 1 elemento y numeroQuestionUpdate tiene un valor.
        // ——————————————————————————————————————————————————————
        if (questionsHtml.length > 1 || (questionsHtml.length === 1 && numeroQuestionUpdate === null)) {
            // *************** Caso A ***************

            // Se crea un objeto nuevo para almacenar la información de todas las preguntas.
            const questionsHtmlObject = {};
            let contadorPreguntas = 0;

            // Iterar sobre cada elemento de "questionsHtml"
            for (const questionHtml of questionsHtml) {
                // Determinar el número de la pregunta:
                // - Se utiliza numeroQuestionUpdate si tiene un valor.
                // - Si no, se intenta obtener mediante obtenerNumeroPregunta.
                // - Finalmente, se incrementa un contador si aún no se determina.
                const numberQuestion =
                    numeroQuestionUpdate ||
                    getQuestionNumber(questionHtml) ||
                    ++contadorPreguntas;

                // Determinar el tipo de pregunta mediante la función determinarTipoPregunta.
                const questionType = determinarTipoPregunta(questionHtml);
                console.log(`[AutoSave_SessionStorage] Pregunta ${numberQuestion}, tipo: ${questionType}`);

                // Buscar la función correspondiente al tipo de pregunta.
                const funcion = funcQuestionType[questionType];
                let questionData;
                if (funcion) {
                    // Se invoca la función y se espera que retorne el objeto con la información de la pregunta.
                    questionData = await funcion(questionHtml);
                } else {
                    console.warn(`No se encontró función para el tipo de pregunta: ${questionType}`);
                    continue;
                }

                // Se almacena directamente la información de la pregunta, usando la clave "PreguntaNueva" seguida del número.
                questionsHtmlObject[`Pregunta${numberQuestion}`] = questionData;
            }

            // Guardar el objeto completo en sessionStorage.
            try {
                sessionStorage.setItem('questions-AutoSave', JSON.stringify(questionsHtmlObject));
                console.log('[AutoSave_SessionStorage] Se ha guardado la información de múltiples preguntas.');
            } catch (error) {
                console.error('Error al guardar en sessionStorage:', error);
            }

        } else {
            // *************** Caso B ***************

            // Leer la información existente en sessionStorage.
            let datosExistentes = {};
            try {
                const cadenaAlmacenamiento = sessionStorage.getItem('questions-AutoSave');
                if (cadenaAlmacenamiento) {
                    datosExistentes = JSON.parse(cadenaAlmacenamiento);
                }
            } catch (err) {
                console.error('[AutoSave_SessionStorage] Error al parsear sessionStorage:', err);
                datosExistentes = {};
            }

            // Procesar la única pregunta.
            const questionHtml = questionsHtml[0];
            // En este caso, numeroQuestionUpdate tiene un valor y se usa directamente.
            const numberQuestion = numeroQuestionUpdate;
            const questionType = determinarTipoPregunta(questionHtml);
            console.log(`[AutoSave_SessionStorage] Pregunta ${numberQuestion}, tipo: ${questionType}`);

            const funcion = funcQuestionType[questionType];
            let questionData;
            if (funcion) {
                questionData = await funcion(questionHtml);
            } else {
                console.warn(`No se encontró función para el tipo de pregunta: ${questionType}`);
                return;
            }

            // Se almacena directamente la información de la pregunta, usando la clave "PreguntaNueva" seguida del número.
            datosExistentes[`Pregunta${numberQuestion}`] = questionData;

            // Guardar el objeto actualizado en sessionStorage.
            try {
                sessionStorage.setItem('questions-AutoSave', JSON.stringify(datosExistentes));
                console.log('[AutoSave_SessionStorage] Se ha actualizado la información de 1 pregunta.');
            } catch (error) {
                console.error('Error al guardar en sessionStorage:', error);
            }
        }
    }



    // -----------------------------------------------------------------------
    // Función que detecta los cambios y actúa según exista o no 'questions-AutoSave'
    // -----------------------------------------------------------------------
    function detectarCambiosPreguntas() {

        // Selecciona todos los inputs y selects que quieres escuchar
        const elementos = document.querySelectorAll(
            'input[type="radio"], select, input[type="checkbox"], input[type="text"]'
        );

        elementos.forEach(el => {
            el.addEventListener('change', async (event) => {
                // Si el cambio se produjo dentro del contenedor "barra-lateral-autoquizfillapp", se ignora
                if (event.target.closest('#barra-lateral-autoquizfillapp')) {
                    return;
                }

                console.log('[opc-autofill-autosave-moodle: autosave] Cambio detectado');

                // Verificamos si 'questions-AutoSave' existe en sessionStorage
                let questionsAutoSaveStr = sessionStorage.getItem('questions-AutoSave');

                if (!questionsAutoSaveStr) {
                    console.log("'questions-AutoSave' no existe. Llamando a AutoSave_SessionStorage por primera vez.");
                    // Si NO existe, llamamos la función general y guardamos todo por primera vez
                    const originalAllFormulations = document.querySelectorAll('.formulation.clearfix');
                    await AutoSave_SessionStorage(originalAllFormulations);
                } else {
                    // Si SÍ existe, lo parseamos
                    const questionsAutoSave = JSON.parse(questionsAutoSaveStr);

                    // Ubicamos la .formulation.clearfix donde ocurrió el cambio
                    const formulation = event.target.closest('.formulation.clearfix');

                    if (!formulation) {
                        console.warn('No se encontró el elemento .formulation.clearfix cercano. Saliendo.');
                        return; // Si por algún motivo no lo encuentra, salimos
                    }

                    // Obtenemos el número de la pregunta (por ejemplo con getQuestionNumber)
                    const numeroPregunta = getQuestionNumber(formulation);

                    console.log('[opc-autofill-autosave-moodle: autosave] Actualizando Pregunta', numeroPregunta);
                    if (!numeroPregunta) {
                        console.warn('No se pudo obtener el número de pregunta. Saliendo.');
                        return; // Si no lo obtienes, salimos
                    }

                    // Construimos la llave, por ejemplo "Pregunta1", "Pregunta2", etc.
                    const preguntaKey = `Pregunta${numeroPregunta}`;

                    // Revisamos si esa pregunta ya existe en el objeto guardado
                    if (questionsAutoSave[preguntaKey]) {
                        // Recuperamos ese objeto (ya contiene "tipo", "html", etc.)
                        questionsAutoSave[preguntaKey];

                        // Llamamos la versión reducida que actualiza SOLO ESTA PREGUNTA
                        await AutoSave_SessionStorage(formulation, numeroPregunta);

                    } else {
                        console.log(`La pregunta ${preguntaKey} no existe en questionsAutoSave. Llamando a AutoSave_SessionStorage.`);
                        // Si no encuentra la pregunta, podemos forzar a guardar todo de nuevo
                    }
                }
            });
        });

    }

    function opcion_AutoFillAutoSave_Moodle_html() {
        return `
     <div class="body-autoquiz">

<div class="container-autoquiz">

    <div id="users-autofill-moodle" class="users" style="display: none;">

        <!-- Columna para mostrar el nombre de usuario actual con icono de usuario -->
        <div class="usuario-actual">
            <i class="fa-solid fa-user"></i>
            <span id="nombre-usuario-actual" class="nombre-usuario"></span>
        </div>

        <select id="siguiente-usuario" class="select-siguiente-usuario" >
        </select>

        <button id="boton-siguiente-usuario" class="boton-siguiente-usuario">
            <i class="fa-solid fa-angles-right"></i>
        </button>

    </div>


    <!-- Contenedor Principal -->
    <div id="ultima-ruta-configruta" class="estilo-configruta-title no-seleccionado">

        <!-- Contenedor para Ruta y Ciclo apilados verticalmente -->
        <div class="ruta-ciclo-container" style="display: none;">

            <!-- Ruta -->
            <div id="ruta-configruta" class="title-configruta-ruta">
                <span class="label-configruta">Ruta:</span>
            </div>

            <!-- Ciclo -->
            <div id="ciclo-configruta" class="title-configruta-ciclo">
                <span class="label-configruta">Ciclo:</span>
            </div>

        </div>
    </div>


             <!-- Contenedor para Subject Dinamic -->

        <div id="container-ruta-dinamica" style="display: block;" >

            <div id="subject-dinamic" class="subject-dinamic">

                <div id="selects-subject-dinamic" >
                </div>

            </div>
        </div>


    <!-- Nuevo contenedor para AutoFill-->
    <div id="container-autofill" class="subcontainer-autoquiz-autofill" style="display: none;">

        <div class="header-autoquiz">
            <h2 id="titulo-autoquiz">AutoFill</h2>

            <label class="switch-autoquiz">
                <input type="checkbox" id="switch-autofill">
                <span class="slider round"></span>
            </label>
        </div>

        <!-- Contenido de AutoFill-->
        <div id="body-autoquiz-autofill" class="body-autoquiz" style="display: none;">

            <!-- Contenedor dinámico para las preguntas generadas -->
            <div id="contenedor-preguntas" class="contenedor-preguntas">
                <!-- Aquí se insertarán dinámicamente los detalles de cada pregunta -->
            </div>

        </div>
    </div>

    <!-- Contenedor para AutoSave -->
    <div id="container-autosave" class="subcontainer-autoquiz-autosave" style="display: none;">

        <div class="header-autoquiz">
            <!-- Título y Switch -->
            <h2 id="titulo-autoquiz">AutoSave</h2>
            <label class="switch-autoquiz">
                <input type="checkbox" id="switch-autosave">
                <span class="slider round"></span>
            </label>
        </div>

        <!-- Contenido de AutoSave -->
        <div id="body-autoquiz-autosave" class="body-autoquiz">

            <div class="dato-autoquiz">
                <div>
                    <span id="respuestasautosave"></span>
                </div>
            </div>

        </div>
    </div>


    <!-- Contenedor para AutoSaveReview -->
    <div id="container-autosavereview" class="subcontainer-autoquiz-autosavereview" style="display: none;">

        <div class="header-autoquiz">
            <!-- Título y Switch -->
            <h3 id="titulo-autoquiz">AutoSaveReview</h3>
            <label class="switch-autoquiz">
                <input type="checkbox" id="switch-autosavereview">
                <span class="slider round"></span>
            </label>
        </div>

        <!-- Contenido de AutoSaveReview -->
        <div id="body-autoquiz-autosavereview" class="body-autoquiz">

            <div class="dato-autoquiz">
                <div>
                    <span id="respuestasautosavereview"></span>
                </div>
            </div>

        </div>
    </div>

    <!-- Contenedor Verified -->
    <div id="container-verified" class="subcontainer-autoquiz-verified" style="display: none;">

        <!-- Head Verified -->
        <div class="header-autoquiz">
        <h4 id="titulo-autoquiz">Verificar Preguntas</h4>

        </div>

        <!-- Body Verified -->
        <div id="body-autoquiz-verified" class="body-autoquiz">

        </div>
    </div>

</div>

</div>
`;
    }

    async function opcion_AutoFillAutoSave_Moodle_js() {
        const url = window.location.href;
        let esMoodle = esPaginaMoodle();

        if (esMoodle) {
            console.log("[opc-autofill-autosave-moodle: main]  Esta página está construida con Moodle");
        } else {
            console.log("[opc-autofill-autosave-moodle: main]  Esta página no está construida con Moodle");
        }

        if (localStorage.getItem('configUsersAutofill') === 'true' && esMoodle) {
            const autofillUsers = document.getElementById('users-autofill-moodle');
            autofillUsers.style.display = 'flex';
            contenedorUsers_js();
        } else {
            console.log("[opc-autofill-autosave-moodle: main]  AutoFill Users no ejecutado porque, no es Moodle");
        }

        const switchRutaDinamica = localStorage.getItem('switch-ruta-dinamica');

        if (switchRutaDinamica === 'true' && (esMoodle || url.includes('http://127.0.0.1:5500/dist/index.html'))) {
            console.log('[opc-autofill-autosave-moodle: main]  Cargando Ruta Dinamica...');
            await contenedorRutaDinamica_js();
        } else {
            console.log('[opc-autofill-autosave-moodle: main]  Cargando Ruta...');
            contenedorRuta_js$1();
        }

        // Mostrar contenedores de autofill y autosave si estamos en 'mod/quiz/attempt.php'
        if (esMoodle || url.includes('http://127.0.0.1:5500/dist/index.html')) {
            const autofillContainer = document.getElementById('container-autofill');
            const autosaveContainer = document.getElementById('container-autosave');
            autofillContainer.style.display = 'block';
            autosaveContainer.style.display = 'block';
            //contenedorAutoFill_js();
            contenedorAutoSave_js();
        }

        // Ejecutar extractRevision() solo si el URL contiene 'grade/report/overview/index.php'
        // if (esMoodle && url.includes('grade/report/overview/index.php')) {
        //     extractRevision();
        //     viewRevisiones();
        // }

        // Mostrar contenedor de autosavereview si estamos en 'mod/quiz/review.php'
        //if (esMoodle && url.includes('mod/quiz/review.php')) {
            // const autoSaveReviewContainer = document.getElementById('container-autosavereview');
            // autoSaveReviewContainer.style.display = 'block';
            // contenedorAutoSaveReview_js();
        //}

        // Mostrar contenedor de verified si estamos en cualquiera de las páginas especificadas
        //if (esMoodle && url.includes('mod/quiz/review.php') || url.includes('grade/report/overview/index.php') || url.includes('course/user.php')) {
            //const verifiedContainer = document.getElementById('container-verified');
           // verifiedContainer.style.display = 'block';
            //     await opcionVerified_js();
        //}
    }

    // Función para verificar si la página está construida con Moodle
    function esPaginaMoodle() {
        // Método 1: Verificar la etiqueta meta "generator"
        const metaGenerator = document.querySelector('meta[name="generator"]');
        if (metaGenerator && metaGenerator.getAttribute('content').toLowerCase().includes('moodle')) {
            return true;
        }

        // Método 2: Verificar clases específicas en el <body>
        if (document.body.classList.contains('moodle')) {
            return true;
        }

        // Método 3: Verificar contenedores específicos de Moodle
        const moodleContainer = document.querySelector('.moodle-page');
        if (moodleContainer) {
            return true;
        }

        // Método 4: Verificar URLs o scripts específicos
        const scripts = document.querySelectorAll('script[src]');
        for (let script of scripts) {
            if (script.src.toLowerCase().includes('moodle')) {
                return true;
            }
        }

        // Si ninguno de los métodos anteriores detecta Moodle
        return false;
    }

    function opcionAutoFillAltissia_html() {
        return `
     <div class="contenido-config">
        <h3 id="titulo-config">Altissia HTML</h3>

        <!-- Contenedor Select Dinámico -->
        <div id="selects-plataforma" class="estilo-config-item">
            <!-- Aquí se inyectará el select dinámicamente -->
        </div>
    </div>
`;
    }

    function opcionAutoFillAltissia_js$1() {
        return `
     <div class="contenido-config">
        <h3 id="titulo-config">Altissia JS</h3>

        <!-- Contenedor Select Dinámico -->
        <div id="selects-plataforma" class="estilo-config-item">
            <!-- Aquí se inyectará el select dinámicamente -->
        </div>
    </div>
`;
    }

    var css_248z$2 = "/* Estilo para el Contenedor Principal */\r\n#titulo-config {\r\n    margin-bottom: 5px;\r\n    margin-top: 0;\r\n    display: flex;\r\n    color: #34495e;\r\n    padding: 0; /* Opcional: padding interno */\r\n    font-family: 'Poppins', sans-serif;\r\n    font-size: 1.4rem; /* Tamaño de fuente de 1rem */\r\n}\r\n\r\n.estilo-config-select {\r\n    width: 100%;\r\n    padding: 12px;\r\n    font-size: 14px;\r\n    font-family: 'Poppins', sans-serif;\r\n    border: 1px solid #bdc3c7;\r\n    border-radius: 4px;\r\n    background-color: #ffffff;\r\n    color: #2c3e50;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    transition: border 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n.estilo-config-item {\r\n        margin-bottom: 10px;\r\n        font-family: 'Poppins', sans-serif;\r\n}\r\n\r\n/* styles.css */\r\n\r\n/* Contenedor que usa Flexbox para alinear elementos */\r\n.opc-config-switch-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%; /* Ajusta el ancho según tus necesidades */\r\n    padding: 10px;\r\n    margin: 10px 0; /* Espaciado entre switches */\r\n    border: 1px solid #ddd; /* Opcional: para visualizar el contenedor */\r\n    border-radius: 8px;\r\n    background-color: #f9f9f9; /* Opcional: fondo del contenedor */\r\n  }\r\n  \r\n  /* Estilo para la etiqueta de texto */\r\n  .opc-config-switch-label {\r\n    font-size: 1rem;\r\n    color: #333;\r\n  }\r\n  \r\n  /* El switch - el contenedor alrededor del slider */\r\n  .opc-config-switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 40px; /* Tamaño reducido */\r\n    height: 20px; /* Tamaño reducido */\r\n  }\r\n  \r\n  /* Ocultar el checkbox HTML por defecto */\r\n  .opc-config-switch-checkbox {\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n  \r\n  /* El slider */\r\n  .opc-config-slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: #ccc;\r\n    transition: .4s;\r\n    border-radius: 20px; /* Redondear el slider */\r\n  }\r\n  \r\n  .opc-config-slider:before {\r\n    position: absolute;\r\n    content: \"\";\r\n    height: 16px; /* Tamaño reducido */\r\n    width: 16px; /* Tamaño reducido */\r\n    left: 2px;\r\n    bottom: 2px;\r\n    background-color: white;\r\n    transition: .4s;\r\n    border-radius: 50%;\r\n  }\r\n  \r\n  /* Cambiar el color del slider cuando el checkbox está marcado */\r\n  .opc-config-switch-checkbox:checked + .opc-config-slider {\r\n    background-color: #2196F3;\r\n  }\r\n  \r\n  /* Añadir sombra al enfocar el checkbox */\r\n  .opc-config-switch-checkbox:focus + .opc-config-slider {\r\n    box-shadow: 0 0 1px #2196F3;\r\n  }\r\n  \r\n  /* Mover el slider cuando el checkbox está marcado */\r\n  .opc-config-switch-checkbox:checked + .opc-config-slider:before {\r\n    transform: translateX(20px); /* Ajusta según el tamaño reducido */\r\n  }\r\n  \r\n  /* Cambiar el color de la etiqueta cuando el switch está activo */\r\n  .opc-config-switch-checkbox:checked ~ .opc-config-switch-label {\r\n    color: #2196F3;\r\n  }\r\n  \r\n  /* Redondear el slider cuando tiene la clase 'round' */\r\n  .opc-config-slider.round {\r\n    border-radius: 20px;\r\n  }\r\n  \r\n  .opc-config-slider.round:before {\r\n    border-radius: 50%;\r\n  }\r\n  ";
    styleInject(css_248z$2);

    // configuracion.js


    /**
     * Retorna el HTML de la configuración con un contenedor para el select dinámico.
     */
    function opcionConfig_html() {
        return `
        <div class="contenido-config">
            <h3 id="titulo-config">Configuración</h3>

            <!-- Contenedor Select Dinámico -->
            <div id="selects-plataforma" class="estilo-config-item">
                <!-- Aquí se inyectará el select dinámicamente -->
            </div>

            <!-- Switch -->
<div id="dynamic-route-switch" class="opc-config-switch-container" style="display: none">
  <span class="opc-config-switch-label">Ruta Dinámica</span>
  <label class="opc-config-switch">
    <input type="checkbox" id="dynamic-route-switch-checkbox" class="opc-config-switch-checkbox">
    <span class="opc-config-slider round"></span>
  </label>
</div>

<div id="users-autofill-switch" class="opc-config-switch-container" style="display: none">
  <span class="opc-config-switch-label">AutoFill Users</span>
  <label class="opc-config-switch">
    <input type="checkbox" id="users-autofill-switch-checkbox" class="opc-config-switch-checkbox">
    <span class="opc-config-slider round"></span>
  </label>
</div>


        </div>

    `;
    }

    /**
     * Genera un select dinámico basado en las claves de 'Config/Plataforma' en Firebase.
     * Establece el valor seleccionado según 'localStorage' o por defecto a 'Moodle'.
     */
    async function opcionConfig_js() {
        try {

            if (!localStorage.getItem('ConfigPlataforma')) {
                localStorage.setItem('ConfigPlataforma', "Moodle");
            }


            // Referencia a la ruta 'Config/Plataforma' en Firebase
            const plataformaRef = ref(database, 'Config/Plataforma');
            const snapshot = await get(plataformaRef);


            if (snapshot.exists()) {
                const plataformas = snapshot.val();
                const plataformaKeys = Object.keys(plataformas);

                // Obtener el contenedor donde se insertará el select
                const selectsContainer = document.getElementById('selects-plataforma');

                if (!selectsContainer) {
                    console.error('El contenedor con ID "selects-plataforma" no existe en el DOM.');
                    return;
                }

                // Limpiar el contenedor antes de agregar el select
                selectsContainer.innerHTML = '';

                // Crear la etiqueta para el select
                const label = document.createElement('label');
                label.setAttribute('for', 'select-plataforma');
                label.textContent = 'Plataforma: ';
                label.classList.add('estilo-config-item'); // Aplica estilos al label si es necesario

                // Crear el elemento select
                const select = document.createElement('select');
                select.id = 'select-plataforma';
                select.name = 'select-plataforma';
                select.classList.add('estilo-config-select'); // Aplica estilos al select

                // Agregar opciones dinámicamente
                plataformaKeys.forEach(opcion => {
                    const optionElement = document.createElement('option');
                    optionElement.value = opcion;
                    optionElement.textContent = opcion;
                    select.appendChild(optionElement);
                });


                // Establecer el valor seleccionado desde localStorage o por defecto a 'Moodle'
                const seleccionGuardada = localStorage.getItem('ConfigPlataforma');
                if (seleccionGuardada && plataformaKeys.includes(seleccionGuardada)) {
                    select.value = seleccionGuardada;
                } else {

                    if (!localStorage.getItem('ConfigPlataforma')) {
                        // Si 'Moodle' está entre las opciones, establecerlo como seleccionado
                        if (plataformaKeys.includes('Moodle')) {
                            select.value = 'Moodle';
                        }
                    } else if (plataformaKeys.length > 0) {
                        // Opcional: Establecer la primera opción como seleccionada si "Moodle" no está disponible
                        select.value = plataformaKeys[0];
                    }
                }

                //  Agregar un listener para guardar la selección en localStorage cuando cambie
                select.addEventListener('change', (event) => {
                    const seleccion = event.target.value;
                    if (seleccion) {
                        localStorage.setItem('ConfigPlataforma', seleccion);
                       // mostrarMensaje('Configuración guardada exitosamente.', 'success');mostrarMensaje('Configuración guardada exitosamente.', 'success');
                        initOpcConfigSwitch();
                        initOpcConfigSwitch2();
                    }
                });

                // Agregar la etiqueta y el select al contenedor
                selectsContainer.appendChild(label);
                selectsContainer.appendChild(select);
            } else {
                console.log('No se encontraron plataformas en Firebase.');
            }

            initOpcConfigSwitch();
            initOpcConfigSwitch2();


        } catch (error) {
            console.error('Error al obtener las plataformas de Firebase:', error);
        }


    }

    function initOpcConfigSwitch() {
        const container = document.getElementById("dynamic-route-switch");
        const checkbox = document.getElementById("dynamic-route-switch-checkbox");

        // Mostrar el contenedor si ConfigPlataforma es "Moodle"
        const configPlataforma = localStorage.getItem("ConfigPlataforma");
        if (configPlataforma === "Moodle") {
            container.style.display = "flex";

            const configRutaDinamic = localStorage.getItem("switch-ruta-dinamica");
            checkbox.checked = configRutaDinamic === "true";

        } else {
            localStorage.setItem("switch-ruta-dinamica", "false");
            container.style.display = "none";
        }

        // Establecer el estado inicial del checkbox desde switch-ruta-dinamica


        // Escuchar cambios en el checkbox
        checkbox.addEventListener("change", () => {
            const isChecked = checkbox.checked;
            localStorage.setItem("switch-ruta-dinamica", isChecked.toString());
        });
    }

    function initOpcConfigSwitch2() {
        const container = document.getElementById("users-autofill-switch");
        const checkbox = document.getElementById("users-autofill-switch-checkbox");

        // Mostrar el contenedor si ConfigPlataforma es "Moodle"
        const configPlataforma = localStorage.getItem("ConfigPlataforma");
        if (configPlataforma === "Moodle") {
            container.style.display = "flex";

            const configRutaDinamic = localStorage.getItem("configUsersAutofill");
            checkbox.checked = configRutaDinamic === "true";

        } else {
            localStorage.setItem("configUsersAutofill", "false");
            container.style.display = "none";
        }

        // Establecer el estado inicial del checkbox desde configRutaDinamic


        // Escuchar cambios en el checkbox
        checkbox.addEventListener("change", () => {
            const isChecked = checkbox.checked;
            localStorage.setItem("configUsersAutofill", isChecked.toString());
        });
    }

    var css_248z$1 = "\r\n/* Estilo para el Contenedor Principal */\r\n#titulo-configruta {\r\n    margin-bottom: 5px;\r\n    margin-top: 0;\r\n    display: flex;\r\n    color: #34495e;\r\n    padding: 0; /* Opcional: padding interno */\r\n    font-family: 'Poppins', sans-serif;\r\n    font-size: 1.4rem; /* Tamaño de fuente de 1rem */\r\n}\r\n\r\n/* Estilo para Ruta y Ciclo (apilados verticalmente) */\r\n.ruta-ciclo-container {\r\n    display: flex;\r\n    flex-direction: column; /* Cambiado a columna para apilar */\r\n    align-items: flex-start; /* Alinea los elementos al inicio horizontalmente */\r\n    margin-bottom: 0; /* Espacio entre Ciclo y Mensaje Combinado */\r\n    color: #34495e;\r\n}\r\n\r\n/* Estilo para Ruta */\r\n.title-configruta-ruta {\r\n    padding: 0; /* Espacio vertical entre Ruta y Ciclo */\r\n    font-size: 14px; /* Tamaño de fuente para Ruta */\r\n    color: #333; /* Color del texto */\r\n    font-family: 'Poppins', sans-serif;\r\n    margin-bottom: -5px;\r\n}\r\n\r\n/* Estilo para Ciclo */\r\n.title-configruta-ciclo {\r\n    padding: 5px 0; /* Espacio vertical */\r\n    font-size: 14px; /* Tamaño de fuente para Ciclo */\r\n    font-family: 'Poppins', sans-serif;\r\n}\r\n\r\n.label-configruta {\r\n    font-weight: 600;\r\n    color: #34495e; /* Color más oscuro para destacar */\r\n    font-size: 14px; /* Ligero aumento en tamaño */\r\n}\r\n\r\n.ciclo-configruta,\r\n.ruta-configruta {\r\n    font-weight: 600;\r\n    color: #34495e; /* Color más oscuro para destacar */\r\n    font-size: 14px; /* Ligero aumento en tamaño */\r\n}\r\n\r\n/* Título estilizado */\r\n.title-optionmenu {\r\n    font-size: 22px;\r\n    font-weight: 700;\r\n    color: #34495e;\r\n    margin-bottom: 20px;\r\n    text-align: left;\r\n}\r\n\r\n/* Contenedores de elementos */\r\n.estilo-configruta-item {\r\n    margin-bottom: 10px;\r\n    font-family: 'Poppins', sans-serif;\r\n}\r\n\r\n/* Estilo para el Mensaje Combinado */\r\n.title-configruta-no-seleccionado {\r\n    display: none; /* Oculto por defecto */\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-top: 10px;\r\n    color: red; /* Color del mensaje */\r\n    font-family: 'Poppins', sans-serif;\r\n    font-size: 10px; /* Tamaño de fuente para el mensaje combinado */\r\n}\r\n\r\n/* Opcional: Mostrar el mensaje cuando ambos no están seleccionados */\r\n.no-seleccionado .title-configruta-no-seleccionado {\r\n    display: block;\r\n}\r\n\r\n/* Estilos para los selects */\r\n.estilo-configruta-select {\r\n    width: 100%; /* Asegurarse de que ocupe todo el ancho disponible */\r\n    padding: 12px;\r\n    font-size: 16px;\r\n    font-family: 'Poppins', sans-serif;\r\n    border: 1px solid #bdc3c7;\r\n    border-radius: 4px;\r\n    background-color: #ffffff; /* Fondo blanco */\r\n    color: #2c3e50; /* Texto oscuro para mayor legibilidad */\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Sombra suave */\r\n    transition: border 0.3s ease, box-shadow 0.3s ease; /* Transición suave */\r\n}\r\n\r\n/* Efecto hover y foco en los selects */\r\n.estilo-configruta-select:hover,\r\n.estilo-configruta-select:focus {\r\n    border-color: #0072c5;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\r\n    outline: none;\r\n}\r\n\r\n/* Botones estilizados */\r\n.estilo-configruta-boton {\r\n    width: 100%;\r\n    padding: 12px;\r\n    background-color: #0072c5;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 16px;\r\n    font-family: 'Poppins', sans-serif; /* Aplica la fuente Poppins */\r\n    cursor: pointer;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n\r\n/* Efecto hover en los botones */\r\n.estilo-configruta-boton:hover {\r\n    background-color: #002c67;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n}";
    styleInject(css_248z$1);

    // src/opc-config-ruta/script.js


    // Exporta las funciones que necesitas utilizar en otros módulos
    function opcionConfigRuta_html() {
        return `
    <div class="contenido-configruta">
        <h3 id="titulo-configruta">Configuración de Ruta</h3>

    <!-- Contenedor Principal -->
        <div id="ultima-ruta-configruta" class="estilo-configruta-title no-seleccionado">

            <!-- Contenedor para Ruta y Ciclo apilados verticalmente -->
            <div class="ruta-ciclo-container" style="display: none">

                <!-- Ruta -->
                <div id="ruta-configruta" class="title-configruta-ruta">
                    <span class="label-configruta">Ruta:</span>
                </div>

                <!-- Ciclo -->
                <div id="ciclo-configruta" class="title-configruta-ciclo">
                    <span class="label-configruta">Ciclo:</span>
                </div>

            </div>
        </div>

        <!-- Contenedor Selects Dinamicos -->
        <div id="selects-configruta">
            <!-- Aquí puedes agregar más contenido o elementos dinámicos -->
        </div>

        <button id="boton-guardar-configruta" class="estilo-configruta-boton guardar">Guardar Ruta</button>
    </div>
    `;
    } 

    // Función principal que ejecuta todo el proceso
    async function opcionConfigRuta_js() {
        comprobarRutaCiclo_ConfigRuta(); // Verifica y muestra la ruta y ciclo actuales
        await SelectUniversidad_ConfigRuta(); // Inicializa el select de Universidad

        // Añadir el evento para el botón guardar dentro de la función
        const botonGuardar = document.getElementById("boton-guardar-configruta");
        if (botonGuardar) {
            botonGuardar.addEventListener("click", guardarConfigRuta); // Asigna el manejador de evento
        } else {
            console.error('No se encontró el botón con id "boton-guardar-configruta"');
        }
    }

    // Verifica si la ruta y ciclo están configurados en localStorage
    function comprobarRutaCiclo_ConfigRuta() {
        const configRuta = localStorage.getItem('configRuta');
        const ciclo = localStorage.getItem('ciclo');

        console.log(`[opc-config-ruta] Valor de configRuta: ${configRuta}, Valor de ciclo: ${ciclo}`);

        // Verificar si configRuta y ciclo están definidos
        if (!configRuta || !ciclo) {
            console.log('[opc-config-ruta] configRuta o ciclo no están definidos.');

            // Desactivar autofill y autosave
            localStorage.setItem('autofill-autoquizfillapp', 'desactivado');
            localStorage.setItem('autosave-autoquizfillapp', 'desactivado');
            // Autofill y autosave desactivados en localStorage

            // Crear y mostrar el mensaje de advertencia en 'contenido-principal'
            const mensaje = document.createElement('div');
            mensaje.textContent = 'No ha seleccionado una ruta o ciclo';
            mensaje.style.color = 'red';
            mensaje.style.fontWeight = '500';
            mensaje.style.fontSize = '0.9em';
            mensaje.style.textAlign = 'left';
            mensaje.style.marginBottom = '10px';
            mensaje.id = 'mensaje-ruta-invalida';

            const ultimaRutaConfigruta = document.getElementById('ultima-ruta-configruta');

            if (ultimaRutaConfigruta && !document.getElementById('mensaje-ruta-invalida')) {
                ultimaRutaConfigruta.appendChild(mensaje);
                console.log('[opc-config-ruta] No ha seleccionado una ruta o ciclo.');
            }
        } else {
            const rutaCicloContainer = document.querySelector('.ruta-ciclo-container');

            // Mostrar los contenedores si configRuta y ciclo están definidos
            if (rutaCicloContainer) {
                rutaCicloContainer.style.display = 'block';
                console.log('[opc-config-ruta] Mostrando "rutaCicloContainer".');
            }

            // Eliminar el mensaje si existe
            const mensajeExistente = document.getElementById('mensaje-ruta-invalida');
            if (mensajeExistente) {
                mensajeExistente.remove();
            }

            // Establecer el valor de 'Ruta' y 'Ciclo' en el HTML correspondiente
            const rutaElemento = document.getElementById('ruta-configruta');
            const cicloElemento = document.getElementById('ciclo-configruta');

            if (rutaElemento && cicloElemento) {
                // Asignar los valores de configRuta y ciclo en los elementos del DOM
                rutaElemento.innerHTML = `<span class="ruta-configruta">Ruta:</span> ${configRuta}`;
                cicloElemento.innerHTML = `<span class="ciclo-configruta">Ciclo:</span> ${ciclo}`;
            }
        }
    }

    // Inicializa el select de Universidad y maneja su cambio
    async function SelectUniversidad_ConfigRuta() {
        const rutaFirebase = 'ConfigRuta/universidad';
        const databaseRef = ref(database, rutaFirebase); // Referencia a la ruta de Firebase
        const contenedorSelects = document.getElementById('selects-configruta');

        if (!contenedorSelects) {
            console.error('No se encontró el contenedor con id "selects-configruta"');
            return;
        }

        contenedorSelects.innerHTML = ''; // Limpia el contenedor

        try {
            const snapshot = await get(databaseRef); // Obtiene los datos de Firebase
            const data = snapshot.val();

            if (data) {
                // Crear etiqueta y select para Universidad
                const label = document.createElement('label');
                label.setAttribute('for', 'select-universidad-configruta');
                label.textContent = 'Universidad';
                label.className = 'estilo-configruta-item';

                const selectUniversidad = document.createElement('select');
                selectUniversidad.id = 'select-universidad-configruta';
                selectUniversidad.className = 'estilo-configruta-select';
                selectUniversidad.setAttribute('data-level', '1'); // Asigna nivel 1
                selectUniversidad.setAttribute('data-path', 'ConfigRuta/universidad');
                selectUniversidad.style.marginBottom = '10px';

                // Opción por defecto
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = 'Seleccione una opción';
                defaultOption.disabled = true;
                defaultOption.selected = true;
                selectUniversidad.appendChild(defaultOption);

                // Agregar opciones de Universidad
                for (const universidadKey in data) {
                    if (data.hasOwnProperty(universidadKey)) {
                        const option = document.createElement('option');
                        option.value = universidadKey;
                        option.textContent = typeof data[universidadKey] === 'string'
                            ? data[universidadKey]
                            : universidadKey;
                        selectUniversidad.appendChild(option);
                    }
                }

                // Evento al cambiar la selección de Universidad
                selectUniversidad.addEventListener('change', async (event) => {
                    const selectedUniversity = event.target.value;

                    // Remover la opción por defecto de la lista
                    if (defaultOption.parentNode) {
                        selectUniversidad.removeChild(defaultOption);
                    }

                    const currentLevel = parseInt(selectUniversidad.getAttribute('data-level'), 10);
                    const nextLevel = currentLevel + 1;

                    await limpiarSelectsDesdeNivel(nextLevel); // Limpia selects de niveles superiores
                    if (selectedUniversity) {
                        await cargarSelectsDinamicos(selectedUniversity, rutaFirebase, nextLevel, selectedUniversity); // Carga selects dinámicos
                    }
                    guardarEstadoSelects(); // Guarda el estado actual de los selects
                });

                contenedorSelects.appendChild(label); // Añade la etiqueta al contenedor
                contenedorSelects.appendChild(selectUniversidad); // Añade el select al contenedor

                // Llama a la función para restaurar el estado de los selects si existe en localStorage
                await manejarSeleccionesSecuenciales();
            }
        } catch (error) {
            console.error('Error al obtener datos de Firebase:', error);
            const mensajeError = document.createElement('p');
            mensajeError.textContent = 'Hubo un error al cargar las configuraciones.';
            contenedorSelects.appendChild(mensajeError);
        }
    }

    // Carga selects dinámicos basados en la selección anterior
    async function cargarSelectsDinamicos(selectedKey, rutaPadre, nivel, universidadSeleccionada) {
        let rutaActual;
        if (nivel === 2) {
            rutaActual = `${rutaPadre}/${selectedKey}`;
        } else {
            rutaActual = `ConfigRuta/opciones/${universidadSeleccionada}`;
        }

        const databaseRef = ref(database, rutaActual);

        try {
            const snapshot = await get(databaseRef);
            const data = snapshot.val();
            let keysPrincipales = [];

            // Solo buscamos claves si el valor devuelto es un objeto
            if (data && typeof data === 'object') {
                if (nivel === 2) {
                    keysPrincipales = Object.keys(data);
                } else {
                    keysPrincipales = Object.keys(data).filter(key => key.startsWith(selectedKey));
                }
            }

            // Verificar si hay claves principales que generen nuevos selects
            if (keysPrincipales.length > 0) {
                await limpiarSelectsDesdeNivel(nivel + 1);
                for (let keyPrincipal of keysPrincipales) {
                    await cargarOpciones(keyPrincipal, universidadSeleccionada, nivel + 1);
                }
            } else {
                // console.log("No se encontraron opciones para generar nuevos selects.");
            }
        } catch (error) {
            console.error(`Error al obtener datos de Firebase para '${rutaActual}':`, error);
        }
    }

    // Carga opciones para un select dinámico específico
    async function cargarOpciones(keyPrincipal, universidadSeleccionada, nivel) {
        const rutaOpciones = `ConfigRuta/opciones/${universidadSeleccionada}/${keyPrincipal}`;
        const databaseRef = ref(database, rutaOpciones);
        const contenedorSelects = document.getElementById('selects-configruta');

        try {
            const snapshot = await get(databaseRef);
            const opciones = snapshot.val();

            if (opciones && typeof opciones === 'object' && Object.keys(opciones).length > 0) {
                const div = document.createElement('div');
                div.className = 'estilo-configruta-item';
                div.setAttribute('data-path', rutaOpciones);

                // Crear etiqueta para el select dinámico
                const label = document.createElement('label');
                label.setAttribute('for', `select-${keyPrincipal}`);
                label.textContent = formatearLabelTexto(keyPrincipal);
                label.className = 'estilo-configruta-item';

                // Crear el select dinámico
                const selectDinamico = document.createElement('select');
                selectDinamico.id = `select-${keyPrincipal}`;
                selectDinamico.className = 'estilo-configruta-select';
                selectDinamico.setAttribute('data-level', nivel); // Asigna el nivel actual
                selectDinamico.setAttribute('data-path', rutaOpciones);

                // Opción por defecto
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = 'Seleccione una opción';
                defaultOption.disabled = true;
                defaultOption.selected = true;
                selectDinamico.appendChild(defaultOption);

                // Agregar opciones al select dinámico
                for (const opcionKey in opciones) {
                    if (opciones.hasOwnProperty(opcionKey)) {
                        const option = document.createElement('option');
                        option.value = opcionKey;
                        option.textContent = opciones[opcionKey] ? opciones[opcionKey] : opcionKey;
                        selectDinamico.appendChild(option);
                    }
                }

                // Evento al cambiar la selección del select dinámico
                selectDinamico.addEventListener('change', async (event) => {
                    const selectedOption = event.target.value;

                    // Remover la opción por defecto de la lista una vez seleccionada otra opción
                    if (defaultOption.parentNode) {
                        selectDinamico.removeChild(defaultOption);
                    }

                    const currentLevel = parseInt(selectDinamico.getAttribute('data-level'), 10);
                    const nextLevel = currentLevel + 1;

                    await limpiarSelectsDesdeNivel(nextLevel); // Limpia selects de niveles superiores
                    if (selectedOption) {
                        await cargarSelectsDinamicos(selectedOption, `ConfigRuta/opciones/${universidadSeleccionada}`, nextLevel, universidadSeleccionada); // Carga más selects si es necesario
                    }
                    guardarEstadoSelects(); // Guarda el estado actual de los selects
                });

                div.appendChild(label); // Añade la etiqueta al div
                div.appendChild(selectDinamico); // Añade el select al div
                contenedorSelects.appendChild(div); // Añade el div al contenedor principal
            }
        } catch (error) {
            console.error(`Error al obtener opciones de Firebase para '${rutaOpciones}':`, error);
        }
    }

    // Formatea el texto de la etiqueta a partir de la clave
    function formatearLabelTexto(key) {
        const partes = key.split('-').slice(1);
        return partes.map(palabra => palabra.charAt(0).toUpperCase() + palabra.slice(1)).join(' ');
    }

    // Guarda el estado actual de los selects en localStorage
    function guardarEstadoSelects() {
        const contenedorSelects = document.getElementById('selects-configruta');
        const selects = Array.from(contenedorSelects.querySelectorAll('select'));
        const estado = selects.map(select => ({
            nivel: select.getAttribute('data-level'),
            id: select.id,
            ruta: select.getAttribute('data-path'),
            seleccion: select.value  // Guarda el valor seleccionado actual
        }));
        // console.log("Guardando estado en localStorage:", estado);
        localStorage.setItem('estadoSelects', JSON.stringify(estado));
    }

    // Maneja la selección secuencial de opciones basadas en el estado guardado
    async function manejarSeleccionesSecuenciales() {
        // Obtiene el estado de los selects desde localStorage y lo parsea de JSON a objeto
        const estadoSelects = JSON.parse(localStorage.getItem('estadoSelects'));

        // Si no hay datos o el arreglo está vacío, registra un mensaje y termina la función
        if (!estadoSelects || estadoSelects.length === 0) {
            console.log("[opc-config-ruta] No existen datos para las listas desplegables para \"opc-config-ruta\"");
            return;
        }

        console.log("[opc-config-ruta] Existen datos para las listas desplegables para \"opc-config-ruta\", restableciendo...");
        // Ordenar los selects por nivel para asegurar que se procesen en orden
        estadoSelects.sort((a, b) => parseInt(a.nivel) - parseInt(b.nivel));

        // Itera sobre cada objeto selectData en el arreglo estadoSelects
        for (let selectData of estadoSelects) {
            const { id, seleccion, nivel } = selectData; // Desestructura el ID y la selección del objeto
            // console.log(`Procesando ${id} con valor: ${seleccion} en nivel ${nivel}`); // Registra el proceso actual
            // Espera a que se seleccione la opción correspondiente en el <select>
            await esperarYSeleccionarOpcion(id, seleccion);
        }
    }

    // Espera hasta que un select específico esté disponible en el DOM y selecciona una opción
    function esperarYSeleccionarOpcion(selectId, valorSeleccionado) {
        return new Promise((resolve) => {
            // Configura un intervalo que se ejecuta cada 100 ms
            const intervalo = setInterval(() => {
                // Intenta obtener el elemento <select> por su ID
                const select = document.getElementById(selectId);
                if (select) { // Si el <select> existe en el DOM
                    clearInterval(intervalo); // Detiene el intervalo
                    // Busca la opción dentro del <select> que coincide con el valor proporcionado
                    const option = Array.from(select.options).find(option => option.value === valorSeleccionado);
                    if (option) { // Si se encuentra la opción
                        select.value = option.value; // Establece el valor seleccionado del <select>
                        //console.log(`Opción seleccionada en ${selectId}: ${option.textContent.trim()}`); // Registra en la consola
                        // Simula el evento 'change' para que cualquier listener asociado responda a la selección
                        select.dispatchEvent(new Event('change'));
                    }
                    resolve(); // Resuelve la promesa una vez completada la selección
                }
            }, 100); // Intervalo de 100 milisegundos para reintentar la búsqueda del <select>
        });
    }

    // Limpia (elimina) los selects a partir de un nivel especificado
    async function limpiarSelectsDesdeNivel(nivelInicio) {
        //  console.log(`Limpiando selects desde nivel ${nivelInicio} en adelante`); // Registra la acción de limpieza
        // Obtiene el contenedor que contiene todos los elementos <select> relacionados con la configuración de ruta
        const contenedorSelects = document.getElementById('selects-configruta');
        // Obtiene una lista de todos los elementos <select> dentro del contenedor
        const selects = Array.from(contenedorSelects.querySelectorAll('select'));

        // Itera sobre cada <select> encontrado
        selects.forEach(select => {
            // Obtiene el nivel del <select> a partir del atributo 'data-level' y lo convierte a entero
            const selectNivel = parseInt(select.getAttribute('data-level'), 10);
            // Si el nivel del <select> es mayor o igual al nivel de inicio para limpiar
            if (selectNivel >= nivelInicio) {
                const parentDiv = select.parentElement; // Obtiene el elemento padre del <select>
                if (parentDiv) { // Si existe el elemento padre
                    const label = parentDiv.querySelector('label'); // Busca una etiqueta <label> dentro del padre
                    if (label) { // Si se encuentra la etiqueta <label>
                        label.remove(); // Elimina la etiqueta <label> del DOM
                    }
                    select.remove(); // Elimina el <select> del DOM
                }
            }
        });
    }

    // Guarda la configuración de ruta y ciclo en localStorage
    function guardarConfigRuta() {
        guardarEstadoSelects(); // Guarda el estado actual de los selects

        // Obtener el array de objetos desde localStorage
        const estadoSelects = JSON.parse(localStorage.getItem("estadoSelects")) || [];

        // Verificar si alguna selección está vacía
        const algunaSeleccionVacia = estadoSelects.some(item => item.seleccion === "");
        if (algunaSeleccionVacia) {
            alert("No se puede guardar ruta, debido a que una opción no está seleccionada.");
            return; // Detener la función si alguna selección está vacía
        }

        // Inicializar las variables para configRuta y ciclo
        let configRuta = "";
        let ciclo = "";

        // Recorrer cada elemento del array
        estadoSelects.forEach((item) => {
            // Realizar split en el valor de seleccion si contiene ":"
            let seleccion = item.seleccion.includes(":") ? item.seleccion.split(":").slice(1).join(":") : item.seleccion;

            // Si el id contiene la palabra "ciclo", asignar el valor de selección a la variable ciclo
            if (item.id.includes("ciclo")) {
                ciclo = seleccion;
            } else {
                // Para los demás elementos, agregar selección a configRuta con "/"
                configRuta += `${seleccion}/`;
            }
        });

        // Quitar el último "/" de configRuta
        configRuta = configRuta.slice(0, -1);

        // Guardar configRuta y ciclo en localStorage
        localStorage.setItem("configRuta", configRuta);
        localStorage.setItem("ciclo", ciclo);


        comprobarRutaCiclo_ConfigRuta(); // Verifica y muestra la nueva ruta y ciclo
    }

    // Exportación nombrada de la función para que pueda ser importada en otro script
    function panel_AutoFillQuizApp(barraLateral) {
      console.log('[AutoFillQuiz-App] Creando Panel Principal.');

      const contenedor = document.createElement('div');
      contenedor.id = 'panel-autofillquizapp';
      contenedor.classList.add('panel-autofillquizapp');
      contenedor.style.display = 'none';

      const panelHeader = document.createElement('div');
      panelHeader.classList.add('panel-header');

      const botonMenu = document.createElement('button');
      botonMenu.id = 'boton-hamburguesa-autofillquizapp';
      botonMenu.classList.add('boton-hamburguesa-autofillquizapp');
      botonMenu.innerHTML = '<i class="fa-solid fa-bars"></i>';

      const tituloOpcion = document.createElement('span');
      tituloOpcion.id = 'titulo-autofillquizapp';
      tituloOpcion.classList.add('titulo-autofillquizapp');
      tituloOpcion.innerHTML = 'AutoFillQuiz App';

      const contenedorContenido = document.createElement('div');
      contenedorContenido.id = 'contenido-principal';
      contenedorContenido.classList.add('contenido-principal-autofillquizapp');

      // Obtener los valores de localStorage
      const configPlataforma = localStorage.getItem('ConfigPlataforma');
      const ultimoHtml = localStorage.getItem('ultimoHtml');
      const ultimoJs = localStorage.getItem('ultimoJs');

      // Función para cargar contenido por defecto (opcionConfig)
      function cargarOpcionConfig() {
        console.log('[AutoFillQuiz-App] Iniciando Configuración.');
        localStorage.setItem('ultimoHtml', 'opcionConfig_html');
        localStorage.setItem('ultimoJs', 'opcionConfig_js');

        contenedorContenido.innerHTML = opcionConfig_html();

        setTimeout(() => {
          if (typeof opcionConfig_js === 'function') {
            opcionConfig_js();
          } else {
            console.warn('La función opcionConfig_js no está definida.');
          }
        }, 100);
      }

      // Función para cargar AutoFillMoodle por defecto
      function cargarAutoFillMoodle() {
        console.log('[main-panel] Cargando AutoFill Moodle.');
        
        {
          try {
            contenedorContenido.innerHTML = opcion_AutoFillAutoSave_Moodle_html();
            console.log('[main-panel] HTML cargado exitosamente.');
          } catch (error) {
            console.error('[main-panel] Error al ejecutar la función HTML:', error);
            return;
          }
        }
        
        // Ejecutar la función JS correspondiente
        setTimeout(() => {
          if (typeof opcion_AutoFillAutoSave_Moodle_js === 'function') {
            try {
              opcion_AutoFillAutoSave_Moodle_js();
              // console.log('[main-panel] JS ejecutada exitosamente.');
            } catch (error) {
              console.error('[main-panel] Error al ejecutar la función JS:', error);
            }
          } else {
            console.warn('[main-panel] La función JS "opcion_AutoFillAutoSave_Moodle_js" no está definida.');
          }
        }, 100);
      }

      // Función para cargar las últimas funciones almacenadas
      function cargarUltimasFunciones() {

        // Obtener las últimas funciones almacenadas en localStorage
        const ultimoHtml = localStorage.getItem('ultimoHtml');
        const ultimoJs = localStorage.getItem('ultimoJs');

        // Verificar que las variables se hayan obtenido correctamente
        if (!ultimoHtml || !ultimoJs) {
          console.warn('[AutoQuizFill] No se encontraron las últimas funciones en localStorage.');
          return;
        }

        // Mapeo de las posibles funciones HTML y JS
        const funcionesHtml = {
          'opcionConfigRuta_html': opcionConfigRuta_html,
          'opcion_AutoFillAutoSave_Moodle_html': opcion_AutoFillAutoSave_Moodle_html, 
          'opcionAutoFillAltissia_html': opcionAutoFillAltissia_html, 
          'opcionConfig_html': opcionConfig_html  
        };

        const funcionesJs = {
          'opcionConfigRuta_js': opcionConfigRuta_js,
          'opcion_AutoFillAutoSave_Moodle_js': opcion_AutoFillAutoSave_Moodle_js, 
          'opcionAutoFillAltissia_js': opcionAutoFillAltissia_js$1,  
          'opcionConfig_js': opcionConfig_js 
        };

        // Obtener y establecer el HTML correspondiente
        const funcionHtml = funcionesHtml[ultimoHtml];
        // console.log(`[AutoQuizFill] Función HTML seleccionada: "${ultimoHtml}"`);

        let opcionfuncionHtml = `${ultimoJs}_aplit`.split('_')[0];
        console.log(`[main-panel] Iniciando: "${opcionfuncionHtml}"`);


        if (funcionHtml) {
          try {
            contenedorContenido.innerHTML = funcionHtml();
            console.log('[main-panel] HTML cargado exitosamente.');
          } catch (error) {
            console.error('[main-panel] Error al ejecutar la función HTML:', error);
            return;
          }
        } else {
          console.error(`[main-panel] La función HTML "${opcionfuncionHtml}" no está definida.`);
          return;
        }

        // Ejecutar la función JS correspondiente
        setTimeout(() => {
          const funcionJs = funcionesJs[ultimoJs];
          if (typeof funcionJs === 'function') {
            try {
              funcionJs();
              // console.log('[main-panel] JS ejecutada exitosamente.');
            } catch (error) {
              console.error('[main-panel] Error al ejecutar la función JS:', error);
            }
          } else {
            console.warn(`[main-panel] La función JS "${ultimoJs}" no está definida.`);
          }
        }, 100);
      }


      // Lógica principal para determinar qué contenido cargar
      if (configPlataforma && ultimoHtml && ultimoJs) {
        // Caso 1: Existe ConfigPlataforma y existen ultimoHtml y ultimoJs
        cargarUltimasFunciones();

      } else if (!configPlataforma) {
        if (ultimoHtml && ultimoJs) {
          // Caso 2: No existe ConfigPlataforma pero existen ultimoHtml y ultimoJs
          // Según la descripción, también se carga opcionConfig
          cargarOpcionConfig();
        } else {
          // Caso 4: No existe ConfigPlataforma y no existen ultimoHtml y ultimoJs
          cargarOpcionConfig();
        }
      } else {

        if (configPlataforma === "Moodle") {
          cargarAutoFillMoodle(); // Ejecuta la función específica para Moodle
        } else if (configPlataforma === "Altissia") ; else {
          console.log("Plataforma no soportada");
        }
      } 


      panelHeader.appendChild(botonMenu);
      panelHeader.appendChild(tituloOpcion);
      contenedor.appendChild(panelHeader);
      contenedor.appendChild(contenedorContenido);
      barraLateral.appendChild(contenedor);

      botonMenu.addEventListener('click', () => {
        const menu = document.getElementById('menu-autofillquizapp');
        if (menu) {
          menu.style.display = 'flex';
        } else {
          console.error("El menú no se encontró en el DOM.");
        }
      });

      return contenedor;
    }

    var css_248z = "/* Estilos para el menú lateral */\r\n#menu-autofillquizapp {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0; /* Posicionar el menú a la izquierda */\r\n    min-width: 350px; /* Ancho de 350px */\r\n    max-width: 500px;\r\n    height: 100vh; /* Ocupar toda la altura de la pantalla */\r\n    background-color: #2c3e50; /* Fondo oscuro elegante */\r\n    color: #ecf0f1; /* Texto claro */\r\n    z-index: 10000;\r\n    display: none; /* Oculto por defecto */\r\n    flex-direction: column;\r\n    padding-top: 20px;\r\n    border-radius: 0 5px 5px 0; /* Borde redondeado en los lados derecho */\r\n    overflow-y: hidden; /* Ocultar barra de desplazamiento vertical */\r\n    box-shadow: 2px 0 12px rgba(0, 0, 0, 0.2); /* Sombra suave */\r\n    font-family: 'Poppins', sans-serif; /* Aplicar Poppins a todo el menú */\r\n}\r\n\r\n\r\n/* Contenedor del botón cerrar y la palabra Menú */\r\n.contenedor-header-menu {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between; /* Alinear título a la izquierda y botón a la derecha */\r\n    padding: 10px;\r\n    position: relative;\r\n}\r\n\r\n/* Botón para cerrar el menú, alineado a la derecha */\r\n#boton-cerrar-menu-autofillquizapp {\r\n    background-color: #e74c3c; /* Fondo rojo típico de los botones de cerrar */\r\n    color: #fff;\r\n    border: none;\r\n    font-size: 18px;\r\n    cursor: pointer;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 5px;\r\n    position: absolute;\r\n    right: 25px; /* Posicionar a la derecha */\r\n}\r\n\r\n#boton-cerrar-menu-autofillquizapp:hover {\r\n    background-color: #c0392b; /* Cambio de color en hover */\r\n}\r\n\r\n/* Título \"Menú\", alineado a la izquierda */\r\n.titulo-menu {\r\n    font-size: 22px;\r\n    font-weight: bold;\r\n    color: #ecf0f1;\r\n    font-family: 'Poppins', sans-serif; /* Aplicar Poppins al título */\r\n    text-align: left;\r\n    flex-grow: 1; /* Ocupa el espacio disponible */\r\n    margin-left: 10px; /* Separación desde el borde izquierdo */\r\n}\r\n\r\n/* Contenedor de las opciones */\r\n.contenedor-opciones-menu {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-y: auto; /* Activar desplazamiento vertical */\r\n    scrollbar-width: thin; /* Barra delgada para navegadores compatibles con Firefox */\r\n    scrollbar-color: transparent transparent; /* Barra y pista transparentes */\r\n}\r\n\r\n/* Estilo personalizado para la barra de desplazamiento en navegadores basados en Webkit (Chrome, Edge, Safari) */\r\n.contenedor-opciones-menu::-webkit-scrollbar {\r\n    width: 6px; /* Ancho de la barra de desplazamiento */\r\n}\r\n\r\n.contenedor-opciones-menu::-webkit-scrollbar-thumb {\r\n    background-color: rgba(255, 255, 255, 0.3); /* Barra de desplazamiento semitransparente */\r\n    border-radius: 10px; /* Borde redondeado */\r\n}\r\n\r\n.contenedor-opciones-menu::-webkit-scrollbar-track {\r\n    background: transparent; /* Pista transparente */\r\n}\r\n\r\n\r\n/* Opciones del menú */\r\n.opcion-menu-autofillquizapp {\r\n    width: 100%;\r\n    padding: 15px 20px;\r\n    background: none;\r\n    border: none;\r\n    color: #ecf0f1;\r\n    font-size: 18px;\r\n    text-align: left;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    font-family: 'Poppins', sans-serif; /* Aplicar Poppins a las opciones */\r\n    transition: background-color 0.3s ease, padding-left 0.3s ease;\r\n}\r\n\r\n.opcion-menu-autofillquizapp:hover {\r\n    background-color: rgba(255, 255, 255, 0.1); /* Efecto hover */\r\n    padding-left: 30px; /* Animación de desplazamiento */\r\n}\r\n\r\n.opcion-menu-autofillquizapp i {\r\n    margin-right: 15px; /* Espacio entre el icono y el texto */\r\n}\r\n\r\n/* Contenedor para el botón de cerrar sesión */\r\n.contenedor-cerrar-sesion {\r\n    margin-top: auto; /* Poner el botón de cerrar sesión al final del menú */\r\n    padding: 20px;\r\n}\r\n\r\n/* Botón para cerrar sesión */\r\n.boton-cerrar-sesion {\r\n    width: 100%;\r\n    padding: 12px;\r\n    background-color: #e74c3c;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n    transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n    font-family: 'Poppins', sans-serif; /* Aplicar Poppins al botón de cerrar sesión */\r\n}\r\n\r\n.boton-cerrar-sesion:hover {\r\n    background-color: #c0392b;\r\n    box-shadow: 0 4px 10px rgba(0,0,0,0.2);\r\n}\r\n";
    styleInject(css_248z);

    function menu_AutoFillQuizApp() {
        console.log('[AutoFillQuiz-App] Creando Menú Principal.');

        // Crear el contenedor del menú lateral
        const menu = document.createElement('div');
        menu.id = 'menu-autofillquizapp';
        menu.classList.add('menu-autofillquizapp');
        menu.style.display = 'none'; // Oculto por defecto

        // Crear el contenedor para el botón de cerrar y la palabra Menú
        const contenedorHeader = document.createElement('div');
        contenedorHeader.classList.add('contenedor-header-menu');

        // Título "Menú"
        const tituloMenu = document.createElement('span');
        tituloMenu.classList.add('titulo-menu');
        tituloMenu.innerText = 'Menú';

        // Botón para cerrar el menú
        const botonCerrar = document.createElement('button');
        botonCerrar.id = 'boton-cerrar-menu-autofillquizapp';
        botonCerrar.classList.add('boton-cerrar-menu-autofillquizapp');
        botonCerrar.innerHTML = '<i class="fa-solid fa-times"></i>'; // Icono de cierre

        // Añadir evento para cerrar el menú cuando se haga clic en el botón
        botonCerrar.addEventListener('click', () => {
            menu.style.display = 'none'; // Ocultar menú
        });

        // Añadir el botón de cerrar y el título al contenedor de cabecera
        contenedorHeader.appendChild(botonCerrar);
        contenedorHeader.appendChild(tituloMenu);

        // Crear el contenedor de las opciones del menú
        const contenedorOpciones = document.createElement('div');
        contenedorOpciones.classList.add('contenedor-opciones-menu');

        // Crear las opciones del menú, incluyendo la nueva opción "Gestion de Usuarios"
        const opciones = ['AutoFill & AutoSave', 'Configuración de Ruta', 'Generar PDF de preguntas', 'Gestión de Usuarios', 'Configuración'];
        opciones.forEach(opcion => {
            const botonOpcion = document.createElement('button');
            botonOpcion.id = `opcion-${opcion.toLowerCase().replace(/ /g, '-')}-autofillquizapp`;
            botonOpcion.classList.add('opcion-menu-autofillquizapp');

            // Asignar el icono correspondiente
            let icono;
            switch (opcion) {
                case 'AutoFill & AutoSave':
                    icono = 'edit';
                    break;
                case 'Configuración de Ruta':
                    icono = 'database';
                    break;
                case 'Generar PDF de preguntas':
                    icono = 'file-pdf';
                    break;
                case 'Gestión de Usuarios':
                    icono = 'id-card';
                    break;
                case 'Configuración':
                    icono = 'cog';
                    break;
                default:
                    icono = 'circle';
            }

            botonOpcion.innerHTML = `<i class="fa-solid fa-${icono}"></i> ${opcion}`; // Icono según la opción

            // Añadir evento para manejar la selección de una opción del menú
            botonOpcion.addEventListener('click', async () => { // Convertir la función en asíncrona
                const contenedorContenido = document.getElementById('contenido-principal');
                if (contenedorContenido) {
                    // Mostrar el contenido y ejecutar el script correspondiente a la opción seleccionada
                    if (opcion === 'AutoFill & AutoSave') {
                        // Obtener la configuración de la plataforma desde localStorage
                        const configPlataforma = localStorage.getItem('ConfigPlataforma');
                    
                        // Verificar la plataforma configurada y ejecutar el código correspondiente
                        if (configPlataforma === 'Moodle') {
                            localStorage.setItem('ultimoHtml', 'opcion_AutoFillAutoSave_Moodle_html');
                            localStorage.setItem('ultimoJs', 'opcion_AutoFillAutoSave_Moodle_js');
                    
                            contenedorContenido.innerHTML = opcion_AutoFillAutoSave_Moodle_html(); // Mostrar contenido de AutoFill & AutoSavel para Moodle
                    
                            try {
                                await opcion_AutoFillAutoSave_Moodle_js(); // Ejecutar el script de AutoFill & AutoSave para Moodle y esperar su finalización
                            } catch (error) {
                                console.error('Error al ejecutar opcion_AutoFillAutoSave_Moodle_js:', error);
                            }
                        } else if (configPlataforma === 'Altissia') {
                            localStorage.setItem('ultimoHtml', 'opcionAutoFillAltissia_html');
                            localStorage.setItem('ultimoJs', 'opcionAutoFillAltissia_js');
                    
                            contenedorContenido.innerHTML = opcionAutoFillAltissia_html(); // Mostrar contenido de AutoFill para Altissia
                    
                            try {
                                await opcionAutoFillAltissia_js(); // Ejecutar el script de AutoFill para Altissia y esperar su finalización
                            } catch (error) {
                                console.error('Error al ejecutar opcionAutoFillAltissia_js:', error);
                            }
                        } else {
                            console.warn('Plataforma desconocida en ConfigPlataforma:', configPlataforma);
                            // Opcional: manejar otras plataformas o establecer un comportamiento por defecto
                        }
                    }
                     else if (opcion === 'Configuración de Ruta') {
                        localStorage.setItem('ultimoHtml', 'opcionConfigRuta_html');
                        localStorage.setItem('ultimoJs', 'opcionConfigRuta_js');

                        contenedorContenido.innerHTML = opcionConfigRuta_html(); // Mostrar contenido de Configuración de Ruta
                        opcionConfigRuta_js(); // Ejecutar el script de Configuración de Ruta
                    } else if (opcion === 'Generar PDF de preguntas') {
                        localStorage.setItem('ultimoHtml', 'opcionGenerarPDF_html');
                        localStorage.setItem('ultimoJs', 'opcionGenerarPDF_js');

                        contenedorContenido.innerHTML = opcionGenerarPDF_html(); // Mostrar contenido de Generar PDF
                        opcionGenerarPDF_js(); // Ejecutar el script para generar PDF
                    } else if (opcion === 'Gestión de Usuarios') {
                        localStorage.setItem('ultimoHtml', 'opcionGestionUsuarios_html');
                        localStorage.setItem('ultimoJs', 'opcionGestionUsuarios_js');

                        contenedorContenido.innerHTML = opcionGestionUsuarios_html(); // Mostrar contenido de Gestión de Usuarios
                        opcionGestionUsuarios_js(); // Ejecutar el script para Gestión de Usuarios

                    } else if (opcion === 'Configuración') {
                        localStorage.setItem('ultimoHtml', 'opcionConfig_html');
                        localStorage.setItem('ultimoJs', 'opcionConfig_js');

                        contenedorContenido.innerHTML = opcionConfig_html(); // Mostrar contenido de Gestión de Usuarios
                        opcionConfig_js(); // Ejecutar el script para Gestión de Usuarios
                    }
                    menu.style.display = 'none'; // Ocultar el menú después de seleccionar una opción
                }
            });

            // Añadir el botón de opción al contenedor de opciones
            contenedorOpciones.appendChild(botonOpcion);
        });

        // Crear el contenedor para el botón de cerrar sesión
        const contenedorCerrarSesion = document.createElement('div');
        contenedorCerrarSesion.classList.add('contenedor-cerrar-sesion');

        // Botón para cerrar sesión
        const botonCerrarSesion = document.createElement('button');
        botonCerrarSesion.id = 'boton-cerrar-sesion';
        botonCerrarSesion.classList.add('boton-cerrar-sesion');
        botonCerrarSesion.innerText = 'Cerrar Sesión';

        // Asignar la función de cerrar sesión y ocultar el menú
        botonCerrarSesion.addEventListener('click', () => {
            cerrarSesionAutoQuiz(); // Llama a la función para cerrar sesión
            menu.style.display = 'none'; // Ocultar el menú después de cerrar sesión
        });

        // Añadir el botón de cerrar sesión al contenedor
        contenedorCerrarSesion.appendChild(botonCerrarSesion);

        // Añadir el contenedor de cabecera, opciones y el botón de cerrar sesión al menú
        menu.appendChild(contenedorHeader);
        menu.appendChild(contenedorOpciones);
        menu.appendChild(contenedorCerrarSesion);

        // Retornar el menú para ser usado en otro lugar
        return menu;
    }

    /* 
      Este script maneja la autenticación (inicio/cierre de sesión), 
      verifica el estado del usuario y controla la UI para AutoQuizFill.
    */

    console.log('[AutoFillQuiz-App] Iniciando Autenticación.');

    const ID_BARRA_LATERAL = 'barra-lateral-autoquizfillapp';
    const ID_LOGIN_CONTENEDOR = 'login-autoquizfillapp';
    const ID_PANEL_CONTENEDOR = 'panel-autofillquizapp';
    const ID_FORM_FAKE = 'fake-form';

    let currentOriginLocal = null; // Variable para almacenar el origen local

    /**
     * Función para alternar la visibilidad de un elemento por su ID.
    */
    function toggleElementById(elementId, show) {
      const el = document.getElementById(elementId);
      if (el) {
        el.style.display = show ? 'block' : 'none';
      } else {
        console.warn(`[AutoQuizFill] toggleElementById: No se encontró el elemento con ID "${elementId}".`);
      }
    }

    /**
     * Función para mostrar errores tanto en la consola como en alertas.
     */
    function mostrarError(mensaje) {
      alert(`Error en inicio de sesión: ${mensaje}`);
    }

    /**
     * Crea y configura el formulario de login en la barra lateral.
     */
    function crearFormularioLogin(barraLateral) {
      const loginAutoFillQuizApp = document.createElement('div');
      loginAutoFillQuizApp.id = ID_LOGIN_CONTENEDOR;
      loginAutoFillQuizApp.style.display = 'none';

      loginAutoFillQuizApp.innerHTML = `
    <div class="contenedor-login-autoquizfillapp">
      <div class="contenedor-titulo-autoquizfillapp">
        <h2 class="title-login-autoquizfillapp">AutoQuizFill App</h2>
      </div>
      <div class="contenedor-inputs-autoquizfillapp">
        <input 
          type="email" 
          id="login-correo-autoquizfillapp" 
          class="login-entrada-autoquizfillapp" 
          placeholder="Correo electrónico"
          autocomplete="email" 
          form="${ID_FORM_FAKE}" 
          required
        >
        <input 
          type="password" 
          id="login-contrasena-autoquizfillapp" 
          class="login-entrada-autoquizfillapp" 
          placeholder="Contraseña"
          autocomplete="current-password" 
          form="${ID_FORM_FAKE}" 
          required
        >
      </div>
      <div class="contenedor-boton-autoquizfillapp">
        <button 
          id="login-boton-autoquizfillapp" 
          class="login-boton-autoquizfillapp"
        >
          Iniciar sesión
        </button>
      </div>
    </div>
    <form id="${ID_FORM_FAKE}" style="display: none;"></form>
  `;

      barraLateral.appendChild(loginAutoFillQuizApp);

      const inputCorreo = document.getElementById('login-correo-autoquizfillapp');
      const inputContrasena = document.getElementById('login-contrasena-autoquizfillapp');
      const botonLogin = document.getElementById('login-boton-autoquizfillapp');

      if (inputCorreo && inputContrasena && botonLogin) {

        const iniciarSesionHandler = () => {
          iniciarSesionAutoQuiz(inputCorreo.value, inputContrasena.value);
        };

        inputContrasena.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            iniciarSesionHandler();
          }
        });

        botonLogin.addEventListener('click', () => {
          iniciarSesionHandler();
        });
      } else {
        console.error('[AutoQuizFill] CrearFormularioLogin: No se encontraron todos los elementos del formulario de login.');
      }
    }

    /**
     * Maneja el inicio de sesión del usuario.
    */
    function iniciarSesionAutoQuiz(correo, contrasena) {
      signInWithEmailAndPassword(autenticacion, correo, contrasena)
        .then((usuarioCredential) => {
          const usuario = usuarioCredential.user;
          configurarSesion(usuario.uid);
          mostrarPanel();
        })
        .catch((error) => {
          mostrarError(error.message);
        });
    }

    /**
     * Configura la sesión del usuario en la base de datos y establece un listener para cambios.
     */
    function configurarSesion(uid) {
      const currentOrigin = window.location.origin; // Obtiene el origen actual del dominio
      localStorage.setItem('currentOrigin', currentOrigin); // Almacena el currentOrigin en localStorage
      currentOriginLocal = currentOrigin;

      // Guarda el currentOrigin en la base de datos
      const originRef = ref(database, `users/${uid}/currentOrigin`);
      set(originRef, currentOrigin)
        .then(() => {
          // Escucha cambios en el currentOrigin
          onValue(originRef, (snapshot) => {
            const dbOrigin = snapshot.val();
            if (dbOrigin !== currentOriginLocal) {
              cerrarSesionAutoQuiz$1();
            }
          });
        })
        .catch((error) => {
          console.error(`[AutoQuizFill] ConfigurarSesion: Error al actualizar currentOrigin - ${error.code}: ${error.message}`);
        });
    }

    /**
     * Cierra la sesión del usuario y limpia la sesión en la base de datos.
     */
    function cerrarSesionAutoQuiz$1() {
      signOut(autenticacion)
        .then(() => {
          // Eliminar el currentOrigin de la base de datos al cerrar sesión
          const usuario = autenticacion.currentUser;
          if (usuario) {
            const originRef = ref(database, `users/${usuario.uid}/currentOrigin`);
            remove(originRef)
              .then(() => {
                // Limpiar el currentOrigin de localStorage
                localStorage.removeItem('currentOrigin');
              })
              .catch((error) => {
                console.error(`[AutoQuizFill] CerrarSesionAutoQuiz: Error al eliminar currentOrigin - ${error.code}: ${error.message}`);
              });
          } else {
            // Si no hay usuario, simplemente limpiar el currentOrigin
            localStorage.removeItem('currentOrigin');
          }
          mostrarLogin();
        })
        .catch((error) => {
          console.error(`[AutoQuizFill] CerrarSesionAutoQuiz: Error al cerrar sesión - ${error.code}: ${error.message}`);
        });
    }

    /**
     * Muestra el formulario de login y oculta el panel principal.
     */
    function mostrarLogin() {
      toggleElementById(ID_LOGIN_CONTENEDOR, true);
      toggleElementById(ID_PANEL_CONTENEDOR, false);
    }

    /**
     * Muestra el panel principal y oculta el formulario de login.
     */
    function mostrarPanel() {
      toggleElementById(ID_LOGIN_CONTENEDOR, false);
      toggleElementById(ID_PANEL_CONTENEDOR, true);
    }

    /**
     * Inicializa la aplicación AutoFillQuiz.
     * 
     * Este proceso incluye:
     * 1. Verificar la existencia de la barra lateral en el DOM.
     * 2. Crear el formulario de login.
     * 3. Verificar la sesión del usuario.
     *    - Si el usuario está autenticado:
     *      a. Configurar la sesión.
     *      b. Mostrar el panel principal.
     *      c. Inicializar la aplicación AutoFillQuiz.
     *      d. Crear y agregar el menú de AutoFillQuiz.
     *      e. Configurar los eventos necesarios.
     *    - Si el usuario no está autenticado:
     *      a. Mostrar el formulario de login.
     */
    function startAFQ() {
      // Intentar obtener el elemento de la barra lateral por su ID
      const barraLateral = document.getElementById(ID_BARRA_LATERAL);

      // Si no se encuentra la barra lateral, registrar un error y abortar la inicialización
      if (!barraLateral) {
        console.error(`startAFQ: No se encontró el elemento con ID "${ID_BARRA_LATERAL}". Abortando inicialización.`);
        return;
      }

      // Crear y agregar el formulario de login a la barra lateral
      crearFormularioLogin(barraLateral);

      /**
       * Verifica el estado de autenticación del usuario.
       * Usa `onAuthStateChanged` para escuchar cambios en el estado de autenticación.
       */
      onAuthStateChanged(autenticacion, (usuario) => {
        if (usuario) {
          console.log(`[login-auth] Usuario correctamente autenticado.`);
          // a. Configurar la sesión con el UID del usuario
          configurarSesion(usuario.uid);

          /**
          * b. Crear el menú de AutoFillQuizApp
          */
          const menu = menu_AutoFillQuizApp();

          // Si el menú se creó correctamente, agregarlo a la barra lateral
          if (menu) {
            barraLateral.appendChild(menu);
          }

          // c. Mostrar el panel principal y ocultar el contenedor de login
          toggleElementById(ID_LOGIN_CONTENEDOR, false);
          /**
           * c. Inicializar el panel de AutoFillQuizApp dentro de la barra lateral
           */
          panel_AutoFillQuizApp(barraLateral);

          toggleElementById(ID_PANEL_CONTENEDOR, true);

        } else {
          // Si el usuario no está autenticado
          console.log(`[startAFQ] Usuario no autenticado.`);
          /**
           * a. Mostrar el formulario de login y ocultar el panel principal
           */
          toggleElementById(ID_LOGIN_CONTENEDOR, true);
        }
      });
    }

    /**
     * Muestra el formulario de login.
     * 
     * Este método asume que `mostrarLogin` ya maneja la visibilidad del formulario de login.
     */


    // Al final de tu bundle, reemplaza el listener de DOMContentLoaded existente con lo siguiente:

    if (document.readyState === 'loading') { // La página aún se está cargando
      document.addEventListener('DOMContentLoaded', () => {
        startAFQ();
      });
    } else { // El DOM ya está cargado
      startAFQ();
    }

    // Exposición de la función de cierre de sesión para uso externo (opcional).
    window.cerrarSesionAutoQuiz = cerrarSesionAutoQuiz$1;

})();
